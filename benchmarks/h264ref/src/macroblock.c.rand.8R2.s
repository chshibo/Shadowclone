	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_7
# %bb.1:                                # %func_proceed2nextMacroblock.32
	callq	proceed2nextMacroblock.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.51
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.59
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.61
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_proceed2nextMacroblock.62
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_proceed2nextMacroblock.77
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.77
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
	jmp	.LBB3_6
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_start_macroblock.13
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_start_macroblock.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_start_macroblock.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_start_macroblock.125
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_start_macroblock.150
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.150
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_terminate_macroblock.122
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.178
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.219
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.271
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.271
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_terminate_macroblock.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.281
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_terminate_macroblock.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.282
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_terminate_macroblock.284
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.284
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_terminate_macroblock.285
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.285
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_slice_too_big.18
	movl	%ebx, %edi
	callq	slice_too_big.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_slice_too_big.191
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.191
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_slice_too_big.226
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.226
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_slice_too_big.249
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.249
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_slice_too_big.257
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.257
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.95
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.95
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.133
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.133
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.163
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.163
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.168
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.168
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_OneComponentLumaPrediction4x4.198
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.198
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_OneComponentLumaPrediction4x4.216
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.216
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_OneComponentLumaPrediction4x4.247
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.247
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_OneComponentLumaPrediction4x4.256
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.256
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.81
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_LumaPrediction4x4.4
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.4
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.35
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.35
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.37
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.37
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.52
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.52
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_LumaPrediction4x4.76
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.76
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_LumaPrediction4x4.214
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.214
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_LumaPrediction4x4.221
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.221
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_LumaPrediction4x4.231
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.231
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	-44(%rbp), %r12d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_LumaPrediction4x4Bi.45
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.45
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.103
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.103
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.149
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.149
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.190
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.190
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_LumaPrediction4x4Bi.194
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.194
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_LumaPrediction4x4Bi.202
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.202
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_LumaPrediction4x4Bi.208
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.208
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_LumaPrediction4x4Bi.215
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.215
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r11w
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r12
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_9
# %bb.1:                                # %func_LumaResidualCoding8x8.60
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.60
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.71
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.71
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.100
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.100
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.132
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.132
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_LumaResidualCoding8x8.143
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.143
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_LumaResidualCoding8x8.155
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.155
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_LumaResidualCoding8x8.248
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.248
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_LumaResidualCoding8x8.265
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.265
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r12, %rdi
	je	.LBB11_7
	jmp	.LBB11_8
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_9
# %bb.1:                                # %func_ChromaPrediction4x4.48
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.48
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.82
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.82
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.84
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.84
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.136
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.136
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ChromaPrediction4x4.180
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.180
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ChromaPrediction4x4.196
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.196
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %func_ChromaPrediction4x4.263
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.263
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_8:                               # %func_ChromaPrediction4x4.279
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.279
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	16(%rbp), %r11w
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB12_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB12_7
	jmp	.LBB12_8
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_9
# %bb.1:                                # %func_SetModesAndRefframe.34
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.38
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.44
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.127
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.127
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_SetModesAndRefframe.162
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.162
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_SetModesAndRefframe.207
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.207
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_SetModesAndRefframe.222
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.222
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_SetModesAndRefframe.275
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.275
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_7
	jmp	.LBB13_8
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_LumaResidualCoding.70
	callq	LumaResidualCoding.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.102
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.102
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.128
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.128
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.139
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.139
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_LumaResidualCoding.148
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.148
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_LumaResidualCoding.177
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.177
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_LumaResidualCoding.185
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.185
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_LumaResidualCoding.251
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.251
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_9
# %bb.1:                                # %func_TransformDecision.74
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.108
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.108
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.171
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.171
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.197
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.197
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_TransformDecision.200
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_TransformDecision.205
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %func_TransformDecision.211
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.211
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_8:                               # %func_TransformDecision.220
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.220
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB15_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB15_7
	jmp	.LBB15_8
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movq	%rcx, %r12
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r13
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_9
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.5
	movq	%r13, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.5
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.9
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.20
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.20
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.29
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.29
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_OneComponentChromaPrediction4x4.54
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.54
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_OneComponentChromaPrediction4x4.72
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.72
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %func_OneComponentChromaPrediction4x4.120
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.120
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_8:                               # %func_OneComponentChromaPrediction4x4.124
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.124
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r13, %rdi
	movl	-44(%rbp), %r13d        # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB16_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movq	%r12, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_7
	jmp	.LBB16_8
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_9
# %bb.1:                                # %func_IntraChromaPrediction4x4.21
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.160
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.160
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_IntraChromaPrediction4x4.195
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.195
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_IntraChromaPrediction4x4.239
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.239
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %func_IntraChromaPrediction4x4.245
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.245
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_8:                               # %func_IntraChromaPrediction4x4.253
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.253
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB17_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB17_7
	jmp	.LBB17_8
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_9
# %bb.1:                                # %func_ChromaResidualCoding.27
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.154
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.255
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.255
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_ChromaResidualCoding.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.259
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_ChromaResidualCoding.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %func_ChromaResidualCoding.267
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.267
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_8:                               # %func_ChromaResidualCoding.274
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.274
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB18_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB18_7
	jmp	.LBB18_8
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_9
# %bb.1:                                # %func_IntraChromaPrediction.28
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.113
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.212
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_IntraChromaPrediction.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.218
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_IntraChromaPrediction.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.240
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %func_IntraChromaPrediction.269
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.269
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_8:                               # %func_IntraChromaPrediction.286
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.286
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB19_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB19_7
	jmp	.LBB19_8
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_ZeroRef.6
	movq	%rbx, %rdi
	callq	ZeroRef.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.183
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.189
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.213
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_ZeroRef.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.230
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_ZeroRef.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.243
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_ZeroRef.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.252
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_ZeroRef.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.254
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_MBType2Value.25
	movq	%rbx, %rdi
	callq	MBType2Value.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.153
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.169
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_MBType2Value.272
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.272
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_MBType2Value.277
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.277
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_MBType2Value.278
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.278
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_MBType2Value.280
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.280
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_writeIntra4x4Modes.8
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.69
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.97
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.129
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.129
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_writeIntra4x4Modes.130
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_writeIntra4x4Modes.145
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_writeIntra4x4Modes.167
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.167
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_writeIntra4x4Modes.203
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.203
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_7
# %bb.1:                                # %func_B8Mode2Value.26
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.138
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.138
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.181
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.181
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_B8Mode2Value.182
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.182
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_B8Mode2Value.229
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.229
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
	jmp	.LBB23_6
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_writeMBLayer.10
	movl	%ebx, %edi
	callq	writeMBLayer.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_writeMBLayer.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_writeMBLayer.232
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.232
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_writeMBLayer.250
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.250
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_writeMBLayer.268
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_9
# %bb.1:                                # %func_write_terminating_bit.31
	movswl	%bx, %edi
	callq	write_terminating_bit.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.56
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.78
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.173
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.173
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_write_terminating_bit.228
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.228
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_write_terminating_bit.237
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.237
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_write_terminating_bit.273
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.273
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_write_terminating_bit.276
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.276
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
	jmp	.LBB25_8
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_9
# %bb.1:                                # %func_writeChromaIntraPredMode.15
	callq	writeChromaIntraPredMode.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.33
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.85
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.85
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.109
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.109
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_writeChromaIntraPredMode.140
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_writeChromaIntraPredMode.175
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.175
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %func_writeChromaIntraPredMode.186
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.186
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_8:                               # %func_writeChromaIntraPredMode.192
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.192
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB26_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB26_7
	jmp	.LBB26_8
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_9
# %bb.1:                                # %func_write_one_macroblock.63
	movl	%ebx, %edi
	callq	write_one_macroblock.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.170
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.172
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.172
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.225
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.225
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_write_one_macroblock.238
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.238
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_write_one_macroblock.260
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.260
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_write_one_macroblock.266
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.266
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_write_one_macroblock.270
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.270
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
	jmp	.LBB28_8
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.1
	movl	%ebx, %edi
	callq	BType2CtxRef.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.115
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_writeReferenceFrame.3
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_writeReferenceFrame.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_writeReferenceFrame.164
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.164
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_writeReferenceFrame.174
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.174
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_writeReferenceFrame.209
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.209
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_writeMotionVector8x8.65
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.65
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.137
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.137
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.142
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.142
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.157
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.157
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_writeMotionVector8x8.166
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.166
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_writeMotionVector8x8.179
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.179
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_writeMotionVector8x8.188
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.188
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_writeMotionVector8x8.210
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.210
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r12d, %edi
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_9
# %bb.1:                                # %func_writeMotionInfo2NAL.12
	callq	writeMotionInfo2NAL.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.30
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.105
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.105
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.118
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.118
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_writeMotionInfo2NAL.144
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.144
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_writeMotionInfo2NAL.161
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.161
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %func_writeMotionInfo2NAL.184
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.184
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_8:                               # %func_writeMotionInfo2NAL.187
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.187
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB32_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB32_7
	jmp	.LBB32_8
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_9
# %bb.1:                                # %func_writeChromaCoeff.94
	callq	writeChromaCoeff.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.141
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.141
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.223
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.223
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.224
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.224
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_writeChromaCoeff.241
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.241
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_writeChromaCoeff.261
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.261
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_writeChromaCoeff.287
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.287
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_writeChromaCoeff.288
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.288
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
	jmp	.LBB33_8
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_9
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.49
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.49
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.80
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.104
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.104
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.106
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_writeCoeff4x4_CAVLC.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.117
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_writeCoeff4x4_CAVLC.119
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.119
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_writeCoeff4x4_CAVLC.131
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.131
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_writeCoeff4x4_CAVLC.156
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.156
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
	jmp	.LBB34_8
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_9
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.41
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_writeLumaCoeff4x4_CABAC.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.87
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_writeLumaCoeff4x4_CABAC.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %func_writeLumaCoeff4x4_CABAC.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_8:                               # %func_writeLumaCoeff4x4_CABAC.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB35_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB35_7
	jmp	.LBB35_8
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_writeLumaCoeff8x8_CABAC.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_writeLumaCoeff8x8_CABAC.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_writeLumaCoeff8x8_CABAC.151
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.151
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_writeLumaCoeff8x8_CABAC.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_writeLumaCoeff8x8.2
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_writeLumaCoeff8x8.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_writeLumaCoeff8x8.176
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.176
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_writeLumaCoeff8x8.193
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.193
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_writeLumaCoeff8x8.234
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.234
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB38_9
# %bb.1:                                # %func_writeCBPandLumaCoeff.88
	callq	writeCBPandLumaCoeff.88
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.111
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.111
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.114
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.114
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.135
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.135
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_writeCBPandLumaCoeff.199
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.199
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_writeCBPandLumaCoeff.242
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.242
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_writeCBPandLumaCoeff.244
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.244
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_writeCBPandLumaCoeff.246
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.246
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
	jmp	.LBB38_8
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB39_9
# %bb.1:                                # %func_predict_nnz.14
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.201
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.201
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_predict_nnz.206
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.206
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_predict_nnz.227
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.227
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_predict_nnz.233
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.233
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_predict_nnz.236
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.236
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
	jmp	.LBB39_8
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_predict_nnz_chroma.11
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.99
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.146
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.146
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.147
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.147
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_predict_nnz_chroma.152
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.152
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_predict_nnz_chroma.217
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.217
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_predict_nnz_chroma.235
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.235
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_predict_nnz_chroma.262
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.262
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_find_sad_16x16.96
	movq	%rbx, %rdi
	callq	find_sad_16x16.96
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.116
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.134
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.158
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_find_sad_16x16.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.165
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_find_sad_16x16.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.204
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_find_sad_16x16.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.258
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_find_sad_16x16.283
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.283
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.1          # -- Begin function BType2CtxRef.1
	.p2align	4, 0x90
	.type	BType2CtxRef.1,@function
BType2CtxRef.1:                         # @BType2CtxRef.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1461445652, -20(%rbp)  # imm = 0x571BE414
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB42_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB42_3
.LBB42_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB42_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1461445652, -20(%rbp)  # imm = 0x571BE414
	jne	.LBB42_5
.LBB42_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_4
.Lfunc_end42:
	.size	BType2CtxRef.1, .Lfunc_end42-BType2CtxRef.1
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.2     # -- Begin function writeLumaCoeff8x8.2
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.2,@function
writeLumaCoeff8x8.2:                    # @writeLumaCoeff8x8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$605554236, -36(%rbp)   # imm = 0x2418063C
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB43_2
# %bb.1:                                # %if.then
	jmp	.LBB43_2
.LBB43_2:                               # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB43_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_15
.LBB43_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB43_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB43_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB43_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB43_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB43_10
.LBB43_9:                               # %cond.false
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB43_10:                              # %cond.end
                                        #   in Loop: Header=BB43_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_12
.LBB43_11:                              # %if.else
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_12:                              # %if.end17
                                        #   in Loop: Header=BB43_5 Depth=1
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_5
.LBB43_14:                              # %for.end
	jmp	.LBB43_19
.LBB43_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB43_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_18
.LBB43_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_18:                              # %if.end27
	jmp	.LBB43_19
.LBB43_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$605554236, -36(%rbp)   # imm = 0x2418063C
	jne	.LBB43_21
.LBB43_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_20
.Lfunc_end43:
	.size	writeLumaCoeff8x8.2, .Lfunc_end43-writeLumaCoeff8x8.2
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.3   # -- Begin function writeReferenceFrame.3
	.p2align	4, 0x90
	.type	writeReferenceFrame.3,@function
writeReferenceFrame.3:                  # @writeReferenceFrame.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2107613094, -80(%rbp)  # imm = 0x7D9F9FA6
	movl	%edi, -68(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB44_4
.LBB44_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB44_4
.LBB44_4:                               # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB44_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB44_7
.LBB44_6:                               # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB44_7:                               # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB44_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB44_18
.LBB44_9:                               # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB44_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB44_11:                              # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB44_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB44_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB44_15
.LBB44_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB44_15:                              # %if.end33
	jmp	.LBB44_17
.LBB44_16:                              # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB44_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB44_18:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$2107613094, -80(%rbp)  # imm = 0x7D9F9FA6
	jne	.LBB44_20
.LBB44_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_19
.Lfunc_end44:
	.size	writeReferenceFrame.3, .Lfunc_end44-writeReferenceFrame.3
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.4     # -- Begin function LumaPrediction4x4.4
	.p2align	4, 0x90
	.type	LumaPrediction4x4.4,@function
LumaPrediction4x4.4:                    # @LumaPrediction4x4.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$283688266, -104(%rbp)  # imm = 0x10E8BD4A
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB45_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB45_6
.LBB45_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB45_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB45_5:                               # %land.end
.LBB45_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_10
.LBB45_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_10
.LBB45_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB45_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB45_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB45_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB45_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB45_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -64(%rbp)
	jne	.LBB45_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB45_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB45_19
.LBB45_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB45_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB45_20:                              # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB45_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB45_23
.LBB45_22:                              # %if.then45
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB45_23:                              # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB45_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB45_26
.LBB45_25:                              # %if.then64
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB45_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB45_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB45_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB45_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_31:                              # %for.cond85
                                        #   Parent Loop BB45_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB45_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB45_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_31
.LBB45_34:                              # %for.end
                                        #   in Loop: Header=BB45_29 Depth=1
	jmp	.LBB45_35
.LBB45_35:                              # %for.inc125
                                        #   in Loop: Header=BB45_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_29
.LBB45_36:                              # %for.end127
	jmp	.LBB45_57
.LBB45_37:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB45_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB45_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_41:                              # %for.cond135
                                        #   Parent Loop BB45_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB45_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB45_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_41
.LBB45_44:                              # %for.end161
                                        #   in Loop: Header=BB45_39 Depth=1
	jmp	.LBB45_45
.LBB45_45:                              # %for.inc162
                                        #   in Loop: Header=BB45_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_39
.LBB45_46:                              # %for.end164
	jmp	.LBB45_56
.LBB45_47:                              # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB45_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_50:                              # %for.cond170
                                        #   Parent Loop BB45_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB45_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB45_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_50
.LBB45_53:                              # %for.end196
                                        #   in Loop: Header=BB45_48 Depth=1
	jmp	.LBB45_54
.LBB45_54:                              # %for.inc197
                                        #   in Loop: Header=BB45_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_48
.LBB45_55:                              # %for.end199
	jmp	.LBB45_56
.LBB45_56:                              # %if.end200
	jmp	.LBB45_57
.LBB45_57:                              # %if.end201
	jmp	.LBB45_89
.LBB45_58:                              # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB45_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB45_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_62:                              # %for.cond210
                                        #   Parent Loop BB45_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB45_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB45_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_62
.LBB45_65:                              # %for.end226
                                        #   in Loop: Header=BB45_60 Depth=1
	jmp	.LBB45_66
.LBB45_66:                              # %for.inc227
                                        #   in Loop: Header=BB45_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_60
.LBB45_67:                              # %for.end229
	jmp	.LBB45_88
.LBB45_68:                              # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB45_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB45_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_72:                              # %for.cond238
                                        #   Parent Loop BB45_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB45_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB45_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_72
.LBB45_75:                              # %for.end251
                                        #   in Loop: Header=BB45_70 Depth=1
	jmp	.LBB45_76
.LBB45_76:                              # %for.inc252
                                        #   in Loop: Header=BB45_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_70
.LBB45_77:                              # %for.end254
	jmp	.LBB45_87
.LBB45_78:                              # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB45_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB45_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_81:                              # %for.cond260
                                        #   Parent Loop BB45_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB45_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB45_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB45_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_81
.LBB45_84:                              # %for.end273
                                        #   in Loop: Header=BB45_79 Depth=1
	jmp	.LBB45_85
.LBB45_85:                              # %for.inc274
                                        #   in Loop: Header=BB45_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_79
.LBB45_86:                              # %for.end276
	jmp	.LBB45_87
.LBB45_87:                              # %if.end277
	jmp	.LBB45_88
.LBB45_88:                              # %if.end278
	jmp	.LBB45_89
.LBB45_89:                              # %if.end279
	cmpl	$283688266, -104(%rbp)  # imm = 0x10E8BD4A
	jne	.LBB45_91
.LBB45_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_90
.Lfunc_end45:
	.size	LumaPrediction4x4.4, .Lfunc_end45-LumaPrediction4x4.4
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.5 # -- Begin function OneComponentChromaPrediction4x4.5
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.5,@function
OneComponentChromaPrediction4x4.5:      # @OneComponentChromaPrediction4x4.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1439767692, -108(%rbp) # imm = 0x55D11C8C
	movq	%rdi, -136(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB46_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB46_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB46_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB46_6
.LBB46_5:                               # %if.else
	movl	$2, -44(%rbp)
.LBB46_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_8
.LBB46_7:                               # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB46_8:                               # %if.end13
	movl	-64(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB46_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB46_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	$0, -36(%rbp)
.LBB46_11:                              # %for.cond20
                                        #   Parent Loop BB46_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -36(%rbp)
	jge	.LBB46_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-36(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-36(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_15:                              # %cond.end
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_21
.LBB46_17:                              # %cond.false65
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_20
.LBB46_19:                              # %cond.false74
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_20:                              # %cond.end76
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_21:                              # %cond.end78
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB46_24
.LBB46_23:                              # %cond.false84
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_24:                              # %cond.end86
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_30
.LBB46_26:                              # %cond.false91
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB46_29
.LBB46_28:                              # %cond.false96
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_29:                              # %cond.end98
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_30:                              # %cond.end100
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_33
.LBB46_32:                              # %cond.false111
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_33:                              # %cond.end114
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_39
.LBB46_35:                              # %cond.false119
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_38
.LBB46_37:                              # %cond.false129
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_38:                              # %cond.end132
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_39:                              # %cond.end134
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB46_42
.LBB46_41:                              # %cond.false141
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_42:                              # %cond.end144
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_48
.LBB46_44:                              # %cond.false149
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB46_47
.LBB46_46:                              # %cond.false155
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_47:                              # %cond.end158
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_48:                              # %cond.end160
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-76(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-76(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-88(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB46_11
.LBB46_50:                              # %for.end
                                        #   in Loop: Header=BB46_9 Depth=1
	jmp	.LBB46_51
.LBB46_51:                              # %for.inc198
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_9
.LBB46_52:                              # %for.end200
	cmpl	$1439767692, -108(%rbp) # imm = 0x55D11C8C
	jne	.LBB46_54
.LBB46_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_53
.Lfunc_end46:
	.size	OneComponentChromaPrediction4x4.5, .Lfunc_end46-OneComponentChromaPrediction4x4.5
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.6               # -- Begin function ZeroRef.6
	.p2align	4, 0x90
	.type	ZeroRef.6,@function
ZeroRef.6:                              # @ZeroRef.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1375536177, -24(%rbp)  # imm = 0x51FD0431
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB47_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -16(%rbp)
.LBB47_3:                               # %for.cond1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB47_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB47_11
.LBB47_6:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_3
.LBB47_8:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_9
.LBB47_9:                               # %for.inc10
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_1
.LBB47_10:                              # %for.end12
	movl	$1, -20(%rbp)
.LBB47_11:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1375536177, -24(%rbp)  # imm = 0x51FD0431
	jne	.LBB47_13
.LBB47_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_12
.Lfunc_end47:
	.size	ZeroRef.6, .Lfunc_end47-ZeroRef.6
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.7   # -- Begin function writeReferenceFrame.7
	.p2align	4, 0x90
	.type	writeReferenceFrame.7,@function
writeReferenceFrame.7:                  # @writeReferenceFrame.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$518946605, -72(%rbp)   # imm = 0x1EEE7F2D
	movl	%edi, -80(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB48_4
.LBB48_4:                               # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB48_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB48_7
.LBB48_6:                               # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB48_7:                               # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB48_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB48_18
.LBB48_9:                               # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB48_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB48_11:                              # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB48_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB48_15
.LBB48_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB48_15:                              # %if.end33
	jmp	.LBB48_17
.LBB48_16:                              # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB48_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB48_18:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$518946605, -72(%rbp)   # imm = 0x1EEE7F2D
	jne	.LBB48_20
.LBB48_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_19
.Lfunc_end48:
	.size	writeReferenceFrame.7, .Lfunc_end48-writeReferenceFrame.7
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.8    # -- Begin function writeIntra4x4Modes.8
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.8,@function
writeIntra4x4Modes.8:                   # @writeIntra4x4Modes.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$888478161, -72(%rbp)   # imm = 0x34F519D1
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_9 Depth 2
                                        #       Child Loop BB49_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB49_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB49_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB49_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB49_8
.LBB49_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB49_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB49_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB49_17
.LBB49_8:                               # %if.then
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB49_9:                               # %for.cond24
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB49_9 Depth=2
	movl	$0, -12(%rbp)
.LBB49_11:                              # %for.cond27
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB49_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB49_11 Depth=3
	movl	-80(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end
                                        #   in Loop: Header=BB49_9 Depth=2
	jmp	.LBB49_15
.LBB49_15:                              # %for.inc42
                                        #   in Loop: Header=BB49_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end44
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_17
.LBB49_17:                              # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_18
.LBB49_18:                              # %for.inc45
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_1
.LBB49_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB49_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB49_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB49_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB49_23:                              # %if.end57
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB49_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB49_26
.LBB49_25:                              # %if.else
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB49_26:                              # %if.end65
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_20
.LBB49_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$888478161, -72(%rbp)   # imm = 0x34F519D1
	jne	.LBB49_30
.LBB49_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_29
.Lfunc_end49:
	.size	writeIntra4x4Modes.8, .Lfunc_end49-writeIntra4x4Modes.8
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.9 # -- Begin function OneComponentChromaPrediction4x4.9
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.9,@function
OneComponentChromaPrediction4x4.9:      # @OneComponentChromaPrediction4x4.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1061657070, -112(%rbp) # imm = 0x3F4799EE
	movq	%rdi, -128(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB50_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB50_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB50_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB50_6
.LBB50_5:                               # %if.else
	movl	$2, -52(%rbp)
.LBB50_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_8
.LBB50_7:                               # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_8:                               # %if.end13
	movl	-84(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB50_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB50_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB50_9 Depth=1
	movl	$0, -40(%rbp)
.LBB50_11:                              # %for.cond20
                                        #   Parent Loop BB50_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB50_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB50_15
.LBB50_14:                              # %cond.false
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB50_15:                              # %cond.end
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_21
.LBB50_17:                              # %cond.false65
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB50_20
.LBB50_19:                              # %cond.false74
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB50_20:                              # %cond.end76
                                        #   in Loop: Header=BB50_11 Depth=2
.LBB50_21:                              # %cond.end78
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB50_24
.LBB50_23:                              # %cond.false84
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB50_24:                              # %cond.end86
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_30
.LBB50_26:                              # %cond.false91
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB50_29
.LBB50_28:                              # %cond.false96
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB50_29:                              # %cond.end98
                                        #   in Loop: Header=BB50_11 Depth=2
.LBB50_30:                              # %cond.end100
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB50_33
.LBB50_32:                              # %cond.false111
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB50_33:                              # %cond.end114
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_39
.LBB50_35:                              # %cond.false119
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB50_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB50_38
.LBB50_37:                              # %cond.false129
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB50_38:                              # %cond.end132
                                        #   in Loop: Header=BB50_11 Depth=2
.LBB50_39:                              # %cond.end134
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB50_42
.LBB50_41:                              # %cond.false141
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB50_42:                              # %cond.end144
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB50_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_48
.LBB50_44:                              # %cond.false149
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB50_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB50_47
.LBB50_46:                              # %cond.false155
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB50_47:                              # %cond.end158
                                        #   in Loop: Header=BB50_11 Depth=2
.LBB50_48:                              # %cond.end160
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-12(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	imull	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-80(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-76(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB50_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB50_11
.LBB50_50:                              # %for.end
                                        #   in Loop: Header=BB50_9 Depth=1
	jmp	.LBB50_51
.LBB50_51:                              # %for.inc198
                                        #   in Loop: Header=BB50_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB50_9
.LBB50_52:                              # %for.end200
	cmpl	$1061657070, -112(%rbp) # imm = 0x3F4799EE
	jne	.LBB50_54
.LBB50_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_53
.Lfunc_end50:
	.size	OneComponentChromaPrediction4x4.9, .Lfunc_end50-OneComponentChromaPrediction4x4.9
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.10         # -- Begin function writeMBLayer.10
	.p2align	4, 0x90
	.type	writeMBLayer.10,@function
writeMBLayer.10:                        # @writeMBLayer.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1255869470, -96(%rbp)  # imm = 0x4ADB0C1E
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB51_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB51_3
.LBB51_3:                               # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB51_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB51_9
.LBB51_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB51_8
.LBB51_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB51_8
.LBB51_8:                               # %cond.end14
.LBB51_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB51_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB51_24
.LBB51_12:                              # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB51_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB51_17
	jmp	.LBB51_18
.LBB51_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB51_18
	jmp	.LBB51_17
.LBB51_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB51_17
	jmp	.LBB51_18
.LBB51_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB51_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB51_23
.LBB51_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB51_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB51_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB51_23:                              # %if.end50
	jmp	.LBB51_24
.LBB51_24:                              # %if.end51
	jmp	.LBB51_25
.LBB51_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB51_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB51_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB51_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB51_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB51_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_35
.LBB51_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB51_38
.LBB51_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB51_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_39:                              # %if.end96
	jmp	.LBB51_40
.LBB51_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_43
.LBB51_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB51_89
.LBB51_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB51_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB51_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB51_49
.LBB51_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB51_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB51_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB51_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_55
.LBB51_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB51_58
.LBB51_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB51_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_59:                              # %if.end198
	jmp	.LBB51_60
.LBB51_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB51_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB51_64
.LBB51_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_64:                              # %if.end226
	jmp	.LBB51_88
.LBB51_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB51_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB51_76
.LBB51_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB51_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB51_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_72:                              # %if.end281
	jmp	.LBB51_73
.LBB51_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB51_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB51_87
.LBB51_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB51_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB51_77 Depth=1
	movl	$0, -44(%rbp)
.LBB51_79:                              # %for.cond310
                                        #   Parent Loop BB51_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB51_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB51_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB51_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB51_79
.LBB51_82:                              # %for.end
                                        #   in Loop: Header=BB51_77 Depth=1
	jmp	.LBB51_83
.LBB51_83:                              # %for.inc322
                                        #   in Loop: Header=BB51_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB51_77
.LBB51_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB51_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB51_86:                              # %if.end345
	jmp	.LBB51_87
.LBB51_87:                              # %if.end346
	jmp	.LBB51_88
.LBB51_88:                              # %if.end347
	jmp	.LBB51_89
.LBB51_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB51_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB51_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB51_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB51_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB51_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB51_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_98
.LBB51_97:                              # %if.else380
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_98:                              # %if.end382
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB51_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB51_101
.LBB51_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB51_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB51_101:                             # %lor.end415
                                        #   in Loop: Header=BB51_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB51_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB51_94
.LBB51_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB51_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB51_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB51_114
.LBB51_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB51_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB51_110
.LBB51_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB51_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB51_113
.LBB51_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB51_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB51_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB51_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_120
.LBB51_117:                             # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB51_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB51_119:                             # %if.end483
	jmp	.LBB51_120
.LBB51_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB51_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB51_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB51_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB51_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB51_129
.LBB51_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB51_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB51_128:                             # %if.end516
	jmp	.LBB51_129
.LBB51_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1255869470, -96(%rbp)  # imm = 0x4ADB0C1E
	jne	.LBB51_131
.LBB51_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_130
.Lfunc_end51:
	.size	writeMBLayer.10, .Lfunc_end51-writeMBLayer.10
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.11   # -- Begin function predict_nnz_chroma.11
	.p2align	4, 0x90
	.type	predict_nnz_chroma.11,@function
predict_nnz_chroma.11:                  # @predict_nnz_chroma.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1183876721, -64(%rbp)  # imm = 0x46908671
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB52_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB52_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB52_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB52_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB52_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB52_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB52_7:                               # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB52_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB52_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB52_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB52_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB52_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB52_13:                              # %if.end57
	jmp	.LBB52_27
.LBB52_14:                              # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB52_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB52_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB52_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB52_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB52_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB52_20:                              # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB52_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB52_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB52_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB52_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB52_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB52_26:                              # %if.end124
	jmp	.LBB52_27
.LBB52_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB52_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1183876721, -64(%rbp)  # imm = 0x46908671
	jne	.LBB52_31
.LBB52_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_30
.Lfunc_end52:
	.size	predict_nnz_chroma.11, .Lfunc_end52-predict_nnz_chroma.11
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.12  # -- Begin function writeMotionInfo2NAL.12
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.12,@function
writeMotionInfo2NAL.12:                 # @writeMotionInfo2NAL.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1009692652, -56(%rbp)  # imm = 0x3C2EAFEC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB53_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB53_3
.LBB53_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB53_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB53_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB53_6
.LBB53_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB53_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB53_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB53_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB53_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB53_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB53_39
.LBB53_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB53_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	$0, -16(%rbp)
.LBB53_17:                              # %for.cond45
                                        #   Parent Loop BB53_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB53_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB53_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB53_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB53_22
.LBB53_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB53_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB53_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB53_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_22:                              # %if.end
                                        #   in Loop: Header=BB53_17 Depth=2
	jmp	.LBB53_23
.LBB53_23:                              # %for.inc
                                        #   in Loop: Header=BB53_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_17
.LBB53_24:                              # %for.end
                                        #   in Loop: Header=BB53_15 Depth=1
	jmp	.LBB53_25
.LBB53_25:                              # %for.inc79
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_15
.LBB53_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB53_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB53_27 Depth=1
	movl	$0, -16(%rbp)
.LBB53_29:                              # %for.cond86
                                        #   Parent Loop BB53_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB53_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB53_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB53_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB53_34
.LBB53_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB53_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB53_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB53_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_34:                              # %if.end126
                                        #   in Loop: Header=BB53_29 Depth=2
	jmp	.LBB53_35
.LBB53_35:                              # %for.inc127
                                        #   in Loop: Header=BB53_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_29
.LBB53_36:                              # %for.end129
                                        #   in Loop: Header=BB53_27 Depth=1
	jmp	.LBB53_37
.LBB53_37:                              # %for.inc130
                                        #   in Loop: Header=BB53_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_27
.LBB53_38:                              # %for.end132
	jmp	.LBB53_39
.LBB53_39:                              # %if.end133
	jmp	.LBB53_40
.LBB53_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB53_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB53_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	$0, -16(%rbp)
.LBB53_47:                              # %for.cond155
                                        #   Parent Loop BB53_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB53_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB53_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB53_52
.LBB53_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB53_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB53_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_52:                              # %if.end197
                                        #   in Loop: Header=BB53_47 Depth=2
	jmp	.LBB53_53
.LBB53_53:                              # %for.inc198
                                        #   in Loop: Header=BB53_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_47
.LBB53_54:                              # %for.end200
                                        #   in Loop: Header=BB53_45 Depth=1
	jmp	.LBB53_55
.LBB53_55:                              # %for.inc201
                                        #   in Loop: Header=BB53_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_45
.LBB53_56:                              # %for.end203
	jmp	.LBB53_57
.LBB53_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB53_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB53_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB53_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB53_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB53_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB53_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB53_63 Depth=1
	movl	$0, -16(%rbp)
.LBB53_65:                              # %for.cond227
                                        #   Parent Loop BB53_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB53_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB53_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB53_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB53_70
.LBB53_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB53_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB53_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB53_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB53_70:                              # %if.end269
                                        #   in Loop: Header=BB53_65 Depth=2
	jmp	.LBB53_71
.LBB53_71:                              # %for.inc270
                                        #   in Loop: Header=BB53_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_65
.LBB53_72:                              # %for.end272
                                        #   in Loop: Header=BB53_63 Depth=1
	jmp	.LBB53_73
.LBB53_73:                              # %for.inc273
                                        #   in Loop: Header=BB53_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_63
.LBB53_74:                              # %for.end275
	jmp	.LBB53_75
.LBB53_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1009692652, -56(%rbp)  # imm = 0x3C2EAFEC
	jne	.LBB53_77
.LBB53_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_76
.Lfunc_end53:
	.size	writeMotionInfo2NAL.12, .Lfunc_end53-writeMotionInfo2NAL.12
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.13     # -- Begin function start_macroblock.13
	.p2align	4, 0x90
	.type	start_macroblock.13,@function
start_macroblock.13:                    # @start_macroblock.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$748015356, -88(%rbp)   # imm = 0x2C95CEFC
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB54_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB54_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB54_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB54_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB54_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB54_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB54_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB54_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB54_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB54_8:                               # %if.end
                                        #   in Loop: Header=BB54_5 Depth=1
	jmp	.LBB54_9
.LBB54_9:                               # %for.inc
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_5
.LBB54_10:                              # %for.end
	jmp	.LBB54_11
.LBB54_11:                              # %if.end19
	jmp	.LBB54_12
.LBB54_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB54_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB54_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB54_16
.LBB54_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB54_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB54_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB54_97
.LBB54_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_21
.LBB54_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB54_96
.LBB54_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB54_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB54_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB54_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB54_34
.LBB54_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB54_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB54_32
.LBB54_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB54_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB54_31
.LBB54_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB54_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB54_33
.LBB54_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB54_33:                              # %if.end112
	jmp	.LBB54_34
.LBB54_34:                              # %if.end113
	jmp	.LBB54_39
.LBB54_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB54_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB54_38
.LBB54_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB54_38:                              # %if.end125
	jmp	.LBB54_39
.LBB54_39:                              # %if.end126
	jmp	.LBB54_47
.LBB54_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB54_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB54_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB54_44
.LBB54_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB54_44:                              # %if.end140
	jmp	.LBB54_46
.LBB54_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB54_46:                              # %if.end145
	jmp	.LBB54_47
.LBB54_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB54_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB54_93
.LBB54_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB54_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB54_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB54_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB54_74
.LBB54_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB54_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB54_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB54_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB54_73
.LBB54_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB54_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB54_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB54_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB54_72
.LBB54_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB54_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB54_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB54_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB54_71
.LBB54_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB54_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB54_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB54_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB54_70:                              # %if.end223
	jmp	.LBB54_71
.LBB54_71:                              # %if.end224
	jmp	.LBB54_72
.LBB54_72:                              # %if.end225
	jmp	.LBB54_73
.LBB54_73:                              # %if.end226
	jmp	.LBB54_74
.LBB54_74:                              # %if.end227
	jmp	.LBB54_75
.LBB54_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB54_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB54_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB54_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB54_82
.LBB54_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB54_81:                              # %if.end256
	jmp	.LBB54_82
.LBB54_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB54_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB54_88
.LBB54_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB54_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB54_87
.LBB54_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB54_87:                              # %if.end292
	jmp	.LBB54_88
.LBB54_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB54_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB54_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB54_92
.LBB54_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB54_92:                              # %if.end305
	jmp	.LBB54_94
.LBB54_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB54_94:                              # %if.end309
	jmp	.LBB54_95
.LBB54_95:                              # %if.end310
	jmp	.LBB54_96
.LBB54_96:                              # %if.end311
	jmp	.LBB54_97
.LBB54_97:                              # %if.end312
	jmp	.LBB54_102
.LBB54_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB54_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB54_101
.LBB54_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB54_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB54_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB54_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB54_105
.LBB54_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB54_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB54_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB54_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB54_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_110 Depth 2
                                        #       Child Loop BB54_112 Depth 3
                                        #         Child Loop BB54_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB54_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	$0, -16(%rbp)
.LBB54_110:                             # %for.cond364
                                        #   Parent Loop BB54_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_112 Depth 3
                                        #         Child Loop BB54_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB54_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	$0, -12(%rbp)
.LBB54_112:                             # %for.cond368
                                        #   Parent Loop BB54_108 Depth=1
                                        #     Parent Loop BB54_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB54_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB54_112 Depth=3
	movl	$0, -36(%rbp)
.LBB54_114:                             # %for.cond372
                                        #   Parent Loop BB54_108 Depth=1
                                        #     Parent Loop BB54_110 Depth=2
                                        #       Parent Loop BB54_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB54_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB54_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB54_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_114
.LBB54_117:                             # %for.end388
                                        #   in Loop: Header=BB54_112 Depth=3
	jmp	.LBB54_118
.LBB54_118:                             # %for.inc389
                                        #   in Loop: Header=BB54_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_112
.LBB54_119:                             # %for.end391
                                        #   in Loop: Header=BB54_110 Depth=2
	jmp	.LBB54_120
.LBB54_120:                             # %for.inc392
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_110
.LBB54_121:                             # %for.end394
                                        #   in Loop: Header=BB54_108 Depth=1
	jmp	.LBB54_122
.LBB54_122:                             # %for.inc395
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_108
.LBB54_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB54_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_126 Depth 2
                                        #       Child Loop BB54_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	$0, -12(%rbp)
.LBB54_126:                             # %for.cond402
                                        #   Parent Loop BB54_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB54_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	$0, -20(%rbp)
.LBB54_128:                             # %for.cond406
                                        #   Parent Loop BB54_124 Depth=1
                                        #     Parent Loop BB54_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB54_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB54_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB54_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_128
.LBB54_131:                             # %for.end432
                                        #   in Loop: Header=BB54_126 Depth=2
	jmp	.LBB54_132
.LBB54_132:                             # %for.inc433
                                        #   in Loop: Header=BB54_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_126
.LBB54_133:                             # %for.end435
                                        #   in Loop: Header=BB54_124 Depth=1
	jmp	.LBB54_134
.LBB54_134:                             # %for.inc436
                                        #   in Loop: Header=BB54_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_124
.LBB54_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB54_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_138 Depth 2
                                        #       Child Loop BB54_140 Depth 3
                                        #         Child Loop BB54_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB54_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB54_136 Depth=1
	movl	$0, -16(%rbp)
.LBB54_138:                             # %for.cond443
                                        #   Parent Loop BB54_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_140 Depth 3
                                        #         Child Loop BB54_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB54_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB54_138 Depth=2
	movl	$0, -12(%rbp)
.LBB54_140:                             # %for.cond447
                                        #   Parent Loop BB54_136 Depth=1
                                        #     Parent Loop BB54_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB54_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB54_140 Depth=3
	movl	$0, -36(%rbp)
.LBB54_142:                             # %for.cond451
                                        #   Parent Loop BB54_136 Depth=1
                                        #     Parent Loop BB54_138 Depth=2
                                        #       Parent Loop BB54_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB54_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB54_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB54_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_142
.LBB54_145:                             # %for.end465
                                        #   in Loop: Header=BB54_140 Depth=3
	jmp	.LBB54_146
.LBB54_146:                             # %for.inc466
                                        #   in Loop: Header=BB54_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_140
.LBB54_147:                             # %for.end468
                                        #   in Loop: Header=BB54_138 Depth=2
	jmp	.LBB54_148
.LBB54_148:                             # %for.inc469
                                        #   in Loop: Header=BB54_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_138
.LBB54_149:                             # %for.end471
                                        #   in Loop: Header=BB54_136 Depth=1
	jmp	.LBB54_150
.LBB54_150:                             # %for.inc472
                                        #   in Loop: Header=BB54_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_136
.LBB54_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB54_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB54_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB54_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB54_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_152
.LBB54_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB54_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB54_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB54_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB54_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_156
.LBB54_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB54_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB54_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB54_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB54_166
.LBB54_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB54_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB54_165:                             # %if.end520
	jmp	.LBB54_166
.LBB54_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB54_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB54_168:                             # %if.end536
	cmpl	$748015356, -88(%rbp)   # imm = 0x2C95CEFC
	jne	.LBB54_170
.LBB54_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_169
.Lfunc_end54:
	.size	start_macroblock.13, .Lfunc_end54-start_macroblock.13
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.14          # -- Begin function predict_nnz.14
	.p2align	4, 0x90
	.type	predict_nnz.14,@function
predict_nnz.14:                         # @predict_nnz.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$974841784, -56(%rbp)   # imm = 0x3A1AE7B8
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB55_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB55_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB55_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB55_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB55_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB55_6:                               # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB55_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB55_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB55_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB55_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB55_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB55_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB55_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$974841784, -56(%rbp)   # imm = 0x3A1AE7B8
	jne	.LBB55_16
.LBB55_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_15
.Lfunc_end55:
	.size	predict_nnz.14, .Lfunc_end55-predict_nnz.14
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.15 # -- Begin function writeChromaIntraPredMode.15
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.15,@function
writeChromaIntraPredMode.15:            # @writeChromaIntraPredMode.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$71803035, -36(%rbp)    # imm = 0x447A09B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$71803035, -36(%rbp)    # imm = 0x447A09B
	jne	.LBB56_5
.LBB56_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_4
.Lfunc_end56:
	.size	writeChromaIntraPredMode.15, .Lfunc_end56-writeChromaIntraPredMode.15
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.16 # -- Begin function writeLumaCoeff8x8_CABAC.16
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.16,@function
writeLumaCoeff8x8_CABAC.16:             # @writeLumaCoeff8x8_CABAC.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1591975256, -60(%rbp)  # imm = 0x5EE39D58
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB57_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB57_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB57_3:                               # %land.end
                                        #   in Loop: Header=BB57_1 Depth=1
	testb	$1, %al
	jne	.LBB57_4
	jmp	.LBB57_12
.LBB57_4:                               # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB57_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB57_7
.LBB57_6:                               # %cond.false
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB57_7:                               # %cond.end
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB57_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB57_10
.LBB57_9:                               # %if.else
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB57_10:                              # %if.end
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_1
.LBB57_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1591975256, -60(%rbp)  # imm = 0x5EE39D58
	jne	.LBB57_14
.LBB57_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_13
.Lfunc_end57:
	.size	writeLumaCoeff8x8_CABAC.16, .Lfunc_end57-writeLumaCoeff8x8_CABAC.16
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.17     # -- Begin function start_macroblock.17
	.p2align	4, 0x90
	.type	start_macroblock.17,@function
start_macroblock.17:                    # @start_macroblock.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1352103523, -88(%rbp)  # imm = 0x50977663
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB58_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB58_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB58_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB58_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB58_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB58_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB58_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB58_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB58_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB58_8:                               # %if.end
                                        #   in Loop: Header=BB58_5 Depth=1
	jmp	.LBB58_9
.LBB58_9:                               # %for.inc
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_5
.LBB58_10:                              # %for.end
	jmp	.LBB58_11
.LBB58_11:                              # %if.end19
	jmp	.LBB58_12
.LBB58_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB58_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB58_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB58_16
.LBB58_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB58_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB58_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB58_97
.LBB58_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB58_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_21
.LBB58_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB58_96
.LBB58_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB58_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB58_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB58_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB58_34
.LBB58_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB58_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB58_32
.LBB58_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB58_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB58_31
.LBB58_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB58_33
.LBB58_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB58_33:                              # %if.end112
	jmp	.LBB58_34
.LBB58_34:                              # %if.end113
	jmp	.LBB58_39
.LBB58_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB58_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB58_38
.LBB58_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB58_38:                              # %if.end125
	jmp	.LBB58_39
.LBB58_39:                              # %if.end126
	jmp	.LBB58_47
.LBB58_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB58_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB58_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB58_44
.LBB58_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_44:                              # %if.end140
	jmp	.LBB58_46
.LBB58_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB58_46:                              # %if.end145
	jmp	.LBB58_47
.LBB58_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB58_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB58_93
.LBB58_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB58_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB58_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB58_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB58_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB58_74
.LBB58_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB58_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB58_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB58_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB58_73
.LBB58_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB58_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB58_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB58_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB58_72
.LBB58_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB58_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB58_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB58_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB58_71
.LBB58_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB58_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB58_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB58_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB58_70:                              # %if.end223
	jmp	.LBB58_71
.LBB58_71:                              # %if.end224
	jmp	.LBB58_72
.LBB58_72:                              # %if.end225
	jmp	.LBB58_73
.LBB58_73:                              # %if.end226
	jmp	.LBB58_74
.LBB58_74:                              # %if.end227
	jmp	.LBB58_75
.LBB58_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB58_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB58_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB58_82
.LBB58_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB58_81:                              # %if.end256
	jmp	.LBB58_82
.LBB58_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB58_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB58_88
.LBB58_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB58_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB58_87
.LBB58_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_87:                              # %if.end292
	jmp	.LBB58_88
.LBB58_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB58_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB58_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB58_92
.LBB58_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB58_92:                              # %if.end305
	jmp	.LBB58_94
.LBB58_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB58_94:                              # %if.end309
	jmp	.LBB58_95
.LBB58_95:                              # %if.end310
	jmp	.LBB58_96
.LBB58_96:                              # %if.end311
	jmp	.LBB58_97
.LBB58_97:                              # %if.end312
	jmp	.LBB58_102
.LBB58_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB58_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB58_101
.LBB58_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB58_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB58_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB58_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB58_105
.LBB58_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB58_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB58_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB58_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB58_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_110 Depth 2
                                        #       Child Loop BB58_112 Depth 3
                                        #         Child Loop BB58_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB58_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	$0, -16(%rbp)
.LBB58_110:                             # %for.cond364
                                        #   Parent Loop BB58_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_112 Depth 3
                                        #         Child Loop BB58_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	$0, -12(%rbp)
.LBB58_112:                             # %for.cond368
                                        #   Parent Loop BB58_108 Depth=1
                                        #     Parent Loop BB58_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB58_112 Depth=3
	movl	$0, -36(%rbp)
.LBB58_114:                             # %for.cond372
                                        #   Parent Loop BB58_108 Depth=1
                                        #     Parent Loop BB58_110 Depth=2
                                        #       Parent Loop BB58_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB58_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB58_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB58_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_114
.LBB58_117:                             # %for.end388
                                        #   in Loop: Header=BB58_112 Depth=3
	jmp	.LBB58_118
.LBB58_118:                             # %for.inc389
                                        #   in Loop: Header=BB58_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_112
.LBB58_119:                             # %for.end391
                                        #   in Loop: Header=BB58_110 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc392
                                        #   in Loop: Header=BB58_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_110
.LBB58_121:                             # %for.end394
                                        #   in Loop: Header=BB58_108 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc395
                                        #   in Loop: Header=BB58_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_108
.LBB58_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB58_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_126 Depth 2
                                        #       Child Loop BB58_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	$0, -12(%rbp)
.LBB58_126:                             # %for.cond402
                                        #   Parent Loop BB58_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	$0, -20(%rbp)
.LBB58_128:                             # %for.cond406
                                        #   Parent Loop BB58_124 Depth=1
                                        #     Parent Loop BB58_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB58_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB58_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB58_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_128
.LBB58_131:                             # %for.end432
                                        #   in Loop: Header=BB58_126 Depth=2
	jmp	.LBB58_132
.LBB58_132:                             # %for.inc433
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_126
.LBB58_133:                             # %for.end435
                                        #   in Loop: Header=BB58_124 Depth=1
	jmp	.LBB58_134
.LBB58_134:                             # %for.inc436
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_124
.LBB58_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB58_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_138 Depth 2
                                        #       Child Loop BB58_140 Depth 3
                                        #         Child Loop BB58_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB58_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB58_136 Depth=1
	movl	$0, -16(%rbp)
.LBB58_138:                             # %for.cond443
                                        #   Parent Loop BB58_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_140 Depth 3
                                        #         Child Loop BB58_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB58_138 Depth=2
	movl	$0, -12(%rbp)
.LBB58_140:                             # %for.cond447
                                        #   Parent Loop BB58_136 Depth=1
                                        #     Parent Loop BB58_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB58_140 Depth=3
	movl	$0, -36(%rbp)
.LBB58_142:                             # %for.cond451
                                        #   Parent Loop BB58_136 Depth=1
                                        #     Parent Loop BB58_138 Depth=2
                                        #       Parent Loop BB58_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB58_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB58_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB58_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB58_142
.LBB58_145:                             # %for.end465
                                        #   in Loop: Header=BB58_140 Depth=3
	jmp	.LBB58_146
.LBB58_146:                             # %for.inc466
                                        #   in Loop: Header=BB58_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_140
.LBB58_147:                             # %for.end468
                                        #   in Loop: Header=BB58_138 Depth=2
	jmp	.LBB58_148
.LBB58_148:                             # %for.inc469
                                        #   in Loop: Header=BB58_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_138
.LBB58_149:                             # %for.end471
                                        #   in Loop: Header=BB58_136 Depth=1
	jmp	.LBB58_150
.LBB58_150:                             # %for.inc472
                                        #   in Loop: Header=BB58_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_136
.LBB58_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB58_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB58_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB58_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB58_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_152
.LBB58_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB58_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB58_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB58_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB58_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_156
.LBB58_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB58_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB58_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB58_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB58_166
.LBB58_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB58_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB58_165:                             # %if.end520
	jmp	.LBB58_166
.LBB58_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB58_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB58_168:                             # %if.end536
	cmpl	$1352103523, -88(%rbp)  # imm = 0x50977663
	jne	.LBB58_170
.LBB58_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_169
.Lfunc_end58:
	.size	start_macroblock.17, .Lfunc_end58-start_macroblock.17
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.18        # -- Begin function slice_too_big.18
	.p2align	4, 0x90
	.type	slice_too_big.18,@function
slice_too_big.18:                       # @slice_too_big.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1068469604, -52(%rbp)  # imm = 0x3FAF8D64
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB59_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB59_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB59_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB59_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB59_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB59_5:                               # %if.end
                                        #   in Loop: Header=BB59_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB59_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB59_7:                               # %if.end8
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB59_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB59_21
.LBB59_9:                               # %if.end11
                                        #   in Loop: Header=BB59_2 Depth=1
	jmp	.LBB59_10
.LBB59_10:                              # %for.inc
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_2
.LBB59_11:                              # %for.end
	jmp	.LBB59_12
.LBB59_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB59_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB59_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB59_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB59_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB59_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB59_21
.LBB59_17:                              # %if.end27
                                        #   in Loop: Header=BB59_14 Depth=1
	jmp	.LBB59_18
.LBB59_18:                              # %for.inc28
                                        #   in Loop: Header=BB59_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_14
.LBB59_19:                              # %for.end30
	jmp	.LBB59_20
.LBB59_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB59_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1068469604, -52(%rbp)  # imm = 0x3FAF8D64
	jne	.LBB59_23
.LBB59_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_22
.Lfunc_end59:
	.size	slice_too_big.18, .Lfunc_end59-slice_too_big.18
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.19     # -- Begin function start_macroblock.19
	.p2align	4, 0x90
	.type	start_macroblock.19,@function
start_macroblock.19:                    # @start_macroblock.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1413835087, -88(%rbp)  # imm = 0x5445694F
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB60_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB60_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB60_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB60_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB60_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB60_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB60_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB60_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB60_8:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=1
	jmp	.LBB60_9
.LBB60_9:                               # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_5
.LBB60_10:                              # %for.end
	jmp	.LBB60_11
.LBB60_11:                              # %if.end19
	jmp	.LBB60_12
.LBB60_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB60_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB60_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB60_16
.LBB60_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB60_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB60_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB60_97
.LBB60_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB60_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_21
.LBB60_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB60_96
.LBB60_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB60_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB60_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB60_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB60_34
.LBB60_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB60_32
.LBB60_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB60_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB60_31
.LBB60_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB60_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB60_33
.LBB60_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB60_33:                              # %if.end112
	jmp	.LBB60_34
.LBB60_34:                              # %if.end113
	jmp	.LBB60_39
.LBB60_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB60_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB60_38
.LBB60_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB60_38:                              # %if.end125
	jmp	.LBB60_39
.LBB60_39:                              # %if.end126
	jmp	.LBB60_47
.LBB60_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB60_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB60_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB60_44
.LBB60_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB60_44:                              # %if.end140
	jmp	.LBB60_46
.LBB60_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB60_46:                              # %if.end145
	jmp	.LBB60_47
.LBB60_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB60_93
.LBB60_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB60_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB60_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB60_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB60_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB60_74
.LBB60_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB60_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB60_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB60_73
.LBB60_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB60_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB60_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB60_72
.LBB60_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB60_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB60_71
.LBB60_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB60_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB60_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB60_70:                              # %if.end223
	jmp	.LBB60_71
.LBB60_71:                              # %if.end224
	jmp	.LBB60_72
.LBB60_72:                              # %if.end225
	jmp	.LBB60_73
.LBB60_73:                              # %if.end226
	jmp	.LBB60_74
.LBB60_74:                              # %if.end227
	jmp	.LBB60_75
.LBB60_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB60_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB60_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB60_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB60_82
.LBB60_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB60_81:                              # %if.end256
	jmp	.LBB60_82
.LBB60_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB60_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB60_88
.LBB60_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB60_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB60_87
.LBB60_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB60_87:                              # %if.end292
	jmp	.LBB60_88
.LBB60_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB60_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB60_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB60_92
.LBB60_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB60_92:                              # %if.end305
	jmp	.LBB60_94
.LBB60_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB60_94:                              # %if.end309
	jmp	.LBB60_95
.LBB60_95:                              # %if.end310
	jmp	.LBB60_96
.LBB60_96:                              # %if.end311
	jmp	.LBB60_97
.LBB60_97:                              # %if.end312
	jmp	.LBB60_102
.LBB60_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB60_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB60_101
.LBB60_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB60_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB60_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB60_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB60_105
.LBB60_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB60_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB60_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB60_107:                             # %if.end359
	movl	$0, -16(%rbp)
.LBB60_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_110 Depth 2
                                        #       Child Loop BB60_112 Depth 3
                                        #         Child Loop BB60_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB60_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB60_108 Depth=1
	movl	$0, -20(%rbp)
.LBB60_110:                             # %for.cond364
                                        #   Parent Loop BB60_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_112 Depth 3
                                        #         Child Loop BB60_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB60_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB60_110 Depth=2
	movl	$0, -12(%rbp)
.LBB60_112:                             # %for.cond368
                                        #   Parent Loop BB60_108 Depth=1
                                        #     Parent Loop BB60_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB60_112 Depth=3
	movl	$0, -36(%rbp)
.LBB60_114:                             # %for.cond372
                                        #   Parent Loop BB60_108 Depth=1
                                        #     Parent Loop BB60_110 Depth=2
                                        #       Parent Loop BB60_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB60_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB60_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB60_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_114
.LBB60_117:                             # %for.end388
                                        #   in Loop: Header=BB60_112 Depth=3
	jmp	.LBB60_118
.LBB60_118:                             # %for.inc389
                                        #   in Loop: Header=BB60_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_112
.LBB60_119:                             # %for.end391
                                        #   in Loop: Header=BB60_110 Depth=2
	jmp	.LBB60_120
.LBB60_120:                             # %for.inc392
                                        #   in Loop: Header=BB60_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_110
.LBB60_121:                             # %for.end394
                                        #   in Loop: Header=BB60_108 Depth=1
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc395
                                        #   in Loop: Header=BB60_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_108
.LBB60_123:                             # %for.end397
	movl	$0, -20(%rbp)
.LBB60_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_126 Depth 2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB60_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	$0, -12(%rbp)
.LBB60_126:                             # %for.cond402
                                        #   Parent Loop BB60_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB60_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	$0, -16(%rbp)
.LBB60_128:                             # %for.cond406
                                        #   Parent Loop BB60_124 Depth=1
                                        #     Parent Loop BB60_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB60_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB60_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_128
.LBB60_131:                             # %for.end432
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_132
.LBB60_132:                             # %for.inc433
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_126
.LBB60_133:                             # %for.end435
                                        #   in Loop: Header=BB60_124 Depth=1
	jmp	.LBB60_134
.LBB60_134:                             # %for.inc436
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_124
.LBB60_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB60_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_138 Depth 2
                                        #       Child Loop BB60_140 Depth 3
                                        #         Child Loop BB60_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB60_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB60_136 Depth=1
	movl	$0, -20(%rbp)
.LBB60_138:                             # %for.cond443
                                        #   Parent Loop BB60_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_140 Depth 3
                                        #         Child Loop BB60_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB60_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB60_138 Depth=2
	movl	$0, -12(%rbp)
.LBB60_140:                             # %for.cond447
                                        #   Parent Loop BB60_136 Depth=1
                                        #     Parent Loop BB60_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB60_140 Depth=3
	movl	$0, -36(%rbp)
.LBB60_142:                             # %for.cond451
                                        #   Parent Loop BB60_136 Depth=1
                                        #     Parent Loop BB60_138 Depth=2
                                        #       Parent Loop BB60_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB60_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB60_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB60_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_142
.LBB60_145:                             # %for.end465
                                        #   in Loop: Header=BB60_140 Depth=3
	jmp	.LBB60_146
.LBB60_146:                             # %for.inc466
                                        #   in Loop: Header=BB60_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_140
.LBB60_147:                             # %for.end468
                                        #   in Loop: Header=BB60_138 Depth=2
	jmp	.LBB60_148
.LBB60_148:                             # %for.inc469
                                        #   in Loop: Header=BB60_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_138
.LBB60_149:                             # %for.end471
                                        #   in Loop: Header=BB60_136 Depth=1
	jmp	.LBB60_150
.LBB60_150:                             # %for.inc472
                                        #   in Loop: Header=BB60_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_136
.LBB60_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB60_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB60_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB60_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB60_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_152
.LBB60_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB60_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB60_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB60_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB60_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_156
.LBB60_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB60_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB60_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB60_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB60_166
.LBB60_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB60_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB60_165:                             # %if.end520
	jmp	.LBB60_166
.LBB60_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB60_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB60_168:                             # %if.end536
	cmpl	$1413835087, -88(%rbp)  # imm = 0x5445694F
	jne	.LBB60_170
.LBB60_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_169
.Lfunc_end60:
	.size	start_macroblock.19, .Lfunc_end60-start_macroblock.19
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.20 # -- Begin function OneComponentChromaPrediction4x4.20
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.20,@function
OneComponentChromaPrediction4x4.20:     # @OneComponentChromaPrediction4x4.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$2146548602, -112(%rbp) # imm = 0x7FF1BB7A
	movq	%rdi, -136(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB61_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB61_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB61_6
.LBB61_5:                               # %if.else
	movl	$2, -52(%rbp)
.LBB61_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_8
.LBB61_7:                               # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB61_8:                               # %if.end13
	movl	-64(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB61_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB61_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB61_9 Depth=1
	movl	$0, -40(%rbp)
.LBB61_11:                              # %for.cond20
                                        #   Parent Loop BB61_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB61_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB61_15:                              # %cond.end
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_21
.LBB61_17:                              # %cond.false65
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB61_20
.LBB61_19:                              # %cond.false74
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB61_20:                              # %cond.end76
                                        #   in Loop: Header=BB61_11 Depth=2
.LBB61_21:                              # %cond.end78
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB61_24
.LBB61_23:                              # %cond.false84
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB61_24:                              # %cond.end86
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_30
.LBB61_26:                              # %cond.false91
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB61_29
.LBB61_28:                              # %cond.false96
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB61_29:                              # %cond.end98
                                        #   in Loop: Header=BB61_11 Depth=2
.LBB61_30:                              # %cond.end100
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB61_33
.LBB61_32:                              # %cond.false111
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB61_33:                              # %cond.end114
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_39
.LBB61_35:                              # %cond.false119
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB61_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB61_38
.LBB61_37:                              # %cond.false129
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB61_38:                              # %cond.end132
                                        #   in Loop: Header=BB61_11 Depth=2
.LBB61_39:                              # %cond.end134
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB61_42
.LBB61_41:                              # %cond.false141
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB61_42:                              # %cond.end144
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB61_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_48
.LBB61_44:                              # %cond.false149
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB61_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB61_47
.LBB61_46:                              # %cond.false155
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB61_47:                              # %cond.end158
                                        #   in Loop: Header=BB61_11 Depth=2
.LBB61_48:                              # %cond.end160
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-68(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB61_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB61_11
.LBB61_50:                              # %for.end
                                        #   in Loop: Header=BB61_9 Depth=1
	jmp	.LBB61_51
.LBB61_51:                              # %for.inc198
                                        #   in Loop: Header=BB61_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_9
.LBB61_52:                              # %for.end200
	cmpl	$2146548602, -112(%rbp) # imm = 0x7FF1BB7A
	jne	.LBB61_54
.LBB61_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_53
.Lfunc_end61:
	.size	OneComponentChromaPrediction4x4.20, .Lfunc_end61-OneComponentChromaPrediction4x4.20
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.21 # -- Begin function IntraChromaPrediction4x4.21
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.21,@function
IntraChromaPrediction4x4.21:            # @IntraChromaPrediction4x4.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1882811840, -28(%rbp)  # imm = 0x70396DC0
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_3:                               # %for.cond1
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_6:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc17
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_8:                               # %for.end19
	cmpl	$1882811840, -28(%rbp)  # imm = 0x70396DC0
	jne	.LBB62_10
.LBB62_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_9
.Lfunc_end62:
	.size	IntraChromaPrediction4x4.21, .Lfunc_end62-IntraChromaPrediction4x4.21
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.22  # -- Begin function writeReferenceFrame.22
	.p2align	4, 0x90
	.type	writeReferenceFrame.22,@function
writeReferenceFrame.22:                 # @writeReferenceFrame.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$572079602, -84(%rbp)   # imm = 0x22193DF2
	movl	%edi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_4
.LBB63_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB63_4
.LBB63_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB63_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB63_7
.LBB63_6:                               # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB63_7:                               # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB63_18
.LBB63_9:                               # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB63_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB63_11:                              # %if.end21
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB63_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB63_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB63_15
.LBB63_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB63_15:                              # %if.end33
	jmp	.LBB63_17
.LBB63_16:                              # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB63_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB63_18:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$572079602, -84(%rbp)   # imm = 0x22193DF2
	jne	.LBB63_20
.LBB63_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_19
.Lfunc_end63:
	.size	writeReferenceFrame.22, .Lfunc_end63-writeReferenceFrame.22
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.23          # -- Begin function predict_nnz.23
	.p2align	4, 0x90
	.type	predict_nnz.23,@function
predict_nnz.23:                         # @predict_nnz.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1965911860, -56(%rbp)  # imm = 0x752D6F34
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB64_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB64_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB64_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_6:                               # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB64_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB64_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB64_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB64_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB64_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB64_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB64_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB64_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1965911860, -56(%rbp)  # imm = 0x752D6F34
	jne	.LBB64_16
.LBB64_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_15
.Lfunc_end64:
	.size	predict_nnz.23, .Lfunc_end64-predict_nnz.23
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.24 # -- Begin function writeLumaCoeff8x8_CABAC.24
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.24,@function
writeLumaCoeff8x8_CABAC.24:             # @writeLumaCoeff8x8_CABAC.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$955694843, -60(%rbp)   # imm = 0x38F6BEFB
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB65_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB65_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB65_3:                               # %land.end
                                        #   in Loop: Header=BB65_1 Depth=1
	testb	$1, %al
	jne	.LBB65_4
	jmp	.LBB65_12
.LBB65_4:                               # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB65_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB65_7
.LBB65_6:                               # %cond.false
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB65_7:                               # %cond.end
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB65_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB65_10
.LBB65_9:                               # %if.else
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB65_10:                              # %if.end
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$955694843, -60(%rbp)   # imm = 0x38F6BEFB
	jne	.LBB65_14
.LBB65_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_13
.Lfunc_end65:
	.size	writeLumaCoeff8x8_CABAC.24, .Lfunc_end65-writeLumaCoeff8x8_CABAC.24
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.25         # -- Begin function MBType2Value.25
	.p2align	4, 0x90
	.type	MBType2Value.25,@function
MBType2Value.25:                        # @MBType2Value.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1938605603, -36(%rbp)  # imm = 0x738CC623
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB66_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB66_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB66_4
.LBB66_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB66_26
.LBB66_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB66_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB66_26
.LBB66_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB66_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB66_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB66_26
.LBB66_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB66_26
.LBB66_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_26
.LBB66_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB66_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB66_26
.LBB66_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB66_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB66_17
.LBB66_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB66_26
.LBB66_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB66_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_26
.LBB66_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB66_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB66_26
.LBB66_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB66_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_26
.LBB66_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB66_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_26
.LBB66_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB66_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1938605603, -36(%rbp)  # imm = 0x738CC623
	jne	.LBB66_28
.LBB66_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_27
.Lfunc_end66:
	.size	MBType2Value.25, .Lfunc_end66-MBType2Value.25
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.26         # -- Begin function B8Mode2Value.26
	.p2align	4, 0x90
	.type	B8Mode2Value.26,@function
B8Mode2Value.26:                        # @B8Mode2Value.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1991834322, -24(%rbp)  # imm = 0x76B8FAD2
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB67_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_3
.LBB67_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB67_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1991834322, -24(%rbp)  # imm = 0x76B8FAD2
	jne	.LBB67_5
.LBB67_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_4
.Lfunc_end67:
	.size	B8Mode2Value.26, .Lfunc_end67-B8Mode2Value.26
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.27 # -- Begin function ChromaResidualCoding.27
	.p2align	4, 0x90
	.type	ChromaResidualCoding.27,@function
ChromaResidualCoding.27:                # @ChromaResidualCoding.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$165186451, -76(%rbp)   # imm = 0x9D88B93
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB68_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB68_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB68_3:                               # %lor.end
.LBB68_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB68_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_7 Depth 2
                                        #       Child Loop BB68_9 Depth 3
                                        #     Child Loop BB68_16 Depth 2
                                        #       Child Loop BB68_18 Depth 3
                                        #     Child Loop BB68_33 Depth 2
                                        #       Child Loop BB68_35 Depth 3
                                        #     Child Loop BB68_43 Depth 2
                                        #       Child Loop BB68_45 Depth 3
                                        #     Child Loop BB68_58 Depth 2
                                        #       Child Loop BB68_60 Depth 3
                                        #     Child Loop BB68_87 Depth 2
                                        #       Child Loop BB68_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB68_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB68_7:                               # %for.cond5
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB68_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB68_7 Depth=2
	movl	$0, -20(%rbp)
.LBB68_9:                               # %for.cond8
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB68_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB68_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB68_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_9
.LBB68_12:                              # %for.end
                                        #   in Loop: Header=BB68_7 Depth=2
	jmp	.LBB68_13
.LBB68_13:                              # %for.inc18
                                        #   in Loop: Header=BB68_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_7
.LBB68_14:                              # %for.end20
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB68_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -8(%rbp)
.LBB68_16:                              # %for.cond21
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB68_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB68_16 Depth=2
	movl	$0, -4(%rbp)
.LBB68_18:                              # %for.cond26
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB68_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB68_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB68_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB68_25
.LBB68_21:                              # %if.else
                                        #   in Loop: Header=BB68_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB68_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB68_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB68_24
.LBB68_23:                              # %if.else52
                                        #   in Loop: Header=BB68_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB68_24:                              # %if.end
                                        #   in Loop: Header=BB68_18 Depth=3
	jmp	.LBB68_25
.LBB68_25:                              # %if.end57
                                        #   in Loop: Header=BB68_18 Depth=3
	jmp	.LBB68_26
.LBB68_26:                              # %for.inc58
                                        #   in Loop: Header=BB68_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_18
.LBB68_27:                              # %for.end59
                                        #   in Loop: Header=BB68_16 Depth=2
	jmp	.LBB68_28
.LBB68_28:                              # %for.inc60
                                        #   in Loop: Header=BB68_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_16
.LBB68_29:                              # %for.end62
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_74
.LBB68_30:                              # %if.else63
                                        #   in Loop: Header=BB68_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB68_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB68_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -8(%rbp)
.LBB68_33:                              # %for.cond69
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB68_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB68_33 Depth=2
	movl	$0, -4(%rbp)
.LBB68_35:                              # %for.cond73
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB68_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB68_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB68_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_35
.LBB68_38:                              # %for.end83
                                        #   in Loop: Header=BB68_33 Depth=2
	jmp	.LBB68_39
.LBB68_39:                              # %for.inc84
                                        #   in Loop: Header=BB68_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_33
.LBB68_40:                              # %for.end86
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_73
.LBB68_41:                              # %if.else87
                                        #   in Loop: Header=BB68_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB68_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -8(%rbp)
.LBB68_43:                              # %for.cond90
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB68_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB68_43 Depth=2
	movl	$0, -4(%rbp)
.LBB68_45:                              # %for.cond95
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB68_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB68_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB68_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB68_52
.LBB68_48:                              # %if.else119
                                        #   in Loop: Header=BB68_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB68_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB68_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB68_51
.LBB68_50:                              # %if.else127
                                        #   in Loop: Header=BB68_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB68_51:                              # %if.end132
                                        #   in Loop: Header=BB68_45 Depth=3
	jmp	.LBB68_52
.LBB68_52:                              # %if.end133
                                        #   in Loop: Header=BB68_45 Depth=3
	jmp	.LBB68_53
.LBB68_53:                              # %for.inc134
                                        #   in Loop: Header=BB68_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_45
.LBB68_54:                              # %for.end136
                                        #   in Loop: Header=BB68_43 Depth=2
	jmp	.LBB68_55
.LBB68_55:                              # %for.inc137
                                        #   in Loop: Header=BB68_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_43
.LBB68_56:                              # %for.end139
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_72
.LBB68_57:                              # %if.else140
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -8(%rbp)
.LBB68_58:                              # %for.cond141
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB68_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB68_58 Depth=2
	movl	$0, -4(%rbp)
.LBB68_60:                              # %for.cond146
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB68_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB68_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB68_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB68_67
.LBB68_63:                              # %if.else175
                                        #   in Loop: Header=BB68_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB68_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB68_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB68_66
.LBB68_65:                              # %if.else188
                                        #   in Loop: Header=BB68_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB68_66:                              # %if.end198
                                        #   in Loop: Header=BB68_60 Depth=3
	jmp	.LBB68_67
.LBB68_67:                              # %if.end199
                                        #   in Loop: Header=BB68_60 Depth=3
	jmp	.LBB68_68
.LBB68_68:                              # %for.inc200
                                        #   in Loop: Header=BB68_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_60
.LBB68_69:                              # %for.end202
                                        #   in Loop: Header=BB68_58 Depth=2
	jmp	.LBB68_70
.LBB68_70:                              # %for.inc203
                                        #   in Loop: Header=BB68_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_58
.LBB68_71:                              # %for.end205
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_72
.LBB68_72:                              # %if.end206
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_73
.LBB68_73:                              # %if.end207
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_74
.LBB68_74:                              # %if.end208
                                        #   in Loop: Header=BB68_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB68_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB68_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB68_100
.LBB68_77:                              # %if.else215
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB68_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB68_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB68_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB68_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB68_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB68_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB68_84
.LBB68_83:                              # %if.then247
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB68_85
.LBB68_84:                              # %if.else249
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_85:                              # %if.end251
                                        #   in Loop: Header=BB68_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	$0, -8(%rbp)
.LBB68_87:                              # %for.cond255
                                        #   Parent Loop BB68_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB68_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB68_87 Depth=2
	movl	$0, -4(%rbp)
.LBB68_89:                              # %for.cond260
                                        #   Parent Loop BB68_5 Depth=1
                                        #     Parent Loop BB68_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB68_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB68_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB68_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB68_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB68_93
.LBB68_92:                              # %if.else277
                                        #   in Loop: Header=BB68_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB68_93:                              # %if.end287
                                        #   in Loop: Header=BB68_89 Depth=3
	jmp	.LBB68_94
.LBB68_94:                              # %for.inc288
                                        #   in Loop: Header=BB68_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_89
.LBB68_95:                              # %for.end290
                                        #   in Loop: Header=BB68_87 Depth=2
	jmp	.LBB68_96
.LBB68_96:                              # %for.inc291
                                        #   in Loop: Header=BB68_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_87
.LBB68_97:                              # %for.end293
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_98
.LBB68_98:                              # %if.end294
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_99
.LBB68_99:                              # %if.end295
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_100
.LBB68_100:                             # %if.end296
                                        #   in Loop: Header=BB68_5 Depth=1
	jmp	.LBB68_101
.LBB68_101:                             # %for.inc297
                                        #   in Loop: Header=BB68_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_5
.LBB68_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB68_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB68_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB68_104 Depth=1
	movl	$0, -4(%rbp)
.LBB68_106:                             # %for.cond312
                                        #   Parent Loop BB68_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB68_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB68_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_110
.LBB68_109:                             # %cond.false
                                        #   in Loop: Header=BB68_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB68_110:                             # %cond.end
                                        #   in Loop: Header=BB68_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB68_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB68_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_116
.LBB68_112:                             # %cond.false358
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB68_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_115
.LBB68_114:                             # %cond.false367
                                        #   in Loop: Header=BB68_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB68_115:                             # %cond.end373
                                        #   in Loop: Header=BB68_106 Depth=2
.LBB68_116:                             # %cond.end375
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB68_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_119
.LBB68_118:                             # %cond.false394
                                        #   in Loop: Header=BB68_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB68_119:                             # %cond.end400
                                        #   in Loop: Header=BB68_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB68_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_125
.LBB68_121:                             # %cond.false406
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_124
.LBB68_123:                             # %cond.false415
                                        #   in Loop: Header=BB68_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB68_124:                             # %cond.end421
                                        #   in Loop: Header=BB68_106 Depth=2
.LBB68_125:                             # %cond.end423
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB68_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_128
.LBB68_127:                             # %cond.false443
                                        #   in Loop: Header=BB68_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB68_128:                             # %cond.end449
                                        #   in Loop: Header=BB68_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB68_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_134
.LBB68_130:                             # %cond.false455
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB68_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB68_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_133
.LBB68_132:                             # %cond.false464
                                        #   in Loop: Header=BB68_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB68_133:                             # %cond.end470
                                        #   in Loop: Header=BB68_106 Depth=2
.LBB68_134:                             # %cond.end472
                                        #   in Loop: Header=BB68_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB68_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_106
.LBB68_136:                             # %for.end487
                                        #   in Loop: Header=BB68_104 Depth=1
	jmp	.LBB68_137
.LBB68_137:                             # %for.inc488
                                        #   in Loop: Header=BB68_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_104
.LBB68_138:                             # %for.end490
	jmp	.LBB68_139
.LBB68_139:                             # %if.end491
	cmpl	$165186451, -76(%rbp)   # imm = 0x9D88B93
	jne	.LBB68_141
.LBB68_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_140
.Lfunc_end68:
	.size	ChromaResidualCoding.27, .Lfunc_end68-ChromaResidualCoding.27
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.28 # -- Begin function IntraChromaPrediction.28
	.p2align	4, 0x90
	.type	IntraChromaPrediction.28,@function
IntraChromaPrediction.28:               # @IntraChromaPrediction.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2100239692, -164(%rbp) # imm = 0x7D2F1D4C
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_1
.LBB69_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB69_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB69_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_8
.LBB69_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB69_8
.LBB69_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB69_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB69_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB69_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_13
.LBB69_12:                              # %cond.false32
                                        #   in Loop: Header=BB69_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_13
.LBB69_13:                              # %cond.end33
                                        #   in Loop: Header=BB69_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_9
.LBB69_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB69_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB69_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB69_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB69_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_20
.LBB69_19:                              # %cond.false57
                                        #   in Loop: Header=BB69_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB69_20
.LBB69_20:                              # %cond.end58
                                        #   in Loop: Header=BB69_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB69_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_16
.LBB69_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB69_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB69_25
.LBB69_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB69_25
.LBB69_25:                              # %cond.end75
	movl	%eax, -92(%rbp)
.LBB69_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB69_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_28:                              # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB69_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB69_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB69_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB69_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB69_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_37 Depth 2
                                        #       Child Loop BB69_39 Depth 3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
                                        #     Child Loop BB69_138 Depth 2
                                        #     Child Loop BB69_142 Depth 2
                                        #       Child Loop BB69_144 Depth 3
                                        #     Child Loop BB69_153 Depth 2
                                        #     Child Loop BB69_157 Depth 2
                                        #       Child Loop BB69_159 Depth 3
                                        #     Child Loop BB69_170 Depth 2
                                        #     Child Loop BB69_174 Depth 2
                                        #     Child Loop BB69_178 Depth 2
                                        #       Child Loop BB69_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB69_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB69_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB69_37:                              # %for.cond95
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_39 Depth 3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB69_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB69_37 Depth=2
	movl	$0, -88(%rbp)
.LBB69_39:                              # %for.cond99
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_104 Depth 4
                                        #         Child Loop BB69_110 Depth 4
                                        #         Child Loop BB69_85 Depth 4
                                        #         Child Loop BB69_91 Depth 4
                                        #         Child Loop BB69_66 Depth 4
                                        #         Child Loop BB69_72 Depth 4
                                        #         Child Loop BB69_44 Depth 4
                                        #         Child Loop BB69_50 Depth 4
                                        #         Child Loop BB69_125 Depth 4
                                        #           Child Loop BB69_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB69_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB69_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB69_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB69_39 Depth=3
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_42:                              # %sw.bb
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_44:                              # %for.cond124
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB69_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB69_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_44
.LBB69_47:                              # %for.end138
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_48
.LBB69_48:                              # %if.end139
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_50:                              # %for.cond143
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB69_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB69_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_50
.LBB69_53:                              # %for.end162
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_54
.LBB69_54:                              # %if.end163
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_63
.LBB69_57:                              # %if.else
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_62
.LBB69_59:                              # %if.else174
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_61:                              # %if.end180
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_62
.LBB69_62:                              # %if.end181
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_63
.LBB69_63:                              # %if.end182
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_64:                              # %sw.bb183
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_66:                              # %for.cond186
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB69_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB69_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_66
.LBB69_69:                              # %for.end202
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_77
.LBB69_70:                              # %if.else203
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_72:                              # %for.cond207
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB69_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB69_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_72
.LBB69_75:                              # %for.end226
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_76
.LBB69_76:                              # %if.end227
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_77
.LBB69_77:                              # %if.end228
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_82
.LBB69_79:                              # %if.else233
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB69_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_81:                              # %if.end239
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_82
.LBB69_82:                              # %if.end240
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_83:                              # %sw.bb241
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_85:                              # %for.cond245
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB69_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB69_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_85
.LBB69_88:                              # %for.end264
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_96
.LBB69_89:                              # %if.else265
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_91:                              # %for.cond268
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB69_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB69_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_91
.LBB69_94:                              # %for.end284
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_95
.LBB69_95:                              # %if.end285
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_96
.LBB69_96:                              # %if.end286
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_101
.LBB69_98:                              # %if.else292
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_100:                             # %if.end297
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_101
.LBB69_101:                             # %if.end298
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_102:                             # %sw.bb299
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_104:                             # %for.cond302
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB69_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB69_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_104
.LBB69_107:                             # %for.end318
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_108
.LBB69_108:                             # %if.end319
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_110:                             # %for.cond323
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB69_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB69_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_110
.LBB69_113:                             # %for.end342
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_114
.LBB69_114:                             # %if.end343
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_123
.LBB69_117:                             # %if.else352
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB69_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_122
.LBB69_119:                             # %if.else357
                                        #   in Loop: Header=BB69_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB69_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB69_121:                             # %if.end363
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_122
.LBB69_122:                             # %if.end364
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_123
.LBB69_123:                             # %if.end365
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_124
.LBB69_124:                             # %sw.epilog
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_125:                             # %for.cond366
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB69_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_127:                             # %for.cond371
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_37 Depth=2
                                        #       Parent Loop BB69_39 Depth=3
                                        #         Parent Loop BB69_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB69_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB69_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_127
.LBB69_130:                             # %for.end386
                                        #   in Loop: Header=BB69_125 Depth=4
	jmp	.LBB69_131
.LBB69_131:                             # %for.inc387
                                        #   in Loop: Header=BB69_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_125
.LBB69_132:                             # %for.end389
                                        #   in Loop: Header=BB69_39 Depth=3
	jmp	.LBB69_133
.LBB69_133:                             # %for.inc390
                                        #   in Loop: Header=BB69_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB69_39
.LBB69_134:                             # %for.end392
                                        #   in Loop: Header=BB69_37 Depth=2
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc393
                                        #   in Loop: Header=BB69_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB69_37
.LBB69_136:                             # %for.end395
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_138:                             # %for.cond398
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB69_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB69_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_138
.LBB69_141:                             # %for.end414
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_142:                             # %for.cond415
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB69_142 Depth=2
	movl	$0, -8(%rbp)
.LBB69_144:                             # %for.cond419
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB69_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB69_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_144
.LBB69_147:                             # %for.end436
                                        #   in Loop: Header=BB69_142 Depth=2
	jmp	.LBB69_148
.LBB69_148:                             # %for.inc437
                                        #   in Loop: Header=BB69_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_142
.LBB69_149:                             # %for.end439
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_150
.LBB69_150:                             # %if.end440
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_153:                             # %for.cond447
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB69_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB69_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_153
.LBB69_156:                             # %for.end468
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	$0, -4(%rbp)
.LBB69_157:                             # %for.cond469
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB69_157 Depth=2
	movl	$0, -8(%rbp)
.LBB69_159:                             # %for.cond473
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB69_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB69_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_159
.LBB69_162:                             # %for.end490
                                        #   in Loop: Header=BB69_157 Depth=2
	jmp	.LBB69_163
.LBB69_163:                             # %for.inc491
                                        #   in Loop: Header=BB69_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_157
.LBB69_164:                             # %for.end493
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_165
.LBB69_165:                             # %if.end494
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB69_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB69_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB69_170:                             # %for.cond519
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB69_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB69_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB69_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_170
.LBB69_173:                             # %for.end540
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB69_174:                             # %for.cond556
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB69_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB69_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB69_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_174
.LBB69_177:                             # %for.end577
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB69_178:                             # %for.cond606
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB69_178 Depth=2
	movl	$0, -4(%rbp)
.LBB69_180:                             # %for.cond610
                                        #   Parent Loop BB69_35 Depth=1
                                        #     Parent Loop BB69_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB69_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB69_184
.LBB69_183:                             # %cond.false630
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB69_184:                             # %cond.end643
                                        #   in Loop: Header=BB69_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB69_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB69_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB69_190
.LBB69_186:                             # %cond.false648
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB69_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB69_189
.LBB69_188:                             # %cond.false666
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB69_189:                             # %cond.end679
                                        #   in Loop: Header=BB69_180 Depth=3
.LBB69_190:                             # %cond.end681
                                        #   in Loop: Header=BB69_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB69_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_180
.LBB69_192:                             # %for.end694
                                        #   in Loop: Header=BB69_178 Depth=2
	jmp	.LBB69_193
.LBB69_193:                             # %for.inc695
                                        #   in Loop: Header=BB69_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_178
.LBB69_194:                             # %for.end697
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_195
.LBB69_195:                             # %if.end698
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_196
.LBB69_196:                             # %for.inc699
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_35
.LBB69_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB69_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB69_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_199
.LBB69_202:                             # %for.end712
	movl	$0, -48(%rbp)
.LBB69_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_219 Depth 2
                                        #       Child Loop BB69_221 Depth 3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB69_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB69_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB69_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB69_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_207:                             # %if.end723
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB69_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_217
.LBB69_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB69_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_217
.LBB69_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB69_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB69_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB69_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB69_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB69_218
.LBB69_217:                             # %if.then749
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_218:                             # %if.end750
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	$0, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB69_219:                             # %for.cond751
                                        #   Parent Loop BB69_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_221 Depth 3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB69_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB69_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB69_221:                             # %for.cond757
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_223 Depth 4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB69_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB69_221 Depth=3
	movl	$0, -40(%rbp)
.LBB69_223:                             # %for.cond761
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_225 Depth 5
                                        #             Child Loop BB69_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB69_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB69_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_225:                             # %for.cond765
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        #         Parent Loop BB69_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB69_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB69_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_227:                             # %for.cond770
                                        #   Parent Loop BB69_203 Depth=1
                                        #     Parent Loop BB69_219 Depth=2
                                        #       Parent Loop BB69_221 Depth=3
                                        #         Parent Loop BB69_223 Depth=4
                                        #           Parent Loop BB69_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB69_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB69_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB69_227
.LBB69_230:                             # %for.end803
                                        #   in Loop: Header=BB69_225 Depth=5
	jmp	.LBB69_231
.LBB69_231:                             # %for.inc804
                                        #   in Loop: Header=BB69_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_225
.LBB69_232:                             # %for.end806
                                        #   in Loop: Header=BB69_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB69_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB69_223
.LBB69_234:                             # %for.end810
                                        #   in Loop: Header=BB69_221 Depth=3
	jmp	.LBB69_235
.LBB69_235:                             # %for.inc811
                                        #   in Loop: Header=BB69_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB69_221
.LBB69_236:                             # %for.end813
                                        #   in Loop: Header=BB69_219 Depth=2
	jmp	.LBB69_237
.LBB69_237:                             # %for.inc814
                                        #   in Loop: Header=BB69_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_219
.LBB69_238:                             # %for.end816
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-104(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB69_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB69_240:                             # %if.end820
                                        #   in Loop: Header=BB69_203 Depth=1
	jmp	.LBB69_241
.LBB69_241:                             # %for.inc821
                                        #   in Loop: Header=BB69_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB69_203
.LBB69_242:                             # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB69_243:                             # %if.end824
	cmpl	$2100239692, -164(%rbp) # imm = 0x7D2F1D4C
	jne	.LBB69_245
.LBB69_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_244
.Lfunc_end69:
	.size	IntraChromaPrediction.28, .Lfunc_end69-IntraChromaPrediction.28
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_42
	.quad	.LBB69_64
	.quad	.LBB69_83
	.quad	.LBB69_102
                                        # -- End function
	.text
	.globl	OneComponentChromaPrediction4x4.29 # -- Begin function OneComponentChromaPrediction4x4.29
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.29,@function
OneComponentChromaPrediction4x4.29:     # @OneComponentChromaPrediction4x4.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$609555730, -116(%rbp)  # imm = 0x24551512
	movq	%rdi, -136(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -56(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB70_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB70_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB70_6
.LBB70_5:                               # %if.else
	movl	$2, -48(%rbp)
.LBB70_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_8
.LBB70_7:                               # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB70_8:                               # %if.end13
	movl	-68(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB70_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB70_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB70_9 Depth=1
	movl	$0, -32(%rbp)
.LBB70_11:                              # %for.cond20
                                        #   Parent Loop BB70_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB70_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-32(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB70_15
.LBB70_14:                              # %cond.false
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB70_15:                              # %cond.end
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_21
.LBB70_17:                              # %cond.false65
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB70_20
.LBB70_19:                              # %cond.false74
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB70_20:                              # %cond.end76
                                        #   in Loop: Header=BB70_11 Depth=2
.LBB70_21:                              # %cond.end78
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB70_24
.LBB70_23:                              # %cond.false84
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB70_24:                              # %cond.end86
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_30
.LBB70_26:                              # %cond.false91
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB70_29
.LBB70_28:                              # %cond.false96
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB70_29:                              # %cond.end98
                                        #   in Loop: Header=BB70_11 Depth=2
.LBB70_30:                              # %cond.end100
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB70_33
.LBB70_32:                              # %cond.false111
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB70_33:                              # %cond.end114
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_39
.LBB70_35:                              # %cond.false119
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB70_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB70_38
.LBB70_37:                              # %cond.false129
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB70_38:                              # %cond.end132
                                        #   in Loop: Header=BB70_11 Depth=2
.LBB70_39:                              # %cond.end134
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB70_42
.LBB70_41:                              # %cond.false141
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB70_42:                              # %cond.end144
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB70_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_48
.LBB70_44:                              # %cond.false149
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB70_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB70_47
.LBB70_46:                              # %cond.false155
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB70_47:                              # %cond.end158
                                        #   in Loop: Header=BB70_11 Depth=2
.LBB70_48:                              # %cond.end160
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-84(%rbp), %eax
	imull	-88(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-88(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-84(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-76(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB70_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB70_11
.LBB70_50:                              # %for.end
                                        #   in Loop: Header=BB70_9 Depth=1
	jmp	.LBB70_51
.LBB70_51:                              # %for.inc198
                                        #   in Loop: Header=BB70_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB70_9
.LBB70_52:                              # %for.end200
	cmpl	$609555730, -116(%rbp)  # imm = 0x24551512
	jne	.LBB70_54
.LBB70_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_53
.Lfunc_end70:
	.size	OneComponentChromaPrediction4x4.29, .Lfunc_end70-OneComponentChromaPrediction4x4.29
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.30  # -- Begin function writeMotionInfo2NAL.30
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.30,@function
writeMotionInfo2NAL.30:                 # @writeMotionInfo2NAL.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1563127550, -56(%rbp)  # imm = 0x5D2B6EFE
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB71_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB71_3
.LBB71_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB71_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB71_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB71_6
.LBB71_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB71_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB71_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB71_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB71_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB71_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB71_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB71_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB71_39
.LBB71_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB71_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB71_15 Depth=1
	movl	$0, -16(%rbp)
.LBB71_17:                              # %for.cond45
                                        #   Parent Loop BB71_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB71_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB71_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB71_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB71_22
.LBB71_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB71_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB71_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB71_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_22:                              # %if.end
                                        #   in Loop: Header=BB71_17 Depth=2
	jmp	.LBB71_23
.LBB71_23:                              # %for.inc
                                        #   in Loop: Header=BB71_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_17
.LBB71_24:                              # %for.end
                                        #   in Loop: Header=BB71_15 Depth=1
	jmp	.LBB71_25
.LBB71_25:                              # %for.inc79
                                        #   in Loop: Header=BB71_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_15
.LBB71_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB71_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB71_27 Depth=1
	movl	$0, -16(%rbp)
.LBB71_29:                              # %for.cond86
                                        #   Parent Loop BB71_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB71_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB71_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB71_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB71_34
.LBB71_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB71_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB71_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB71_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_34:                              # %if.end126
                                        #   in Loop: Header=BB71_29 Depth=2
	jmp	.LBB71_35
.LBB71_35:                              # %for.inc127
                                        #   in Loop: Header=BB71_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_29
.LBB71_36:                              # %for.end129
                                        #   in Loop: Header=BB71_27 Depth=1
	jmp	.LBB71_37
.LBB71_37:                              # %for.inc130
                                        #   in Loop: Header=BB71_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_27
.LBB71_38:                              # %for.end132
	jmp	.LBB71_39
.LBB71_39:                              # %if.end133
	jmp	.LBB71_40
.LBB71_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB71_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB71_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB71_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB71_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB71_45 Depth=1
	movl	$0, -16(%rbp)
.LBB71_47:                              # %for.cond155
                                        #   Parent Loop BB71_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB71_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB71_52
.LBB71_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB71_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_52:                              # %if.end197
                                        #   in Loop: Header=BB71_47 Depth=2
	jmp	.LBB71_53
.LBB71_53:                              # %for.inc198
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_47
.LBB71_54:                              # %for.end200
                                        #   in Loop: Header=BB71_45 Depth=1
	jmp	.LBB71_55
.LBB71_55:                              # %for.inc201
                                        #   in Loop: Header=BB71_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_45
.LBB71_56:                              # %for.end203
	jmp	.LBB71_57
.LBB71_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB71_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB71_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB71_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB71_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB71_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB71_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB71_63 Depth=1
	movl	$0, -16(%rbp)
.LBB71_65:                              # %for.cond227
                                        #   Parent Loop BB71_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB71_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB71_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB71_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB71_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB71_70
.LBB71_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB71_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB71_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB71_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_70:                              # %if.end269
                                        #   in Loop: Header=BB71_65 Depth=2
	jmp	.LBB71_71
.LBB71_71:                              # %for.inc270
                                        #   in Loop: Header=BB71_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_65
.LBB71_72:                              # %for.end272
                                        #   in Loop: Header=BB71_63 Depth=1
	jmp	.LBB71_73
.LBB71_73:                              # %for.inc273
                                        #   in Loop: Header=BB71_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_63
.LBB71_74:                              # %for.end275
	jmp	.LBB71_75
.LBB71_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1563127550, -56(%rbp)  # imm = 0x5D2B6EFE
	jne	.LBB71_77
.LBB71_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_76
.Lfunc_end71:
	.size	writeMotionInfo2NAL.30, .Lfunc_end71-writeMotionInfo2NAL.30
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.31 # -- Begin function write_terminating_bit.31
	.p2align	4, 0x90
	.type	write_terminating_bit.31,@function
write_terminating_bit.31:               # @write_terminating_bit.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$757225380, -8(%rbp)    # imm = 0x2D2257A4
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$757225380, -8(%rbp)    # imm = 0x2D2257A4
	jne	.LBB72_2
.LBB72_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_1
.Lfunc_end72:
	.size	write_terminating_bit.31, .Lfunc_end72-write_terminating_bit.31
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.32 # -- Begin function proceed2nextMacroblock.32
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.32,@function
proceed2nextMacroblock.32:              # @proceed2nextMacroblock.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1902409693, -28(%rbp)  # imm = 0x716477DD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB73_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB73_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB73_9
.LBB73_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB73_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB73_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB73_7
.LBB73_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB73_7:                               # %if.end
	jmp	.LBB73_8
.LBB73_8:                               # %if.end48
	jmp	.LBB73_9
.LBB73_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB73_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB73_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB73_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB73_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB73_16
.LBB73_15:                              # %if.else86
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB73_16:                              # %if.end94
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB73_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB73_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB73_20
.LBB73_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB73_21
.LBB73_20:                              # %if.then107
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB73_22
.LBB73_21:                              # %if.else114
                                        #   in Loop: Header=BB73_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB73_22:                              # %if.end121
                                        #   in Loop: Header=BB73_12 Depth=1
	jmp	.LBB73_23
.LBB73_23:                              # %if.end122
                                        #   in Loop: Header=BB73_12 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc
                                        #   in Loop: Header=BB73_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_12
.LBB73_25:                              # %for.end
	jmp	.LBB73_34
.LBB73_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB73_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB73_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB73_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB73_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB73_32
.LBB73_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB73_32:                              # %if.end155
	jmp	.LBB73_33
.LBB73_33:                              # %if.end156
	jmp	.LBB73_34
.LBB73_34:                              # %if.end157
	jmp	.LBB73_35
.LBB73_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB73_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB73_38
.LBB73_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB73_38:                              # %if.end167
	cmpl	$1902409693, -28(%rbp)  # imm = 0x716477DD
	jne	.LBB73_40
.LBB73_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_39
.Lfunc_end73:
	.size	proceed2nextMacroblock.32, .Lfunc_end73-proceed2nextMacroblock.32
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.33 # -- Begin function writeChromaIntraPredMode.33
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.33,@function
writeChromaIntraPredMode.33:            # @writeChromaIntraPredMode.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$577865782, -36(%rbp)   # imm = 0x22718836
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_3
.LBB74_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$577865782, -36(%rbp)   # imm = 0x22718836
	jne	.LBB74_5
.LBB74_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_4
.Lfunc_end74:
	.size	writeChromaIntraPredMode.33, .Lfunc_end74-writeChromaIntraPredMode.33
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.34  # -- Begin function SetModesAndRefframe.34
	.p2align	4, 0x90
	.type	SetModesAndRefframe.34,@function
SetModesAndRefframe.34:                 # @SetModesAndRefframe.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$104212941, -60(%rbp)   # imm = 0x63629CD
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB75_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB75_12
.LBB75_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB75_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB75_11
.LBB75_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB75_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB75_10
.LBB75_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB75_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB75_9
.LBB75_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB75_9:                               # %if.end
	jmp	.LBB75_10
.LBB75_10:                              # %if.end86
	jmp	.LBB75_11
.LBB75_11:                              # %if.end87
	jmp	.LBB75_12
.LBB75_12:                              # %if.end88
	cmpl	$104212941, -60(%rbp)   # imm = 0x63629CD
	jne	.LBB75_14
.LBB75_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_13
.Lfunc_end75:
	.size	SetModesAndRefframe.34, .Lfunc_end75-SetModesAndRefframe.34
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.35    # -- Begin function LumaPrediction4x4.35
	.p2align	4, 0x90
	.type	LumaPrediction4x4.35,@function
LumaPrediction4x4.35:                   # @LumaPrediction4x4.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$969878940, -100(%rbp)  # imm = 0x39CF2D9C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB76_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB76_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB76_6
.LBB76_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB76_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB76_5:                               # %land.end
.LBB76_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB76_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB76_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB76_10
.LBB76_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB76_10
.LBB76_10:                              # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB76_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB76_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB76_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB76_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB76_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB76_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB76_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB76_19:                              # %cond.end38
	movq	%rax, -88(%rbp)
.LBB76_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB76_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB76_23
.LBB76_22:                              # %if.then45
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB76_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB76_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB76_26
.LBB76_25:                              # %if.then64
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB76_26:                              # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB76_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB76_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB76_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_31:                              # %for.cond85
                                        #   Parent Loop BB76_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB76_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB76_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_31
.LBB76_34:                              # %for.end
                                        #   in Loop: Header=BB76_29 Depth=1
	jmp	.LBB76_35
.LBB76_35:                              # %for.inc125
                                        #   in Loop: Header=BB76_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_29
.LBB76_36:                              # %for.end127
	jmp	.LBB76_57
.LBB76_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB76_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB76_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_41:                              # %for.cond135
                                        #   Parent Loop BB76_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB76_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB76_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_41
.LBB76_44:                              # %for.end161
                                        #   in Loop: Header=BB76_39 Depth=1
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc162
                                        #   in Loop: Header=BB76_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_39
.LBB76_46:                              # %for.end164
	jmp	.LBB76_56
.LBB76_47:                              # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB76_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_50:                              # %for.cond170
                                        #   Parent Loop BB76_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB76_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB76_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_50
.LBB76_53:                              # %for.end196
                                        #   in Loop: Header=BB76_48 Depth=1
	jmp	.LBB76_54
.LBB76_54:                              # %for.inc197
                                        #   in Loop: Header=BB76_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_48
.LBB76_55:                              # %for.end199
	jmp	.LBB76_56
.LBB76_56:                              # %if.end200
	jmp	.LBB76_57
.LBB76_57:                              # %if.end201
	jmp	.LBB76_89
.LBB76_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB76_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB76_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_62:                              # %for.cond210
                                        #   Parent Loop BB76_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB76_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB76_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_62
.LBB76_65:                              # %for.end226
                                        #   in Loop: Header=BB76_60 Depth=1
	jmp	.LBB76_66
.LBB76_66:                              # %for.inc227
                                        #   in Loop: Header=BB76_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_60
.LBB76_67:                              # %for.end229
	jmp	.LBB76_88
.LBB76_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB76_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB76_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_72:                              # %for.cond238
                                        #   Parent Loop BB76_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB76_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB76_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_72
.LBB76_75:                              # %for.end251
                                        #   in Loop: Header=BB76_70 Depth=1
	jmp	.LBB76_76
.LBB76_76:                              # %for.inc252
                                        #   in Loop: Header=BB76_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_70
.LBB76_77:                              # %for.end254
	jmp	.LBB76_87
.LBB76_78:                              # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB76_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB76_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_81:                              # %for.cond260
                                        #   Parent Loop BB76_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB76_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB76_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB76_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_81
.LBB76_84:                              # %for.end273
                                        #   in Loop: Header=BB76_79 Depth=1
	jmp	.LBB76_85
.LBB76_85:                              # %for.inc274
                                        #   in Loop: Header=BB76_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_79
.LBB76_86:                              # %for.end276
	jmp	.LBB76_87
.LBB76_87:                              # %if.end277
	jmp	.LBB76_88
.LBB76_88:                              # %if.end278
	jmp	.LBB76_89
.LBB76_89:                              # %if.end279
	cmpl	$969878940, -100(%rbp)  # imm = 0x39CF2D9C
	jne	.LBB76_91
.LBB76_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_90
.Lfunc_end76:
	.size	LumaPrediction4x4.35, .Lfunc_end76-LumaPrediction4x4.35
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.36 # -- Begin function IntraChromaPrediction4x4.36
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.36,@function
IntraChromaPrediction4x4.36:            # @IntraChromaPrediction4x4.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1388197470, -28(%rbp)  # imm = 0x52BE365E
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_3:                               # %for.cond1
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_3
.LBB77_6:                               # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_7
.LBB77_7:                               # %for.inc17
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_1
.LBB77_8:                               # %for.end19
	cmpl	$1388197470, -28(%rbp)  # imm = 0x52BE365E
	jne	.LBB77_10
.LBB77_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_9
.Lfunc_end77:
	.size	IntraChromaPrediction4x4.36, .Lfunc_end77-IntraChromaPrediction4x4.36
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.37    # -- Begin function LumaPrediction4x4.37
	.p2align	4, 0x90
	.type	LumaPrediction4x4.37,@function
LumaPrediction4x4.37:                   # @LumaPrediction4x4.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$300758325, -104(%rbp)  # imm = 0x11ED3535
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB78_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
.LBB78_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB78_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB78_5:                               # %land.end
.LBB78_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB78_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB78_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB78_10
.LBB78_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB78_10
.LBB78_10:                              # %cond.end
	movl	%ecx, -64(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB78_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB78_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB78_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB78_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB78_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_19
.LBB78_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_19:                              # %cond.end38
	movq	%rax, -88(%rbp)
.LBB78_20:                              # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB78_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB78_23
.LBB78_22:                              # %if.then45
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB78_23:                              # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB78_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB78_26
.LBB78_25:                              # %if.then64
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB78_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB78_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB78_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB78_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_31:                              # %for.cond85
                                        #   Parent Loop BB78_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB78_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB78_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_31
.LBB78_34:                              # %for.end
                                        #   in Loop: Header=BB78_29 Depth=1
	jmp	.LBB78_35
.LBB78_35:                              # %for.inc125
                                        #   in Loop: Header=BB78_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_29
.LBB78_36:                              # %for.end127
	jmp	.LBB78_57
.LBB78_37:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB78_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB78_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_41:                              # %for.cond135
                                        #   Parent Loop BB78_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB78_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB78_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_41
.LBB78_44:                              # %for.end161
                                        #   in Loop: Header=BB78_39 Depth=1
	jmp	.LBB78_45
.LBB78_45:                              # %for.inc162
                                        #   in Loop: Header=BB78_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_39
.LBB78_46:                              # %for.end164
	jmp	.LBB78_56
.LBB78_47:                              # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB78_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_50:                              # %for.cond170
                                        #   Parent Loop BB78_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB78_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB78_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_50
.LBB78_53:                              # %for.end196
                                        #   in Loop: Header=BB78_48 Depth=1
	jmp	.LBB78_54
.LBB78_54:                              # %for.inc197
                                        #   in Loop: Header=BB78_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_48
.LBB78_55:                              # %for.end199
	jmp	.LBB78_56
.LBB78_56:                              # %if.end200
	jmp	.LBB78_57
.LBB78_57:                              # %if.end201
	jmp	.LBB78_89
.LBB78_58:                              # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB78_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB78_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_62:                              # %for.cond210
                                        #   Parent Loop BB78_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB78_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB78_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_62
.LBB78_65:                              # %for.end226
                                        #   in Loop: Header=BB78_60 Depth=1
	jmp	.LBB78_66
.LBB78_66:                              # %for.inc227
                                        #   in Loop: Header=BB78_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_60
.LBB78_67:                              # %for.end229
	jmp	.LBB78_88
.LBB78_68:                              # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB78_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB78_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_72:                              # %for.cond238
                                        #   Parent Loop BB78_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB78_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB78_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_72
.LBB78_75:                              # %for.end251
                                        #   in Loop: Header=BB78_70 Depth=1
	jmp	.LBB78_76
.LBB78_76:                              # %for.inc252
                                        #   in Loop: Header=BB78_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_70
.LBB78_77:                              # %for.end254
	jmp	.LBB78_87
.LBB78_78:                              # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB78_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_81:                              # %for.cond260
                                        #   Parent Loop BB78_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB78_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB78_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_81
.LBB78_84:                              # %for.end273
                                        #   in Loop: Header=BB78_79 Depth=1
	jmp	.LBB78_85
.LBB78_85:                              # %for.inc274
                                        #   in Loop: Header=BB78_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_79
.LBB78_86:                              # %for.end276
	jmp	.LBB78_87
.LBB78_87:                              # %if.end277
	jmp	.LBB78_88
.LBB78_88:                              # %if.end278
	jmp	.LBB78_89
.LBB78_89:                              # %if.end279
	cmpl	$300758325, -104(%rbp)  # imm = 0x11ED3535
	jne	.LBB78_91
.LBB78_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_90
.Lfunc_end78:
	.size	LumaPrediction4x4.37, .Lfunc_end78-LumaPrediction4x4.37
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.38  # -- Begin function SetModesAndRefframe.38
	.p2align	4, 0x90
	.type	SetModesAndRefframe.38,@function
SetModesAndRefframe.38:                 # @SetModesAndRefframe.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$103850340, -60(%rbp)   # imm = 0x630A164
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB79_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB79_12
.LBB79_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB79_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB79_11
.LBB79_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB79_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB79_10
.LBB79_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB79_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB79_9
.LBB79_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB79_9:                               # %if.end
	jmp	.LBB79_10
.LBB79_10:                              # %if.end86
	jmp	.LBB79_11
.LBB79_11:                              # %if.end87
	jmp	.LBB79_12
.LBB79_12:                              # %if.end88
	cmpl	$103850340, -60(%rbp)   # imm = 0x630A164
	jne	.LBB79_14
.LBB79_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_13
.Lfunc_end79:
	.size	SetModesAndRefframe.38, .Lfunc_end79-SetModesAndRefframe.38
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.39    # -- Begin function writeLumaCoeff8x8.39
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.39,@function
writeLumaCoeff8x8.39:                   # @writeLumaCoeff8x8.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$167164601, -36(%rbp)   # imm = 0x9F6BAB9
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB80_2
# %bb.1:                                # %if.then
	jmp	.LBB80_2
.LBB80_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB80_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_15
.LBB80_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB80_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB80_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB80_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB80_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB80_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB80_10
.LBB80_9:                               # %cond.false
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB80_10:                              # %cond.end
                                        #   in Loop: Header=BB80_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_12
.LBB80_11:                              # %if.else
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_12:                              # %if.end17
                                        #   in Loop: Header=BB80_5 Depth=1
	jmp	.LBB80_13
.LBB80_13:                              # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_5
.LBB80_14:                              # %for.end
	jmp	.LBB80_19
.LBB80_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB80_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_18
.LBB80_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_18:                              # %if.end27
	jmp	.LBB80_19
.LBB80_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$167164601, -36(%rbp)   # imm = 0x9F6BAB9
	jne	.LBB80_21
.LBB80_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_20
.Lfunc_end80:
	.size	writeLumaCoeff8x8.39, .Lfunc_end80-writeLumaCoeff8x8.39
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.40          # -- Begin function predict_nnz.40
	.p2align	4, 0x90
	.type	predict_nnz.40,@function
predict_nnz.40:                         # @predict_nnz.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1402659411, -56(%rbp)  # imm = 0x539AE253
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB81_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB81_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB81_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB81_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB81_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB81_6:                               # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB81_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB81_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB81_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB81_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB81_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB81_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB81_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB81_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1402659411, -56(%rbp)  # imm = 0x539AE253
	jne	.LBB81_16
.LBB81_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_15
.Lfunc_end81:
	.size	predict_nnz.40, .Lfunc_end81-predict_nnz.40
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.41 # -- Begin function writeLumaCoeff4x4_CABAC.41
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.41,@function
writeLumaCoeff4x4_CABAC.41:             # @writeLumaCoeff4x4_CABAC.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1148275202, -52(%rbp)  # imm = 0x44714A02
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB82_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB82_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB82_6
.LBB82_5:                               # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB82_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB82_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB82_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB82_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB82_9:                               # %land.end
                                        #   in Loop: Header=BB82_7 Depth=1
	testb	$1, %al
	jne	.LBB82_10
	jmp	.LBB82_15
.LBB82_10:                              # %for.body
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB82_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB82_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB82_13
.LBB82_12:                              # %cond.false40
                                        #   in Loop: Header=BB82_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB82_13:                              # %cond.end43
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB82_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_7
.LBB82_15:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1148275202, -52(%rbp)  # imm = 0x44714A02
	jne	.LBB82_17
.LBB82_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_16
.Lfunc_end82:
	.size	writeLumaCoeff4x4_CABAC.41, .Lfunc_end82-writeLumaCoeff4x4_CABAC.41
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.42 # -- Begin function writeLumaCoeff8x8_CABAC.42
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.42,@function
writeLumaCoeff8x8_CABAC.42:             # @writeLumaCoeff8x8_CABAC.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$447967001, -60(%rbp)   # imm = 0x1AB36F19
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB83_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB83_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB83_3:                               # %land.end
                                        #   in Loop: Header=BB83_1 Depth=1
	testb	$1, %al
	jne	.LBB83_4
	jmp	.LBB83_12
.LBB83_4:                               # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB83_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB83_7
.LBB83_6:                               # %cond.false
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB83_7:                               # %cond.end
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB83_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB83_10
.LBB83_9:                               # %if.else
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB83_10:                              # %if.end
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$447967001, -60(%rbp)   # imm = 0x1AB36F19
	jne	.LBB83_14
.LBB83_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_13
.Lfunc_end83:
	.size	writeLumaCoeff8x8_CABAC.42, .Lfunc_end83-writeLumaCoeff8x8_CABAC.42
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.43        # -- Begin function slice_too_big.43
	.p2align	4, 0x90
	.type	slice_too_big.43,@function
slice_too_big.43:                       # @slice_too_big.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1977928139, -52(%rbp)  # imm = 0x75E4C9CB
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB84_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB84_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB84_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB84_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB84_5:                               # %if.end
                                        #   in Loop: Header=BB84_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB84_7:                               # %if.end8
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB84_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB84_21
.LBB84_9:                               # %if.end11
                                        #   in Loop: Header=BB84_2 Depth=1
	jmp	.LBB84_10
.LBB84_10:                              # %for.inc
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_2
.LBB84_11:                              # %for.end
	jmp	.LBB84_12
.LBB84_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB84_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB84_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB84_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB84_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB84_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB84_21
.LBB84_17:                              # %if.end27
                                        #   in Loop: Header=BB84_14 Depth=1
	jmp	.LBB84_18
.LBB84_18:                              # %for.inc28
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_14
.LBB84_19:                              # %for.end30
	jmp	.LBB84_20
.LBB84_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB84_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1977928139, -52(%rbp)  # imm = 0x75E4C9CB
	jne	.LBB84_23
.LBB84_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_22
.Lfunc_end84:
	.size	slice_too_big.43, .Lfunc_end84-slice_too_big.43
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.44  # -- Begin function SetModesAndRefframe.44
	.p2align	4, 0x90
	.type	SetModesAndRefframe.44,@function
SetModesAndRefframe.44:                 # @SetModesAndRefframe.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$732755002, -60(%rbp)   # imm = 0x2BACF43A
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB85_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB85_12
.LBB85_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB85_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB85_11
.LBB85_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB85_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB85_10
.LBB85_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB85_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB85_9
.LBB85_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB85_9:                               # %if.end
	jmp	.LBB85_10
.LBB85_10:                              # %if.end86
	jmp	.LBB85_11
.LBB85_11:                              # %if.end87
	jmp	.LBB85_12
.LBB85_12:                              # %if.end88
	cmpl	$732755002, -60(%rbp)   # imm = 0x2BACF43A
	jne	.LBB85_14
.LBB85_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_13
.Lfunc_end85:
	.size	SetModesAndRefframe.44, .Lfunc_end85-SetModesAndRefframe.44
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.45  # -- Begin function LumaPrediction4x4Bi.45
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.45,@function
LumaPrediction4x4Bi.45:                 # @LumaPrediction4x4Bi.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$650160149, -84(%rbp)   # imm = 0x26C0A815
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB86_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB86_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB86_6
.LBB86_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB86_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB86_5:                               # %land.end
.LBB86_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB86_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB86_10
.LBB86_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB86_10
.LBB86_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB86_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB86_13
.LBB86_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB86_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB86_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB86_16
.LBB86_15:                              # %if.then
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB86_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB86_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB86_19
.LBB86_18:                              # %if.then39
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB86_19:                              # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB86_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB86_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB86_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_24:                              # %for.cond58
                                        #   Parent Loop BB86_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB86_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB86_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_24
.LBB86_27:                              # %for.end
                                        #   in Loop: Header=BB86_22 Depth=1
	jmp	.LBB86_28
.LBB86_28:                              # %for.inc96
                                        #   in Loop: Header=BB86_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_22
.LBB86_29:                              # %for.end98
	jmp	.LBB86_50
.LBB86_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB86_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB86_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_34:                              # %for.cond106
                                        #   Parent Loop BB86_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB86_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB86_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_34
.LBB86_37:                              # %for.end132
                                        #   in Loop: Header=BB86_32 Depth=1
	jmp	.LBB86_38
.LBB86_38:                              # %for.inc133
                                        #   in Loop: Header=BB86_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_32
.LBB86_39:                              # %for.end135
	jmp	.LBB86_49
.LBB86_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB86_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_43:                              # %for.cond141
                                        #   Parent Loop BB86_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB86_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB86_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_43
.LBB86_46:                              # %for.end167
                                        #   in Loop: Header=BB86_41 Depth=1
	jmp	.LBB86_47
.LBB86_47:                              # %for.inc168
                                        #   in Loop: Header=BB86_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_41
.LBB86_48:                              # %for.end170
	jmp	.LBB86_49
.LBB86_49:                              # %if.end171
	jmp	.LBB86_50
.LBB86_50:                              # %if.end172
	jmp	.LBB86_82
.LBB86_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB86_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB86_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_55:                              # %for.cond181
                                        #   Parent Loop BB86_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB86_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB86_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_55
.LBB86_58:                              # %for.end197
                                        #   in Loop: Header=BB86_53 Depth=1
	jmp	.LBB86_59
.LBB86_59:                              # %for.inc198
                                        #   in Loop: Header=BB86_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_53
.LBB86_60:                              # %for.end200
	jmp	.LBB86_81
.LBB86_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB86_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB86_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_65:                              # %for.cond209
                                        #   Parent Loop BB86_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB86_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB86_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_65
.LBB86_68:                              # %for.end222
                                        #   in Loop: Header=BB86_63 Depth=1
	jmp	.LBB86_69
.LBB86_69:                              # %for.inc223
                                        #   in Loop: Header=BB86_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_63
.LBB86_70:                              # %for.end225
	jmp	.LBB86_80
.LBB86_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB86_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB86_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB86_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB86_74:                              # %for.cond231
                                        #   Parent Loop BB86_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB86_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB86_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB86_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_74
.LBB86_77:                              # %for.end244
                                        #   in Loop: Header=BB86_72 Depth=1
	jmp	.LBB86_78
.LBB86_78:                              # %for.inc245
                                        #   in Loop: Header=BB86_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_72
.LBB86_79:                              # %for.end247
	jmp	.LBB86_80
.LBB86_80:                              # %if.end248
	jmp	.LBB86_81
.LBB86_81:                              # %if.end249
	jmp	.LBB86_82
.LBB86_82:                              # %if.end250
	cmpl	$650160149, -84(%rbp)   # imm = 0x26C0A815
	jne	.LBB86_84
.LBB86_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_83
.Lfunc_end86:
	.size	LumaPrediction4x4Bi.45, .Lfunc_end86-LumaPrediction4x4Bi.45
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.46  # -- Begin function writeReferenceFrame.46
	.p2align	4, 0x90
	.type	writeReferenceFrame.46,@function
writeReferenceFrame.46:                 # @writeReferenceFrame.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1835086589, -84(%rbp)  # imm = 0x6D6132FD
	movl	%edi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB87_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB87_7
.LBB87_6:                               # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB87_7:                               # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB87_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB87_18
.LBB87_9:                               # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB87_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB87_11:                              # %if.end21
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB87_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB87_15
.LBB87_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB87_15:                              # %if.end33
	jmp	.LBB87_17
.LBB87_16:                              # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB87_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB87_18:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1835086589, -84(%rbp)  # imm = 0x6D6132FD
	jne	.LBB87_20
.LBB87_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_19
.Lfunc_end87:
	.size	writeReferenceFrame.46, .Lfunc_end87-writeReferenceFrame.46
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.47         # -- Begin function B8Mode2Value.47
	.p2align	4, 0x90
	.type	B8Mode2Value.47,@function
B8Mode2Value.47:                        # @B8Mode2Value.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1337695962, -20(%rbp)  # imm = 0x4FBB9EDA
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB88_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_3
.LBB88_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB88_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1337695962, -20(%rbp)  # imm = 0x4FBB9EDA
	jne	.LBB88_5
.LBB88_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_4
.Lfunc_end88:
	.size	B8Mode2Value.47, .Lfunc_end88-B8Mode2Value.47
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.48  # -- Begin function ChromaPrediction4x4.48
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.48,@function
ChromaPrediction4x4.48:                 # @ChromaPrediction4x4.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$977471315, -68(%rbp)   # imm = 0x3A430753
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB89_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB89_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB89_6
.LBB89_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB89_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB89_5:                               # %land.end
.LBB89_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB89_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB89_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB89_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB89_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB89_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB89_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB89_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB89_15
.LBB89_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB89_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB89_16:                              # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB89_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB89_87
.LBB89_18:                              # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB89_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB89_21
.LBB89_20:                              # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB89_21:                              # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB89_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB89_24
.LBB89_23:                              # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB89_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB89_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB89_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_29:                              # %for.cond52
                                        #   Parent Loop BB89_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB89_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB89_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_29
.LBB89_32:                              # %for.end
                                        #   in Loop: Header=BB89_27 Depth=1
	jmp	.LBB89_33
.LBB89_33:                              # %for.inc99
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_27
.LBB89_34:                              # %for.end101
	jmp	.LBB89_55
.LBB89_35:                              # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB89_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_39:                              # %for.cond109
                                        #   Parent Loop BB89_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB89_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB89_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_39
.LBB89_42:                              # %for.end139
                                        #   in Loop: Header=BB89_37 Depth=1
	jmp	.LBB89_43
.LBB89_43:                              # %for.inc140
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_37
.LBB89_44:                              # %for.end142
	jmp	.LBB89_54
.LBB89_45:                              # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_48:                              # %for.cond148
                                        #   Parent Loop BB89_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB89_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB89_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_48
.LBB89_51:                              # %for.end178
                                        #   in Loop: Header=BB89_46 Depth=1
	jmp	.LBB89_52
.LBB89_52:                              # %for.inc179
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_46
.LBB89_53:                              # %for.end181
	jmp	.LBB89_54
.LBB89_54:                              # %if.end182
	jmp	.LBB89_55
.LBB89_55:                              # %if.end183
	jmp	.LBB89_87
.LBB89_56:                              # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB89_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_60:                              # %for.cond192
                                        #   Parent Loop BB89_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB89_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB89_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_60
.LBB89_63:                              # %for.end208
                                        #   in Loop: Header=BB89_58 Depth=1
	jmp	.LBB89_64
.LBB89_64:                              # %for.inc209
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_58
.LBB89_65:                              # %for.end211
	jmp	.LBB89_86
.LBB89_66:                              # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB89_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_70:                              # %for.cond220
                                        #   Parent Loop BB89_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB89_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB89_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_70
.LBB89_73:                              # %for.end233
                                        #   in Loop: Header=BB89_68 Depth=1
	jmp	.LBB89_74
.LBB89_74:                              # %for.inc234
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_68
.LBB89_75:                              # %for.end236
	jmp	.LBB89_85
.LBB89_76:                              # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB89_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_79:                              # %for.cond242
                                        #   Parent Loop BB89_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB89_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB89_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_79
.LBB89_82:                              # %for.end255
                                        #   in Loop: Header=BB89_77 Depth=1
	jmp	.LBB89_83
.LBB89_83:                              # %for.inc256
                                        #   in Loop: Header=BB89_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_77
.LBB89_84:                              # %for.end258
	jmp	.LBB89_85
.LBB89_85:                              # %if.end259
	jmp	.LBB89_86
.LBB89_86:                              # %if.end260
	jmp	.LBB89_87
.LBB89_87:                              # %if.end261
	cmpl	$977471315, -68(%rbp)   # imm = 0x3A430753
	jne	.LBB89_89
.LBB89_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_88
.Lfunc_end89:
	.size	ChromaPrediction4x4.48, .Lfunc_end89-ChromaPrediction4x4.48
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.49  # -- Begin function writeCoeff4x4_CAVLC.49
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.49,@function
writeCoeff4x4_CAVLC.49:                 # @writeCoeff4x4_CAVLC.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$240724512, -168(%rbp)  # imm = 0xE592A20
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB90_22
# %bb.1:                                # %entry
	movq	.LJTI90_0(,%rax,8), %rax
	jmpq	*%rax
.LBB90_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB90_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB90_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB90_6
.LBB90_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB90_7
.LBB90_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB90_7:                               # %if.end
	jmp	.LBB90_23
.LBB90_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB90_23
.LBB90_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB90_23
.LBB90_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB90_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB90_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB90_14
.LBB90_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB90_15
.LBB90_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB90_15:                              # %if.end67
	jmp	.LBB90_23
.LBB90_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB90_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB90_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB90_20
.LBB90_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB90_21
.LBB90_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB90_21:                              # %if.end93
	jmp	.LBB90_23
.LBB90_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB90_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB90_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB90_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB90_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB90_27
.LBB90_26:                              # %cond.false
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB90_27
.LBB90_27:                              # %cond.end
                                        #   in Loop: Header=BB90_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB90_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB90_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB90_29:                              # %land.end
                                        #   in Loop: Header=BB90_24 Depth=1
	testb	$1, %dl
	jne	.LBB90_30
	jmp	.LBB90_41
.LBB90_30:                              # %for.body
                                        #   in Loop: Header=BB90_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB90_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB90_24 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB90_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-104(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB90_33:                              # %if.end110
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB90_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB90_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$3, -28(%rbp)
.LBB90_36:                              # %if.end117
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_38
.LBB90_37:                              # %if.else118
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -28(%rbp)
.LBB90_38:                              # %if.end119
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB90_39:                              # %if.end121
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_40
.LBB90_40:                              # %for.inc
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_24
.LBB90_41:                              # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB90_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB90_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB90_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB90_46
.LBB90_45:                              # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB90_46:                              # %cond.end136
	movl	%eax, -88(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB90_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB90_49
.LBB90_48:                              # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB90_49:                              # %cond.end145
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB90_51
.LBB90_50:                              # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB90_51:                              # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB90_53
# %bb.52:                               # %if.then160
	movl	$0, -80(%rbp)
	jmp	.LBB90_60
.LBB90_53:                              # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB90_55
# %bb.54:                               # %if.then163
	movl	$1, -80(%rbp)
	jmp	.LBB90_59
.LBB90_55:                              # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB90_57
# %bb.56:                               # %if.then166
	movl	$2, -80(%rbp)
	jmp	.LBB90_58
.LBB90_57:                              # %if.else167
	movl	$3, -80(%rbp)
.LBB90_58:                              # %if.end168
	jmp	.LBB90_59
.LBB90_59:                              # %if.end169
	jmp	.LBB90_60
.LBB90_60:                              # %if.end170
	jmp	.LBB90_62
.LBB90_61:                              # %if.else171
	movl	$0, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB90_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB90_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB90_65
.LBB90_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB90_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB90_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB90_122
.LBB90_67:                              # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB90_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB90_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB90_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB90_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB90_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB90_72:                              # %if.end202
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB90_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB90_74:                              # %if.end205
                                        #   in Loop: Header=BB90_69 Depth=1
	jmp	.LBB90_75
.LBB90_75:                              # %for.inc206
                                        #   in Loop: Header=BB90_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_69
.LBB90_76:                              # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB90_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB90_78:                              # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB90_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB90_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB90_81:                              # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB90_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB90_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB90_85
.LBB90_84:                              # %if.else232
	movl	$0, -32(%rbp)
.LBB90_85:                              # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB90_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB90_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB90_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB90_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB90_91
.LBB90_90:                              # %if.else249
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB90_91:                              # %if.end252
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	$0, -144(%rbp)
.LBB90_92:                              # %if.end253
                                        #   in Loop: Header=BB90_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB90_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB90_95
.LBB90_94:                              # %if.else257
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB90_95:                              # %if.end259
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB90_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB90_97:                              # %if.end266
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB90_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB90_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	$2, -32(%rbp)
.LBB90_100:                             # %if.end273
                                        #   in Loop: Header=BB90_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB90_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_86
.LBB90_102:                             # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB90_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB90_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB90_106
.LBB90_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB90_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB90_107:                             # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB90_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB90_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB90_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB90_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB90_108 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB90_112
.LBB90_111:                             # %if.then318
	jmp	.LBB90_120
.LBB90_112:                             # %if.end319
                                        #   in Loop: Header=BB90_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB90_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB90_108 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB90_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	-96(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB90_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	$6, -32(%rbp)
.LBB90_116:                             # %if.end327
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-104(%rbp), %eax
	movl	-96(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -96(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB90_117:                             # %if.end341
                                        #   in Loop: Header=BB90_108 Depth=1
	jmp	.LBB90_118
.LBB90_118:                             # %for.inc342
                                        #   in Loop: Header=BB90_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_108
.LBB90_119:                             # %for.end344.loopexit
	jmp	.LBB90_120
.LBB90_120:                             # %for.end344
	jmp	.LBB90_121
.LBB90_121:                             # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB90_122:                             # %return
	movl	-164(%rbp), %ebx
	cmpl	$240724512, -168(%rbp)  # imm = 0xE592A20
	jne	.LBB90_124
.LBB90_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_123
.Lfunc_end90:
	.size	writeCoeff4x4_CAVLC.49, .Lfunc_end90-writeCoeff4x4_CAVLC.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI90_0:
	.quad	.LBB90_2
	.quad	.LBB90_8
	.quad	.LBB90_9
	.quad	.LBB90_22
	.quad	.LBB90_22
	.quad	.LBB90_22
	.quad	.LBB90_10
	.quad	.LBB90_16
                                        # -- End function
	.text
	.globl	writeMBLayer.50         # -- Begin function writeMBLayer.50
	.p2align	4, 0x90
	.type	writeMBLayer.50,@function
writeMBLayer.50:                        # @writeMBLayer.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$420285315, -100(%rbp)  # imm = 0x190D0B83
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB91_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB91_3
.LBB91_3:                               # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB91_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB91_9
.LBB91_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB91_8
.LBB91_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB91_8
.LBB91_8:                               # %cond.end14
.LBB91_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB91_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB91_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB91_24
.LBB91_12:                              # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB91_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB91_17
	jmp	.LBB91_18
.LBB91_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB91_18
	jmp	.LBB91_17
.LBB91_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB91_17
	jmp	.LBB91_18
.LBB91_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB91_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB91_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB91_23
.LBB91_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB91_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB91_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB91_23:                              # %if.end50
	jmp	.LBB91_24
.LBB91_24:                              # %if.end51
	jmp	.LBB91_25
.LBB91_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB91_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB91_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB91_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB91_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB91_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB91_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB91_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB91_35
.LBB91_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB91_38
.LBB91_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB91_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_39:                              # %if.end96
	jmp	.LBB91_40
.LBB91_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB91_43
.LBB91_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB91_89
.LBB91_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB91_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB91_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB91_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB91_49
.LBB91_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB91_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB91_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB91_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB91_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB91_55
.LBB91_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB91_58
.LBB91_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB91_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_59:                              # %if.end198
	jmp	.LBB91_60
.LBB91_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB91_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB91_64
.LBB91_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_64:                              # %if.end226
	jmp	.LBB91_88
.LBB91_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB91_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB91_76
.LBB91_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB91_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB91_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB91_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_72:                              # %if.end281
	jmp	.LBB91_73
.LBB91_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB91_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB91_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB91_87
.LBB91_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB91_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB91_77 Depth=1
	movl	$0, -44(%rbp)
.LBB91_79:                              # %for.cond310
                                        #   Parent Loop BB91_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB91_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB91_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB91_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_79
.LBB91_82:                              # %for.end
                                        #   in Loop: Header=BB91_77 Depth=1
	jmp	.LBB91_83
.LBB91_83:                              # %for.inc322
                                        #   in Loop: Header=BB91_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB91_77
.LBB91_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB91_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB91_86:                              # %if.end345
	jmp	.LBB91_87
.LBB91_87:                              # %if.end346
	jmp	.LBB91_88
.LBB91_88:                              # %if.end347
	jmp	.LBB91_89
.LBB91_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB91_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB91_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB91_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB91_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB91_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB91_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB91_98
.LBB91_97:                              # %if.else380
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_98:                              # %if.end382
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB91_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB91_101
.LBB91_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB91_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB91_101:                             # %lor.end415
                                        #   in Loop: Header=BB91_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB91_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_94
.LBB91_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB91_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB91_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB91_114
.LBB91_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB91_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB91_110
.LBB91_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB91_113
.LBB91_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB91_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB91_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB91_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB91_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_120
.LBB91_117:                             # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB91_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB91_119:                             # %if.end483
	jmp	.LBB91_120
.LBB91_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB91_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB91_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB91_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB91_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB91_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB91_129
.LBB91_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB91_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB91_128:                             # %if.end516
	jmp	.LBB91_129
.LBB91_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$420285315, -100(%rbp)  # imm = 0x190D0B83
	jne	.LBB91_131
.LBB91_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_130
.Lfunc_end91:
	.size	writeMBLayer.50, .Lfunc_end91-writeMBLayer.50
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.51 # -- Begin function proceed2nextMacroblock.51
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.51,@function
proceed2nextMacroblock.51:              # @proceed2nextMacroblock.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$587391458, -28(%rbp)   # imm = 0x2302E1E2
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB92_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB92_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB92_9
.LBB92_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB92_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB92_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB92_7
.LBB92_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB92_7:                               # %if.end
	jmp	.LBB92_8
.LBB92_8:                               # %if.end48
	jmp	.LBB92_9
.LBB92_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB92_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB92_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB92_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB92_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB92_16
.LBB92_15:                              # %if.else86
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB92_16:                              # %if.end94
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB92_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB92_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB92_20
.LBB92_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB92_21
.LBB92_20:                              # %if.then107
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB92_22
.LBB92_21:                              # %if.else114
                                        #   in Loop: Header=BB92_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB92_22:                              # %if.end121
                                        #   in Loop: Header=BB92_12 Depth=1
	jmp	.LBB92_23
.LBB92_23:                              # %if.end122
                                        #   in Loop: Header=BB92_12 Depth=1
	jmp	.LBB92_24
.LBB92_24:                              # %for.inc
                                        #   in Loop: Header=BB92_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_12
.LBB92_25:                              # %for.end
	jmp	.LBB92_34
.LBB92_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB92_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB92_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB92_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB92_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB92_32
.LBB92_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB92_32:                              # %if.end155
	jmp	.LBB92_33
.LBB92_33:                              # %if.end156
	jmp	.LBB92_34
.LBB92_34:                              # %if.end157
	jmp	.LBB92_35
.LBB92_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB92_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB92_38
.LBB92_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB92_38:                              # %if.end167
	cmpl	$587391458, -28(%rbp)   # imm = 0x2302E1E2
	jne	.LBB92_40
.LBB92_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_39
.Lfunc_end92:
	.size	proceed2nextMacroblock.51, .Lfunc_end92-proceed2nextMacroblock.51
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.52    # -- Begin function LumaPrediction4x4.52
	.p2align	4, 0x90
	.type	LumaPrediction4x4.52,@function
LumaPrediction4x4.52:                   # @LumaPrediction4x4.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1831596235, -100(%rbp) # imm = 0x6D2BF0CB
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB93_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB93_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB93_6
.LBB93_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB93_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB93_5:                               # %land.end
.LBB93_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB93_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB93_10
.LBB93_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_10
.LBB93_10:                              # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB93_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB93_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB93_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB93_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB93_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB93_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB93_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_19
.LBB93_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB93_20:                              # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB93_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB93_23
.LBB93_22:                              # %if.then45
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB93_23:                              # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB93_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB93_26
.LBB93_25:                              # %if.then64
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB93_26:                              # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB93_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB93_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB93_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_31:                              # %for.cond85
                                        #   Parent Loop BB93_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB93_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB93_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_31
.LBB93_34:                              # %for.end
                                        #   in Loop: Header=BB93_29 Depth=1
	jmp	.LBB93_35
.LBB93_35:                              # %for.inc125
                                        #   in Loop: Header=BB93_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_29
.LBB93_36:                              # %for.end127
	jmp	.LBB93_57
.LBB93_37:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB93_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB93_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_41:                              # %for.cond135
                                        #   Parent Loop BB93_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB93_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB93_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_41
.LBB93_44:                              # %for.end161
                                        #   in Loop: Header=BB93_39 Depth=1
	jmp	.LBB93_45
.LBB93_45:                              # %for.inc162
                                        #   in Loop: Header=BB93_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_39
.LBB93_46:                              # %for.end164
	jmp	.LBB93_56
.LBB93_47:                              # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB93_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_50:                              # %for.cond170
                                        #   Parent Loop BB93_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB93_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB93_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_50
.LBB93_53:                              # %for.end196
                                        #   in Loop: Header=BB93_48 Depth=1
	jmp	.LBB93_54
.LBB93_54:                              # %for.inc197
                                        #   in Loop: Header=BB93_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_48
.LBB93_55:                              # %for.end199
	jmp	.LBB93_56
.LBB93_56:                              # %if.end200
	jmp	.LBB93_57
.LBB93_57:                              # %if.end201
	jmp	.LBB93_89
.LBB93_58:                              # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB93_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB93_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_62:                              # %for.cond210
                                        #   Parent Loop BB93_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB93_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB93_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_62
.LBB93_65:                              # %for.end226
                                        #   in Loop: Header=BB93_60 Depth=1
	jmp	.LBB93_66
.LBB93_66:                              # %for.inc227
                                        #   in Loop: Header=BB93_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_60
.LBB93_67:                              # %for.end229
	jmp	.LBB93_88
.LBB93_68:                              # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB93_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB93_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_72:                              # %for.cond238
                                        #   Parent Loop BB93_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB93_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB93_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_72
.LBB93_75:                              # %for.end251
                                        #   in Loop: Header=BB93_70 Depth=1
	jmp	.LBB93_76
.LBB93_76:                              # %for.inc252
                                        #   in Loop: Header=BB93_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_70
.LBB93_77:                              # %for.end254
	jmp	.LBB93_87
.LBB93_78:                              # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB93_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB93_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_81:                              # %for.cond260
                                        #   Parent Loop BB93_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB93_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB93_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB93_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_81
.LBB93_84:                              # %for.end273
                                        #   in Loop: Header=BB93_79 Depth=1
	jmp	.LBB93_85
.LBB93_85:                              # %for.inc274
                                        #   in Loop: Header=BB93_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_79
.LBB93_86:                              # %for.end276
	jmp	.LBB93_87
.LBB93_87:                              # %if.end277
	jmp	.LBB93_88
.LBB93_88:                              # %if.end278
	jmp	.LBB93_89
.LBB93_89:                              # %if.end279
	cmpl	$1831596235, -100(%rbp) # imm = 0x6D2BF0CB
	jne	.LBB93_91
.LBB93_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_90
.Lfunc_end93:
	.size	LumaPrediction4x4.52, .Lfunc_end93-LumaPrediction4x4.52
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.53  # -- Begin function writeReferenceFrame.53
	.p2align	4, 0x90
	.type	writeReferenceFrame.53,@function
writeReferenceFrame.53:                 # @writeReferenceFrame.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1597549459, -80(%rbp)  # imm = 0x5F38AB93
	movl	%edi, -68(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB94_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB94_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB94_4
.LBB94_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB94_4
.LBB94_4:                               # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB94_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB94_7
.LBB94_6:                               # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB94_7:                               # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB94_18
.LBB94_9:                               # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB94_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB94_11:                              # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB94_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB94_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB94_15
.LBB94_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB94_15:                              # %if.end33
	jmp	.LBB94_17
.LBB94_16:                              # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB94_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB94_18:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$1597549459, -80(%rbp)  # imm = 0x5F38AB93
	jne	.LBB94_20
.LBB94_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_19
.Lfunc_end94:
	.size	writeReferenceFrame.53, .Lfunc_end94-writeReferenceFrame.53
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.54 # -- Begin function OneComponentChromaPrediction4x4.54
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.54,@function
OneComponentChromaPrediction4x4.54:     # @OneComponentChromaPrediction4x4.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$858184417, -112(%rbp)  # imm = 0x3326DAE1
	movq	%rdi, -128(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -88(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB95_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB95_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB95_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB95_6
.LBB95_5:                               # %if.else
	movl	$2, -44(%rbp)
.LBB95_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_8
.LBB95_7:                               # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_8:                               # %if.end13
	movl	-88(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB95_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB95_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB95_9 Depth=1
	movl	$0, -28(%rbp)
.LBB95_11:                              # %for.cond20
                                        #   Parent Loop BB95_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB95_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB95_15
.LBB95_14:                              # %cond.false
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB95_15:                              # %cond.end
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_21
.LBB95_17:                              # %cond.false65
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB95_20
.LBB95_19:                              # %cond.false74
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB95_20:                              # %cond.end76
                                        #   in Loop: Header=BB95_11 Depth=2
.LBB95_21:                              # %cond.end78
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB95_24
.LBB95_23:                              # %cond.false84
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB95_24:                              # %cond.end86
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_30
.LBB95_26:                              # %cond.false91
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB95_29
.LBB95_28:                              # %cond.false96
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB95_29:                              # %cond.end98
                                        #   in Loop: Header=BB95_11 Depth=2
.LBB95_30:                              # %cond.end100
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB95_33
.LBB95_32:                              # %cond.false111
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB95_33:                              # %cond.end114
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_39
.LBB95_35:                              # %cond.false119
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB95_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB95_38
.LBB95_37:                              # %cond.false129
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB95_38:                              # %cond.end132
                                        #   in Loop: Header=BB95_11 Depth=2
.LBB95_39:                              # %cond.end134
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB95_42
.LBB95_41:                              # %cond.false141
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB95_42:                              # %cond.end144
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB95_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB95_48
.LBB95_44:                              # %cond.false149
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB95_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB95_47
.LBB95_46:                              # %cond.false155
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB95_47:                              # %cond.end158
                                        #   in Loop: Header=BB95_11 Depth=2
.LBB95_48:                              # %cond.end160
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	imull	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-72(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-80(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB95_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_11
.LBB95_50:                              # %for.end
                                        #   in Loop: Header=BB95_9 Depth=1
	jmp	.LBB95_51
.LBB95_51:                              # %for.inc198
                                        #   in Loop: Header=BB95_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB95_9
.LBB95_52:                              # %for.end200
	cmpl	$858184417, -112(%rbp)  # imm = 0x3326DAE1
	jne	.LBB95_54
.LBB95_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_53
.Lfunc_end95:
	.size	OneComponentChromaPrediction4x4.54, .Lfunc_end95-OneComponentChromaPrediction4x4.54
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.55 # -- Begin function IntraChromaPrediction.55
	.p2align	4, 0x90
	.type	IntraChromaPrediction.55,@function
IntraChromaPrediction.55:               # @IntraChromaPrediction.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1873430196, -164(%rbp) # imm = 0x6FAA46B4
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_4:                               # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB96_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB96_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB96_8
.LBB96_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB96_8
.LBB96_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB96_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB96_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB96_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB96_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB96_13
.LBB96_12:                              # %cond.false32
                                        #   in Loop: Header=BB96_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB96_13
.LBB96_13:                              # %cond.end33
                                        #   in Loop: Header=BB96_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB96_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_9
.LBB96_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB96_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB96_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB96_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB96_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB96_20
.LBB96_19:                              # %cond.false57
                                        #   in Loop: Header=BB96_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB96_20
.LBB96_20:                              # %cond.end58
                                        #   in Loop: Header=BB96_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB96_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_16
.LBB96_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB96_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB96_25
.LBB96_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB96_25
.LBB96_25:                              # %cond.end75
	movl	%eax, -108(%rbp)
.LBB96_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB96_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB96_28:                              # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB96_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB96_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB96_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB96_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB96_34
# %bb.33:                               # %if.then88
	movl	-108(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB96_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB96_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_37 Depth 2
                                        #       Child Loop BB96_39 Depth 3
                                        #         Child Loop BB96_104 Depth 4
                                        #         Child Loop BB96_110 Depth 4
                                        #         Child Loop BB96_85 Depth 4
                                        #         Child Loop BB96_91 Depth 4
                                        #         Child Loop BB96_66 Depth 4
                                        #         Child Loop BB96_72 Depth 4
                                        #         Child Loop BB96_44 Depth 4
                                        #         Child Loop BB96_50 Depth 4
                                        #         Child Loop BB96_125 Depth 4
                                        #           Child Loop BB96_127 Depth 5
                                        #     Child Loop BB96_138 Depth 2
                                        #     Child Loop BB96_142 Depth 2
                                        #       Child Loop BB96_144 Depth 3
                                        #     Child Loop BB96_153 Depth 2
                                        #     Child Loop BB96_157 Depth 2
                                        #       Child Loop BB96_159 Depth 3
                                        #     Child Loop BB96_170 Depth 2
                                        #     Child Loop BB96_174 Depth 2
                                        #     Child Loop BB96_178 Depth 2
                                        #       Child Loop BB96_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB96_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB96_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB96_37:                              # %for.cond95
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_39 Depth 3
                                        #         Child Loop BB96_104 Depth 4
                                        #         Child Loop BB96_110 Depth 4
                                        #         Child Loop BB96_85 Depth 4
                                        #         Child Loop BB96_91 Depth 4
                                        #         Child Loop BB96_66 Depth 4
                                        #         Child Loop BB96_72 Depth 4
                                        #         Child Loop BB96_44 Depth 4
                                        #         Child Loop BB96_50 Depth 4
                                        #         Child Loop BB96_125 Depth 4
                                        #           Child Loop BB96_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB96_37 Depth=2
	movl	$0, -88(%rbp)
.LBB96_39:                              # %for.cond99
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_104 Depth 4
                                        #         Child Loop BB96_110 Depth 4
                                        #         Child Loop BB96_85 Depth 4
                                        #         Child Loop BB96_91 Depth 4
                                        #         Child Loop BB96_66 Depth 4
                                        #         Child Loop BB96_72 Depth 4
                                        #         Child Loop BB96_44 Depth 4
                                        #         Child Loop BB96_50 Depth 4
                                        #         Child Loop BB96_125 Depth 4
                                        #           Child Loop BB96_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB96_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB96_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB96_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB96_39 Depth=3
	movq	.LJTI96_0(,%rax,8), %rax
	jmpq	*%rax
.LBB96_42:                              # %sw.bb
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_44:                              # %for.cond124
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB96_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB96_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_44
.LBB96_47:                              # %for.end138
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_48
.LBB96_48:                              # %if.end139
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB96_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_50:                              # %for.cond143
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB96_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB96_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_50
.LBB96_53:                              # %for.end162
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_54
.LBB96_54:                              # %if.end163
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB96_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_63
.LBB96_57:                              # %if.else
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_62
.LBB96_59:                              # %if.else174
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB96_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB96_61:                              # %if.end180
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_62
.LBB96_62:                              # %if.end181
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_63
.LBB96_63:                              # %if.end182
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_124
.LBB96_64:                              # %sw.bb183
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_66:                              # %for.cond186
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB96_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB96_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_66
.LBB96_69:                              # %for.end202
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_77
.LBB96_70:                              # %if.else203
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB96_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_72:                              # %for.cond207
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB96_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB96_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_72
.LBB96_75:                              # %for.end226
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_76
.LBB96_76:                              # %if.end227
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_77
.LBB96_77:                              # %if.end228
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_82
.LBB96_79:                              # %if.else233
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB96_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB96_81:                              # %if.end239
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_82
.LBB96_82:                              # %if.end240
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_124
.LBB96_83:                              # %sw.bb241
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB96_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_85:                              # %for.cond245
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB96_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB96_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_85
.LBB96_88:                              # %for.end264
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_96
.LBB96_89:                              # %if.else265
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_91:                              # %for.cond268
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB96_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB96_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_91
.LBB96_94:                              # %for.end284
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_95
.LBB96_95:                              # %if.end285
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_96
.LBB96_96:                              # %if.end286
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB96_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_101
.LBB96_98:                              # %if.else292
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB96_100:                             # %if.end297
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_101
.LBB96_101:                             # %if.end298
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_124
.LBB96_102:                             # %sw.bb299
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_104:                             # %for.cond302
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB96_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB96_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_104
.LBB96_107:                             # %for.end318
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_108
.LBB96_108:                             # %if.end319
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB96_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_110:                             # %for.cond323
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB96_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB96_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_110
.LBB96_113:                             # %for.end342
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_114
.LBB96_114:                             # %if.end343
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB96_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_123
.LBB96_117:                             # %if.else352
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB96_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB96_122
.LBB96_119:                             # %if.else357
                                        #   in Loop: Header=BB96_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB96_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB96_121:                             # %if.end363
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_122
.LBB96_122:                             # %if.end364
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_123
.LBB96_123:                             # %if.end365
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_124
.LBB96_124:                             # %sw.epilog
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_125:                             # %for.cond366
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB96_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB96_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_127:                             # %for.cond371
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_37 Depth=2
                                        #       Parent Loop BB96_39 Depth=3
                                        #         Parent Loop BB96_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB96_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB96_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_127
.LBB96_130:                             # %for.end386
                                        #   in Loop: Header=BB96_125 Depth=4
	jmp	.LBB96_131
.LBB96_131:                             # %for.inc387
                                        #   in Loop: Header=BB96_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_125
.LBB96_132:                             # %for.end389
                                        #   in Loop: Header=BB96_39 Depth=3
	jmp	.LBB96_133
.LBB96_133:                             # %for.inc390
                                        #   in Loop: Header=BB96_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB96_39
.LBB96_134:                             # %for.end392
                                        #   in Loop: Header=BB96_37 Depth=2
	jmp	.LBB96_135
.LBB96_135:                             # %for.inc393
                                        #   in Loop: Header=BB96_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB96_37
.LBB96_136:                             # %for.end395
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB96_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	$0, -4(%rbp)
.LBB96_138:                             # %for.cond398
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB96_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB96_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_138
.LBB96_141:                             # %for.end414
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	$0, -4(%rbp)
.LBB96_142:                             # %for.cond415
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB96_142 Depth=2
	movl	$0, -8(%rbp)
.LBB96_144:                             # %for.cond419
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB96_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB96_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_144
.LBB96_147:                             # %for.end436
                                        #   in Loop: Header=BB96_142 Depth=2
	jmp	.LBB96_148
.LBB96_148:                             # %for.inc437
                                        #   in Loop: Header=BB96_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_142
.LBB96_149:                             # %for.end439
                                        #   in Loop: Header=BB96_35 Depth=1
	jmp	.LBB96_150
.LBB96_150:                             # %if.end440
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB96_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB96_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	$0, -4(%rbp)
.LBB96_153:                             # %for.cond447
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB96_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB96_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_153
.LBB96_156:                             # %for.end468
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	$0, -4(%rbp)
.LBB96_157:                             # %for.cond469
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB96_157 Depth=2
	movl	$0, -8(%rbp)
.LBB96_159:                             # %for.cond473
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB96_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB96_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_159
.LBB96_162:                             # %for.end490
                                        #   in Loop: Header=BB96_157 Depth=2
	jmp	.LBB96_163
.LBB96_163:                             # %for.inc491
                                        #   in Loop: Header=BB96_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_157
.LBB96_164:                             # %for.end493
                                        #   in Loop: Header=BB96_35 Depth=1
	jmp	.LBB96_165
.LBB96_165:                             # %if.end494
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB96_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB96_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB96_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB96_35 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB96_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB96_170:                             # %for.cond519
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB96_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB96_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB96_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_170
.LBB96_173:                             # %for.end540
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB96_174:                             # %for.cond556
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB96_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB96_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB96_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_174
.LBB96_177:                             # %for.end577
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB96_178:                             # %for.cond606
                                        #   Parent Loop BB96_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB96_178 Depth=2
	movl	$0, -4(%rbp)
.LBB96_180:                             # %for.cond610
                                        #   Parent Loop BB96_35 Depth=1
                                        #     Parent Loop BB96_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB96_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB96_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB96_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB96_184
.LBB96_183:                             # %cond.false630
                                        #   in Loop: Header=BB96_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB96_184:                             # %cond.end643
                                        #   in Loop: Header=BB96_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB96_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB96_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB96_190
.LBB96_186:                             # %cond.false648
                                        #   in Loop: Header=BB96_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB96_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB96_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB96_189
.LBB96_188:                             # %cond.false666
                                        #   in Loop: Header=BB96_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB96_189:                             # %cond.end679
                                        #   in Loop: Header=BB96_180 Depth=3
.LBB96_190:                             # %cond.end681
                                        #   in Loop: Header=BB96_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB96_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_180
.LBB96_192:                             # %for.end694
                                        #   in Loop: Header=BB96_178 Depth=2
	jmp	.LBB96_193
.LBB96_193:                             # %for.inc695
                                        #   in Loop: Header=BB96_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_178
.LBB96_194:                             # %for.end697
                                        #   in Loop: Header=BB96_35 Depth=1
	jmp	.LBB96_195
.LBB96_195:                             # %if.end698
                                        #   in Loop: Header=BB96_35 Depth=1
	jmp	.LBB96_196
.LBB96_196:                             # %for.inc699
                                        #   in Loop: Header=BB96_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB96_35
.LBB96_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB96_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB96_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB96_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB96_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_199
.LBB96_202:                             # %for.end712
	movl	$0, -40(%rbp)
.LBB96_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_219 Depth 2
                                        #       Child Loop BB96_221 Depth 3
                                        #         Child Loop BB96_223 Depth 4
                                        #           Child Loop BB96_225 Depth 5
                                        #             Child Loop BB96_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB96_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB96_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB96_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB96_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB96_203 Depth=1
	jmp	.LBB96_241
.LBB96_207:                             # %if.end723
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB96_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB96_217
.LBB96_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB96_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB96_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB96_217
.LBB96_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB96_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB96_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB96_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB96_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB96_203 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB96_218
.LBB96_217:                             # %if.then749
                                        #   in Loop: Header=BB96_203 Depth=1
	jmp	.LBB96_241
.LBB96_218:                             # %if.end750
                                        #   in Loop: Header=BB96_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB96_219:                             # %for.cond751
                                        #   Parent Loop BB96_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_221 Depth 3
                                        #         Child Loop BB96_223 Depth 4
                                        #           Child Loop BB96_225 Depth 5
                                        #             Child Loop BB96_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB96_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB96_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB96_221:                             # %for.cond757
                                        #   Parent Loop BB96_203 Depth=1
                                        #     Parent Loop BB96_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_223 Depth 4
                                        #           Child Loop BB96_225 Depth 5
                                        #             Child Loop BB96_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB96_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB96_221 Depth=3
	movl	$0, -48(%rbp)
.LBB96_223:                             # %for.cond761
                                        #   Parent Loop BB96_203 Depth=1
                                        #     Parent Loop BB96_219 Depth=2
                                        #       Parent Loop BB96_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB96_225 Depth 5
                                        #             Child Loop BB96_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB96_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB96_225:                             # %for.cond765
                                        #   Parent Loop BB96_203 Depth=1
                                        #     Parent Loop BB96_219 Depth=2
                                        #       Parent Loop BB96_221 Depth=3
                                        #         Parent Loop BB96_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB96_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB96_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_227:                             # %for.cond770
                                        #   Parent Loop BB96_203 Depth=1
                                        #     Parent Loop BB96_219 Depth=2
                                        #       Parent Loop BB96_221 Depth=3
                                        #         Parent Loop BB96_223 Depth=4
                                        #           Parent Loop BB96_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB96_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB96_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB96_227
.LBB96_230:                             # %for.end803
                                        #   in Loop: Header=BB96_225 Depth=5
	jmp	.LBB96_231
.LBB96_231:                             # %for.inc804
                                        #   in Loop: Header=BB96_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_225
.LBB96_232:                             # %for.end806
                                        #   in Loop: Header=BB96_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB96_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB96_223
.LBB96_234:                             # %for.end810
                                        #   in Loop: Header=BB96_221 Depth=3
	jmp	.LBB96_235
.LBB96_235:                             # %for.inc811
                                        #   in Loop: Header=BB96_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB96_221
.LBB96_236:                             # %for.end813
                                        #   in Loop: Header=BB96_219 Depth=2
	jmp	.LBB96_237
.LBB96_237:                             # %for.inc814
                                        #   in Loop: Header=BB96_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB96_219
.LBB96_238:                             # %for.end816
                                        #   in Loop: Header=BB96_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB96_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB96_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB96_240:                             # %if.end820
                                        #   in Loop: Header=BB96_203 Depth=1
	jmp	.LBB96_241
.LBB96_241:                             # %for.inc821
                                        #   in Loop: Header=BB96_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB96_203
.LBB96_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB96_243:                             # %if.end824
	cmpl	$1873430196, -164(%rbp) # imm = 0x6FAA46B4
	jne	.LBB96_245
.LBB96_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_244
.Lfunc_end96:
	.size	IntraChromaPrediction.55, .Lfunc_end96-IntraChromaPrediction.55
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI96_0:
	.quad	.LBB96_42
	.quad	.LBB96_64
	.quad	.LBB96_83
	.quad	.LBB96_102
                                        # -- End function
	.text
	.globl	write_terminating_bit.56 # -- Begin function write_terminating_bit.56
	.p2align	4, 0x90
	.type	write_terminating_bit.56,@function
write_terminating_bit.56:               # @write_terminating_bit.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1950547511, -8(%rbp)   # imm = 0x7442FE37
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1950547511, -8(%rbp)   # imm = 0x7442FE37
	jne	.LBB97_2
.LBB97_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_1
.Lfunc_end97:
	.size	write_terminating_bit.56, .Lfunc_end97-write_terminating_bit.56
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.57    # -- Begin function writeLumaCoeff8x8.57
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.57,@function
writeLumaCoeff8x8.57:                   # @writeLumaCoeff8x8.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1417703205, -36(%rbp)  # imm = 0x54806F25
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	jmp	.LBB98_2
.LBB98_2:                               # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB98_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB98_15
.LBB98_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB98_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB98_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB98_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB98_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB98_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB98_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB98_10
.LBB98_9:                               # %cond.false
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB98_10:                              # %cond.end
                                        #   in Loop: Header=BB98_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_12
.LBB98_11:                              # %if.else
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_12:                              # %if.end17
                                        #   in Loop: Header=BB98_5 Depth=1
	jmp	.LBB98_13
.LBB98_13:                              # %for.inc
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_5
.LBB98_14:                              # %for.end
	jmp	.LBB98_19
.LBB98_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB98_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_18
.LBB98_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_18:                              # %if.end27
	jmp	.LBB98_19
.LBB98_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1417703205, -36(%rbp)  # imm = 0x54806F25
	jne	.LBB98_21
.LBB98_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_20
.Lfunc_end98:
	.size	writeLumaCoeff8x8.57, .Lfunc_end98-writeLumaCoeff8x8.57
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.58 # -- Begin function writeLumaCoeff8x8_CABAC.58
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.58,@function
writeLumaCoeff8x8_CABAC.58:             # @writeLumaCoeff8x8_CABAC.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$350023572, -60(%rbp)   # imm = 0x14DCEF94
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB99_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB99_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB99_3:                               # %land.end
                                        #   in Loop: Header=BB99_1 Depth=1
	testb	$1, %al
	jne	.LBB99_4
	jmp	.LBB99_12
.LBB99_4:                               # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB99_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB99_7
.LBB99_6:                               # %cond.false
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB99_7:                               # %cond.end
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB99_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB99_10
.LBB99_9:                               # %if.else
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB99_10:                              # %if.end
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_1
.LBB99_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$350023572, -60(%rbp)   # imm = 0x14DCEF94
	jne	.LBB99_14
.LBB99_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_13
.Lfunc_end99:
	.size	writeLumaCoeff8x8_CABAC.58, .Lfunc_end99-writeLumaCoeff8x8_CABAC.58
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.59 # -- Begin function proceed2nextMacroblock.59
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.59,@function
proceed2nextMacroblock.59:              # @proceed2nextMacroblock.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$711953900, -28(%rbp)   # imm = 0x2A6F8DEC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB100_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB100_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB100_9
.LBB100_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB100_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB100_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB100_7
.LBB100_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB100_7:                              # %if.end
	jmp	.LBB100_8
.LBB100_8:                              # %if.end48
	jmp	.LBB100_9
.LBB100_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB100_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB100_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB100_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB100_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB100_16
.LBB100_15:                             # %if.else86
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB100_16:                             # %if.end94
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB100_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB100_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB100_20
.LBB100_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_21
.LBB100_20:                             # %if.then107
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB100_22
.LBB100_21:                             # %if.else114
                                        #   in Loop: Header=BB100_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB100_22:                             # %if.end121
                                        #   in Loop: Header=BB100_12 Depth=1
	jmp	.LBB100_23
.LBB100_23:                             # %if.end122
                                        #   in Loop: Header=BB100_12 Depth=1
	jmp	.LBB100_24
.LBB100_24:                             # %for.inc
                                        #   in Loop: Header=BB100_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_12
.LBB100_25:                             # %for.end
	jmp	.LBB100_34
.LBB100_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB100_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB100_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB100_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB100_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB100_32
.LBB100_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB100_32:                             # %if.end155
	jmp	.LBB100_33
.LBB100_33:                             # %if.end156
	jmp	.LBB100_34
.LBB100_34:                             # %if.end157
	jmp	.LBB100_35
.LBB100_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB100_38
.LBB100_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB100_38:                             # %if.end167
	cmpl	$711953900, -28(%rbp)   # imm = 0x2A6F8DEC
	jne	.LBB100_40
.LBB100_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_39
.Lfunc_end100:
	.size	proceed2nextMacroblock.59, .Lfunc_end100-proceed2nextMacroblock.59
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.60 # -- Begin function LumaResidualCoding8x8.60
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.60,@function
LumaResidualCoding8x8.60:               # @LumaResidualCoding8x8.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1182171445, -124(%rbp) # imm = 0x46768135
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB101_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB101_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB101_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB101_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB101_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_8 Depth 2
                                        #       Child Loop BB101_11 Depth 3
                                        #         Child Loop BB101_13 Depth 4
                                        #       Child Loop BB101_19 Depth 3
                                        #         Child Loop BB101_21 Depth 4
                                        #       Child Loop BB101_29 Depth 3
                                        #         Child Loop BB101_31 Depth 4
                                        #       Child Loop BB101_40 Depth 3
                                        #         Child Loop BB101_42 Depth 4
                                        #       Child Loop BB101_57 Depth 3
                                        #         Child Loop BB101_59 Depth 4
                                        #       Child Loop BB101_67 Depth 3
                                        #         Child Loop BB101_69 Depth 4
                                        #       Child Loop BB101_84 Depth 3
                                        #         Child Loop BB101_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB101_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB101_8:                              # %for.cond9
                                        #   Parent Loop BB101_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_11 Depth 3
                                        #         Child Loop BB101_13 Depth 4
                                        #       Child Loop BB101_19 Depth 3
                                        #         Child Loop BB101_21 Depth 4
                                        #       Child Loop BB101_29 Depth 3
                                        #         Child Loop BB101_31 Depth 4
                                        #       Child Loop BB101_40 Depth 3
                                        #         Child Loop BB101_42 Depth 4
                                        #       Child Loop BB101_57 Depth 3
                                        #         Child Loop BB101_59 Depth 4
                                        #       Child Loop BB101_67 Depth 3
                                        #         Child Loop BB101_69 Depth 4
                                        #       Child Loop BB101_84 Depth 3
                                        #         Child Loop BB101_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB101_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB101_11:                             # %for.cond16
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB101_11 Depth=3
	movl	$0, -12(%rbp)
.LBB101_13:                             # %for.cond20
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB101_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB101_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_13
.LBB101_16:                             # %for.end
                                        #   in Loop: Header=BB101_11 Depth=3
	jmp	.LBB101_17
.LBB101_17:                             # %for.inc37
                                        #   in Loop: Header=BB101_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_11
.LBB101_18:                             # %for.end39
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB101_19:                             # %for.cond41
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB101_19 Depth=3
	movl	$0, -12(%rbp)
.LBB101_21:                             # %for.cond45
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB101_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB101_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_21
.LBB101_24:                             # %for.end65
                                        #   in Loop: Header=BB101_19 Depth=3
	jmp	.LBB101_25
.LBB101_25:                             # %for.inc66
                                        #   in Loop: Header=BB101_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_19
.LBB101_26:                             # %for.end68
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_27
.LBB101_27:                             # %if.end69
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB101_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	$0, -16(%rbp)
.LBB101_29:                             # %for.cond74
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB101_29 Depth=3
	movl	$0, -12(%rbp)
.LBB101_31:                             # %for.cond78
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB101_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB101_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_31
.LBB101_34:                             # %for.end98
                                        #   in Loop: Header=BB101_29 Depth=3
	jmp	.LBB101_35
.LBB101_35:                             # %for.inc99
                                        #   in Loop: Header=BB101_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_29
.LBB101_36:                             # %for.end101
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_37
.LBB101_37:                             # %if.end102
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB101_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB101_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	$0, -16(%rbp)
.LBB101_40:                             # %for.cond108
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB101_40 Depth=3
	movl	$0, -12(%rbp)
.LBB101_42:                             # %for.cond112
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB101_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB101_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_42
.LBB101_45:                             # %for.end137
                                        #   in Loop: Header=BB101_40 Depth=3
	jmp	.LBB101_46
.LBB101_46:                             # %for.inc138
                                        #   in Loop: Header=BB101_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_40
.LBB101_47:                             # %for.end140
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB101_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB101_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB101_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB101_52
.LBB101_51:                             # %if.else
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB101_52:                             # %if.end151
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB101_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB101_54:                             # %if.end157
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_55
.LBB101_55:                             # %if.end158
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_65
.LBB101_56:                             # %if.else159
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	$0, -16(%rbp)
.LBB101_57:                             # %for.cond160
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB101_57 Depth=3
	movl	$0, -12(%rbp)
.LBB101_59:                             # %for.cond164
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB101_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB101_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_59
.LBB101_62:                             # %for.end193
                                        #   in Loop: Header=BB101_57 Depth=3
	jmp	.LBB101_63
.LBB101_63:                             # %for.inc194
                                        #   in Loop: Header=BB101_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_57
.LBB101_64:                             # %for.end196
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_65
.LBB101_65:                             # %if.end197
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_95
.LBB101_66:                             # %if.else198
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	$0, -16(%rbp)
.LBB101_67:                             # %for.cond199
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB101_67 Depth=3
	movl	$0, -12(%rbp)
.LBB101_69:                             # %for.cond203
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB101_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB101_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB101_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB101_73
.LBB101_72:                             # %if.else300
                                        #   in Loop: Header=BB101_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB101_73:                             # %if.end314
                                        #   in Loop: Header=BB101_69 Depth=4
	jmp	.LBB101_74
.LBB101_74:                             # %for.inc315
                                        #   in Loop: Header=BB101_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_69
.LBB101_75:                             # %for.end317
                                        #   in Loop: Header=BB101_67 Depth=3
	jmp	.LBB101_76
.LBB101_76:                             # %for.inc318
                                        #   in Loop: Header=BB101_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_67
.LBB101_77:                             # %for.end320
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB101_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB101_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB101_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB101_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB101_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB101_83
.LBB101_82:                             # %if.else334
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB101_83:                             # %if.end336
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	$0, -16(%rbp)
.LBB101_84:                             # %for.cond337
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB101_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB101_84 Depth=3
	movl	$0, -12(%rbp)
.LBB101_86:                             # %for.cond341
                                        #   Parent Loop BB101_6 Depth=1
                                        #     Parent Loop BB101_8 Depth=2
                                        #       Parent Loop BB101_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB101_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB101_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB101_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_86
.LBB101_89:                             # %for.end358
                                        #   in Loop: Header=BB101_84 Depth=3
	jmp	.LBB101_90
.LBB101_90:                             # %for.inc359
                                        #   in Loop: Header=BB101_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_84
.LBB101_91:                             # %for.end361
                                        #   in Loop: Header=BB101_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB101_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB101_93:                             # %if.end368
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_94
.LBB101_94:                             # %if.end369
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_95
.LBB101_95:                             # %if.end370
                                        #   in Loop: Header=BB101_8 Depth=2
	jmp	.LBB101_96
.LBB101_96:                             # %for.inc371
                                        #   in Loop: Header=BB101_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB101_8
.LBB101_97:                             # %for.end374
                                        #   in Loop: Header=BB101_6 Depth=1
	jmp	.LBB101_98
.LBB101_98:                             # %for.inc375
                                        #   in Loop: Header=BB101_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_6
.LBB101_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB101_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB101_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB101_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB101_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB101_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB101_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB101_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB101_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB101_106 Depth=1
	movl	$0, -12(%rbp)
.LBB101_108:                            # %for.cond400
                                        #   Parent Loop BB101_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB101_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB101_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB101_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_108
.LBB101_111:                            # %for.end417
                                        #   in Loop: Header=BB101_106 Depth=1
	jmp	.LBB101_112
.LBB101_112:                            # %for.inc418
                                        #   in Loop: Header=BB101_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_106
.LBB101_113:                            # %for.end420
	jmp	.LBB101_114
.LBB101_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB101_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB101_116:                            # %if.end431
	jmp	.LBB101_117
.LBB101_117:                            # %if.end432
	jmp	.LBB101_118
.LBB101_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB101_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB101_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB101_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB101_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB101_145
.LBB101_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB101_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_126:                            # %for.cond462
                                        #   Parent Loop BB101_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB101_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB101_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB101_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_130
.LBB101_129:                            # %if.else481
                                        #   in Loop: Header=BB101_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB101_130:                            # %if.end486
                                        #   in Loop: Header=BB101_126 Depth=2
	jmp	.LBB101_131
.LBB101_131:                            # %for.inc487
                                        #   in Loop: Header=BB101_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_126
.LBB101_132:                            # %for.end489
                                        #   in Loop: Header=BB101_124 Depth=1
	jmp	.LBB101_133
.LBB101_133:                            # %for.inc490
                                        #   in Loop: Header=BB101_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_124
.LBB101_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB101_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB101_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_138:                            # %for.cond502
                                        #   Parent Loop BB101_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB101_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB101_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_138
.LBB101_141:                            # %for.end509
                                        #   in Loop: Header=BB101_136 Depth=1
	jmp	.LBB101_142
.LBB101_142:                            # %for.inc510
                                        #   in Loop: Header=BB101_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_136
.LBB101_143:                            # %for.end512
	jmp	.LBB101_144
.LBB101_144:                            # %if.end513
	jmp	.LBB101_145
.LBB101_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1182171445, -124(%rbp) # imm = 0x46768135
	jne	.LBB101_147
.LBB101_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_146
.Lfunc_end101:
	.size	LumaResidualCoding8x8.60, .Lfunc_end101-LumaResidualCoding8x8.60
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.61 # -- Begin function proceed2nextMacroblock.61
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.61,@function
proceed2nextMacroblock.61:              # @proceed2nextMacroblock.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$158157525, -28(%rbp)   # imm = 0x96D4AD5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_9
.LBB102_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB102_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB102_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB102_7
.LBB102_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB102_7:                              # %if.end
	jmp	.LBB102_8
.LBB102_8:                              # %if.end48
	jmp	.LBB102_9
.LBB102_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB102_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB102_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB102_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB102_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB102_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB102_16
.LBB102_15:                             # %if.else86
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB102_16:                             # %if.end94
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB102_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB102_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB102_20
.LBB102_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB102_21
.LBB102_20:                             # %if.then107
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB102_22
.LBB102_21:                             # %if.else114
                                        #   in Loop: Header=BB102_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB102_22:                             # %if.end121
                                        #   in Loop: Header=BB102_12 Depth=1
	jmp	.LBB102_23
.LBB102_23:                             # %if.end122
                                        #   in Loop: Header=BB102_12 Depth=1
	jmp	.LBB102_24
.LBB102_24:                             # %for.inc
                                        #   in Loop: Header=BB102_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_12
.LBB102_25:                             # %for.end
	jmp	.LBB102_34
.LBB102_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB102_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB102_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB102_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB102_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB102_32
.LBB102_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB102_32:                             # %if.end155
	jmp	.LBB102_33
.LBB102_33:                             # %if.end156
	jmp	.LBB102_34
.LBB102_34:                             # %if.end157
	jmp	.LBB102_35
.LBB102_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB102_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB102_38
.LBB102_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB102_38:                             # %if.end167
	cmpl	$158157525, -28(%rbp)   # imm = 0x96D4AD5
	jne	.LBB102_40
.LBB102_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_39
.Lfunc_end102:
	.size	proceed2nextMacroblock.61, .Lfunc_end102-proceed2nextMacroblock.61
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.62 # -- Begin function proceed2nextMacroblock.62
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.62,@function
proceed2nextMacroblock.62:              # @proceed2nextMacroblock.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1841257327, -28(%rbp)  # imm = 0x6DBF5B6F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB103_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB103_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB103_9
.LBB103_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB103_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB103_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB103_7
.LBB103_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB103_7:                              # %if.end
	jmp	.LBB103_8
.LBB103_8:                              # %if.end48
	jmp	.LBB103_9
.LBB103_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB103_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB103_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB103_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB103_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB103_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB103_16
.LBB103_15:                             # %if.else86
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB103_16:                             # %if.end94
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB103_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB103_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB103_20
.LBB103_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB103_21
.LBB103_20:                             # %if.then107
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB103_22
.LBB103_21:                             # %if.else114
                                        #   in Loop: Header=BB103_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB103_22:                             # %if.end121
                                        #   in Loop: Header=BB103_12 Depth=1
	jmp	.LBB103_23
.LBB103_23:                             # %if.end122
                                        #   in Loop: Header=BB103_12 Depth=1
	jmp	.LBB103_24
.LBB103_24:                             # %for.inc
                                        #   in Loop: Header=BB103_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_12
.LBB103_25:                             # %for.end
	jmp	.LBB103_34
.LBB103_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB103_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB103_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB103_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB103_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB103_32
.LBB103_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB103_32:                             # %if.end155
	jmp	.LBB103_33
.LBB103_33:                             # %if.end156
	jmp	.LBB103_34
.LBB103_34:                             # %if.end157
	jmp	.LBB103_35
.LBB103_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB103_38
.LBB103_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB103_38:                             # %if.end167
	cmpl	$1841257327, -28(%rbp)  # imm = 0x6DBF5B6F
	jne	.LBB103_40
.LBB103_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_39
.Lfunc_end103:
	.size	proceed2nextMacroblock.62, .Lfunc_end103-proceed2nextMacroblock.62
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.63 # -- Begin function write_one_macroblock.63
	.p2align	4, 0x90
	.type	write_one_macroblock.63,@function
write_one_macroblock.63:                # @write_one_macroblock.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2112923932, -32(%rbp)  # imm = 0x7DF0A91C
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB104_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB104_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_6
.LBB104_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB104_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB104_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB104_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB104_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB104_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB104_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB104_22
.LBB104_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB104_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	$0, -24(%rbp)
.LBB104_16:                             # %for.cond24
                                        #   Parent Loop BB104_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB104_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB104_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB104_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB104_16
.LBB104_19:                             # %for.end
                                        #   in Loop: Header=BB104_14 Depth=1
	jmp	.LBB104_20
.LBB104_20:                             # %for.inc35
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB104_14
.LBB104_21:                             # %for.end37
	jmp	.LBB104_22
.LBB104_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB104_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_30
.LBB104_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB104_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB104_29:                             # %if.end59
	jmp	.LBB104_30
.LBB104_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB104_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB104_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$2112923932, -32(%rbp)  # imm = 0x7DF0A91C
	jne	.LBB104_34
.LBB104_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_33
.Lfunc_end104:
	.size	write_one_macroblock.63, .Lfunc_end104-write_one_macroblock.63
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.64     # -- Begin function start_macroblock.64
	.p2align	4, 0x90
	.type	start_macroblock.64,@function
start_macroblock.64:                    # @start_macroblock.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$939053323, -88(%rbp)   # imm = 0x37F8D10B
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB105_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB105_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB105_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB105_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB105_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB105_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB105_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB105_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB105_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB105_8:                              # %if.end
                                        #   in Loop: Header=BB105_5 Depth=1
	jmp	.LBB105_9
.LBB105_9:                              # %for.inc
                                        #   in Loop: Header=BB105_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_5
.LBB105_10:                             # %for.end
	jmp	.LBB105_11
.LBB105_11:                             # %if.end19
	jmp	.LBB105_12
.LBB105_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB105_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB105_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB105_16
.LBB105_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB105_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB105_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_97
.LBB105_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB105_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB105_21
.LBB105_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_96
.LBB105_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB105_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB105_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB105_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB105_34
.LBB105_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_32
.LBB105_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB105_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_31
.LBB105_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB105_33
.LBB105_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB105_33:                             # %if.end112
	jmp	.LBB105_34
.LBB105_34:                             # %if.end113
	jmp	.LBB105_39
.LBB105_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB105_38
.LBB105_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB105_38:                             # %if.end125
	jmp	.LBB105_39
.LBB105_39:                             # %if.end126
	jmp	.LBB105_47
.LBB105_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB105_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB105_44
.LBB105_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_44:                             # %if.end140
	jmp	.LBB105_46
.LBB105_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB105_46:                             # %if.end145
	jmp	.LBB105_47
.LBB105_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB105_93
.LBB105_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB105_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB105_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB105_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB105_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_74
.LBB105_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB105_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_73
.LBB105_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB105_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_72
.LBB105_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB105_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB105_71
.LBB105_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB105_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB105_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB105_70:                             # %if.end223
	jmp	.LBB105_71
.LBB105_71:                             # %if.end224
	jmp	.LBB105_72
.LBB105_72:                             # %if.end225
	jmp	.LBB105_73
.LBB105_73:                             # %if.end226
	jmp	.LBB105_74
.LBB105_74:                             # %if.end227
	jmp	.LBB105_75
.LBB105_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB105_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB105_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB105_82
.LBB105_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB105_81:                             # %if.end256
	jmp	.LBB105_82
.LBB105_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB105_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB105_88
.LBB105_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB105_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB105_87
.LBB105_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB105_87:                             # %if.end292
	jmp	.LBB105_88
.LBB105_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB105_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB105_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB105_92
.LBB105_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB105_92:                             # %if.end305
	jmp	.LBB105_94
.LBB105_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB105_94:                             # %if.end309
	jmp	.LBB105_95
.LBB105_95:                             # %if.end310
	jmp	.LBB105_96
.LBB105_96:                             # %if.end311
	jmp	.LBB105_97
.LBB105_97:                             # %if.end312
	jmp	.LBB105_102
.LBB105_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB105_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB105_101
.LBB105_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB105_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB105_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB105_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB105_105
.LBB105_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB105_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB105_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB105_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB105_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_110 Depth 2
                                        #       Child Loop BB105_112 Depth 3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB105_108 Depth=1
	movl	$0, -16(%rbp)
.LBB105_110:                            # %for.cond364
                                        #   Parent Loop BB105_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_112 Depth 3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB105_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB105_110 Depth=2
	movl	$0, -12(%rbp)
.LBB105_112:                            # %for.cond368
                                        #   Parent Loop BB105_108 Depth=1
                                        #     Parent Loop BB105_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB105_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB105_112 Depth=3
	movl	$0, -36(%rbp)
.LBB105_114:                            # %for.cond372
                                        #   Parent Loop BB105_108 Depth=1
                                        #     Parent Loop BB105_110 Depth=2
                                        #       Parent Loop BB105_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB105_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB105_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB105_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_114
.LBB105_117:                            # %for.end388
                                        #   in Loop: Header=BB105_112 Depth=3
	jmp	.LBB105_118
.LBB105_118:                            # %for.inc389
                                        #   in Loop: Header=BB105_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_112
.LBB105_119:                            # %for.end391
                                        #   in Loop: Header=BB105_110 Depth=2
	jmp	.LBB105_120
.LBB105_120:                            # %for.inc392
                                        #   in Loop: Header=BB105_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_110
.LBB105_121:                            # %for.end394
                                        #   in Loop: Header=BB105_108 Depth=1
	jmp	.LBB105_122
.LBB105_122:                            # %for.inc395
                                        #   in Loop: Header=BB105_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_108
.LBB105_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB105_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_126 Depth 2
                                        #       Child Loop BB105_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB105_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB105_124 Depth=1
	movl	$0, -12(%rbp)
.LBB105_126:                            # %for.cond402
                                        #   Parent Loop BB105_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB105_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB105_126 Depth=2
	movl	$0, -20(%rbp)
.LBB105_128:                            # %for.cond406
                                        #   Parent Loop BB105_124 Depth=1
                                        #     Parent Loop BB105_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB105_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB105_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB105_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_128
.LBB105_131:                            # %for.end432
                                        #   in Loop: Header=BB105_126 Depth=2
	jmp	.LBB105_132
.LBB105_132:                            # %for.inc433
                                        #   in Loop: Header=BB105_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_126
.LBB105_133:                            # %for.end435
                                        #   in Loop: Header=BB105_124 Depth=1
	jmp	.LBB105_134
.LBB105_134:                            # %for.inc436
                                        #   in Loop: Header=BB105_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_124
.LBB105_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB105_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_138 Depth 2
                                        #       Child Loop BB105_140 Depth 3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB105_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB105_136 Depth=1
	movl	$0, -16(%rbp)
.LBB105_138:                            # %for.cond443
                                        #   Parent Loop BB105_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_140 Depth 3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB105_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB105_138 Depth=2
	movl	$0, -12(%rbp)
.LBB105_140:                            # %for.cond447
                                        #   Parent Loop BB105_136 Depth=1
                                        #     Parent Loop BB105_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB105_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB105_140 Depth=3
	movl	$0, -36(%rbp)
.LBB105_142:                            # %for.cond451
                                        #   Parent Loop BB105_136 Depth=1
                                        #     Parent Loop BB105_138 Depth=2
                                        #       Parent Loop BB105_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB105_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB105_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB105_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_142
.LBB105_145:                            # %for.end465
                                        #   in Loop: Header=BB105_140 Depth=3
	jmp	.LBB105_146
.LBB105_146:                            # %for.inc466
                                        #   in Loop: Header=BB105_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_140
.LBB105_147:                            # %for.end468
                                        #   in Loop: Header=BB105_138 Depth=2
	jmp	.LBB105_148
.LBB105_148:                            # %for.inc469
                                        #   in Loop: Header=BB105_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_138
.LBB105_149:                            # %for.end471
                                        #   in Loop: Header=BB105_136 Depth=1
	jmp	.LBB105_150
.LBB105_150:                            # %for.inc472
                                        #   in Loop: Header=BB105_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_136
.LBB105_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB105_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB105_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB105_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB105_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_152
.LBB105_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB105_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB105_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB105_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB105_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_156
.LBB105_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB105_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB105_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB105_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB105_166
.LBB105_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB105_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB105_165:                            # %if.end520
	jmp	.LBB105_166
.LBB105_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB105_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB105_168:                            # %if.end536
	cmpl	$939053323, -88(%rbp)   # imm = 0x37F8D10B
	jne	.LBB105_170
.LBB105_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_169
.Lfunc_end105:
	.size	start_macroblock.64, .Lfunc_end105-start_macroblock.64
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.65 # -- Begin function writeMotionVector8x8.65
	.p2align	4, 0x90
	.type	writeMotionVector8x8.65,@function
writeMotionVector8x8.65:                # @writeMotionVector8x8.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1838574663, -96(%rbp)  # imm = 0x6D966C47
	movl	%edi, -92(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB106_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB106_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB106_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB106_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB106_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB106_7
.LBB106_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB106_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB106_8:                              # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB106_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_11 Depth 2
                                        #       Child Loop BB106_13 Depth 3
                                        #         Child Loop BB106_15 Depth 4
                                        #           Child Loop BB106_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB106_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB106_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_11:                             # %for.cond22
                                        #   Parent Loop BB106_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_13 Depth 3
                                        #         Child Loop BB106_15 Depth 4
                                        #           Child Loop BB106_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB106_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB106_11 Depth=2
	movl	$0, -16(%rbp)
.LBB106_13:                             # %for.cond25
                                        #   Parent Loop BB106_9 Depth=1
                                        #     Parent Loop BB106_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB106_15 Depth 4
                                        #           Child Loop BB106_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB106_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB106_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB106_15:                             # %for.cond53
                                        #   Parent Loop BB106_9 Depth=1
                                        #     Parent Loop BB106_11 Depth=2
                                        #       Parent Loop BB106_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB106_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB106_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB106_15 Depth=4
	movl	$0, -44(%rbp)
.LBB106_17:                             # %for.cond57
                                        #   Parent Loop BB106_9 Depth=1
                                        #     Parent Loop BB106_11 Depth=2
                                        #       Parent Loop BB106_13 Depth=3
                                        #         Parent Loop BB106_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB106_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB106_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB106_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB106_17
.LBB106_20:                             # %for.end
                                        #   in Loop: Header=BB106_15 Depth=4
	jmp	.LBB106_21
.LBB106_21:                             # %for.inc70
                                        #   in Loop: Header=BB106_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB106_15
.LBB106_22:                             # %for.end72
                                        #   in Loop: Header=BB106_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB106_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB106_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB106_25
.LBB106_24:                             # %if.else
                                        #   in Loop: Header=BB106_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB106_25:                             # %if.end78
                                        #   in Loop: Header=BB106_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB106_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_13
.LBB106_27:                             # %for.end90
                                        #   in Loop: Header=BB106_11 Depth=2
	jmp	.LBB106_28
.LBB106_28:                             # %for.inc91
                                        #   in Loop: Header=BB106_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_11
.LBB106_29:                             # %for.end93
                                        #   in Loop: Header=BB106_9 Depth=1
	jmp	.LBB106_30
.LBB106_30:                             # %for.inc94
                                        #   in Loop: Header=BB106_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB106_9
.LBB106_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1838574663, -96(%rbp)  # imm = 0x6D966C47
	jne	.LBB106_33
.LBB106_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_32
.Lfunc_end106:
	.size	writeMotionVector8x8.65, .Lfunc_end106-writeMotionVector8x8.65
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.66 # -- Begin function writeLumaCoeff4x4_CABAC.66
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.66,@function
writeLumaCoeff4x4_CABAC.66:             # @writeLumaCoeff4x4_CABAC.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2024961423, -52(%rbp)  # imm = 0x78B2758F
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB107_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB107_3
.LBB107_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB107_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB107_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB107_6
.LBB107_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB107_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB107_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB107_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB107_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB107_9:                              # %land.end
                                        #   in Loop: Header=BB107_7 Depth=1
	testb	$1, %al
	jne	.LBB107_10
	jmp	.LBB107_15
.LBB107_10:                             # %for.body
                                        #   in Loop: Header=BB107_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB107_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB107_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB107_13
.LBB107_12:                             # %cond.false40
                                        #   in Loop: Header=BB107_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB107_13:                             # %cond.end43
                                        #   in Loop: Header=BB107_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB107_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_7
.LBB107_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$2024961423, -52(%rbp)  # imm = 0x78B2758F
	jne	.LBB107_17
.LBB107_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_16
.Lfunc_end107:
	.size	writeLumaCoeff4x4_CABAC.66, .Lfunc_end107-writeLumaCoeff4x4_CABAC.66
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.67 # -- Begin function ChromaResidualCoding.67
	.p2align	4, 0x90
	.type	ChromaResidualCoding.67,@function
ChromaResidualCoding.67:                # @ChromaResidualCoding.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$29194342, -68(%rbp)    # imm = 0x1BD7866
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB108_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB108_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB108_3:                              # %lor.end
.LBB108_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB108_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_7 Depth 2
                                        #       Child Loop BB108_9 Depth 3
                                        #     Child Loop BB108_16 Depth 2
                                        #       Child Loop BB108_18 Depth 3
                                        #     Child Loop BB108_33 Depth 2
                                        #       Child Loop BB108_35 Depth 3
                                        #     Child Loop BB108_43 Depth 2
                                        #       Child Loop BB108_45 Depth 3
                                        #     Child Loop BB108_58 Depth 2
                                        #       Child Loop BB108_60 Depth 3
                                        #     Child Loop BB108_87 Depth 2
                                        #       Child Loop BB108_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB108_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB108_7:                              # %for.cond5
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB108_7 Depth=2
	movl	$0, -24(%rbp)
.LBB108_9:                              # %for.cond8
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB108_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB108_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_9
.LBB108_12:                             # %for.end
                                        #   in Loop: Header=BB108_7 Depth=2
	jmp	.LBB108_13
.LBB108_13:                             # %for.inc18
                                        #   in Loop: Header=BB108_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_7
.LBB108_14:                             # %for.end20
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB108_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_16:                             # %for.cond21
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB108_16 Depth=2
	movl	$0, -8(%rbp)
.LBB108_18:                             # %for.cond26
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB108_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB108_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB108_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB108_25
.LBB108_21:                             # %if.else
                                        #   in Loop: Header=BB108_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB108_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB108_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB108_24
.LBB108_23:                             # %if.else52
                                        #   in Loop: Header=BB108_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB108_24:                             # %if.end
                                        #   in Loop: Header=BB108_18 Depth=3
	jmp	.LBB108_25
.LBB108_25:                             # %if.end57
                                        #   in Loop: Header=BB108_18 Depth=3
	jmp	.LBB108_26
.LBB108_26:                             # %for.inc58
                                        #   in Loop: Header=BB108_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_18
.LBB108_27:                             # %for.end59
                                        #   in Loop: Header=BB108_16 Depth=2
	jmp	.LBB108_28
.LBB108_28:                             # %for.inc60
                                        #   in Loop: Header=BB108_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_16
.LBB108_29:                             # %for.end62
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_74
.LBB108_30:                             # %if.else63
                                        #   in Loop: Header=BB108_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB108_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB108_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_33:                             # %for.cond69
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB108_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB108_33 Depth=2
	movl	$0, -8(%rbp)
.LBB108_35:                             # %for.cond73
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB108_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB108_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB108_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_35
.LBB108_38:                             # %for.end83
                                        #   in Loop: Header=BB108_33 Depth=2
	jmp	.LBB108_39
.LBB108_39:                             # %for.inc84
                                        #   in Loop: Header=BB108_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_33
.LBB108_40:                             # %for.end86
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_73
.LBB108_41:                             # %if.else87
                                        #   in Loop: Header=BB108_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB108_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_43:                             # %for.cond90
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB108_43 Depth=2
	movl	$0, -8(%rbp)
.LBB108_45:                             # %for.cond95
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB108_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB108_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB108_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB108_52
.LBB108_48:                             # %if.else119
                                        #   in Loop: Header=BB108_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB108_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB108_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB108_51
.LBB108_50:                             # %if.else127
                                        #   in Loop: Header=BB108_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB108_51:                             # %if.end132
                                        #   in Loop: Header=BB108_45 Depth=3
	jmp	.LBB108_52
.LBB108_52:                             # %if.end133
                                        #   in Loop: Header=BB108_45 Depth=3
	jmp	.LBB108_53
.LBB108_53:                             # %for.inc134
                                        #   in Loop: Header=BB108_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_45
.LBB108_54:                             # %for.end136
                                        #   in Loop: Header=BB108_43 Depth=2
	jmp	.LBB108_55
.LBB108_55:                             # %for.inc137
                                        #   in Loop: Header=BB108_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_43
.LBB108_56:                             # %for.end139
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_72
.LBB108_57:                             # %if.else140
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_58:                             # %for.cond141
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB108_58 Depth=2
	movl	$0, -8(%rbp)
.LBB108_60:                             # %for.cond146
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB108_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB108_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB108_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB108_67
.LBB108_63:                             # %if.else175
                                        #   in Loop: Header=BB108_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB108_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB108_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB108_66
.LBB108_65:                             # %if.else188
                                        #   in Loop: Header=BB108_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB108_66:                             # %if.end198
                                        #   in Loop: Header=BB108_60 Depth=3
	jmp	.LBB108_67
.LBB108_67:                             # %if.end199
                                        #   in Loop: Header=BB108_60 Depth=3
	jmp	.LBB108_68
.LBB108_68:                             # %for.inc200
                                        #   in Loop: Header=BB108_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_60
.LBB108_69:                             # %for.end202
                                        #   in Loop: Header=BB108_58 Depth=2
	jmp	.LBB108_70
.LBB108_70:                             # %for.inc203
                                        #   in Loop: Header=BB108_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_58
.LBB108_71:                             # %for.end205
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_72
.LBB108_72:                             # %if.end206
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_73
.LBB108_73:                             # %if.end207
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_74
.LBB108_74:                             # %if.end208
                                        #   in Loop: Header=BB108_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB108_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB108_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB108_100
.LBB108_77:                             # %if.else215
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB108_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB108_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB108_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB108_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB108_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB108_84
.LBB108_83:                             # %if.then247
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB108_85
.LBB108_84:                             # %if.else249
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB108_85:                             # %if.end251
                                        #   in Loop: Header=BB108_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB108_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_87:                             # %for.cond255
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB108_87 Depth=2
	movl	$0, -8(%rbp)
.LBB108_89:                             # %for.cond260
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB108_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB108_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB108_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB108_93
.LBB108_92:                             # %if.else277
                                        #   in Loop: Header=BB108_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB108_93:                             # %if.end287
                                        #   in Loop: Header=BB108_89 Depth=3
	jmp	.LBB108_94
.LBB108_94:                             # %for.inc288
                                        #   in Loop: Header=BB108_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_89
.LBB108_95:                             # %for.end290
                                        #   in Loop: Header=BB108_87 Depth=2
	jmp	.LBB108_96
.LBB108_96:                             # %for.inc291
                                        #   in Loop: Header=BB108_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_87
.LBB108_97:                             # %for.end293
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_98
.LBB108_98:                             # %if.end294
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_99
.LBB108_99:                             # %if.end295
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_100
.LBB108_100:                            # %if.end296
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_101
.LBB108_101:                            # %for.inc297
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_5
.LBB108_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB108_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB108_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB108_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB108_104 Depth=1
	movl	$0, -8(%rbp)
.LBB108_106:                            # %for.cond312
                                        #   Parent Loop BB108_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB108_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB108_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_110
.LBB108_109:                            # %cond.false
                                        #   in Loop: Header=BB108_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB108_110:                            # %cond.end
                                        #   in Loop: Header=BB108_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB108_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB108_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB108_116
.LBB108_112:                            # %cond.false358
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB108_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_115
.LBB108_114:                            # %cond.false367
                                        #   in Loop: Header=BB108_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB108_115:                            # %cond.end373
                                        #   in Loop: Header=BB108_106 Depth=2
.LBB108_116:                            # %cond.end375
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB108_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB108_119
.LBB108_118:                            # %cond.false394
                                        #   in Loop: Header=BB108_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB108_119:                            # %cond.end400
                                        #   in Loop: Header=BB108_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB108_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB108_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_125
.LBB108_121:                            # %cond.false406
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB108_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_124
.LBB108_123:                            # %cond.false415
                                        #   in Loop: Header=BB108_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB108_124:                            # %cond.end421
                                        #   in Loop: Header=BB108_106 Depth=2
.LBB108_125:                            # %cond.end423
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB108_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB108_128
.LBB108_127:                            # %cond.false443
                                        #   in Loop: Header=BB108_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB108_128:                            # %cond.end449
                                        #   in Loop: Header=BB108_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB108_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB108_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB108_134
.LBB108_130:                            # %cond.false455
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB108_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB108_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_133
.LBB108_132:                            # %cond.false464
                                        #   in Loop: Header=BB108_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB108_133:                            # %cond.end470
                                        #   in Loop: Header=BB108_106 Depth=2
.LBB108_134:                            # %cond.end472
                                        #   in Loop: Header=BB108_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB108_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_106
.LBB108_136:                            # %for.end487
                                        #   in Loop: Header=BB108_104 Depth=1
	jmp	.LBB108_137
.LBB108_137:                            # %for.inc488
                                        #   in Loop: Header=BB108_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_104
.LBB108_138:                            # %for.end490
	jmp	.LBB108_139
.LBB108_139:                            # %if.end491
	cmpl	$29194342, -68(%rbp)    # imm = 0x1BD7866
	jne	.LBB108_141
.LBB108_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_140
.Lfunc_end108:
	.size	ChromaResidualCoding.67, .Lfunc_end108-ChromaResidualCoding.67
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.68    # -- Begin function writeLumaCoeff8x8.68
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.68,@function
writeLumaCoeff8x8.68:                   # @writeLumaCoeff8x8.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$304273246, -36(%rbp)   # imm = 0x1222D75E
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB109_2
# %bb.1:                                # %if.then
	jmp	.LBB109_2
.LBB109_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB109_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB109_15
.LBB109_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB109_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB109_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB109_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB109_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB109_10
.LBB109_9:                              # %cond.false
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB109_10:                             # %cond.end
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_12
.LBB109_11:                             # %if.else
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_12:                             # %if.end17
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_13
.LBB109_13:                             # %for.inc
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_5
.LBB109_14:                             # %for.end
	jmp	.LBB109_19
.LBB109_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB109_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_18
.LBB109_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB109_18:                             # %if.end27
	jmp	.LBB109_19
.LBB109_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$304273246, -36(%rbp)   # imm = 0x1222D75E
	jne	.LBB109_21
.LBB109_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_20
.Lfunc_end109:
	.size	writeLumaCoeff8x8.68, .Lfunc_end109-writeLumaCoeff8x8.68
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.69   # -- Begin function writeIntra4x4Modes.69
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.69,@function
writeIntra4x4Modes.69:                  # @writeIntra4x4Modes.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$981028067, -76(%rbp)   # imm = 0x3A794CE3
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_9 Depth 2
                                        #       Child Loop BB110_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB110_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB110_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB110_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB110_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB110_8
.LBB110_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB110_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB110_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB110_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB110_17
.LBB110_8:                              # %if.then
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB110_9:                              # %for.cond24
                                        #   Parent Loop BB110_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB110_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB110_9 Depth=2
	movl	$0, -12(%rbp)
.LBB110_11:                             # %for.cond27
                                        #   Parent Loop BB110_1 Depth=1
                                        #     Parent Loop BB110_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB110_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB110_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB110_11 Depth=3
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_11
.LBB110_14:                             # %for.end
                                        #   in Loop: Header=BB110_9 Depth=2
	jmp	.LBB110_15
.LBB110_15:                             # %for.inc42
                                        #   in Loop: Header=BB110_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB110_9
.LBB110_16:                             # %for.end44
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_17
.LBB110_17:                             # %if.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_18
.LBB110_18:                             # %for.inc45
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB110_1
.LBB110_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB110_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB110_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB110_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB110_23:                             # %if.end57
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB110_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB110_26
.LBB110_25:                             # %if.else
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB110_26:                             # %if.end65
                                        #   in Loop: Header=BB110_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB110_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_20
.LBB110_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$981028067, -76(%rbp)   # imm = 0x3A794CE3
	jne	.LBB110_30
.LBB110_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_29
.Lfunc_end110:
	.size	writeIntra4x4Modes.69, .Lfunc_end110-writeIntra4x4Modes.69
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.70   # -- Begin function LumaResidualCoding.70
	.p2align	4, 0x90
	.type	LumaResidualCoding.70,@function
LumaResidualCoding.70:                  # @LumaResidualCoding.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$890692233, -36(%rbp)   # imm = 0x3516E289
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB111_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_1
.LBB111_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB111_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB111_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB111_33
.LBB111_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB111_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB111_8 Depth=1
	movl	$0, -8(%rbp)
.LBB111_10:                             # %for.cond13
                                        #   Parent Loop BB111_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB111_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB111_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB111_14
.LBB111_13:                             # %if.else
                                        #   in Loop: Header=BB111_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB111_14:                             # %if.end
                                        #   in Loop: Header=BB111_10 Depth=2
	jmp	.LBB111_15
.LBB111_15:                             # %for.inc31
                                        #   in Loop: Header=BB111_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_10
.LBB111_16:                             # %for.end33
                                        #   in Loop: Header=BB111_8 Depth=1
	jmp	.LBB111_17
.LBB111_17:                             # %for.inc34
                                        #   in Loop: Header=BB111_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_8
.LBB111_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB111_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB111_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_22 Depth 2
                                        #       Child Loop BB111_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB111_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB111_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB111_22:                             # %for.cond45
                                        #   Parent Loop BB111_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB111_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB111_22 Depth=2
	movl	$0, -8(%rbp)
.LBB111_24:                             # %for.cond48
                                        #   Parent Loop BB111_20 Depth=1
                                        #     Parent Loop BB111_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB111_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB111_24 Depth=3
	movl	-48(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB111_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_24
.LBB111_27:                             # %for.end55
                                        #   in Loop: Header=BB111_22 Depth=2
	jmp	.LBB111_28
.LBB111_28:                             # %for.inc56
                                        #   in Loop: Header=BB111_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_22
.LBB111_29:                             # %for.end58
                                        #   in Loop: Header=BB111_20 Depth=1
	jmp	.LBB111_30
.LBB111_30:                             # %for.inc59
                                        #   in Loop: Header=BB111_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_20
.LBB111_31:                             # %for.end61
	jmp	.LBB111_32
.LBB111_32:                             # %if.end62
	jmp	.LBB111_33
.LBB111_33:                             # %if.end63
	cmpl	$890692233, -36(%rbp)   # imm = 0x3516E289
	jne	.LBB111_35
.LBB111_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_34
.Lfunc_end111:
	.size	LumaResidualCoding.70, .Lfunc_end111-LumaResidualCoding.70
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.71 # -- Begin function LumaResidualCoding8x8.71
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.71,@function
LumaResidualCoding8x8.71:               # @LumaResidualCoding8x8.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1928636002, -128(%rbp) # imm = 0x72F4A662
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB112_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB112_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB112_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB112_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB112_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_8 Depth 2
                                        #       Child Loop BB112_11 Depth 3
                                        #         Child Loop BB112_13 Depth 4
                                        #       Child Loop BB112_19 Depth 3
                                        #         Child Loop BB112_21 Depth 4
                                        #       Child Loop BB112_29 Depth 3
                                        #         Child Loop BB112_31 Depth 4
                                        #       Child Loop BB112_40 Depth 3
                                        #         Child Loop BB112_42 Depth 4
                                        #       Child Loop BB112_57 Depth 3
                                        #         Child Loop BB112_59 Depth 4
                                        #       Child Loop BB112_67 Depth 3
                                        #         Child Loop BB112_69 Depth 4
                                        #       Child Loop BB112_84 Depth 3
                                        #         Child Loop BB112_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB112_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB112_8:                              # %for.cond9
                                        #   Parent Loop BB112_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_11 Depth 3
                                        #         Child Loop BB112_13 Depth 4
                                        #       Child Loop BB112_19 Depth 3
                                        #         Child Loop BB112_21 Depth 4
                                        #       Child Loop BB112_29 Depth 3
                                        #         Child Loop BB112_31 Depth 4
                                        #       Child Loop BB112_40 Depth 3
                                        #         Child Loop BB112_42 Depth 4
                                        #       Child Loop BB112_57 Depth 3
                                        #         Child Loop BB112_59 Depth 4
                                        #       Child Loop BB112_67 Depth 3
                                        #         Child Loop BB112_69 Depth 4
                                        #       Child Loop BB112_84 Depth 3
                                        #         Child Loop BB112_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB112_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB112_11:                             # %for.cond16
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB112_11 Depth=3
	movl	$0, -12(%rbp)
.LBB112_13:                             # %for.cond20
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB112_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB112_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_13
.LBB112_16:                             # %for.end
                                        #   in Loop: Header=BB112_11 Depth=3
	jmp	.LBB112_17
.LBB112_17:                             # %for.inc37
                                        #   in Loop: Header=BB112_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_11
.LBB112_18:                             # %for.end39
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB112_19:                             # %for.cond41
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB112_19 Depth=3
	movl	$0, -12(%rbp)
.LBB112_21:                             # %for.cond45
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB112_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB112_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_21
.LBB112_24:                             # %for.end65
                                        #   in Loop: Header=BB112_19 Depth=3
	jmp	.LBB112_25
.LBB112_25:                             # %for.inc66
                                        #   in Loop: Header=BB112_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_19
.LBB112_26:                             # %for.end68
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_27
.LBB112_27:                             # %if.end69
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB112_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	$0, -16(%rbp)
.LBB112_29:                             # %for.cond74
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB112_29 Depth=3
	movl	$0, -12(%rbp)
.LBB112_31:                             # %for.cond78
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB112_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB112_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_31
.LBB112_34:                             # %for.end98
                                        #   in Loop: Header=BB112_29 Depth=3
	jmp	.LBB112_35
.LBB112_35:                             # %for.inc99
                                        #   in Loop: Header=BB112_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_29
.LBB112_36:                             # %for.end101
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_37
.LBB112_37:                             # %if.end102
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB112_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB112_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	$0, -16(%rbp)
.LBB112_40:                             # %for.cond108
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB112_40 Depth=3
	movl	$0, -12(%rbp)
.LBB112_42:                             # %for.cond112
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB112_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB112_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_42
.LBB112_45:                             # %for.end137
                                        #   in Loop: Header=BB112_40 Depth=3
	jmp	.LBB112_46
.LBB112_46:                             # %for.inc138
                                        #   in Loop: Header=BB112_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_40
.LBB112_47:                             # %for.end140
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB112_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB112_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB112_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB112_52
.LBB112_51:                             # %if.else
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB112_52:                             # %if.end151
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB112_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB112_54:                             # %if.end157
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_55
.LBB112_55:                             # %if.end158
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_65
.LBB112_56:                             # %if.else159
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	$0, -16(%rbp)
.LBB112_57:                             # %for.cond160
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB112_57 Depth=3
	movl	$0, -12(%rbp)
.LBB112_59:                             # %for.cond164
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB112_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB112_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_59
.LBB112_62:                             # %for.end193
                                        #   in Loop: Header=BB112_57 Depth=3
	jmp	.LBB112_63
.LBB112_63:                             # %for.inc194
                                        #   in Loop: Header=BB112_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_57
.LBB112_64:                             # %for.end196
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_65
.LBB112_65:                             # %if.end197
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_95
.LBB112_66:                             # %if.else198
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	$0, -16(%rbp)
.LBB112_67:                             # %for.cond199
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB112_67 Depth=3
	movl	$0, -12(%rbp)
.LBB112_69:                             # %for.cond203
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB112_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -120(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB112_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB112_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB112_73
.LBB112_72:                             # %if.else300
                                        #   in Loop: Header=BB112_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB112_73:                             # %if.end314
                                        #   in Loop: Header=BB112_69 Depth=4
	jmp	.LBB112_74
.LBB112_74:                             # %for.inc315
                                        #   in Loop: Header=BB112_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_69
.LBB112_75:                             # %for.end317
                                        #   in Loop: Header=BB112_67 Depth=3
	jmp	.LBB112_76
.LBB112_76:                             # %for.inc318
                                        #   in Loop: Header=BB112_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_67
.LBB112_77:                             # %for.end320
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB112_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB112_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB112_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB112_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB112_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB112_83
.LBB112_82:                             # %if.else334
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB112_83:                             # %if.end336
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	$0, -16(%rbp)
.LBB112_84:                             # %for.cond337
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB112_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB112_84 Depth=3
	movl	$0, -12(%rbp)
.LBB112_86:                             # %for.cond341
                                        #   Parent Loop BB112_6 Depth=1
                                        #     Parent Loop BB112_8 Depth=2
                                        #       Parent Loop BB112_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB112_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB112_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB112_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_86
.LBB112_89:                             # %for.end358
                                        #   in Loop: Header=BB112_84 Depth=3
	jmp	.LBB112_90
.LBB112_90:                             # %for.inc359
                                        #   in Loop: Header=BB112_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_84
.LBB112_91:                             # %for.end361
                                        #   in Loop: Header=BB112_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB112_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB112_93:                             # %if.end368
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_94
.LBB112_94:                             # %if.end369
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_95
.LBB112_95:                             # %if.end370
                                        #   in Loop: Header=BB112_8 Depth=2
	jmp	.LBB112_96
.LBB112_96:                             # %for.inc371
                                        #   in Loop: Header=BB112_8 Depth=2
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_8
.LBB112_97:                             # %for.end374
                                        #   in Loop: Header=BB112_6 Depth=1
	jmp	.LBB112_98
.LBB112_98:                             # %for.inc375
                                        #   in Loop: Header=BB112_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_6
.LBB112_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB112_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB112_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB112_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB112_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB112_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB112_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB112_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB112_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB112_106 Depth=1
	movl	$0, -12(%rbp)
.LBB112_108:                            # %for.cond400
                                        #   Parent Loop BB112_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB112_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB112_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB112_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_108
.LBB112_111:                            # %for.end417
                                        #   in Loop: Header=BB112_106 Depth=1
	jmp	.LBB112_112
.LBB112_112:                            # %for.inc418
                                        #   in Loop: Header=BB112_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_106
.LBB112_113:                            # %for.end420
	jmp	.LBB112_114
.LBB112_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB112_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB112_116:                            # %if.end431
	jmp	.LBB112_117
.LBB112_117:                            # %if.end432
	jmp	.LBB112_118
.LBB112_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB112_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB112_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB112_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB112_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB112_145
.LBB112_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB112_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_126:                            # %for.cond462
                                        #   Parent Loop BB112_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB112_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB112_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB112_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB112_130
.LBB112_129:                            # %if.else481
                                        #   in Loop: Header=BB112_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB112_130:                            # %if.end486
                                        #   in Loop: Header=BB112_126 Depth=2
	jmp	.LBB112_131
.LBB112_131:                            # %for.inc487
                                        #   in Loop: Header=BB112_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_126
.LBB112_132:                            # %for.end489
                                        #   in Loop: Header=BB112_124 Depth=1
	jmp	.LBB112_133
.LBB112_133:                            # %for.inc490
                                        #   in Loop: Header=BB112_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_124
.LBB112_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB112_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB112_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_138:                            # %for.cond502
                                        #   Parent Loop BB112_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB112_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB112_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_138
.LBB112_141:                            # %for.end509
                                        #   in Loop: Header=BB112_136 Depth=1
	jmp	.LBB112_142
.LBB112_142:                            # %for.inc510
                                        #   in Loop: Header=BB112_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_136
.LBB112_143:                            # %for.end512
	jmp	.LBB112_144
.LBB112_144:                            # %if.end513
	jmp	.LBB112_145
.LBB112_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1928636002, -128(%rbp) # imm = 0x72F4A662
	jne	.LBB112_147
.LBB112_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_146
.Lfunc_end112:
	.size	LumaResidualCoding8x8.71, .Lfunc_end112-LumaResidualCoding8x8.71
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.72 # -- Begin function OneComponentChromaPrediction4x4.72
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.72,@function
OneComponentChromaPrediction4x4.72:     # @OneComponentChromaPrediction4x4.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1838185010, -116(%rbp) # imm = 0x6D907A32
	movq	%rdi, -128(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB113_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB113_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB113_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB113_6
.LBB113_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB113_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_8
.LBB113_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB113_8:                              # %if.end13
	movl	-64(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB113_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB113_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB113_9 Depth=1
	movl	$0, -28(%rbp)
.LBB113_11:                             # %for.cond20
                                        #   Parent Loop BB113_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB113_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-28(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_15
.LBB113_14:                             # %cond.false
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB113_15:                             # %cond.end
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_21
.LBB113_17:                             # %cond.false65
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_20
.LBB113_19:                             # %cond.false74
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB113_20:                             # %cond.end76
                                        #   in Loop: Header=BB113_11 Depth=2
.LBB113_21:                             # %cond.end78
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB113_24
.LBB113_23:                             # %cond.false84
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB113_24:                             # %cond.end86
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_30
.LBB113_26:                             # %cond.false91
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB113_29
.LBB113_28:                             # %cond.false96
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB113_29:                             # %cond.end98
                                        #   in Loop: Header=BB113_11 Depth=2
.LBB113_30:                             # %cond.end100
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_33
.LBB113_32:                             # %cond.false111
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB113_33:                             # %cond.end114
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_39
.LBB113_35:                             # %cond.false119
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB113_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_38
.LBB113_37:                             # %cond.false129
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB113_38:                             # %cond.end132
                                        #   in Loop: Header=BB113_11 Depth=2
.LBB113_39:                             # %cond.end134
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB113_42
.LBB113_41:                             # %cond.false141
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB113_42:                             # %cond.end144
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB113_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_48
.LBB113_44:                             # %cond.false149
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB113_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB113_47
.LBB113_46:                             # %cond.false155
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB113_47:                             # %cond.end158
                                        #   in Loop: Header=BB113_11 Depth=2
.LBB113_48:                             # %cond.end160
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	imull	-92(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-92(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-60(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB113_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_11
.LBB113_50:                             # %for.end
                                        #   in Loop: Header=BB113_9 Depth=1
	jmp	.LBB113_51
.LBB113_51:                             # %for.inc198
                                        #   in Loop: Header=BB113_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_9
.LBB113_52:                             # %for.end200
	cmpl	$1838185010, -116(%rbp) # imm = 0x6D907A32
	jne	.LBB113_54
.LBB113_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_53
.Lfunc_end113:
	.size	OneComponentChromaPrediction4x4.72, .Lfunc_end113-OneComponentChromaPrediction4x4.72
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.73         # -- Begin function writeMBLayer.73
	.p2align	4, 0x90
	.type	writeMBLayer.73,@function
writeMBLayer.73:                        # @writeMBLayer.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1737369830, -92(%rbp)  # imm = 0x678E28E6
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB114_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB114_3
.LBB114_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB114_3
.LBB114_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB114_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB114_9
.LBB114_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB114_8
.LBB114_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB114_8
.LBB114_8:                              # %cond.end14
.LBB114_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB114_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB114_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB114_24
.LBB114_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB114_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB114_17
	jmp	.LBB114_18
.LBB114_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB114_18
	jmp	.LBB114_17
.LBB114_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB114_17
	jmp	.LBB114_18
.LBB114_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB114_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB114_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB114_23
.LBB114_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB114_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB114_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB114_23:                             # %if.end50
	jmp	.LBB114_24
.LBB114_24:                             # %if.end51
	jmp	.LBB114_25
.LBB114_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB114_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB114_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB114_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB114_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB114_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB114_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB114_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB114_35
.LBB114_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB114_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB114_38
.LBB114_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB114_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB114_39:                             # %if.end96
	jmp	.LBB114_40
.LBB114_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB114_43
.LBB114_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB114_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB114_89
.LBB114_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB114_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB114_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB114_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB114_49
.LBB114_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB114_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB114_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB114_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB114_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB114_55
.LBB114_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB114_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB114_58
.LBB114_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB114_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB114_59:                             # %if.end198
	jmp	.LBB114_60
.LBB114_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB114_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB114_64
.LBB114_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB114_64:                             # %if.end226
	jmp	.LBB114_88
.LBB114_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB114_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB114_76
.LBB114_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB114_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB114_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB114_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB114_72:                             # %if.end281
	jmp	.LBB114_73
.LBB114_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB114_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB114_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB114_87
.LBB114_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB114_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB114_77 Depth=1
	movl	$0, -44(%rbp)
.LBB114_79:                             # %for.cond310
                                        #   Parent Loop BB114_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB114_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB114_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB114_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB114_79
.LBB114_82:                             # %for.end
                                        #   in Loop: Header=BB114_77 Depth=1
	jmp	.LBB114_83
.LBB114_83:                             # %for.inc322
                                        #   in Loop: Header=BB114_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB114_77
.LBB114_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB114_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB114_86:                             # %if.end345
	jmp	.LBB114_87
.LBB114_87:                             # %if.end346
	jmp	.LBB114_88
.LBB114_88:                             # %if.end347
	jmp	.LBB114_89
.LBB114_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB114_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB114_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB114_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB114_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB114_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB114_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB114_98
.LBB114_97:                             # %if.else380
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB114_98:                             # %if.end382
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB114_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB114_101
.LBB114_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB114_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB114_101:                            # %lor.end415
                                        #   in Loop: Header=BB114_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB114_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB114_94
.LBB114_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB114_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB114_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB114_114
.LBB114_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB114_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB114_110
.LBB114_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB114_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB114_113
.LBB114_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB114_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB114_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB114_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB114_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_120
.LBB114_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB114_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB114_119:                            # %if.end483
	jmp	.LBB114_120
.LBB114_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB114_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB114_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB114_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB114_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB114_129
.LBB114_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB114_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB114_128:                            # %if.end516
	jmp	.LBB114_129
.LBB114_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1737369830, -92(%rbp)  # imm = 0x678E28E6
	jne	.LBB114_131
.LBB114_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_130
.Lfunc_end114:
	.size	writeMBLayer.73, .Lfunc_end114-writeMBLayer.73
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.74    # -- Begin function TransformDecision.74
	.p2align	4, 0x90
	.type	TransformDecision.74,@function
TransformDecision.74:                   # @TransformDecision.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$878863851, -88(%rbp)   # imm = 0x346265EB
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB115_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB115_3
.LBB115_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB115_3:                              # %if.end
	jmp	.LBB115_4
.LBB115_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_6 Depth 2
                                        #       Child Loop BB115_8 Depth 3
                                        #         Child Loop BB115_10 Depth 4
                                        #           Child Loop BB115_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB115_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB115_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_6:                              # %for.cond3
                                        #   Parent Loop BB115_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_8 Depth 3
                                        #         Child Loop BB115_10 Depth 4
                                        #           Child Loop BB115_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB115_8:                              # %for.cond8
                                        #   Parent Loop BB115_4 Depth=1
                                        #     Parent Loop BB115_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_10 Depth 4
                                        #           Child Loop BB115_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB115_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB115_10:                             # %for.cond13
                                        #   Parent Loop BB115_4 Depth=1
                                        #     Parent Loop BB115_6 Depth=2
                                        #       Parent Loop BB115_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB115_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB115_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB115_10 Depth=4
	movl	$0, -28(%rbp)
.LBB115_12:                             # %for.cond17
                                        #   Parent Loop BB115_4 Depth=1
                                        #     Parent Loop BB115_6 Depth=2
                                        #       Parent Loop BB115_8 Depth=3
                                        #         Parent Loop BB115_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB115_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB115_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB115_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB115_12
.LBB115_15:                             # %for.end
                                        #   in Loop: Header=BB115_10 Depth=4
	jmp	.LBB115_16
.LBB115_16:                             # %for.inc38
                                        #   in Loop: Header=BB115_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_10
.LBB115_17:                             # %for.end40
                                        #   in Loop: Header=BB115_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB115_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_8
.LBB115_19:                             # %for.end44
                                        #   in Loop: Header=BB115_6 Depth=2
	jmp	.LBB115_20
.LBB115_20:                             # %for.inc45
                                        #   in Loop: Header=BB115_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_6
.LBB115_21:                             # %for.end47
                                        #   in Loop: Header=BB115_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB115_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_4
.LBB115_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB115_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB115_28
.LBB115_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB115_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB115_28
.LBB115_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB115_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$878863851, -88(%rbp)   # imm = 0x346265EB
	jne	.LBB115_30
.LBB115_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_29
.Lfunc_end115:
	.size	TransformDecision.74, .Lfunc_end115-TransformDecision.74
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.75     # -- Begin function start_macroblock.75
	.p2align	4, 0x90
	.type	start_macroblock.75,@function
start_macroblock.75:                    # @start_macroblock.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$666867180, -84(%rbp)   # imm = 0x27BF95EC
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB116_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB116_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB116_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB116_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB116_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB116_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB116_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB116_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB116_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB116_8:                              # %if.end
                                        #   in Loop: Header=BB116_5 Depth=1
	jmp	.LBB116_9
.LBB116_9:                              # %for.inc
                                        #   in Loop: Header=BB116_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_5
.LBB116_10:                             # %for.end
	jmp	.LBB116_11
.LBB116_11:                             # %if.end19
	jmp	.LBB116_12
.LBB116_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB116_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB116_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB116_16
.LBB116_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB116_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB116_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_97
.LBB116_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB116_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB116_21
.LBB116_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_96
.LBB116_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB116_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB116_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB116_34
.LBB116_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_32
.LBB116_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB116_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_31
.LBB116_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB116_33
.LBB116_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB116_33:                             # %if.end112
	jmp	.LBB116_34
.LBB116_34:                             # %if.end113
	jmp	.LBB116_39
.LBB116_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB116_38
.LBB116_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB116_38:                             # %if.end125
	jmp	.LBB116_39
.LBB116_39:                             # %if.end126
	jmp	.LBB116_47
.LBB116_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB116_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_44
.LBB116_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_44:                             # %if.end140
	jmp	.LBB116_46
.LBB116_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB116_46:                             # %if.end145
	jmp	.LBB116_47
.LBB116_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB116_93
.LBB116_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB116_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB116_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB116_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_74
.LBB116_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB116_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB116_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_73
.LBB116_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB116_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB116_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_72
.LBB116_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB116_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB116_71
.LBB116_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB116_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB116_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB116_70:                             # %if.end223
	jmp	.LBB116_71
.LBB116_71:                             # %if.end224
	jmp	.LBB116_72
.LBB116_72:                             # %if.end225
	jmp	.LBB116_73
.LBB116_73:                             # %if.end226
	jmp	.LBB116_74
.LBB116_74:                             # %if.end227
	jmp	.LBB116_75
.LBB116_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB116_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB116_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB116_82
.LBB116_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB116_81:                             # %if.end256
	jmp	.LBB116_82
.LBB116_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB116_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB116_88
.LBB116_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB116_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB116_87
.LBB116_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_87:                             # %if.end292
	jmp	.LBB116_88
.LBB116_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB116_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB116_92
.LBB116_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB116_92:                             # %if.end305
	jmp	.LBB116_94
.LBB116_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB116_94:                             # %if.end309
	jmp	.LBB116_95
.LBB116_95:                             # %if.end310
	jmp	.LBB116_96
.LBB116_96:                             # %if.end311
	jmp	.LBB116_97
.LBB116_97:                             # %if.end312
	jmp	.LBB116_102
.LBB116_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB116_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB116_101
.LBB116_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB116_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB116_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB116_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB116_105
.LBB116_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB116_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB116_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB116_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB116_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_110 Depth 2
                                        #       Child Loop BB116_112 Depth 3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB116_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	$0, -20(%rbp)
.LBB116_110:                            # %for.cond364
                                        #   Parent Loop BB116_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_112 Depth 3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB116_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	$0, -12(%rbp)
.LBB116_112:                            # %for.cond368
                                        #   Parent Loop BB116_108 Depth=1
                                        #     Parent Loop BB116_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB116_112 Depth=3
	movl	$0, -36(%rbp)
.LBB116_114:                            # %for.cond372
                                        #   Parent Loop BB116_108 Depth=1
                                        #     Parent Loop BB116_110 Depth=2
                                        #       Parent Loop BB116_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB116_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB116_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB116_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_114
.LBB116_117:                            # %for.end388
                                        #   in Loop: Header=BB116_112 Depth=3
	jmp	.LBB116_118
.LBB116_118:                            # %for.inc389
                                        #   in Loop: Header=BB116_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_112
.LBB116_119:                            # %for.end391
                                        #   in Loop: Header=BB116_110 Depth=2
	jmp	.LBB116_120
.LBB116_120:                            # %for.inc392
                                        #   in Loop: Header=BB116_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_110
.LBB116_121:                            # %for.end394
                                        #   in Loop: Header=BB116_108 Depth=1
	jmp	.LBB116_122
.LBB116_122:                            # %for.inc395
                                        #   in Loop: Header=BB116_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_108
.LBB116_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB116_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_126 Depth 2
                                        #       Child Loop BB116_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB116_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	$0, -12(%rbp)
.LBB116_126:                            # %for.cond402
                                        #   Parent Loop BB116_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB116_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB116_126 Depth=2
	movl	$0, -16(%rbp)
.LBB116_128:                            # %for.cond406
                                        #   Parent Loop BB116_124 Depth=1
                                        #     Parent Loop BB116_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB116_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB116_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB116_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_128
.LBB116_131:                            # %for.end432
                                        #   in Loop: Header=BB116_126 Depth=2
	jmp	.LBB116_132
.LBB116_132:                            # %for.inc433
                                        #   in Loop: Header=BB116_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_126
.LBB116_133:                            # %for.end435
                                        #   in Loop: Header=BB116_124 Depth=1
	jmp	.LBB116_134
.LBB116_134:                            # %for.inc436
                                        #   in Loop: Header=BB116_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_124
.LBB116_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB116_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_138 Depth 2
                                        #       Child Loop BB116_140 Depth 3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB116_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	$0, -20(%rbp)
.LBB116_138:                            # %for.cond443
                                        #   Parent Loop BB116_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_140 Depth 3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB116_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	$0, -12(%rbp)
.LBB116_140:                            # %for.cond447
                                        #   Parent Loop BB116_136 Depth=1
                                        #     Parent Loop BB116_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB116_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB116_140 Depth=3
	movl	$0, -36(%rbp)
.LBB116_142:                            # %for.cond451
                                        #   Parent Loop BB116_136 Depth=1
                                        #     Parent Loop BB116_138 Depth=2
                                        #       Parent Loop BB116_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB116_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB116_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB116_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_142
.LBB116_145:                            # %for.end465
                                        #   in Loop: Header=BB116_140 Depth=3
	jmp	.LBB116_146
.LBB116_146:                            # %for.inc466
                                        #   in Loop: Header=BB116_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_140
.LBB116_147:                            # %for.end468
                                        #   in Loop: Header=BB116_138 Depth=2
	jmp	.LBB116_148
.LBB116_148:                            # %for.inc469
                                        #   in Loop: Header=BB116_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_138
.LBB116_149:                            # %for.end471
                                        #   in Loop: Header=BB116_136 Depth=1
	jmp	.LBB116_150
.LBB116_150:                            # %for.inc472
                                        #   in Loop: Header=BB116_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_136
.LBB116_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB116_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB116_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB116_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB116_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_152
.LBB116_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB116_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB116_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB116_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB116_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_156
.LBB116_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB116_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB116_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB116_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB116_166
.LBB116_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB116_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB116_165:                            # %if.end520
	jmp	.LBB116_166
.LBB116_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB116_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB116_168:                            # %if.end536
	cmpl	$666867180, -84(%rbp)   # imm = 0x27BF95EC
	jne	.LBB116_170
.LBB116_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_169
.Lfunc_end116:
	.size	start_macroblock.75, .Lfunc_end116-start_macroblock.75
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.76    # -- Begin function LumaPrediction4x4.76
	.p2align	4, 0x90
	.type	LumaPrediction4x4.76,@function
LumaPrediction4x4.76:                   # @LumaPrediction4x4.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$722313995, -100(%rbp)  # imm = 0x2B0DA30B
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB117_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB117_6
.LBB117_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB117_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB117_5:                              # %land.end
.LBB117_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB117_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB117_10
.LBB117_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB117_10
.LBB117_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB117_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB117_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB117_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -56(%rbp)
	jne	.LBB117_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB117_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_19
.LBB117_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB117_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB117_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB117_23
.LBB117_22:                             # %if.then45
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB117_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB117_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB117_26
.LBB117_25:                             # %if.then64
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB117_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB117_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB117_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB117_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_31:                             # %for.cond85
                                        #   Parent Loop BB117_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB117_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB117_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_31
.LBB117_34:                             # %for.end
                                        #   in Loop: Header=BB117_29 Depth=1
	jmp	.LBB117_35
.LBB117_35:                             # %for.inc125
                                        #   in Loop: Header=BB117_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_29
.LBB117_36:                             # %for.end127
	jmp	.LBB117_57
.LBB117_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB117_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB117_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_41:                             # %for.cond135
                                        #   Parent Loop BB117_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB117_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB117_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_41
.LBB117_44:                             # %for.end161
                                        #   in Loop: Header=BB117_39 Depth=1
	jmp	.LBB117_45
.LBB117_45:                             # %for.inc162
                                        #   in Loop: Header=BB117_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_39
.LBB117_46:                             # %for.end164
	jmp	.LBB117_56
.LBB117_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB117_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_50:                             # %for.cond170
                                        #   Parent Loop BB117_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB117_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB117_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_50
.LBB117_53:                             # %for.end196
                                        #   in Loop: Header=BB117_48 Depth=1
	jmp	.LBB117_54
.LBB117_54:                             # %for.inc197
                                        #   in Loop: Header=BB117_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_48
.LBB117_55:                             # %for.end199
	jmp	.LBB117_56
.LBB117_56:                             # %if.end200
	jmp	.LBB117_57
.LBB117_57:                             # %if.end201
	jmp	.LBB117_89
.LBB117_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB117_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB117_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_62:                             # %for.cond210
                                        #   Parent Loop BB117_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB117_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB117_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_62
.LBB117_65:                             # %for.end226
                                        #   in Loop: Header=BB117_60 Depth=1
	jmp	.LBB117_66
.LBB117_66:                             # %for.inc227
                                        #   in Loop: Header=BB117_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_60
.LBB117_67:                             # %for.end229
	jmp	.LBB117_88
.LBB117_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB117_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB117_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_72:                             # %for.cond238
                                        #   Parent Loop BB117_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB117_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB117_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_72
.LBB117_75:                             # %for.end251
                                        #   in Loop: Header=BB117_70 Depth=1
	jmp	.LBB117_76
.LBB117_76:                             # %for.inc252
                                        #   in Loop: Header=BB117_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_70
.LBB117_77:                             # %for.end254
	jmp	.LBB117_87
.LBB117_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB117_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_81:                             # %for.cond260
                                        #   Parent Loop BB117_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB117_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB117_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_81
.LBB117_84:                             # %for.end273
                                        #   in Loop: Header=BB117_79 Depth=1
	jmp	.LBB117_85
.LBB117_85:                             # %for.inc274
                                        #   in Loop: Header=BB117_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_79
.LBB117_86:                             # %for.end276
	jmp	.LBB117_87
.LBB117_87:                             # %if.end277
	jmp	.LBB117_88
.LBB117_88:                             # %if.end278
	jmp	.LBB117_89
.LBB117_89:                             # %if.end279
	cmpl	$722313995, -100(%rbp)  # imm = 0x2B0DA30B
	jne	.LBB117_91
.LBB117_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_90
.Lfunc_end117:
	.size	LumaPrediction4x4.76, .Lfunc_end117-LumaPrediction4x4.76
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.77 # -- Begin function proceed2nextMacroblock.77
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.77,@function
proceed2nextMacroblock.77:              # @proceed2nextMacroblock.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1443752334, -28(%rbp)  # imm = 0x560DE98E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB118_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB118_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB118_9
.LBB118_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB118_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB118_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB118_7
.LBB118_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB118_7:                              # %if.end
	jmp	.LBB118_8
.LBB118_8:                              # %if.end48
	jmp	.LBB118_9
.LBB118_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB118_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB118_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB118_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB118_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB118_16
.LBB118_15:                             # %if.else86
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB118_16:                             # %if.end94
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB118_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB118_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB118_20
.LBB118_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB118_21
.LBB118_20:                             # %if.then107
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB118_22
.LBB118_21:                             # %if.else114
                                        #   in Loop: Header=BB118_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB118_22:                             # %if.end121
                                        #   in Loop: Header=BB118_12 Depth=1
	jmp	.LBB118_23
.LBB118_23:                             # %if.end122
                                        #   in Loop: Header=BB118_12 Depth=1
	jmp	.LBB118_24
.LBB118_24:                             # %for.inc
                                        #   in Loop: Header=BB118_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_12
.LBB118_25:                             # %for.end
	jmp	.LBB118_34
.LBB118_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB118_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB118_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB118_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB118_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB118_32
.LBB118_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB118_32:                             # %if.end155
	jmp	.LBB118_33
.LBB118_33:                             # %if.end156
	jmp	.LBB118_34
.LBB118_34:                             # %if.end157
	jmp	.LBB118_35
.LBB118_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB118_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB118_38
.LBB118_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB118_38:                             # %if.end167
	cmpl	$1443752334, -28(%rbp)  # imm = 0x560DE98E
	jne	.LBB118_40
.LBB118_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_39
.Lfunc_end118:
	.size	proceed2nextMacroblock.77, .Lfunc_end118-proceed2nextMacroblock.77
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.78 # -- Begin function write_terminating_bit.78
	.p2align	4, 0x90
	.type	write_terminating_bit.78,@function
write_terminating_bit.78:               # @write_terminating_bit.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$203116693, -8(%rbp)    # imm = 0xC1B5095
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$203116693, -8(%rbp)    # imm = 0xC1B5095
	jne	.LBB119_2
.LBB119_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_1
.Lfunc_end119:
	.size	write_terminating_bit.78, .Lfunc_end119-write_terminating_bit.78
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.79 # -- Begin function writeLumaCoeff4x4_CABAC.79
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.79,@function
writeLumaCoeff4x4_CABAC.79:             # @writeLumaCoeff4x4_CABAC.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$949252895, -52(%rbp)   # imm = 0x3894731F
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB120_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB120_3
.LBB120_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB120_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB120_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB120_6
.LBB120_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB120_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB120_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB120_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB120_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB120_9:                              # %land.end
                                        #   in Loop: Header=BB120_7 Depth=1
	testb	$1, %al
	jne	.LBB120_10
	jmp	.LBB120_15
.LBB120_10:                             # %for.body
                                        #   in Loop: Header=BB120_7 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB120_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB120_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB120_13
.LBB120_12:                             # %cond.false40
                                        #   in Loop: Header=BB120_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB120_13:                             # %cond.end43
                                        #   in Loop: Header=BB120_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB120_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_7
.LBB120_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$949252895, -52(%rbp)   # imm = 0x3894731F
	jne	.LBB120_17
.LBB120_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_16
.Lfunc_end120:
	.size	writeLumaCoeff4x4_CABAC.79, .Lfunc_end120-writeLumaCoeff4x4_CABAC.79
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.80  # -- Begin function writeCoeff4x4_CAVLC.80
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.80,@function
writeCoeff4x4_CAVLC.80:                 # @writeCoeff4x4_CAVLC.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1097877389, -168(%rbp) # imm = 0x4170478D
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB121_22
# %bb.1:                                # %entry
	movq	.LJTI121_0(,%rax,8), %rax
	jmpq	*%rax
.LBB121_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB121_6
.LBB121_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB121_7
.LBB121_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB121_7:                              # %if.end
	jmp	.LBB121_23
.LBB121_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB121_23
.LBB121_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB121_23
.LBB121_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB121_14
.LBB121_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB121_15
.LBB121_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB121_15:                             # %if.end67
	jmp	.LBB121_23
.LBB121_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB121_20
.LBB121_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB121_21
.LBB121_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB121_21:                             # %if.end93
	jmp	.LBB121_23
.LBB121_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB121_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB121_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB121_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB121_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB121_27
.LBB121_26:                             # %cond.false
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB121_27
.LBB121_27:                             # %cond.end
                                        #   in Loop: Header=BB121_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB121_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB121_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB121_29:                             # %land.end
                                        #   in Loop: Header=BB121_24 Depth=1
	testb	$1, %dl
	jne	.LBB121_30
	jmp	.LBB121_41
.LBB121_30:                             # %for.body
                                        #   in Loop: Header=BB121_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB121_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB121_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB121_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB121_33:                             # %if.end110
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB121_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB121_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	$3, -32(%rbp)
.LBB121_36:                             # %if.end117
                                        #   in Loop: Header=BB121_24 Depth=1
	jmp	.LBB121_38
.LBB121_37:                             # %if.else118
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	$0, -32(%rbp)
.LBB121_38:                             # %if.end119
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB121_39:                             # %if.end121
                                        #   in Loop: Header=BB121_24 Depth=1
	jmp	.LBB121_40
.LBB121_40:                             # %for.inc
                                        #   in Loop: Header=BB121_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_24
.LBB121_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB121_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB121_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB121_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB121_46
.LBB121_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB121_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB121_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB121_49
.LBB121_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB121_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-104(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB121_51
.LBB121_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-104(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB121_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB121_53
# %bb.52:                               # %if.then160
	movl	$0, -88(%rbp)
	jmp	.LBB121_60
.LBB121_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB121_55
# %bb.54:                               # %if.then163
	movl	$1, -88(%rbp)
	jmp	.LBB121_59
.LBB121_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB121_57
# %bb.56:                               # %if.then166
	movl	$2, -88(%rbp)
	jmp	.LBB121_58
.LBB121_57:                             # %if.else167
	movl	$3, -88(%rbp)
.LBB121_58:                             # %if.end168
	jmp	.LBB121_59
.LBB121_59:                             # %if.end169
	jmp	.LBB121_60
.LBB121_60:                             # %if.end170
	jmp	.LBB121_62
.LBB121_61:                             # %if.else171
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB121_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB121_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB121_65
.LBB121_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB121_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB121_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB121_122
.LBB121_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB121_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB121_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB121_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB121_72:                             # %if.end202
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB121_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB121_74:                             # %if.end205
                                        #   in Loop: Header=BB121_69 Depth=1
	jmp	.LBB121_75
.LBB121_75:                             # %for.inc206
                                        #   in Loop: Header=BB121_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_69
.LBB121_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB121_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB121_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB121_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB121_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB121_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB121_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB121_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB121_85
.LBB121_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB121_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB121_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB121_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB121_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB121_91
.LBB121_90:                             # %if.else249
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB121_91:                             # %if.end252
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	$0, -140(%rbp)
.LBB121_92:                             # %if.end253
                                        #   in Loop: Header=BB121_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB121_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB121_95
.LBB121_94:                             # %if.else257
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB121_95:                             # %if.end259
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB121_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB121_97:                             # %if.end266
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB121_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB121_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	$2, -28(%rbp)
.LBB121_100:                            # %if.end273
                                        #   in Loop: Header=BB121_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB121_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_86
.LBB121_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB121_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB121_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB121_106
.LBB121_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB121_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB121_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB121_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB121_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB121_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB121_108 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB121_112
.LBB121_111:                            # %if.then318
	jmp	.LBB121_120
.LBB121_112:                            # %if.end319
                                        #   in Loop: Header=BB121_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB121_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB121_108 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB121_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	-100(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB121_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	$6, -28(%rbp)
.LBB121_116:                            # %if.end327
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-96(%rbp), %eax
	movl	-100(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB121_117:                            # %if.end341
                                        #   in Loop: Header=BB121_108 Depth=1
	jmp	.LBB121_118
.LBB121_118:                            # %for.inc342
                                        #   in Loop: Header=BB121_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_108
.LBB121_119:                            # %for.end344.loopexit
	jmp	.LBB121_120
.LBB121_120:                            # %for.end344
	jmp	.LBB121_121
.LBB121_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB121_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$1097877389, -168(%rbp) # imm = 0x4170478D
	jne	.LBB121_124
.LBB121_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_123
.Lfunc_end121:
	.size	writeCoeff4x4_CAVLC.80, .Lfunc_end121-writeCoeff4x4_CAVLC.80
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI121_0:
	.quad	.LBB121_2
	.quad	.LBB121_8
	.quad	.LBB121_9
	.quad	.LBB121_22
	.quad	.LBB121_22
	.quad	.LBB121_22
	.quad	.LBB121_10
	.quad	.LBB121_16
                                        # -- End function
	.text
	.globl	copyblock4x4.81         # -- Begin function copyblock4x4.81
	.p2align	4, 0x90
	.type	copyblock4x4.81,@function
copyblock4x4.81:                        # @copyblock4x4.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$996861197, -20(%rbp)   # imm = 0x3B6AE50D
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$996861197, -20(%rbp)   # imm = 0x3B6AE50D
	jne	.LBB122_2
.LBB122_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_1
.Lfunc_end122:
	.size	copyblock4x4.81, .Lfunc_end122-copyblock4x4.81
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.82  # -- Begin function ChromaPrediction4x4.82
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.82,@function
ChromaPrediction4x4.82:                 # @ChromaPrediction4x4.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1237838993, -72(%rbp)  # imm = 0x49C7EC91
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB123_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB123_6
.LBB123_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB123_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB123_5:                              # %land.end
.LBB123_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB123_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB123_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB123_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB123_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB123_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB123_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB123_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB123_15
.LBB123_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB123_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB123_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB123_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB123_87
.LBB123_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB123_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB123_21
.LBB123_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB123_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB123_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB123_24
.LBB123_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB123_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB123_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB123_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB123_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_29:                             # %for.cond52
                                        #   Parent Loop BB123_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB123_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB123_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_29
.LBB123_32:                             # %for.end
                                        #   in Loop: Header=BB123_27 Depth=1
	jmp	.LBB123_33
.LBB123_33:                             # %for.inc99
                                        #   in Loop: Header=BB123_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_27
.LBB123_34:                             # %for.end101
	jmp	.LBB123_55
.LBB123_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB123_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB123_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_39:                             # %for.cond109
                                        #   Parent Loop BB123_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB123_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB123_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_39
.LBB123_42:                             # %for.end139
                                        #   in Loop: Header=BB123_37 Depth=1
	jmp	.LBB123_43
.LBB123_43:                             # %for.inc140
                                        #   in Loop: Header=BB123_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_37
.LBB123_44:                             # %for.end142
	jmp	.LBB123_54
.LBB123_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB123_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_48:                             # %for.cond148
                                        #   Parent Loop BB123_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB123_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB123_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_48
.LBB123_51:                             # %for.end178
                                        #   in Loop: Header=BB123_46 Depth=1
	jmp	.LBB123_52
.LBB123_52:                             # %for.inc179
                                        #   in Loop: Header=BB123_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_46
.LBB123_53:                             # %for.end181
	jmp	.LBB123_54
.LBB123_54:                             # %if.end182
	jmp	.LBB123_55
.LBB123_55:                             # %if.end183
	jmp	.LBB123_87
.LBB123_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB123_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB123_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_60:                             # %for.cond192
                                        #   Parent Loop BB123_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB123_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB123_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_60
.LBB123_63:                             # %for.end208
                                        #   in Loop: Header=BB123_58 Depth=1
	jmp	.LBB123_64
.LBB123_64:                             # %for.inc209
                                        #   in Loop: Header=BB123_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_58
.LBB123_65:                             # %for.end211
	jmp	.LBB123_86
.LBB123_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB123_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB123_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_70:                             # %for.cond220
                                        #   Parent Loop BB123_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB123_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB123_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_70
.LBB123_73:                             # %for.end233
                                        #   in Loop: Header=BB123_68 Depth=1
	jmp	.LBB123_74
.LBB123_74:                             # %for.inc234
                                        #   in Loop: Header=BB123_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_68
.LBB123_75:                             # %for.end236
	jmp	.LBB123_85
.LBB123_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB123_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_79:                             # %for.cond242
                                        #   Parent Loop BB123_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB123_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB123_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_79
.LBB123_82:                             # %for.end255
                                        #   in Loop: Header=BB123_77 Depth=1
	jmp	.LBB123_83
.LBB123_83:                             # %for.inc256
                                        #   in Loop: Header=BB123_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_77
.LBB123_84:                             # %for.end258
	jmp	.LBB123_85
.LBB123_85:                             # %if.end259
	jmp	.LBB123_86
.LBB123_86:                             # %if.end260
	jmp	.LBB123_87
.LBB123_87:                             # %if.end261
	cmpl	$1237838993, -72(%rbp)  # imm = 0x49C7EC91
	jne	.LBB123_89
.LBB123_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_88
.Lfunc_end123:
	.size	ChromaPrediction4x4.82, .Lfunc_end123-ChromaPrediction4x4.82
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.83 # -- Begin function IntraChromaPrediction4x4.83
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.83,@function
IntraChromaPrediction4x4.83:            # @IntraChromaPrediction4x4.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1550146618, -28(%rbp)  # imm = 0x5C655C3A
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_3:                              # %for.cond1
                                        #   Parent Loop BB124_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_3
.LBB124_6:                              # %for.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_7
.LBB124_7:                              # %for.inc17
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_1
.LBB124_8:                              # %for.end19
	cmpl	$1550146618, -28(%rbp)  # imm = 0x5C655C3A
	jne	.LBB124_10
.LBB124_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_9
.Lfunc_end124:
	.size	IntraChromaPrediction4x4.83, .Lfunc_end124-IntraChromaPrediction4x4.83
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.84  # -- Begin function ChromaPrediction4x4.84
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.84,@function
ChromaPrediction4x4.84:                 # @ChromaPrediction4x4.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$434932830, -72(%rbp)   # imm = 0x19EC8C5E
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB125_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB125_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB125_6
.LBB125_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB125_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB125_5:                              # %land.end
.LBB125_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB125_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB125_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB125_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB125_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB125_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB125_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB125_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB125_15
.LBB125_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB125_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB125_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB125_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB125_87
.LBB125_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB125_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB125_21
.LBB125_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB125_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB125_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB125_24
.LBB125_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB125_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB125_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB125_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_29:                             # %for.cond52
                                        #   Parent Loop BB125_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB125_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB125_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_29
.LBB125_32:                             # %for.end
                                        #   in Loop: Header=BB125_27 Depth=1
	jmp	.LBB125_33
.LBB125_33:                             # %for.inc99
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_27
.LBB125_34:                             # %for.end101
	jmp	.LBB125_55
.LBB125_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB125_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB125_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_39:                             # %for.cond109
                                        #   Parent Loop BB125_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB125_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB125_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_39
.LBB125_42:                             # %for.end139
                                        #   in Loop: Header=BB125_37 Depth=1
	jmp	.LBB125_43
.LBB125_43:                             # %for.inc140
                                        #   in Loop: Header=BB125_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_37
.LBB125_44:                             # %for.end142
	jmp	.LBB125_54
.LBB125_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB125_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_48:                             # %for.cond148
                                        #   Parent Loop BB125_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB125_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB125_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_48
.LBB125_51:                             # %for.end178
                                        #   in Loop: Header=BB125_46 Depth=1
	jmp	.LBB125_52
.LBB125_52:                             # %for.inc179
                                        #   in Loop: Header=BB125_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_46
.LBB125_53:                             # %for.end181
	jmp	.LBB125_54
.LBB125_54:                             # %if.end182
	jmp	.LBB125_55
.LBB125_55:                             # %if.end183
	jmp	.LBB125_87
.LBB125_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB125_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB125_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_60:                             # %for.cond192
                                        #   Parent Loop BB125_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB125_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB125_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_60
.LBB125_63:                             # %for.end208
                                        #   in Loop: Header=BB125_58 Depth=1
	jmp	.LBB125_64
.LBB125_64:                             # %for.inc209
                                        #   in Loop: Header=BB125_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_58
.LBB125_65:                             # %for.end211
	jmp	.LBB125_86
.LBB125_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB125_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB125_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_70:                             # %for.cond220
                                        #   Parent Loop BB125_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB125_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB125_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_70
.LBB125_73:                             # %for.end233
                                        #   in Loop: Header=BB125_68 Depth=1
	jmp	.LBB125_74
.LBB125_74:                             # %for.inc234
                                        #   in Loop: Header=BB125_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_68
.LBB125_75:                             # %for.end236
	jmp	.LBB125_85
.LBB125_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB125_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_79:                             # %for.cond242
                                        #   Parent Loop BB125_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB125_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB125_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB125_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_79
.LBB125_82:                             # %for.end255
                                        #   in Loop: Header=BB125_77 Depth=1
	jmp	.LBB125_83
.LBB125_83:                             # %for.inc256
                                        #   in Loop: Header=BB125_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_77
.LBB125_84:                             # %for.end258
	jmp	.LBB125_85
.LBB125_85:                             # %if.end259
	jmp	.LBB125_86
.LBB125_86:                             # %if.end260
	jmp	.LBB125_87
.LBB125_87:                             # %if.end261
	cmpl	$434932830, -72(%rbp)   # imm = 0x19EC8C5E
	jne	.LBB125_89
.LBB125_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_88
.Lfunc_end125:
	.size	ChromaPrediction4x4.84, .Lfunc_end125-ChromaPrediction4x4.84
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.85 # -- Begin function writeChromaIntraPredMode.85
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.85,@function
writeChromaIntraPredMode.85:            # @writeChromaIntraPredMode.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1598208139, -36(%rbp)  # imm = 0x5F42B88B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB126_3
.LBB126_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1598208139, -36(%rbp)  # imm = 0x5F42B88B
	jne	.LBB126_5
.LBB126_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_4
.Lfunc_end126:
	.size	writeChromaIntraPredMode.85, .Lfunc_end126-writeChromaIntraPredMode.85
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.86 # -- Begin function writeLumaCoeff4x4_CABAC.86
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.86,@function
writeLumaCoeff4x4_CABAC.86:             # @writeLumaCoeff4x4_CABAC.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1655103241, -52(%rbp)  # imm = 0x62A6DF09
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB127_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB127_3
.LBB127_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB127_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB127_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB127_6
.LBB127_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB127_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB127_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB127_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB127_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB127_9:                              # %land.end
                                        #   in Loop: Header=BB127_7 Depth=1
	testb	$1, %al
	jne	.LBB127_10
	jmp	.LBB127_15
.LBB127_10:                             # %for.body
                                        #   in Loop: Header=BB127_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB127_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB127_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB127_13
.LBB127_12:                             # %cond.false40
                                        #   in Loop: Header=BB127_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB127_13:                             # %cond.end43
                                        #   in Loop: Header=BB127_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB127_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_7
.LBB127_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1655103241, -52(%rbp)  # imm = 0x62A6DF09
	jne	.LBB127_17
.LBB127_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_16
.Lfunc_end127:
	.size	writeLumaCoeff4x4_CABAC.86, .Lfunc_end127-writeLumaCoeff4x4_CABAC.86
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.87 # -- Begin function writeLumaCoeff4x4_CABAC.87
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.87,@function
writeLumaCoeff4x4_CABAC.87:             # @writeLumaCoeff4x4_CABAC.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$529902659, -52(%rbp)   # imm = 0x1F95AC43
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB128_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB128_3
.LBB128_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB128_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB128_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB128_6
.LBB128_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB128_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB128_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB128_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB128_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB128_9:                              # %land.end
                                        #   in Loop: Header=BB128_7 Depth=1
	testb	$1, %al
	jne	.LBB128_10
	jmp	.LBB128_15
.LBB128_10:                             # %for.body
                                        #   in Loop: Header=BB128_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB128_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB128_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB128_13
.LBB128_12:                             # %cond.false40
                                        #   in Loop: Header=BB128_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB128_13:                             # %cond.end43
                                        #   in Loop: Header=BB128_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB128_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_7
.LBB128_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$529902659, -52(%rbp)   # imm = 0x1F95AC43
	jne	.LBB128_17
.LBB128_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_16
.Lfunc_end128:
	.size	writeLumaCoeff4x4_CABAC.87, .Lfunc_end128-writeLumaCoeff4x4_CABAC.87
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.88 # -- Begin function writeCBPandLumaCoeff.88
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.88,@function
writeCBPandLumaCoeff.88:                # @writeCBPandLumaCoeff.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$63634800, -104(%rbp)   # imm = 0x3CAFD70
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB129_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB129_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB129_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB129_7
.LBB129_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB129_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB129_10
.LBB129_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB129_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB129_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB129_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB129_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB129_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB129_18
.LBB129_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB129_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB129_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB129_18
.LBB129_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB129_22
.LBB129_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB129_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB129_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB129_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB129_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB129_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB129_26
.LBB129_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB129_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB129_29
.LBB129_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB129_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB129_30:                             # %if.end93
	jmp	.LBB129_31
.LBB129_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB129_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB129_42
.LBB129_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB129_36
.LBB129_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB129_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB129_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB129_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB129_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB129_41
.LBB129_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB129_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB129_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB129_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB129_43 Depth=1
	movl	$0, -20(%rbp)
.LBB129_45:                             # %for.cond141
                                        #   Parent Loop BB129_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB129_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB129_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB129_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_45
.LBB129_48:                             # %for.end
                                        #   in Loop: Header=BB129_43 Depth=1
	jmp	.LBB129_49
.LBB129_49:                             # %for.inc152
                                        #   in Loop: Header=BB129_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB129_43
.LBB129_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB129_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB129_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB129_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB129_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB129_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB129_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_55:                             # %if.end169
                                        #   in Loop: Header=BB129_52 Depth=1
	jmp	.LBB129_56
.LBB129_56:                             # %for.inc170
                                        #   in Loop: Header=BB129_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_52
.LBB129_57:                             # %for.end172
	jmp	.LBB129_101
.LBB129_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB129_70
.LBB129_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB129_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB129_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB129_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB129_63:                             # %land.end184
                                        #   in Loop: Header=BB129_61 Depth=1
	testb	$1, %al
	jne	.LBB129_64
	jmp	.LBB129_69
.LBB129_64:                             # %for.body186
                                        #   in Loop: Header=BB129_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB129_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB129_67
.LBB129_66:                             # %if.else196
                                        #   in Loop: Header=BB129_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB129_67:                             # %if.end198
                                        #   in Loop: Header=BB129_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB129_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB129_61
.LBB129_69:                             # %for.end218
	jmp	.LBB129_70
.LBB129_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB129_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB129_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_74 Depth 2
                                        #       Child Loop BB129_76 Depth 3
                                        #         Child Loop BB129_78 Depth 4
                                        #           Child Loop BB129_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB129_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB129_72 Depth=1
	movl	$0, -56(%rbp)
.LBB129_74:                             # %for.cond226
                                        #   Parent Loop BB129_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_76 Depth 3
                                        #         Child Loop BB129_78 Depth 4
                                        #           Child Loop BB129_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB129_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB129_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB129_76:                             # %for.cond229
                                        #   Parent Loop BB129_72 Depth=1
                                        #     Parent Loop BB129_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB129_78 Depth 4
                                        #           Child Loop BB129_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB129_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB129_78:                             # %for.cond233
                                        #   Parent Loop BB129_72 Depth=1
                                        #     Parent Loop BB129_74 Depth=2
                                        #       Parent Loop BB129_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB129_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB129_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB129_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB129_91
.LBB129_81:                             # %if.else247
                                        #   in Loop: Header=BB129_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB129_82:                             # %for.cond259
                                        #   Parent Loop BB129_72 Depth=1
                                        #     Parent Loop BB129_74 Depth=2
                                        #       Parent Loop BB129_76 Depth=3
                                        #         Parent Loop BB129_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB129_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB129_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB129_84:                             # %land.end263
                                        #   in Loop: Header=BB129_82 Depth=5
	testb	$1, %al
	jne	.LBB129_85
	jmp	.LBB129_90
.LBB129_85:                             # %for.body265
                                        #   in Loop: Header=BB129_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB129_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB129_88
.LBB129_87:                             # %if.else276
                                        #   in Loop: Header=BB129_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB129_88:                             # %if.end278
                                        #   in Loop: Header=BB129_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB129_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB129_82
.LBB129_90:                             # %for.end300
                                        #   in Loop: Header=BB129_78 Depth=4
	jmp	.LBB129_91
.LBB129_91:                             # %if.end301
                                        #   in Loop: Header=BB129_78 Depth=4
	jmp	.LBB129_92
.LBB129_92:                             # %for.inc302
                                        #   in Loop: Header=BB129_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_78
.LBB129_93:                             # %for.end304
                                        #   in Loop: Header=BB129_76 Depth=3
	jmp	.LBB129_94
.LBB129_94:                             # %for.inc305
                                        #   in Loop: Header=BB129_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB129_76
.LBB129_95:                             # %for.end307
                                        #   in Loop: Header=BB129_74 Depth=2
	jmp	.LBB129_96
.LBB129_96:                             # %for.inc308
                                        #   in Loop: Header=BB129_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB129_74
.LBB129_97:                             # %for.end310
                                        #   in Loop: Header=BB129_72 Depth=1
	jmp	.LBB129_98
.LBB129_98:                             # %for.inc311
                                        #   in Loop: Header=BB129_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB129_72
.LBB129_99:                             # %for.end313
	jmp	.LBB129_100
.LBB129_100:                            # %if.end314
	jmp	.LBB129_101
.LBB129_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$63634800, -104(%rbp)   # imm = 0x3CAFD70
	jne	.LBB129_103
.LBB129_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_102
.Lfunc_end129:
	.size	writeCBPandLumaCoeff.88, .Lfunc_end129-writeCBPandLumaCoeff.88
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.89        # -- Begin function slice_too_big.89
	.p2align	4, 0x90
	.type	slice_too_big.89,@function
slice_too_big.89:                       # @slice_too_big.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$427002638, -52(%rbp)   # imm = 0x19738B0E
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB130_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB130_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB130_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB130_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB130_5:                              # %if.end
                                        #   in Loop: Header=BB130_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB130_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB130_7:                              # %if.end8
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB130_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB130_21
.LBB130_9:                              # %if.end11
                                        #   in Loop: Header=BB130_2 Depth=1
	jmp	.LBB130_10
.LBB130_10:                             # %for.inc
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_2
.LBB130_11:                             # %for.end
	jmp	.LBB130_12
.LBB130_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB130_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB130_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB130_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB130_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB130_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB130_21
.LBB130_17:                             # %if.end27
                                        #   in Loop: Header=BB130_14 Depth=1
	jmp	.LBB130_18
.LBB130_18:                             # %for.inc28
                                        #   in Loop: Header=BB130_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_14
.LBB130_19:                             # %for.end30
	jmp	.LBB130_20
.LBB130_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB130_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$427002638, -52(%rbp)   # imm = 0x19738B0E
	jne	.LBB130_23
.LBB130_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_22
.Lfunc_end130:
	.size	slice_too_big.89, .Lfunc_end130-slice_too_big.89
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.90 # -- Begin function writeLumaCoeff4x4_CABAC.90
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.90,@function
writeLumaCoeff4x4_CABAC.90:             # @writeLumaCoeff4x4_CABAC.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1909815531, -52(%rbp)  # imm = 0x71D578EB
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB131_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB131_3
.LBB131_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB131_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB131_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB131_6
.LBB131_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB131_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB131_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB131_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB131_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB131_9:                              # %land.end
                                        #   in Loop: Header=BB131_7 Depth=1
	testb	$1, %al
	jne	.LBB131_10
	jmp	.LBB131_15
.LBB131_10:                             # %for.body
                                        #   in Loop: Header=BB131_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB131_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB131_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB131_13
.LBB131_12:                             # %cond.false40
                                        #   in Loop: Header=BB131_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB131_13:                             # %cond.end43
                                        #   in Loop: Header=BB131_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB131_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_7
.LBB131_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1909815531, -52(%rbp)  # imm = 0x71D578EB
	jne	.LBB131_17
.LBB131_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_16
.Lfunc_end131:
	.size	writeLumaCoeff4x4_CABAC.90, .Lfunc_end131-writeLumaCoeff4x4_CABAC.90
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.91         # -- Begin function copyblock4x4.91
	.p2align	4, 0x90
	.type	copyblock4x4.91,@function
copyblock4x4.91:                        # @copyblock4x4.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1800949204, -20(%rbp)  # imm = 0x6B584DD4
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1800949204, -20(%rbp)  # imm = 0x6B584DD4
	jne	.LBB132_2
.LBB132_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_1
.Lfunc_end132:
	.size	copyblock4x4.91, .Lfunc_end132-copyblock4x4.91
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.92        # -- Begin function slice_too_big.92
	.p2align	4, 0x90
	.type	slice_too_big.92,@function
slice_too_big.92:                       # @slice_too_big.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2088095524, -56(%rbp)  # imm = 0x7C75CF24
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB133_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB133_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB133_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB133_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB133_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB133_5:                              # %if.end
                                        #   in Loop: Header=BB133_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB133_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB133_7:                              # %if.end8
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB133_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB133_21
.LBB133_9:                              # %if.end11
                                        #   in Loop: Header=BB133_2 Depth=1
	jmp	.LBB133_10
.LBB133_10:                             # %for.inc
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_2
.LBB133_11:                             # %for.end
	jmp	.LBB133_12
.LBB133_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB133_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB133_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB133_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB133_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB133_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB133_21
.LBB133_17:                             # %if.end27
                                        #   in Loop: Header=BB133_14 Depth=1
	jmp	.LBB133_18
.LBB133_18:                             # %for.inc28
                                        #   in Loop: Header=BB133_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_14
.LBB133_19:                             # %for.end30
	jmp	.LBB133_20
.LBB133_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB133_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2088095524, -56(%rbp)  # imm = 0x7C75CF24
	jne	.LBB133_23
.LBB133_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_22
.Lfunc_end133:
	.size	slice_too_big.92, .Lfunc_end133-slice_too_big.92
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.93 # -- Begin function writeLumaCoeff8x8_CABAC.93
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.93,@function
writeLumaCoeff8x8_CABAC.93:             # @writeLumaCoeff8x8_CABAC.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$311178671, -60(%rbp)   # imm = 0x128C35AF
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB134_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB134_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB134_3:                              # %land.end
                                        #   in Loop: Header=BB134_1 Depth=1
	testb	$1, %al
	jne	.LBB134_4
	jmp	.LBB134_12
.LBB134_4:                              # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB134_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB134_7
.LBB134_6:                              # %cond.false
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB134_7:                              # %cond.end
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB134_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB134_10
.LBB134_9:                              # %if.else
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB134_10:                             # %if.end
                                        #   in Loop: Header=BB134_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB134_1
.LBB134_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$311178671, -60(%rbp)   # imm = 0x128C35AF
	jne	.LBB134_14
.LBB134_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_13
.Lfunc_end134:
	.size	writeLumaCoeff8x8_CABAC.93, .Lfunc_end134-writeLumaCoeff8x8_CABAC.93
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.94     # -- Begin function writeChromaCoeff.94
	.p2align	4, 0x90
	.type	writeChromaCoeff.94,@function
writeChromaCoeff.94:                    # @writeChromaCoeff.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1759681821, -84(%rbp)  # imm = 0x68E29D1D
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB135_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB135_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB135_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB135_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB135_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB135_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB135_21
.LBB135_5:                              # %if.else
                                        #   in Loop: Header=BB135_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB135_6:                              # %for.cond18
                                        #   Parent Loop BB135_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB135_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB135_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB135_8:                              # %land.end
                                        #   in Loop: Header=BB135_6 Depth=2
	testb	$1, %al
	jne	.LBB135_9
	jmp	.LBB135_20
.LBB135_9:                              # %for.body21
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB135_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB135_12
.LBB135_11:                             # %if.else29
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB135_12:                             # %if.end
                                        #   in Loop: Header=BB135_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB135_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB135_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB135_15:                             # %lor.end
                                        #   in Loop: Header=BB135_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB135_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB135_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB135_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB135_18:                             # %lor.end45
                                        #   in Loop: Header=BB135_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB135_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_6
.LBB135_20:                             # %for.end
                                        #   in Loop: Header=BB135_2 Depth=1
	jmp	.LBB135_21
.LBB135_21:                             # %if.end58
                                        #   in Loop: Header=BB135_2 Depth=1
	jmp	.LBB135_22
.LBB135_22:                             # %for.inc59
                                        #   in Loop: Header=BB135_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB135_2
.LBB135_23:                             # %for.end61
	jmp	.LBB135_24
.LBB135_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB135_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB135_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_28 Depth 2
                                        #       Child Loop BB135_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB135_26 Depth=1
	movl	$0, -36(%rbp)
.LBB135_28:                             # %for.cond69
                                        #   Parent Loop BB135_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB135_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB135_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB135_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB135_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB135_47
.LBB135_31:                             # %if.else84
                                        #   in Loop: Header=BB135_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB135_32:                             # %for.cond115
                                        #   Parent Loop BB135_26 Depth=1
                                        #     Parent Loop BB135_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB135_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB135_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB135_34:                             # %land.end121
                                        #   in Loop: Header=BB135_32 Depth=3
	testb	$1, %al
	jne	.LBB135_35
	jmp	.LBB135_46
.LBB135_35:                             # %for.body122
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB135_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB135_38
.LBB135_37:                             # %if.else134
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB135_38:                             # %if.end136
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB135_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB135_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB135_41:                             # %lor.end149
                                        #   in Loop: Header=BB135_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB135_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB135_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB135_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB135_44:                             # %lor.end164
                                        #   in Loop: Header=BB135_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB135_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_32
.LBB135_46:                             # %for.end189
                                        #   in Loop: Header=BB135_28 Depth=2
	jmp	.LBB135_47
.LBB135_47:                             # %if.end190
                                        #   in Loop: Header=BB135_28 Depth=2
	jmp	.LBB135_48
.LBB135_48:                             # %for.inc191
                                        #   in Loop: Header=BB135_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB135_28
.LBB135_49:                             # %for.end193
                                        #   in Loop: Header=BB135_26 Depth=1
	jmp	.LBB135_50
.LBB135_50:                             # %for.inc194
                                        #   in Loop: Header=BB135_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB135_26
.LBB135_51:                             # %for.end196
	jmp	.LBB135_52
.LBB135_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1759681821, -84(%rbp)  # imm = 0x68E29D1D
	jne	.LBB135_54
.LBB135_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_53
.Lfunc_end135:
	.size	writeChromaCoeff.94, .Lfunc_end135-writeChromaCoeff.94
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.95 # -- Begin function OneComponentLumaPrediction4x4.95
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.95,@function
OneComponentLumaPrediction4x4.95:       # @OneComponentLumaPrediction4x4.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$569300889, -92(%rbp)   # imm = 0x21EED799
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$569300889, -92(%rbp)   # imm = 0x21EED799
	jne	.LBB136_2
.LBB136_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_1
.Lfunc_end136:
	.size	OneComponentLumaPrediction4x4.95, .Lfunc_end136-OneComponentLumaPrediction4x4.95
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.96       # -- Begin function find_sad_16x16.96
	.p2align	4, 0x90
	.type	find_sad_16x16.96,@function
find_sad_16x16.96:                      # @find_sad_16x16.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$29168265, -80(%rbp)    # imm = 0x1BD1289
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB137_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_1
.LBB137_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB137_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB137_20
.LBB137_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB137_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB137_9
.LBB137_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB137_9
.LBB137_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB137_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB137_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB137_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB137_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB137_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB137_14
.LBB137_13:                             # %cond.false23
                                        #   in Loop: Header=BB137_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB137_14
.LBB137_14:                             # %cond.end24
                                        #   in Loop: Header=BB137_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB137_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_10
.LBB137_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB137_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB137_19
.LBB137_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB137_19
.LBB137_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB137_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB137_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_42 Depth 2
                                        #       Child Loop BB137_44 Depth 3
                                        #     Child Loop BB137_50 Depth 2
                                        #       Child Loop BB137_52 Depth 3
                                        #         Child Loop BB137_54 Depth 4
                                        #         Child Loop BB137_58 Depth 4
                                        #           Child Loop BB137_60 Depth 5
                                        #     Child Loop BB137_72 Depth 2
                                        #       Child Loop BB137_74 Depth 3
                                        #     Child Loop BB137_80 Depth 2
                                        #     Child Loop BB137_84 Depth 2
                                        #       Child Loop BB137_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB137_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB137_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB137_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB137_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB137_32
.LBB137_24:                             # %if.then46
                                        #   in Loop: Header=BB137_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB137_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB137_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB137_28
.LBB137_27:                             # %if.then51
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_95
.LBB137_28:                             # %if.end52
                                        #   in Loop: Header=BB137_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB137_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB137_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_95
.LBB137_31:                             # %if.end57
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_32
.LBB137_32:                             # %if.end58
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB137_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB137_40
.LBB137_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB137_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB137_40
.LBB137_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB137_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB137_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB137_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB137_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB137_41
.LBB137_40:                             # %if.then74
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_94
.LBB137_41:                             # %if.else75
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	$0, -16(%rbp)
.LBB137_42:                             # %for.cond76
                                        #   Parent Loop BB137_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB137_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB137_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB137_42 Depth=2
	movl	$0, -12(%rbp)
.LBB137_44:                             # %for.cond79
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB137_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB137_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB137_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_44
.LBB137_47:                             # %for.end115
                                        #   in Loop: Header=BB137_42 Depth=2
	jmp	.LBB137_48
.LBB137_48:                             # %for.inc116
                                        #   in Loop: Header=BB137_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_42
.LBB137_49:                             # %for.end118
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB137_50:                             # %for.cond119
                                        #   Parent Loop BB137_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB137_52 Depth 3
                                        #         Child Loop BB137_54 Depth 4
                                        #         Child Loop BB137_58 Depth 4
                                        #           Child Loop BB137_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB137_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB137_50 Depth=2
	movl	$0, -24(%rbp)
.LBB137_52:                             # %for.cond123
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB137_54 Depth 4
                                        #         Child Loop BB137_58 Depth 4
                                        #           Child Loop BB137_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB137_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB137_52 Depth=3
	movl	$0, -16(%rbp)
.LBB137_54:                             # %for.cond127
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_50 Depth=2
                                        #       Parent Loop BB137_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB137_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB137_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB137_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_54
.LBB137_57:                             # %for.end237
                                        #   in Loop: Header=BB137_52 Depth=3
	movl	$0, -12(%rbp)
.LBB137_58:                             # %for.cond238
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_50 Depth=2
                                        #       Parent Loop BB137_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB137_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB137_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB137_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB137_60:                             # %for.cond346
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_50 Depth=2
                                        #       Parent Loop BB137_52 Depth=3
                                        #         Parent Loop BB137_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB137_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB137_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB137_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB137_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB137_63:                             # %if.end363
                                        #   in Loop: Header=BB137_60 Depth=5
	jmp	.LBB137_64
.LBB137_64:                             # %for.inc364
                                        #   in Loop: Header=BB137_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_60
.LBB137_65:                             # %for.end366
                                        #   in Loop: Header=BB137_58 Depth=4
	jmp	.LBB137_66
.LBB137_66:                             # %for.inc367
                                        #   in Loop: Header=BB137_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_58
.LBB137_67:                             # %for.end369
                                        #   in Loop: Header=BB137_52 Depth=3
	jmp	.LBB137_68
.LBB137_68:                             # %for.inc370
                                        #   in Loop: Header=BB137_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB137_52
.LBB137_69:                             # %for.end372
                                        #   in Loop: Header=BB137_50 Depth=2
	jmp	.LBB137_70
.LBB137_70:                             # %for.inc373
                                        #   in Loop: Header=BB137_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB137_50
.LBB137_71:                             # %for.end375
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	$0, -16(%rbp)
.LBB137_72:                             # %for.cond376
                                        #   Parent Loop BB137_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB137_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB137_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB137_72 Depth=2
	movl	$0, -12(%rbp)
.LBB137_74:                             # %for.cond380
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB137_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB137_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB137_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_74
.LBB137_77:                             # %for.end397
                                        #   in Loop: Header=BB137_72 Depth=2
	jmp	.LBB137_78
.LBB137_78:                             # %for.inc398
                                        #   in Loop: Header=BB137_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_72
.LBB137_79:                             # %for.end400
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	$0, -16(%rbp)
.LBB137_80:                             # %for.cond401
                                        #   Parent Loop BB137_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB137_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB137_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB137_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_80
.LBB137_83:                             # %for.end463
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	$0, -12(%rbp)
.LBB137_84:                             # %for.cond464
                                        #   Parent Loop BB137_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB137_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB137_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB137_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB137_86:                             # %for.cond524
                                        #   Parent Loop BB137_21 Depth=1
                                        #     Parent Loop BB137_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB137_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB137_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB137_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_86
.LBB137_89:                             # %for.end536
                                        #   in Loop: Header=BB137_84 Depth=2
	jmp	.LBB137_90
.LBB137_90:                             # %for.inc537
                                        #   in Loop: Header=BB137_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_84
.LBB137_91:                             # %for.end539
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB137_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB137_93:                             # %if.end543
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_94
.LBB137_94:                             # %if.end544
                                        #   in Loop: Header=BB137_21 Depth=1
	jmp	.LBB137_95
.LBB137_95:                             # %for.inc545
                                        #   in Loop: Header=BB137_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB137_21
.LBB137_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$29168265, -80(%rbp)    # imm = 0x1BD1289
	jne	.LBB137_98
.LBB137_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_97
.Lfunc_end137:
	.size	find_sad_16x16.96, .Lfunc_end137-find_sad_16x16.96
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.97   # -- Begin function writeIntra4x4Modes.97
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.97,@function
writeIntra4x4Modes.97:                  # @writeIntra4x4Modes.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$64925851, -80(%rbp)    # imm = 0x3DEB09B
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_9 Depth 2
                                        #       Child Loop BB138_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB138_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB138_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB138_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB138_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB138_8
.LBB138_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB138_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB138_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB138_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB138_17
.LBB138_8:                              # %if.then
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB138_9:                              # %for.cond24
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB138_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB138_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB138_9 Depth=2
	movl	$0, -12(%rbp)
.LBB138_11:                             # %for.cond27
                                        #   Parent Loop BB138_1 Depth=1
                                        #     Parent Loop BB138_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB138_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB138_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB138_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_11
.LBB138_14:                             # %for.end
                                        #   in Loop: Header=BB138_9 Depth=2
	jmp	.LBB138_15
.LBB138_15:                             # %for.inc42
                                        #   in Loop: Header=BB138_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB138_9
.LBB138_16:                             # %for.end44
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_17
.LBB138_17:                             # %if.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_18
.LBB138_18:                             # %for.inc45
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_1
.LBB138_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB138_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB138_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_23:                             # %if.end57
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB138_26
.LBB138_25:                             # %if.else
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB138_26:                             # %if.end65
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB138_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_20
.LBB138_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$64925851, -80(%rbp)    # imm = 0x3DEB09B
	jne	.LBB138_30
.LBB138_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_29
.Lfunc_end138:
	.size	writeIntra4x4Modes.97, .Lfunc_end138-writeIntra4x4Modes.97
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.98 # -- Begin function writeLumaCoeff8x8_CABAC.98
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.98,@function
writeLumaCoeff8x8_CABAC.98:             # @writeLumaCoeff8x8_CABAC.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1722036450, -60(%rbp)  # imm = 0x66A430E2
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB139_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB139_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB139_3:                              # %land.end
                                        #   in Loop: Header=BB139_1 Depth=1
	testb	$1, %al
	jne	.LBB139_4
	jmp	.LBB139_12
.LBB139_4:                              # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB139_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB139_7
.LBB139_6:                              # %cond.false
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB139_7:                              # %cond.end
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB139_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB139_10
.LBB139_9:                              # %if.else
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB139_10:                             # %if.end
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_1
.LBB139_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1722036450, -60(%rbp)  # imm = 0x66A430E2
	jne	.LBB139_14
.LBB139_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_13
.Lfunc_end139:
	.size	writeLumaCoeff8x8_CABAC.98, .Lfunc_end139-writeLumaCoeff8x8_CABAC.98
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.99   # -- Begin function predict_nnz_chroma.99
	.p2align	4, 0x90
	.type	predict_nnz_chroma.99,@function
predict_nnz_chroma.99:                  # @predict_nnz_chroma.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$741820833, -64(%rbp)   # imm = 0x2C3749A1
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB140_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB140_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB140_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB140_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB140_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB140_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB140_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB140_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB140_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB140_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB140_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB140_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB140_13:                             # %if.end57
	jmp	.LBB140_27
.LBB140_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB140_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB140_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB140_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB140_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB140_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB140_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB140_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB140_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB140_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB140_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB140_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB140_26:                             # %if.end124
	jmp	.LBB140_27
.LBB140_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB140_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB140_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$741820833, -64(%rbp)   # imm = 0x2C3749A1
	jne	.LBB140_31
.LBB140_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_30
.Lfunc_end140:
	.size	predict_nnz_chroma.99, .Lfunc_end140-predict_nnz_chroma.99
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.100 # -- Begin function LumaResidualCoding8x8.100
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.100,@function
LumaResidualCoding8x8.100:              # @LumaResidualCoding8x8.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$2140428093, -128(%rbp) # imm = 0x7F94573D
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB141_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB141_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB141_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB141_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB141_5:                              # %if.end
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB141_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_8 Depth 2
                                        #       Child Loop BB141_11 Depth 3
                                        #         Child Loop BB141_13 Depth 4
                                        #       Child Loop BB141_19 Depth 3
                                        #         Child Loop BB141_21 Depth 4
                                        #       Child Loop BB141_29 Depth 3
                                        #         Child Loop BB141_31 Depth 4
                                        #       Child Loop BB141_40 Depth 3
                                        #         Child Loop BB141_42 Depth 4
                                        #       Child Loop BB141_57 Depth 3
                                        #         Child Loop BB141_59 Depth 4
                                        #       Child Loop BB141_67 Depth 3
                                        #         Child Loop BB141_69 Depth 4
                                        #       Child Loop BB141_84 Depth 3
                                        #         Child Loop BB141_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB141_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB141_8:                              # %for.cond9
                                        #   Parent Loop BB141_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_11 Depth 3
                                        #         Child Loop BB141_13 Depth 4
                                        #       Child Loop BB141_19 Depth 3
                                        #         Child Loop BB141_21 Depth 4
                                        #       Child Loop BB141_29 Depth 3
                                        #         Child Loop BB141_31 Depth 4
                                        #       Child Loop BB141_40 Depth 3
                                        #         Child Loop BB141_42 Depth 4
                                        #       Child Loop BB141_57 Depth 3
                                        #         Child Loop BB141_59 Depth 4
                                        #       Child Loop BB141_67 Depth 3
                                        #         Child Loop BB141_69 Depth 4
                                        #       Child Loop BB141_84 Depth 3
                                        #         Child Loop BB141_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB141_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB141_11:                             # %for.cond16
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB141_11 Depth=3
	movl	$0, -12(%rbp)
.LBB141_13:                             # %for.cond20
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB141_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB141_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_13
.LBB141_16:                             # %for.end
                                        #   in Loop: Header=BB141_11 Depth=3
	jmp	.LBB141_17
.LBB141_17:                             # %for.inc37
                                        #   in Loop: Header=BB141_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_11
.LBB141_18:                             # %for.end39
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB141_19:                             # %for.cond41
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB141_19 Depth=3
	movl	$0, -12(%rbp)
.LBB141_21:                             # %for.cond45
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB141_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB141_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_21
.LBB141_24:                             # %for.end65
                                        #   in Loop: Header=BB141_19 Depth=3
	jmp	.LBB141_25
.LBB141_25:                             # %for.inc66
                                        #   in Loop: Header=BB141_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_19
.LBB141_26:                             # %for.end68
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_27
.LBB141_27:                             # %if.end69
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB141_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	$0, -16(%rbp)
.LBB141_29:                             # %for.cond74
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB141_29 Depth=3
	movl	$0, -12(%rbp)
.LBB141_31:                             # %for.cond78
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB141_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB141_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_31
.LBB141_34:                             # %for.end98
                                        #   in Loop: Header=BB141_29 Depth=3
	jmp	.LBB141_35
.LBB141_35:                             # %for.inc99
                                        #   in Loop: Header=BB141_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_29
.LBB141_36:                             # %for.end101
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_37
.LBB141_37:                             # %if.end102
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB141_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB141_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	$0, -16(%rbp)
.LBB141_40:                             # %for.cond108
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB141_40 Depth=3
	movl	$0, -12(%rbp)
.LBB141_42:                             # %for.cond112
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB141_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB141_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_42
.LBB141_45:                             # %for.end137
                                        #   in Loop: Header=BB141_40 Depth=3
	jmp	.LBB141_46
.LBB141_46:                             # %for.inc138
                                        #   in Loop: Header=BB141_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_40
.LBB141_47:                             # %for.end140
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB141_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB141_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB141_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB141_52
.LBB141_51:                             # %if.else
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB141_52:                             # %if.end151
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB141_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB141_54:                             # %if.end157
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_55
.LBB141_55:                             # %if.end158
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_65
.LBB141_56:                             # %if.else159
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	$0, -16(%rbp)
.LBB141_57:                             # %for.cond160
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB141_57 Depth=3
	movl	$0, -12(%rbp)
.LBB141_59:                             # %for.cond164
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB141_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB141_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_59
.LBB141_62:                             # %for.end193
                                        #   in Loop: Header=BB141_57 Depth=3
	jmp	.LBB141_63
.LBB141_63:                             # %for.inc194
                                        #   in Loop: Header=BB141_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_57
.LBB141_64:                             # %for.end196
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_65
.LBB141_65:                             # %if.end197
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_95
.LBB141_66:                             # %if.else198
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	$0, -16(%rbp)
.LBB141_67:                             # %for.cond199
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB141_67 Depth=3
	movl	$0, -12(%rbp)
.LBB141_69:                             # %for.cond203
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB141_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -64(%rbp)
	jne	.LBB141_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB141_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB141_73
.LBB141_72:                             # %if.else300
                                        #   in Loop: Header=BB141_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB141_73:                             # %if.end314
                                        #   in Loop: Header=BB141_69 Depth=4
	jmp	.LBB141_74
.LBB141_74:                             # %for.inc315
                                        #   in Loop: Header=BB141_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_69
.LBB141_75:                             # %for.end317
                                        #   in Loop: Header=BB141_67 Depth=3
	jmp	.LBB141_76
.LBB141_76:                             # %for.inc318
                                        #   in Loop: Header=BB141_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_67
.LBB141_77:                             # %for.end320
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB141_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB141_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB141_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB141_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB141_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB141_83
.LBB141_82:                             # %if.else334
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB141_83:                             # %if.end336
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	$0, -16(%rbp)
.LBB141_84:                             # %for.cond337
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB141_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB141_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB141_84 Depth=3
	movl	$0, -12(%rbp)
.LBB141_86:                             # %for.cond341
                                        #   Parent Loop BB141_6 Depth=1
                                        #     Parent Loop BB141_8 Depth=2
                                        #       Parent Loop BB141_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB141_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB141_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB141_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_86
.LBB141_89:                             # %for.end358
                                        #   in Loop: Header=BB141_84 Depth=3
	jmp	.LBB141_90
.LBB141_90:                             # %for.inc359
                                        #   in Loop: Header=BB141_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_84
.LBB141_91:                             # %for.end361
                                        #   in Loop: Header=BB141_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB141_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB141_93:                             # %if.end368
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_94
.LBB141_94:                             # %if.end369
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_95
.LBB141_95:                             # %if.end370
                                        #   in Loop: Header=BB141_8 Depth=2
	jmp	.LBB141_96
.LBB141_96:                             # %for.inc371
                                        #   in Loop: Header=BB141_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_8
.LBB141_97:                             # %for.end374
                                        #   in Loop: Header=BB141_6 Depth=1
	jmp	.LBB141_98
.LBB141_98:                             # %for.inc375
                                        #   in Loop: Header=BB141_6 Depth=1
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB141_6
.LBB141_99:                             # %for.end378
	cmpl	$0, -64(%rbp)
	je	.LBB141_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB141_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB141_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB141_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB141_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB141_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB141_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB141_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB141_106 Depth=1
	movl	$0, -12(%rbp)
.LBB141_108:                            # %for.cond400
                                        #   Parent Loop BB141_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB141_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB141_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB141_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_108
.LBB141_111:                            # %for.end417
                                        #   in Loop: Header=BB141_106 Depth=1
	jmp	.LBB141_112
.LBB141_112:                            # %for.inc418
                                        #   in Loop: Header=BB141_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_106
.LBB141_113:                            # %for.end420
	jmp	.LBB141_114
.LBB141_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB141_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB141_116:                            # %if.end431
	jmp	.LBB141_117
.LBB141_117:                            # %if.end432
	jmp	.LBB141_118
.LBB141_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB141_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB141_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB141_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB141_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB141_145
.LBB141_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-68(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB141_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB141_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB141_126:                            # %for.cond462
                                        #   Parent Loop BB141_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB141_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB141_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB141_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB141_130
.LBB141_129:                            # %if.else481
                                        #   in Loop: Header=BB141_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB141_130:                            # %if.end486
                                        #   in Loop: Header=BB141_126 Depth=2
	jmp	.LBB141_131
.LBB141_131:                            # %for.inc487
                                        #   in Loop: Header=BB141_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_126
.LBB141_132:                            # %for.end489
                                        #   in Loop: Header=BB141_124 Depth=1
	jmp	.LBB141_133
.LBB141_133:                            # %for.inc490
                                        #   in Loop: Header=BB141_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_124
.LBB141_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB141_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB141_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB141_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB141_138:                            # %for.cond502
                                        #   Parent Loop BB141_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB141_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB141_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB141_138
.LBB141_141:                            # %for.end509
                                        #   in Loop: Header=BB141_136 Depth=1
	jmp	.LBB141_142
.LBB141_142:                            # %for.inc510
                                        #   in Loop: Header=BB141_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_136
.LBB141_143:                            # %for.end512
	jmp	.LBB141_144
.LBB141_144:                            # %if.end513
	jmp	.LBB141_145
.LBB141_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$2140428093, -128(%rbp) # imm = 0x7F94573D
	jne	.LBB141_147
.LBB141_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_146
.Lfunc_end141:
	.size	LumaResidualCoding8x8.100, .Lfunc_end141-LumaResidualCoding8x8.100
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.101        # -- Begin function MBType2Value.101
	.p2align	4, 0x90
	.type	MBType2Value.101,@function
MBType2Value.101:                       # @MBType2Value.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1631150715, -36(%rbp)  # imm = 0x6139627B
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB142_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB142_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB142_4
.LBB142_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB142_26
.LBB142_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB142_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB142_26
.LBB142_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB142_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB142_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB142_26
.LBB142_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB142_26
.LBB142_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_26
.LBB142_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB142_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB142_26
.LBB142_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB142_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB142_17
.LBB142_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB142_26
.LBB142_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB142_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_26
.LBB142_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB142_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB142_26
.LBB142_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB142_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_26
.LBB142_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB142_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_26
.LBB142_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB142_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1631150715, -36(%rbp)  # imm = 0x6139627B
	jne	.LBB142_28
.LBB142_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_27
.Lfunc_end142:
	.size	MBType2Value.101, .Lfunc_end142-MBType2Value.101
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.102  # -- Begin function LumaResidualCoding.102
	.p2align	4, 0x90
	.type	LumaResidualCoding.102,@function
LumaResidualCoding.102:                 # @LumaResidualCoding.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2080590354, -40(%rbp)  # imm = 0x7C034A12
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB143_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB143_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB143_1
.LBB143_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB143_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB143_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB143_33
.LBB143_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB143_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB143_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB143_8 Depth=1
	movl	$0, -12(%rbp)
.LBB143_10:                             # %for.cond13
                                        #   Parent Loop BB143_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB143_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB143_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB143_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB143_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB143_14
.LBB143_13:                             # %if.else
                                        #   in Loop: Header=BB143_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB143_14:                             # %if.end
                                        #   in Loop: Header=BB143_10 Depth=2
	jmp	.LBB143_15
.LBB143_15:                             # %for.inc31
                                        #   in Loop: Header=BB143_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_10
.LBB143_16:                             # %for.end33
                                        #   in Loop: Header=BB143_8 Depth=1
	jmp	.LBB143_17
.LBB143_17:                             # %for.inc34
                                        #   in Loop: Header=BB143_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB143_8
.LBB143_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB143_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB143_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_22 Depth 2
                                        #       Child Loop BB143_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB143_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB143_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB143_22:                             # %for.cond45
                                        #   Parent Loop BB143_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB143_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB143_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB143_22 Depth=2
	movl	$0, -12(%rbp)
.LBB143_24:                             # %for.cond48
                                        #   Parent Loop BB143_20 Depth=1
                                        #     Parent Loop BB143_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB143_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB143_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB143_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_24
.LBB143_27:                             # %for.end55
                                        #   in Loop: Header=BB143_22 Depth=2
	jmp	.LBB143_28
.LBB143_28:                             # %for.inc56
                                        #   in Loop: Header=BB143_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB143_22
.LBB143_29:                             # %for.end58
                                        #   in Loop: Header=BB143_20 Depth=1
	jmp	.LBB143_30
.LBB143_30:                             # %for.inc59
                                        #   in Loop: Header=BB143_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB143_20
.LBB143_31:                             # %for.end61
	jmp	.LBB143_32
.LBB143_32:                             # %if.end62
	jmp	.LBB143_33
.LBB143_33:                             # %if.end63
	cmpl	$2080590354, -40(%rbp)  # imm = 0x7C034A12
	jne	.LBB143_35
.LBB143_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_34
.Lfunc_end143:
	.size	LumaResidualCoding.102, .Lfunc_end143-LumaResidualCoding.102
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.103 # -- Begin function LumaPrediction4x4Bi.103
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.103,@function
LumaPrediction4x4Bi.103:                # @LumaPrediction4x4Bi.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1455939321, -80(%rbp)  # imm = 0x56C7DEF9
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB144_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB144_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB144_6
.LBB144_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB144_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB144_5:                              # %land.end
.LBB144_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB144_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB144_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB144_10
.LBB144_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB144_10
.LBB144_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB144_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB144_13
.LBB144_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB144_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB144_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB144_16
.LBB144_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB144_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB144_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB144_19
.LBB144_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB144_19:                             # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB144_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB144_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB144_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_24:                             # %for.cond58
                                        #   Parent Loop BB144_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB144_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB144_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_24
.LBB144_27:                             # %for.end
                                        #   in Loop: Header=BB144_22 Depth=1
	jmp	.LBB144_28
.LBB144_28:                             # %for.inc96
                                        #   in Loop: Header=BB144_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_22
.LBB144_29:                             # %for.end98
	jmp	.LBB144_50
.LBB144_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB144_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB144_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_34:                             # %for.cond106
                                        #   Parent Loop BB144_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB144_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB144_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_34
.LBB144_37:                             # %for.end132
                                        #   in Loop: Header=BB144_32 Depth=1
	jmp	.LBB144_38
.LBB144_38:                             # %for.inc133
                                        #   in Loop: Header=BB144_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_32
.LBB144_39:                             # %for.end135
	jmp	.LBB144_49
.LBB144_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB144_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_43:                             # %for.cond141
                                        #   Parent Loop BB144_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB144_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB144_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_43
.LBB144_46:                             # %for.end167
                                        #   in Loop: Header=BB144_41 Depth=1
	jmp	.LBB144_47
.LBB144_47:                             # %for.inc168
                                        #   in Loop: Header=BB144_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_41
.LBB144_48:                             # %for.end170
	jmp	.LBB144_49
.LBB144_49:                             # %if.end171
	jmp	.LBB144_50
.LBB144_50:                             # %if.end172
	jmp	.LBB144_82
.LBB144_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB144_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB144_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_55:                             # %for.cond181
                                        #   Parent Loop BB144_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB144_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB144_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_55
.LBB144_58:                             # %for.end197
                                        #   in Loop: Header=BB144_53 Depth=1
	jmp	.LBB144_59
.LBB144_59:                             # %for.inc198
                                        #   in Loop: Header=BB144_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_53
.LBB144_60:                             # %for.end200
	jmp	.LBB144_81
.LBB144_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB144_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB144_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_65:                             # %for.cond209
                                        #   Parent Loop BB144_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB144_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB144_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_65
.LBB144_68:                             # %for.end222
                                        #   in Loop: Header=BB144_63 Depth=1
	jmp	.LBB144_69
.LBB144_69:                             # %for.inc223
                                        #   in Loop: Header=BB144_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_63
.LBB144_70:                             # %for.end225
	jmp	.LBB144_80
.LBB144_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB144_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB144_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_74:                             # %for.cond231
                                        #   Parent Loop BB144_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB144_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB144_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB144_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_74
.LBB144_77:                             # %for.end244
                                        #   in Loop: Header=BB144_72 Depth=1
	jmp	.LBB144_78
.LBB144_78:                             # %for.inc245
                                        #   in Loop: Header=BB144_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_72
.LBB144_79:                             # %for.end247
	jmp	.LBB144_80
.LBB144_80:                             # %if.end248
	jmp	.LBB144_81
.LBB144_81:                             # %if.end249
	jmp	.LBB144_82
.LBB144_82:                             # %if.end250
	cmpl	$1455939321, -80(%rbp)  # imm = 0x56C7DEF9
	jne	.LBB144_84
.LBB144_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_83
.Lfunc_end144:
	.size	LumaPrediction4x4Bi.103, .Lfunc_end144-LumaPrediction4x4Bi.103
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.104 # -- Begin function writeCoeff4x4_CAVLC.104
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.104,@function
writeCoeff4x4_CAVLC.104:                # @writeCoeff4x4_CAVLC.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1089410796, -168(%rbp) # imm = 0x40EF16EC
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB145_22
# %bb.1:                                # %entry
	movq	.LJTI145_0(,%rax,8), %rax
	jmpq	*%rax
.LBB145_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB145_6
.LBB145_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB145_7
.LBB145_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB145_7:                              # %if.end
	jmp	.LBB145_23
.LBB145_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB145_23
.LBB145_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB145_23
.LBB145_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB145_14
.LBB145_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB145_15
.LBB145_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB145_15:                             # %if.end67
	jmp	.LBB145_23
.LBB145_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB145_20
.LBB145_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB145_21
.LBB145_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB145_21:                             # %if.end93
	jmp	.LBB145_23
.LBB145_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB145_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB145_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB145_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB145_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB145_27
.LBB145_26:                             # %cond.false
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB145_27
.LBB145_27:                             # %cond.end
                                        #   in Loop: Header=BB145_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB145_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB145_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB145_29:                             # %land.end
                                        #   in Loop: Header=BB145_24 Depth=1
	testb	$1, %dl
	jne	.LBB145_30
	jmp	.LBB145_41
.LBB145_30:                             # %for.body
                                        #   in Loop: Header=BB145_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB145_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB145_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB145_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB145_33:                             # %if.end110
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB145_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB145_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	$3, -28(%rbp)
.LBB145_36:                             # %if.end117
                                        #   in Loop: Header=BB145_24 Depth=1
	jmp	.LBB145_38
.LBB145_37:                             # %if.else118
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	$0, -28(%rbp)
.LBB145_38:                             # %if.end119
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB145_39:                             # %if.end121
                                        #   in Loop: Header=BB145_24 Depth=1
	jmp	.LBB145_40
.LBB145_40:                             # %for.inc
                                        #   in Loop: Header=BB145_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_24
.LBB145_41:                             # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB145_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB145_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB145_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB145_46
.LBB145_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB145_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB145_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB145_49
.LBB145_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB145_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB145_51
.LBB145_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB145_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB145_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB145_60
.LBB145_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB145_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB145_59
.LBB145_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB145_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB145_58
.LBB145_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB145_58:                             # %if.end168
	jmp	.LBB145_59
.LBB145_59:                             # %if.end169
	jmp	.LBB145_60
.LBB145_60:                             # %if.end170
	jmp	.LBB145_62
.LBB145_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB145_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB145_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB145_65
.LBB145_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB145_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB145_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB145_122
.LBB145_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB145_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB145_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB145_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB145_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB145_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB145_72:                             # %if.end202
                                        #   in Loop: Header=BB145_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB145_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB145_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB145_74:                             # %if.end205
                                        #   in Loop: Header=BB145_69 Depth=1
	jmp	.LBB145_75
.LBB145_75:                             # %for.inc206
                                        #   in Loop: Header=BB145_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_69
.LBB145_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB145_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB145_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB145_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB145_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB145_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB145_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB145_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB145_85
.LBB145_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB145_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB145_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB145_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB145_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB145_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB145_91
.LBB145_90:                             # %if.else249
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB145_91:                             # %if.end252
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	$0, -140(%rbp)
.LBB145_92:                             # %if.end253
                                        #   in Loop: Header=BB145_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB145_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB145_95
.LBB145_94:                             # %if.else257
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB145_95:                             # %if.end259
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB145_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB145_97:                             # %if.end266
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB145_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB145_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	$2, -32(%rbp)
.LBB145_100:                            # %if.end273
                                        #   in Loop: Header=BB145_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB145_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_86
.LBB145_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB145_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB145_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB145_106
.LBB145_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB145_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB145_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB145_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB145_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB145_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB145_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB145_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB145_112
.LBB145_111:                            # %if.then318
	jmp	.LBB145_120
.LBB145_112:                            # %if.end319
                                        #   in Loop: Header=BB145_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB145_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB145_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB145_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB145_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB145_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB145_108 Depth=1
	movl	$6, -32(%rbp)
.LBB145_116:                            # %if.end327
                                        #   in Loop: Header=BB145_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB145_117:                            # %if.end341
                                        #   in Loop: Header=BB145_108 Depth=1
	jmp	.LBB145_118
.LBB145_118:                            # %for.inc342
                                        #   in Loop: Header=BB145_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_108
.LBB145_119:                            # %for.end344.loopexit
	jmp	.LBB145_120
.LBB145_120:                            # %for.end344
	jmp	.LBB145_121
.LBB145_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB145_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1089410796, -168(%rbp) # imm = 0x40EF16EC
	jne	.LBB145_124
.LBB145_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_123
.Lfunc_end145:
	.size	writeCoeff4x4_CAVLC.104, .Lfunc_end145-writeCoeff4x4_CAVLC.104
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI145_0:
	.quad	.LBB145_2
	.quad	.LBB145_8
	.quad	.LBB145_9
	.quad	.LBB145_22
	.quad	.LBB145_22
	.quad	.LBB145_22
	.quad	.LBB145_10
	.quad	.LBB145_16
                                        # -- End function
	.text
	.globl	writeMotionInfo2NAL.105 # -- Begin function writeMotionInfo2NAL.105
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.105,@function
writeMotionInfo2NAL.105:                # @writeMotionInfo2NAL.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$977401446, -56(%rbp)   # imm = 0x3A41F666
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB146_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB146_3
.LBB146_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB146_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB146_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB146_6
.LBB146_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB146_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB146_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB146_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB146_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB146_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB146_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB146_39
.LBB146_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB146_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB146_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB146_15 Depth=1
	movl	$0, -12(%rbp)
.LBB146_17:                             # %for.cond45
                                        #   Parent Loop BB146_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB146_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB146_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB146_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB146_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB146_22
.LBB146_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB146_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB146_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB146_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB146_22:                             # %if.end
                                        #   in Loop: Header=BB146_17 Depth=2
	jmp	.LBB146_23
.LBB146_23:                             # %for.inc
                                        #   in Loop: Header=BB146_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_17
.LBB146_24:                             # %for.end
                                        #   in Loop: Header=BB146_15 Depth=1
	jmp	.LBB146_25
.LBB146_25:                             # %for.inc79
                                        #   in Loop: Header=BB146_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB146_15
.LBB146_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB146_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB146_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB146_27 Depth=1
	movl	$0, -12(%rbp)
.LBB146_29:                             # %for.cond86
                                        #   Parent Loop BB146_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB146_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB146_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB146_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB146_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB146_34
.LBB146_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB146_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB146_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB146_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB146_34:                             # %if.end126
                                        #   in Loop: Header=BB146_29 Depth=2
	jmp	.LBB146_35
.LBB146_35:                             # %for.inc127
                                        #   in Loop: Header=BB146_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_29
.LBB146_36:                             # %for.end129
                                        #   in Loop: Header=BB146_27 Depth=1
	jmp	.LBB146_37
.LBB146_37:                             # %for.inc130
                                        #   in Loop: Header=BB146_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB146_27
.LBB146_38:                             # %for.end132
	jmp	.LBB146_39
.LBB146_39:                             # %if.end133
	jmp	.LBB146_40
.LBB146_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB146_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB146_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB146_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB146_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB146_45 Depth=1
	movl	$0, -12(%rbp)
.LBB146_47:                             # %for.cond155
                                        #   Parent Loop BB146_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB146_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB146_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB146_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB146_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB146_52
.LBB146_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB146_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB146_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB146_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB146_52:                             # %if.end197
                                        #   in Loop: Header=BB146_47 Depth=2
	jmp	.LBB146_53
.LBB146_53:                             # %for.inc198
                                        #   in Loop: Header=BB146_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_47
.LBB146_54:                             # %for.end200
                                        #   in Loop: Header=BB146_45 Depth=1
	jmp	.LBB146_55
.LBB146_55:                             # %for.inc201
                                        #   in Loop: Header=BB146_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB146_45
.LBB146_56:                             # %for.end203
	jmp	.LBB146_57
.LBB146_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB146_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB146_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB146_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB146_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB146_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB146_63 Depth=1
	movl	$0, -12(%rbp)
.LBB146_65:                             # %for.cond227
                                        #   Parent Loop BB146_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB146_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB146_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB146_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB146_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB146_70
.LBB146_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB146_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB146_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB146_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB146_70:                             # %if.end269
                                        #   in Loop: Header=BB146_65 Depth=2
	jmp	.LBB146_71
.LBB146_71:                             # %for.inc270
                                        #   in Loop: Header=BB146_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_65
.LBB146_72:                             # %for.end272
                                        #   in Loop: Header=BB146_63 Depth=1
	jmp	.LBB146_73
.LBB146_73:                             # %for.inc273
                                        #   in Loop: Header=BB146_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB146_63
.LBB146_74:                             # %for.end275
	jmp	.LBB146_75
.LBB146_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$977401446, -56(%rbp)   # imm = 0x3A41F666
	jne	.LBB146_77
.LBB146_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_76
.Lfunc_end146:
	.size	writeMotionInfo2NAL.105, .Lfunc_end146-writeMotionInfo2NAL.105
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.106 # -- Begin function writeCoeff4x4_CAVLC.106
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.106,@function
writeCoeff4x4_CAVLC.106:                # @writeCoeff4x4_CAVLC.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1482063123, -172(%rbp) # imm = 0x58567D13
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB147_22
# %bb.1:                                # %entry
	movq	.LJTI147_0(,%rax,8), %rax
	jmpq	*%rax
.LBB147_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB147_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB147_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB147_6
.LBB147_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB147_7
.LBB147_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB147_7:                              # %if.end
	jmp	.LBB147_23
.LBB147_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB147_23
.LBB147_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB147_23
.LBB147_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB147_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB147_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB147_14
.LBB147_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB147_15
.LBB147_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB147_15:                             # %if.end67
	jmp	.LBB147_23
.LBB147_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB147_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB147_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB147_20
.LBB147_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB147_21
.LBB147_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB147_21:                             # %if.end93
	jmp	.LBB147_23
.LBB147_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB147_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB147_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB147_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB147_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB147_27
.LBB147_26:                             # %cond.false
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB147_27
.LBB147_27:                             # %cond.end
                                        #   in Loop: Header=BB147_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB147_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB147_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB147_29:                             # %land.end
                                        #   in Loop: Header=BB147_24 Depth=1
	testb	$1, %dl
	jne	.LBB147_30
	jmp	.LBB147_41
.LBB147_30:                             # %for.body
                                        #   in Loop: Header=BB147_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB147_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB147_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB147_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB147_33:                             # %if.end110
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB147_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB147_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	$3, -28(%rbp)
.LBB147_36:                             # %if.end117
                                        #   in Loop: Header=BB147_24 Depth=1
	jmp	.LBB147_38
.LBB147_37:                             # %if.else118
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	$0, -28(%rbp)
.LBB147_38:                             # %if.end119
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB147_39:                             # %if.end121
                                        #   in Loop: Header=BB147_24 Depth=1
	jmp	.LBB147_40
.LBB147_40:                             # %for.inc
                                        #   in Loop: Header=BB147_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB147_24
.LBB147_41:                             # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB147_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB147_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB147_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB147_46
.LBB147_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB147_46:                             # %cond.end136
	movl	%eax, -96(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB147_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB147_49
.LBB147_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB147_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB147_51
.LBB147_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -96(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB147_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB147_53
# %bb.52:                               # %if.then160
	movl	$0, -88(%rbp)
	jmp	.LBB147_60
.LBB147_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB147_55
# %bb.54:                               # %if.then163
	movl	$1, -88(%rbp)
	jmp	.LBB147_59
.LBB147_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB147_57
# %bb.56:                               # %if.then166
	movl	$2, -88(%rbp)
	jmp	.LBB147_58
.LBB147_57:                             # %if.else167
	movl	$3, -88(%rbp)
.LBB147_58:                             # %if.end168
	jmp	.LBB147_59
.LBB147_59:                             # %if.end169
	jmp	.LBB147_60
.LBB147_60:                             # %if.end170
	jmp	.LBB147_62
.LBB147_61:                             # %if.else171
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB147_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB147_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB147_65
.LBB147_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB147_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB147_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB147_122
.LBB147_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB147_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB147_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB147_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB147_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB147_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB147_72:                             # %if.end202
                                        #   in Loop: Header=BB147_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB147_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB147_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB147_74:                             # %if.end205
                                        #   in Loop: Header=BB147_69 Depth=1
	jmp	.LBB147_75
.LBB147_75:                             # %for.inc206
                                        #   in Loop: Header=BB147_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB147_69
.LBB147_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB147_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB147_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB147_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB147_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB147_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB147_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB147_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB147_85
.LBB147_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB147_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB147_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB147_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB147_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB147_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB147_91
.LBB147_90:                             # %if.else249
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB147_91:                             # %if.end252
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	$0, -144(%rbp)
.LBB147_92:                             # %if.end253
                                        #   in Loop: Header=BB147_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB147_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB147_95
.LBB147_94:                             # %if.else257
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB147_95:                             # %if.end259
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB147_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB147_97:                             # %if.end266
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB147_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB147_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	$2, -32(%rbp)
.LBB147_100:                            # %if.end273
                                        #   in Loop: Header=BB147_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB147_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB147_86
.LBB147_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB147_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB147_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB147_106
.LBB147_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB147_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB147_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB147_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB147_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB147_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB147_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB147_108 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB147_112
.LBB147_111:                            # %if.then318
	jmp	.LBB147_120
.LBB147_112:                            # %if.end319
                                        #   in Loop: Header=BB147_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB147_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB147_108 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB147_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB147_108 Depth=1
	movl	-100(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB147_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB147_108 Depth=1
	movl	$6, -32(%rbp)
.LBB147_116:                            # %if.end327
                                        #   in Loop: Header=BB147_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-92(%rbp), %eax
	movl	-100(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB147_117:                            # %if.end341
                                        #   in Loop: Header=BB147_108 Depth=1
	jmp	.LBB147_118
.LBB147_118:                            # %for.inc342
                                        #   in Loop: Header=BB147_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB147_108
.LBB147_119:                            # %for.end344.loopexit
	jmp	.LBB147_120
.LBB147_120:                            # %for.end344
	jmp	.LBB147_121
.LBB147_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB147_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$1482063123, -172(%rbp) # imm = 0x58567D13
	jne	.LBB147_124
.LBB147_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_123
.Lfunc_end147:
	.size	writeCoeff4x4_CAVLC.106, .Lfunc_end147-writeCoeff4x4_CAVLC.106
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI147_0:
	.quad	.LBB147_2
	.quad	.LBB147_8
	.quad	.LBB147_9
	.quad	.LBB147_22
	.quad	.LBB147_22
	.quad	.LBB147_22
	.quad	.LBB147_10
	.quad	.LBB147_16
                                        # -- End function
	.text
	.globl	writeLumaCoeff4x4_CABAC.107 # -- Begin function writeLumaCoeff4x4_CABAC.107
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.107,@function
writeLumaCoeff4x4_CABAC.107:            # @writeLumaCoeff4x4_CABAC.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$602329386, -52(%rbp)   # imm = 0x23E6D12A
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB148_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB148_3
.LBB148_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB148_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB148_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB148_6
.LBB148_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB148_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB148_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB148_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB148_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB148_9:                              # %land.end
                                        #   in Loop: Header=BB148_7 Depth=1
	testb	$1, %al
	jne	.LBB148_10
	jmp	.LBB148_15
.LBB148_10:                             # %for.body
                                        #   in Loop: Header=BB148_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB148_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB148_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB148_13
.LBB148_12:                             # %cond.false40
                                        #   in Loop: Header=BB148_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB148_13:                             # %cond.end43
                                        #   in Loop: Header=BB148_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB148_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_7
.LBB148_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$602329386, -52(%rbp)   # imm = 0x23E6D12A
	jne	.LBB148_17
.LBB148_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_16
.Lfunc_end148:
	.size	writeLumaCoeff4x4_CABAC.107, .Lfunc_end148-writeLumaCoeff4x4_CABAC.107
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.108   # -- Begin function TransformDecision.108
	.p2align	4, 0x90
	.type	TransformDecision.108,@function
TransformDecision.108:                  # @TransformDecision.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1265233140, -80(%rbp)  # imm = 0x4B69ECF4
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB149_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB149_3
.LBB149_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB149_3:                              # %if.end
	jmp	.LBB149_4
.LBB149_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_6 Depth 2
                                        #       Child Loop BB149_8 Depth 3
                                        #         Child Loop BB149_10 Depth 4
                                        #           Child Loop BB149_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB149_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB149_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB149_6:                              # %for.cond3
                                        #   Parent Loop BB149_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB149_8 Depth 3
                                        #         Child Loop BB149_10 Depth 4
                                        #           Child Loop BB149_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB149_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB149_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB149_8:                              # %for.cond8
                                        #   Parent Loop BB149_4 Depth=1
                                        #     Parent Loop BB149_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB149_10 Depth 4
                                        #           Child Loop BB149_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB149_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB149_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB149_10:                             # %for.cond13
                                        #   Parent Loop BB149_4 Depth=1
                                        #     Parent Loop BB149_6 Depth=2
                                        #       Parent Loop BB149_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB149_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB149_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB149_10 Depth=4
	movl	$0, -24(%rbp)
.LBB149_12:                             # %for.cond17
                                        #   Parent Loop BB149_4 Depth=1
                                        #     Parent Loop BB149_6 Depth=2
                                        #       Parent Loop BB149_8 Depth=3
                                        #         Parent Loop BB149_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB149_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB149_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB149_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB149_12
.LBB149_15:                             # %for.end
                                        #   in Loop: Header=BB149_10 Depth=4
	jmp	.LBB149_16
.LBB149_16:                             # %for.inc38
                                        #   in Loop: Header=BB149_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_10
.LBB149_17:                             # %for.end40
                                        #   in Loop: Header=BB149_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB149_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_8
.LBB149_19:                             # %for.end44
                                        #   in Loop: Header=BB149_6 Depth=2
	jmp	.LBB149_20
.LBB149_20:                             # %for.inc45
                                        #   in Loop: Header=BB149_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_6
.LBB149_21:                             # %for.end47
                                        #   in Loop: Header=BB149_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB149_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_4
.LBB149_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB149_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB149_28
.LBB149_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB149_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB149_28
.LBB149_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB149_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1265233140, -80(%rbp)  # imm = 0x4B69ECF4
	jne	.LBB149_30
.LBB149_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_29
.Lfunc_end149:
	.size	TransformDecision.108, .Lfunc_end149-TransformDecision.108
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.109 # -- Begin function writeChromaIntraPredMode.109
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.109,@function
writeChromaIntraPredMode.109:           # @writeChromaIntraPredMode.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$323774622, -36(%rbp)   # imm = 0x134C689E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB150_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB150_3
.LBB150_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB150_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$323774622, -36(%rbp)   # imm = 0x134C689E
	jne	.LBB150_5
.LBB150_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_4
.Lfunc_end150:
	.size	writeChromaIntraPredMode.109, .Lfunc_end150-writeChromaIntraPredMode.109
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.110    # -- Begin function start_macroblock.110
	.p2align	4, 0x90
	.type	start_macroblock.110,@function
start_macroblock.110:                   # @start_macroblock.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1465334043, -84(%rbp)  # imm = 0x5757391B
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB151_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB151_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB151_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB151_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB151_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB151_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB151_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB151_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB151_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB151_8:                              # %if.end
                                        #   in Loop: Header=BB151_5 Depth=1
	jmp	.LBB151_9
.LBB151_9:                              # %for.inc
                                        #   in Loop: Header=BB151_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_5
.LBB151_10:                             # %for.end
	jmp	.LBB151_11
.LBB151_11:                             # %if.end19
	jmp	.LBB151_12
.LBB151_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB151_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB151_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB151_16
.LBB151_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB151_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB151_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB151_97
.LBB151_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB151_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB151_21
.LBB151_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB151_96
.LBB151_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB151_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB151_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB151_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB151_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB151_34
.LBB151_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB151_32
.LBB151_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB151_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB151_31
.LBB151_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB151_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB151_33
.LBB151_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB151_33:                             # %if.end112
	jmp	.LBB151_34
.LBB151_34:                             # %if.end113
	jmp	.LBB151_39
.LBB151_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB151_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB151_38
.LBB151_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB151_38:                             # %if.end125
	jmp	.LBB151_39
.LBB151_39:                             # %if.end126
	jmp	.LBB151_47
.LBB151_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB151_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB151_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB151_44
.LBB151_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB151_44:                             # %if.end140
	jmp	.LBB151_46
.LBB151_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB151_46:                             # %if.end145
	jmp	.LBB151_47
.LBB151_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB151_93
.LBB151_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB151_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB151_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB151_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB151_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB151_74
.LBB151_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB151_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB151_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB151_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB151_73
.LBB151_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB151_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB151_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB151_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB151_72
.LBB151_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB151_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB151_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB151_71
.LBB151_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB151_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB151_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB151_70:                             # %if.end223
	jmp	.LBB151_71
.LBB151_71:                             # %if.end224
	jmp	.LBB151_72
.LBB151_72:                             # %if.end225
	jmp	.LBB151_73
.LBB151_73:                             # %if.end226
	jmp	.LBB151_74
.LBB151_74:                             # %if.end227
	jmp	.LBB151_75
.LBB151_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB151_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB151_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB151_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB151_82
.LBB151_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB151_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB151_81:                             # %if.end256
	jmp	.LBB151_82
.LBB151_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB151_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB151_88
.LBB151_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB151_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB151_87
.LBB151_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB151_87:                             # %if.end292
	jmp	.LBB151_88
.LBB151_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB151_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB151_92
.LBB151_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB151_92:                             # %if.end305
	jmp	.LBB151_94
.LBB151_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB151_94:                             # %if.end309
	jmp	.LBB151_95
.LBB151_95:                             # %if.end310
	jmp	.LBB151_96
.LBB151_96:                             # %if.end311
	jmp	.LBB151_97
.LBB151_97:                             # %if.end312
	jmp	.LBB151_102
.LBB151_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB151_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB151_101
.LBB151_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB151_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB151_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB151_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB151_105
.LBB151_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB151_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB151_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB151_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB151_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_110 Depth 2
                                        #       Child Loop BB151_112 Depth 3
                                        #         Child Loop BB151_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB151_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB151_108 Depth=1
	movl	$0, -20(%rbp)
.LBB151_110:                            # %for.cond364
                                        #   Parent Loop BB151_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB151_112 Depth 3
                                        #         Child Loop BB151_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB151_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB151_110 Depth=2
	movl	$0, -12(%rbp)
.LBB151_112:                            # %for.cond368
                                        #   Parent Loop BB151_108 Depth=1
                                        #     Parent Loop BB151_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB151_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB151_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB151_112 Depth=3
	movl	$0, -36(%rbp)
.LBB151_114:                            # %for.cond372
                                        #   Parent Loop BB151_108 Depth=1
                                        #     Parent Loop BB151_110 Depth=2
                                        #       Parent Loop BB151_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB151_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB151_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB151_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB151_114
.LBB151_117:                            # %for.end388
                                        #   in Loop: Header=BB151_112 Depth=3
	jmp	.LBB151_118
.LBB151_118:                            # %for.inc389
                                        #   in Loop: Header=BB151_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_112
.LBB151_119:                            # %for.end391
                                        #   in Loop: Header=BB151_110 Depth=2
	jmp	.LBB151_120
.LBB151_120:                            # %for.inc392
                                        #   in Loop: Header=BB151_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB151_110
.LBB151_121:                            # %for.end394
                                        #   in Loop: Header=BB151_108 Depth=1
	jmp	.LBB151_122
.LBB151_122:                            # %for.inc395
                                        #   in Loop: Header=BB151_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB151_108
.LBB151_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB151_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_126 Depth 2
                                        #       Child Loop BB151_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB151_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB151_124 Depth=1
	movl	$0, -12(%rbp)
.LBB151_126:                            # %for.cond402
                                        #   Parent Loop BB151_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB151_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB151_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB151_126 Depth=2
	movl	$0, -16(%rbp)
.LBB151_128:                            # %for.cond406
                                        #   Parent Loop BB151_124 Depth=1
                                        #     Parent Loop BB151_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB151_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB151_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB151_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB151_128
.LBB151_131:                            # %for.end432
                                        #   in Loop: Header=BB151_126 Depth=2
	jmp	.LBB151_132
.LBB151_132:                            # %for.inc433
                                        #   in Loop: Header=BB151_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_126
.LBB151_133:                            # %for.end435
                                        #   in Loop: Header=BB151_124 Depth=1
	jmp	.LBB151_134
.LBB151_134:                            # %for.inc436
                                        #   in Loop: Header=BB151_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB151_124
.LBB151_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB151_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_138 Depth 2
                                        #       Child Loop BB151_140 Depth 3
                                        #         Child Loop BB151_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB151_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB151_136 Depth=1
	movl	$0, -20(%rbp)
.LBB151_138:                            # %for.cond443
                                        #   Parent Loop BB151_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB151_140 Depth 3
                                        #         Child Loop BB151_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB151_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB151_138 Depth=2
	movl	$0, -12(%rbp)
.LBB151_140:                            # %for.cond447
                                        #   Parent Loop BB151_136 Depth=1
                                        #     Parent Loop BB151_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB151_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB151_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB151_140 Depth=3
	movl	$0, -36(%rbp)
.LBB151_142:                            # %for.cond451
                                        #   Parent Loop BB151_136 Depth=1
                                        #     Parent Loop BB151_138 Depth=2
                                        #       Parent Loop BB151_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB151_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB151_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB151_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB151_142
.LBB151_145:                            # %for.end465
                                        #   in Loop: Header=BB151_140 Depth=3
	jmp	.LBB151_146
.LBB151_146:                            # %for.inc466
                                        #   in Loop: Header=BB151_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_140
.LBB151_147:                            # %for.end468
                                        #   in Loop: Header=BB151_138 Depth=2
	jmp	.LBB151_148
.LBB151_148:                            # %for.inc469
                                        #   in Loop: Header=BB151_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB151_138
.LBB151_149:                            # %for.end471
                                        #   in Loop: Header=BB151_136 Depth=1
	jmp	.LBB151_150
.LBB151_150:                            # %for.inc472
                                        #   in Loop: Header=BB151_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB151_136
.LBB151_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB151_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB151_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB151_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB151_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_152
.LBB151_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB151_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB151_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB151_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB151_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_156
.LBB151_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB151_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB151_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB151_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB151_166
.LBB151_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB151_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB151_165:                            # %if.end520
	jmp	.LBB151_166
.LBB151_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB151_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB151_168:                            # %if.end536
	cmpl	$1465334043, -84(%rbp)  # imm = 0x5757391B
	jne	.LBB151_170
.LBB151_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_169
.Lfunc_end151:
	.size	start_macroblock.110, .Lfunc_end151-start_macroblock.110
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.111 # -- Begin function writeCBPandLumaCoeff.111
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.111,@function
writeCBPandLumaCoeff.111:               # @writeCBPandLumaCoeff.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$346695940, -108(%rbp)  # imm = 0x14AA2904
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB152_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB152_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB152_7
.LBB152_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB152_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB152_10
.LBB152_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB152_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB152_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB152_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB152_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB152_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB152_18
.LBB152_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB152_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB152_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB152_18
.LBB152_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB152_22
.LBB152_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB152_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB152_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB152_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB152_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB152_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB152_26
.LBB152_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB152_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB152_29
.LBB152_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB152_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB152_30:                             # %if.end93
	jmp	.LBB152_31
.LBB152_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB152_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB152_42
.LBB152_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB152_36
.LBB152_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB152_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB152_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB152_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB152_41
.LBB152_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB152_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB152_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB152_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB152_43 Depth=1
	movl	$0, -20(%rbp)
.LBB152_45:                             # %for.cond141
                                        #   Parent Loop BB152_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB152_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB152_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB152_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_45
.LBB152_48:                             # %for.end
                                        #   in Loop: Header=BB152_43 Depth=1
	jmp	.LBB152_49
.LBB152_49:                             # %for.inc152
                                        #   in Loop: Header=BB152_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_43
.LBB152_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB152_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB152_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB152_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB152_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB152_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB152_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB152_55:                             # %if.end169
                                        #   in Loop: Header=BB152_52 Depth=1
	jmp	.LBB152_56
.LBB152_56:                             # %for.inc170
                                        #   in Loop: Header=BB152_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_52
.LBB152_57:                             # %for.end172
	jmp	.LBB152_101
.LBB152_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB152_70
.LBB152_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB152_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB152_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB152_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB152_63:                             # %land.end184
                                        #   in Loop: Header=BB152_61 Depth=1
	testb	$1, %al
	jne	.LBB152_64
	jmp	.LBB152_69
.LBB152_64:                             # %for.body186
                                        #   in Loop: Header=BB152_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB152_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB152_67
.LBB152_66:                             # %if.else196
                                        #   in Loop: Header=BB152_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB152_67:                             # %if.end198
                                        #   in Loop: Header=BB152_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB152_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB152_61
.LBB152_69:                             # %for.end218
	jmp	.LBB152_70
.LBB152_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB152_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB152_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_74 Depth 2
                                        #       Child Loop BB152_76 Depth 3
                                        #         Child Loop BB152_78 Depth 4
                                        #           Child Loop BB152_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB152_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB152_72 Depth=1
	movl	$0, -60(%rbp)
.LBB152_74:                             # %for.cond226
                                        #   Parent Loop BB152_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB152_76 Depth 3
                                        #         Child Loop BB152_78 Depth 4
                                        #           Child Loop BB152_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB152_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB152_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB152_76:                             # %for.cond229
                                        #   Parent Loop BB152_72 Depth=1
                                        #     Parent Loop BB152_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB152_78 Depth 4
                                        #           Child Loop BB152_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB152_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB152_78:                             # %for.cond233
                                        #   Parent Loop BB152_72 Depth=1
                                        #     Parent Loop BB152_74 Depth=2
                                        #       Parent Loop BB152_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB152_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB152_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB152_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB152_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB152_91
.LBB152_81:                             # %if.else247
                                        #   in Loop: Header=BB152_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB152_82:                             # %for.cond259
                                        #   Parent Loop BB152_72 Depth=1
                                        #     Parent Loop BB152_74 Depth=2
                                        #       Parent Loop BB152_76 Depth=3
                                        #         Parent Loop BB152_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB152_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB152_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB152_84:                             # %land.end263
                                        #   in Loop: Header=BB152_82 Depth=5
	testb	$1, %al
	jne	.LBB152_85
	jmp	.LBB152_90
.LBB152_85:                             # %for.body265
                                        #   in Loop: Header=BB152_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB152_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB152_88
.LBB152_87:                             # %if.else276
                                        #   in Loop: Header=BB152_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB152_88:                             # %if.end278
                                        #   in Loop: Header=BB152_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB152_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB152_82
.LBB152_90:                             # %for.end300
                                        #   in Loop: Header=BB152_78 Depth=4
	jmp	.LBB152_91
.LBB152_91:                             # %if.end301
                                        #   in Loop: Header=BB152_78 Depth=4
	jmp	.LBB152_92
.LBB152_92:                             # %for.inc302
                                        #   in Loop: Header=BB152_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB152_78
.LBB152_93:                             # %for.end304
                                        #   in Loop: Header=BB152_76 Depth=3
	jmp	.LBB152_94
.LBB152_94:                             # %for.inc305
                                        #   in Loop: Header=BB152_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB152_76
.LBB152_95:                             # %for.end307
                                        #   in Loop: Header=BB152_74 Depth=2
	jmp	.LBB152_96
.LBB152_96:                             # %for.inc308
                                        #   in Loop: Header=BB152_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB152_74
.LBB152_97:                             # %for.end310
                                        #   in Loop: Header=BB152_72 Depth=1
	jmp	.LBB152_98
.LBB152_98:                             # %for.inc311
                                        #   in Loop: Header=BB152_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB152_72
.LBB152_99:                             # %for.end313
	jmp	.LBB152_100
.LBB152_100:                            # %if.end314
	jmp	.LBB152_101
.LBB152_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$346695940, -108(%rbp)  # imm = 0x14AA2904
	jne	.LBB152_103
.LBB152_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_102
.Lfunc_end152:
	.size	writeCBPandLumaCoeff.111, .Lfunc_end152-writeCBPandLumaCoeff.111
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.112   # -- Begin function writeLumaCoeff8x8.112
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.112,@function
writeLumaCoeff8x8.112:                  # @writeLumaCoeff8x8.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1659950441, -36(%rbp)  # imm = 0x62F0D569
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB153_2
# %bb.1:                                # %if.then
	jmp	.LBB153_2
.LBB153_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB153_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB153_15
.LBB153_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB153_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB153_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB153_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB153_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB153_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB153_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB153_10
.LBB153_9:                              # %cond.false
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB153_10:                             # %cond.end
                                        #   in Loop: Header=BB153_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_12
.LBB153_11:                             # %if.else
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB153_12:                             # %if.end17
                                        #   in Loop: Header=BB153_5 Depth=1
	jmp	.LBB153_13
.LBB153_13:                             # %for.inc
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_5
.LBB153_14:                             # %for.end
	jmp	.LBB153_19
.LBB153_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB153_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_18
.LBB153_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB153_18:                             # %if.end27
	jmp	.LBB153_19
.LBB153_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1659950441, -36(%rbp)  # imm = 0x62F0D569
	jne	.LBB153_21
.LBB153_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_20
.Lfunc_end153:
	.size	writeLumaCoeff8x8.112, .Lfunc_end153-writeLumaCoeff8x8.112
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.113 # -- Begin function IntraChromaPrediction.113
	.p2align	4, 0x90
	.type	IntraChromaPrediction.113,@function
IntraChromaPrediction.113:              # @IntraChromaPrediction.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2002479898, -164(%rbp) # imm = 0x775B6B1A
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -124(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB154_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_1
.LBB154_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB154_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB154_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB154_8
.LBB154_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB154_8
.LBB154_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB154_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB154_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB154_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB154_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB154_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB154_13
.LBB154_12:                             # %cond.false32
                                        #   in Loop: Header=BB154_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB154_13
.LBB154_13:                             # %cond.end33
                                        #   in Loop: Header=BB154_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB154_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_9
.LBB154_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB154_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB154_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB154_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB154_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB154_20
.LBB154_19:                             # %cond.false57
                                        #   in Loop: Header=BB154_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB154_20
.LBB154_20:                             # %cond.end58
                                        #   in Loop: Header=BB154_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB154_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_16
.LBB154_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB154_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB154_25
.LBB154_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB154_25
.LBB154_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB154_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB154_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB154_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB154_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB154_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB154_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB154_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB154_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB154_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB154_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_37 Depth 2
                                        #       Child Loop BB154_39 Depth 3
                                        #         Child Loop BB154_104 Depth 4
                                        #         Child Loop BB154_110 Depth 4
                                        #         Child Loop BB154_85 Depth 4
                                        #         Child Loop BB154_91 Depth 4
                                        #         Child Loop BB154_66 Depth 4
                                        #         Child Loop BB154_72 Depth 4
                                        #         Child Loop BB154_44 Depth 4
                                        #         Child Loop BB154_50 Depth 4
                                        #         Child Loop BB154_125 Depth 4
                                        #           Child Loop BB154_127 Depth 5
                                        #     Child Loop BB154_138 Depth 2
                                        #     Child Loop BB154_142 Depth 2
                                        #       Child Loop BB154_144 Depth 3
                                        #     Child Loop BB154_153 Depth 2
                                        #     Child Loop BB154_157 Depth 2
                                        #       Child Loop BB154_159 Depth 3
                                        #     Child Loop BB154_170 Depth 2
                                        #     Child Loop BB154_174 Depth 2
                                        #     Child Loop BB154_178 Depth 2
                                        #       Child Loop BB154_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB154_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB154_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB154_37:                             # %for.cond95
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_39 Depth 3
                                        #         Child Loop BB154_104 Depth 4
                                        #         Child Loop BB154_110 Depth 4
                                        #         Child Loop BB154_85 Depth 4
                                        #         Child Loop BB154_91 Depth 4
                                        #         Child Loop BB154_66 Depth 4
                                        #         Child Loop BB154_72 Depth 4
                                        #         Child Loop BB154_44 Depth 4
                                        #         Child Loop BB154_50 Depth 4
                                        #         Child Loop BB154_125 Depth 4
                                        #           Child Loop BB154_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB154_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB154_37 Depth=2
	movl	$0, -84(%rbp)
.LBB154_39:                             # %for.cond99
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB154_104 Depth 4
                                        #         Child Loop BB154_110 Depth 4
                                        #         Child Loop BB154_85 Depth 4
                                        #         Child Loop BB154_91 Depth 4
                                        #         Child Loop BB154_66 Depth 4
                                        #         Child Loop BB154_72 Depth 4
                                        #         Child Loop BB154_44 Depth 4
                                        #         Child Loop BB154_50 Depth 4
                                        #         Child Loop BB154_125 Depth 4
                                        #           Child Loop BB154_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB154_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB154_39 Depth=3
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB154_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB154_39 Depth=3
	movq	.LJTI154_0(,%rax,8), %rax
	jmpq	*%rax
.LBB154_42:                             # %sw.bb
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_44:                             # %for.cond124
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB154_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB154_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_44
.LBB154_47:                             # %for.end138
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_48
.LBB154_48:                             # %if.end139
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB154_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_50:                             # %for.cond143
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB154_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB154_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_50
.LBB154_53:                             # %for.end162
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_54
.LBB154_54:                             # %if.end163
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB154_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_63
.LBB154_57:                             # %if.else
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_62
.LBB154_59:                             # %if.else174
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB154_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB154_61:                             # %if.end180
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_62
.LBB154_62:                             # %if.end181
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_63
.LBB154_63:                             # %if.end182
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_124
.LBB154_64:                             # %sw.bb183
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_66:                             # %for.cond186
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB154_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB154_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_66
.LBB154_69:                             # %for.end202
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_77
.LBB154_70:                             # %if.else203
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB154_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_72:                             # %for.cond207
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB154_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB154_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_72
.LBB154_75:                             # %for.end226
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_76
.LBB154_76:                             # %if.end227
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_77
.LBB154_77:                             # %if.end228
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_82
.LBB154_79:                             # %if.else233
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB154_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB154_81:                             # %if.end239
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_82
.LBB154_82:                             # %if.end240
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_124
.LBB154_83:                             # %sw.bb241
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB154_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_85:                             # %for.cond245
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB154_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB154_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_85
.LBB154_88:                             # %for.end264
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_96
.LBB154_89:                             # %if.else265
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_91:                             # %for.cond268
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB154_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB154_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_91
.LBB154_94:                             # %for.end284
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_95
.LBB154_95:                             # %if.end285
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_96
.LBB154_96:                             # %if.end286
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB154_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_101
.LBB154_98:                             # %if.else292
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB154_100:                            # %if.end297
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_101
.LBB154_101:                            # %if.end298
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_124
.LBB154_102:                            # %sw.bb299
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_104:                            # %for.cond302
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB154_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB154_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_104
.LBB154_107:                            # %for.end318
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_108
.LBB154_108:                            # %if.end319
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB154_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_110:                            # %for.cond323
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB154_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB154_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_110
.LBB154_113:                            # %for.end342
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_114
.LBB154_114:                            # %if.end343
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB154_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_123
.LBB154_117:                            # %if.else352
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB154_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB154_122
.LBB154_119:                            # %if.else357
                                        #   in Loop: Header=BB154_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB154_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB154_121:                            # %if.end363
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_122
.LBB154_122:                            # %if.end364
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_123
.LBB154_123:                            # %if.end365
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_124
.LBB154_124:                            # %sw.epilog
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_125:                            # %for.cond366
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB154_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB154_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_127:                            # %for.cond371
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_37 Depth=2
                                        #       Parent Loop BB154_39 Depth=3
                                        #         Parent Loop BB154_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB154_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB154_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_127
.LBB154_130:                            # %for.end386
                                        #   in Loop: Header=BB154_125 Depth=4
	jmp	.LBB154_131
.LBB154_131:                            # %for.inc387
                                        #   in Loop: Header=BB154_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_125
.LBB154_132:                            # %for.end389
                                        #   in Loop: Header=BB154_39 Depth=3
	jmp	.LBB154_133
.LBB154_133:                            # %for.inc390
                                        #   in Loop: Header=BB154_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB154_39
.LBB154_134:                            # %for.end392
                                        #   in Loop: Header=BB154_37 Depth=2
	jmp	.LBB154_135
.LBB154_135:                            # %for.inc393
                                        #   in Loop: Header=BB154_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB154_37
.LBB154_136:                            # %for.end395
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB154_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	$0, -4(%rbp)
.LBB154_138:                            # %for.cond398
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB154_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB154_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB154_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_138
.LBB154_141:                            # %for.end414
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	$0, -4(%rbp)
.LBB154_142:                            # %for.cond415
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB154_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB154_142 Depth=2
	movl	$0, -8(%rbp)
.LBB154_144:                            # %for.cond419
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB154_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB154_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_144
.LBB154_147:                            # %for.end436
                                        #   in Loop: Header=BB154_142 Depth=2
	jmp	.LBB154_148
.LBB154_148:                            # %for.inc437
                                        #   in Loop: Header=BB154_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_142
.LBB154_149:                            # %for.end439
                                        #   in Loop: Header=BB154_35 Depth=1
	jmp	.LBB154_150
.LBB154_150:                            # %if.end440
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB154_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB154_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	$0, -4(%rbp)
.LBB154_153:                            # %for.cond447
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB154_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB154_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_153
.LBB154_156:                            # %for.end468
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	$0, -4(%rbp)
.LBB154_157:                            # %for.cond469
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB154_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB154_157 Depth=2
	movl	$0, -8(%rbp)
.LBB154_159:                            # %for.cond473
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB154_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB154_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_159
.LBB154_162:                            # %for.end490
                                        #   in Loop: Header=BB154_157 Depth=2
	jmp	.LBB154_163
.LBB154_163:                            # %for.inc491
                                        #   in Loop: Header=BB154_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_157
.LBB154_164:                            # %for.end493
                                        #   in Loop: Header=BB154_35 Depth=1
	jmp	.LBB154_165
.LBB154_165:                            # %if.end494
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB154_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB154_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB154_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB154_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB154_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB154_170:                            # %for.cond519
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB154_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB154_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB154_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_170
.LBB154_173:                            # %for.end540
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB154_174:                            # %for.cond556
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB154_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB154_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB154_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_174
.LBB154_177:                            # %for.end577
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB154_178:                            # %for.cond606
                                        #   Parent Loop BB154_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB154_178 Depth=2
	movl	$0, -4(%rbp)
.LBB154_180:                            # %for.cond610
                                        #   Parent Loop BB154_35 Depth=1
                                        #     Parent Loop BB154_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB154_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB154_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB154_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB154_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB154_184
.LBB154_183:                            # %cond.false630
                                        #   in Loop: Header=BB154_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB154_184:                            # %cond.end643
                                        #   in Loop: Header=BB154_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB154_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB154_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB154_190
.LBB154_186:                            # %cond.false648
                                        #   in Loop: Header=BB154_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB154_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB154_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB154_189
.LBB154_188:                            # %cond.false666
                                        #   in Loop: Header=BB154_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB154_189:                            # %cond.end679
                                        #   in Loop: Header=BB154_180 Depth=3
.LBB154_190:                            # %cond.end681
                                        #   in Loop: Header=BB154_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB154_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_180
.LBB154_192:                            # %for.end694
                                        #   in Loop: Header=BB154_178 Depth=2
	jmp	.LBB154_193
.LBB154_193:                            # %for.inc695
                                        #   in Loop: Header=BB154_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_178
.LBB154_194:                            # %for.end697
                                        #   in Loop: Header=BB154_35 Depth=1
	jmp	.LBB154_195
.LBB154_195:                            # %if.end698
                                        #   in Loop: Header=BB154_35 Depth=1
	jmp	.LBB154_196
.LBB154_196:                            # %for.inc699
                                        #   in Loop: Header=BB154_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB154_35
.LBB154_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB154_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB154_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB154_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB154_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_199
.LBB154_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB154_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_219 Depth 2
                                        #       Child Loop BB154_221 Depth 3
                                        #         Child Loop BB154_223 Depth 4
                                        #           Child Loop BB154_225 Depth 5
                                        #             Child Loop BB154_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB154_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB154_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB154_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB154_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB154_203 Depth=1
	jmp	.LBB154_241
.LBB154_207:                            # %if.end723
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB154_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB154_217
.LBB154_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB154_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB154_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB154_217
.LBB154_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB154_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB154_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB154_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB154_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB154_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB154_218
.LBB154_217:                            # %if.then749
                                        #   in Loop: Header=BB154_203 Depth=1
	jmp	.LBB154_241
.LBB154_218:                            # %if.end750
                                        #   in Loop: Header=BB154_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB154_219:                            # %for.cond751
                                        #   Parent Loop BB154_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_221 Depth 3
                                        #         Child Loop BB154_223 Depth 4
                                        #           Child Loop BB154_225 Depth 5
                                        #             Child Loop BB154_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB154_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB154_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB154_221:                            # %for.cond757
                                        #   Parent Loop BB154_203 Depth=1
                                        #     Parent Loop BB154_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB154_223 Depth 4
                                        #           Child Loop BB154_225 Depth 5
                                        #             Child Loop BB154_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB154_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB154_221 Depth=3
	movl	$0, -48(%rbp)
.LBB154_223:                            # %for.cond761
                                        #   Parent Loop BB154_203 Depth=1
                                        #     Parent Loop BB154_219 Depth=2
                                        #       Parent Loop BB154_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB154_225 Depth 5
                                        #             Child Loop BB154_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB154_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB154_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_225:                            # %for.cond765
                                        #   Parent Loop BB154_203 Depth=1
                                        #     Parent Loop BB154_219 Depth=2
                                        #       Parent Loop BB154_221 Depth=3
                                        #         Parent Loop BB154_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB154_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB154_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_227:                            # %for.cond770
                                        #   Parent Loop BB154_203 Depth=1
                                        #     Parent Loop BB154_219 Depth=2
                                        #       Parent Loop BB154_221 Depth=3
                                        #         Parent Loop BB154_223 Depth=4
                                        #           Parent Loop BB154_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB154_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB154_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB154_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB154_227
.LBB154_230:                            # %for.end803
                                        #   in Loop: Header=BB154_225 Depth=5
	jmp	.LBB154_231
.LBB154_231:                            # %for.inc804
                                        #   in Loop: Header=BB154_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_225
.LBB154_232:                            # %for.end806
                                        #   in Loop: Header=BB154_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB154_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB154_223
.LBB154_234:                            # %for.end810
                                        #   in Loop: Header=BB154_221 Depth=3
	jmp	.LBB154_235
.LBB154_235:                            # %for.inc811
                                        #   in Loop: Header=BB154_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB154_221
.LBB154_236:                            # %for.end813
                                        #   in Loop: Header=BB154_219 Depth=2
	jmp	.LBB154_237
.LBB154_237:                            # %for.inc814
                                        #   in Loop: Header=BB154_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB154_219
.LBB154_238:                            # %for.end816
                                        #   in Loop: Header=BB154_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB154_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB154_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB154_240:                            # %if.end820
                                        #   in Loop: Header=BB154_203 Depth=1
	jmp	.LBB154_241
.LBB154_241:                            # %for.inc821
                                        #   in Loop: Header=BB154_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB154_203
.LBB154_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB154_243:                            # %if.end824
	cmpl	$2002479898, -164(%rbp) # imm = 0x775B6B1A
	jne	.LBB154_245
.LBB154_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_244
.Lfunc_end154:
	.size	IntraChromaPrediction.113, .Lfunc_end154-IntraChromaPrediction.113
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI154_0:
	.quad	.LBB154_42
	.quad	.LBB154_64
	.quad	.LBB154_83
	.quad	.LBB154_102
                                        # -- End function
	.text
	.globl	writeCBPandLumaCoeff.114 # -- Begin function writeCBPandLumaCoeff.114
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.114,@function
writeCBPandLumaCoeff.114:               # @writeCBPandLumaCoeff.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1344769264, -104(%rbp) # imm = 0x50278CF0
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB155_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB155_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB155_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB155_7
.LBB155_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB155_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB155_10
.LBB155_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB155_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB155_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB155_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB155_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB155_18
.LBB155_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB155_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB155_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB155_18
.LBB155_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB155_22
.LBB155_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB155_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB155_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB155_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB155_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB155_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB155_26
.LBB155_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB155_29
.LBB155_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB155_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB155_30:                             # %if.end93
	jmp	.LBB155_31
.LBB155_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB155_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB155_42
.LBB155_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB155_36
.LBB155_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB155_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB155_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB155_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB155_41
.LBB155_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB155_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB155_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB155_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB155_43 Depth=1
	movl	$0, -20(%rbp)
.LBB155_45:                             # %for.cond141
                                        #   Parent Loop BB155_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB155_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB155_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB155_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB155_45
.LBB155_48:                             # %for.end
                                        #   in Loop: Header=BB155_43 Depth=1
	jmp	.LBB155_49
.LBB155_49:                             # %for.inc152
                                        #   in Loop: Header=BB155_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB155_43
.LBB155_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB155_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB155_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB155_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB155_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB155_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB155_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB155_55:                             # %if.end169
                                        #   in Loop: Header=BB155_52 Depth=1
	jmp	.LBB155_56
.LBB155_56:                             # %for.inc170
                                        #   in Loop: Header=BB155_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB155_52
.LBB155_57:                             # %for.end172
	jmp	.LBB155_101
.LBB155_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB155_70
.LBB155_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB155_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB155_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB155_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB155_63:                             # %land.end184
                                        #   in Loop: Header=BB155_61 Depth=1
	testb	$1, %al
	jne	.LBB155_64
	jmp	.LBB155_69
.LBB155_64:                             # %for.body186
                                        #   in Loop: Header=BB155_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB155_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB155_67
.LBB155_66:                             # %if.else196
                                        #   in Loop: Header=BB155_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_67:                             # %if.end198
                                        #   in Loop: Header=BB155_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB155_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_61
.LBB155_69:                             # %for.end218
	jmp	.LBB155_70
.LBB155_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB155_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB155_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_74 Depth 2
                                        #       Child Loop BB155_76 Depth 3
                                        #         Child Loop BB155_78 Depth 4
                                        #           Child Loop BB155_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB155_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB155_72 Depth=1
	movl	$0, -56(%rbp)
.LBB155_74:                             # %for.cond226
                                        #   Parent Loop BB155_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_76 Depth 3
                                        #         Child Loop BB155_78 Depth 4
                                        #           Child Loop BB155_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB155_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB155_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB155_76:                             # %for.cond229
                                        #   Parent Loop BB155_72 Depth=1
                                        #     Parent Loop BB155_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB155_78 Depth 4
                                        #           Child Loop BB155_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB155_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB155_78:                             # %for.cond233
                                        #   Parent Loop BB155_72 Depth=1
                                        #     Parent Loop BB155_74 Depth=2
                                        #       Parent Loop BB155_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB155_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB155_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB155_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB155_91
.LBB155_81:                             # %if.else247
                                        #   in Loop: Header=BB155_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB155_82:                             # %for.cond259
                                        #   Parent Loop BB155_72 Depth=1
                                        #     Parent Loop BB155_74 Depth=2
                                        #       Parent Loop BB155_76 Depth=3
                                        #         Parent Loop BB155_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB155_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB155_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB155_84:                             # %land.end263
                                        #   in Loop: Header=BB155_82 Depth=5
	testb	$1, %al
	jne	.LBB155_85
	jmp	.LBB155_90
.LBB155_85:                             # %for.body265
                                        #   in Loop: Header=BB155_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB155_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB155_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB155_88
.LBB155_87:                             # %if.else276
                                        #   in Loop: Header=BB155_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB155_88:                             # %if.end278
                                        #   in Loop: Header=BB155_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB155_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_82
.LBB155_90:                             # %for.end300
                                        #   in Loop: Header=BB155_78 Depth=4
	jmp	.LBB155_91
.LBB155_91:                             # %if.end301
                                        #   in Loop: Header=BB155_78 Depth=4
	jmp	.LBB155_92
.LBB155_92:                             # %for.inc302
                                        #   in Loop: Header=BB155_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB155_78
.LBB155_93:                             # %for.end304
                                        #   in Loop: Header=BB155_76 Depth=3
	jmp	.LBB155_94
.LBB155_94:                             # %for.inc305
                                        #   in Loop: Header=BB155_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB155_76
.LBB155_95:                             # %for.end307
                                        #   in Loop: Header=BB155_74 Depth=2
	jmp	.LBB155_96
.LBB155_96:                             # %for.inc308
                                        #   in Loop: Header=BB155_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB155_74
.LBB155_97:                             # %for.end310
                                        #   in Loop: Header=BB155_72 Depth=1
	jmp	.LBB155_98
.LBB155_98:                             # %for.inc311
                                        #   in Loop: Header=BB155_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB155_72
.LBB155_99:                             # %for.end313
	jmp	.LBB155_100
.LBB155_100:                            # %if.end314
	jmp	.LBB155_101
.LBB155_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1344769264, -104(%rbp) # imm = 0x50278CF0
	jne	.LBB155_103
.LBB155_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_102
.Lfunc_end155:
	.size	writeCBPandLumaCoeff.114, .Lfunc_end155-writeCBPandLumaCoeff.114
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.115        # -- Begin function BType2CtxRef.115
	.p2align	4, 0x90
	.type	BType2CtxRef.115,@function
BType2CtxRef.115:                       # @BType2CtxRef.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$756807156, -16(%rbp)   # imm = 0x2D1BF5F4
	movl	%edi, -20(%rbp)
	cmpl	$4, -20(%rbp)
	jge	.LBB156_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB156_3
.LBB156_2:                              # %if.else
	movl	$1, -12(%rbp)
.LBB156_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$756807156, -16(%rbp)   # imm = 0x2D1BF5F4
	jne	.LBB156_5
.LBB156_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_4
.Lfunc_end156:
	.size	BType2CtxRef.115, .Lfunc_end156-BType2CtxRef.115
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.116      # -- Begin function find_sad_16x16.116
	.p2align	4, 0x90
	.type	find_sad_16x16.116,@function
find_sad_16x16.116:                     # @find_sad_16x16.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1606249721, -80(%rbp)  # imm = 0x5FBD6CF9
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB157_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB157_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB157_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB157_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_1
.LBB157_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB157_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB157_20
.LBB157_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB157_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB157_9
.LBB157_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB157_9
.LBB157_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB157_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB157_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB157_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB157_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB157_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB157_14
.LBB157_13:                             # %cond.false23
                                        #   in Loop: Header=BB157_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB157_14
.LBB157_14:                             # %cond.end24
                                        #   in Loop: Header=BB157_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB157_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_10
.LBB157_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB157_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB157_19
.LBB157_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB157_19
.LBB157_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB157_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB157_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_42 Depth 2
                                        #       Child Loop BB157_44 Depth 3
                                        #     Child Loop BB157_50 Depth 2
                                        #       Child Loop BB157_52 Depth 3
                                        #         Child Loop BB157_54 Depth 4
                                        #         Child Loop BB157_58 Depth 4
                                        #           Child Loop BB157_60 Depth 5
                                        #     Child Loop BB157_72 Depth 2
                                        #       Child Loop BB157_74 Depth 3
                                        #     Child Loop BB157_80 Depth 2
                                        #     Child Loop BB157_84 Depth 2
                                        #       Child Loop BB157_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB157_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB157_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB157_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB157_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB157_32
.LBB157_24:                             # %if.then46
                                        #   in Loop: Header=BB157_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB157_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB157_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB157_28
.LBB157_27:                             # %if.then51
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_95
.LBB157_28:                             # %if.end52
                                        #   in Loop: Header=BB157_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB157_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB157_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_95
.LBB157_31:                             # %if.end57
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_32
.LBB157_32:                             # %if.end58
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB157_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB157_40
.LBB157_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB157_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB157_40
.LBB157_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB157_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB157_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB157_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB157_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB157_41
.LBB157_40:                             # %if.then74
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_94
.LBB157_41:                             # %if.else75
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -16(%rbp)
.LBB157_42:                             # %for.cond76
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB157_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB157_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB157_42 Depth=2
	movl	$0, -12(%rbp)
.LBB157_44:                             # %for.cond79
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB157_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB157_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB157_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_44
.LBB157_47:                             # %for.end115
                                        #   in Loop: Header=BB157_42 Depth=2
	jmp	.LBB157_48
.LBB157_48:                             # %for.inc116
                                        #   in Loop: Header=BB157_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_42
.LBB157_49:                             # %for.end118
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB157_50:                             # %for.cond119
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB157_52 Depth 3
                                        #         Child Loop BB157_54 Depth 4
                                        #         Child Loop BB157_58 Depth 4
                                        #           Child Loop BB157_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB157_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB157_50 Depth=2
	movl	$0, -24(%rbp)
.LBB157_52:                             # %for.cond123
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB157_54 Depth 4
                                        #         Child Loop BB157_58 Depth 4
                                        #           Child Loop BB157_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB157_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB157_52 Depth=3
	movl	$0, -16(%rbp)
.LBB157_54:                             # %for.cond127
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_50 Depth=2
                                        #       Parent Loop BB157_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB157_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB157_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB157_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_54
.LBB157_57:                             # %for.end237
                                        #   in Loop: Header=BB157_52 Depth=3
	movl	$0, -12(%rbp)
.LBB157_58:                             # %for.cond238
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_50 Depth=2
                                        #       Parent Loop BB157_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB157_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB157_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB157_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB157_60:                             # %for.cond346
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_50 Depth=2
                                        #       Parent Loop BB157_52 Depth=3
                                        #         Parent Loop BB157_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB157_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB157_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB157_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB157_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB157_63:                             # %if.end363
                                        #   in Loop: Header=BB157_60 Depth=5
	jmp	.LBB157_64
.LBB157_64:                             # %for.inc364
                                        #   in Loop: Header=BB157_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_60
.LBB157_65:                             # %for.end366
                                        #   in Loop: Header=BB157_58 Depth=4
	jmp	.LBB157_66
.LBB157_66:                             # %for.inc367
                                        #   in Loop: Header=BB157_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_58
.LBB157_67:                             # %for.end369
                                        #   in Loop: Header=BB157_52 Depth=3
	jmp	.LBB157_68
.LBB157_68:                             # %for.inc370
                                        #   in Loop: Header=BB157_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB157_52
.LBB157_69:                             # %for.end372
                                        #   in Loop: Header=BB157_50 Depth=2
	jmp	.LBB157_70
.LBB157_70:                             # %for.inc373
                                        #   in Loop: Header=BB157_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB157_50
.LBB157_71:                             # %for.end375
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -16(%rbp)
.LBB157_72:                             # %for.cond376
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB157_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB157_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB157_72 Depth=2
	movl	$0, -12(%rbp)
.LBB157_74:                             # %for.cond380
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB157_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB157_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB157_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_74
.LBB157_77:                             # %for.end397
                                        #   in Loop: Header=BB157_72 Depth=2
	jmp	.LBB157_78
.LBB157_78:                             # %for.inc398
                                        #   in Loop: Header=BB157_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_72
.LBB157_79:                             # %for.end400
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -16(%rbp)
.LBB157_80:                             # %for.cond401
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB157_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB157_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB157_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_80
.LBB157_83:                             # %for.end463
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -12(%rbp)
.LBB157_84:                             # %for.cond464
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB157_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB157_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB157_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB157_86:                             # %for.cond524
                                        #   Parent Loop BB157_21 Depth=1
                                        #     Parent Loop BB157_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB157_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB157_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB157_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_86
.LBB157_89:                             # %for.end536
                                        #   in Loop: Header=BB157_84 Depth=2
	jmp	.LBB157_90
.LBB157_90:                             # %for.inc537
                                        #   in Loop: Header=BB157_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_84
.LBB157_91:                             # %for.end539
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB157_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB157_93:                             # %if.end543
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_94
.LBB157_94:                             # %if.end544
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_95
.LBB157_95:                             # %for.inc545
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB157_21
.LBB157_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1606249721, -80(%rbp)  # imm = 0x5FBD6CF9
	jne	.LBB157_98
.LBB157_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_97
.Lfunc_end157:
	.size	find_sad_16x16.116, .Lfunc_end157-find_sad_16x16.116
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.117 # -- Begin function writeCoeff4x4_CAVLC.117
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.117,@function
writeCoeff4x4_CAVLC.117:                # @writeCoeff4x4_CAVLC.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$473529126, -172(%rbp)  # imm = 0x1C397B26
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB158_22
# %bb.1:                                # %entry
	movq	.LJTI158_0(,%rax,8), %rax
	jmpq	*%rax
.LBB158_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_6
.LBB158_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB158_7
.LBB158_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB158_7:                              # %if.end
	jmp	.LBB158_23
.LBB158_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB158_23
.LBB158_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB158_23
.LBB158_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_14
.LBB158_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB158_15
.LBB158_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB158_15:                             # %if.end67
	jmp	.LBB158_23
.LBB158_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB158_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB158_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB158_20
.LBB158_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB158_21
.LBB158_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB158_21:                             # %if.end93
	jmp	.LBB158_23
.LBB158_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB158_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB158_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB158_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB158_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB158_27
.LBB158_26:                             # %cond.false
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB158_27
.LBB158_27:                             # %cond.end
                                        #   in Loop: Header=BB158_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB158_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB158_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB158_29:                             # %land.end
                                        #   in Loop: Header=BB158_24 Depth=1
	testb	$1, %dl
	jne	.LBB158_30
	jmp	.LBB158_41
.LBB158_30:                             # %for.body
                                        #   in Loop: Header=BB158_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB158_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB158_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB158_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB158_33:                             # %if.end110
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB158_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB158_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$3, -28(%rbp)
.LBB158_36:                             # %if.end117
                                        #   in Loop: Header=BB158_24 Depth=1
	jmp	.LBB158_38
.LBB158_37:                             # %if.else118
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	$0, -28(%rbp)
.LBB158_38:                             # %if.end119
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB158_39:                             # %if.end121
                                        #   in Loop: Header=BB158_24 Depth=1
	jmp	.LBB158_40
.LBB158_40:                             # %for.inc
                                        #   in Loop: Header=BB158_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_24
.LBB158_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB158_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB158_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB158_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB158_46
.LBB158_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB158_46:                             # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB158_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB158_49
.LBB158_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB158_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB158_51
.LBB158_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB158_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB158_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB158_60
.LBB158_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB158_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB158_59
.LBB158_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB158_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB158_58
.LBB158_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB158_58:                             # %if.end168
	jmp	.LBB158_59
.LBB158_59:                             # %if.end169
	jmp	.LBB158_60
.LBB158_60:                             # %if.end170
	jmp	.LBB158_62
.LBB158_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB158_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB158_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB158_65
.LBB158_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB158_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB158_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB158_122
.LBB158_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB158_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB158_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB158_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB158_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB158_72:                             # %if.end202
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB158_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB158_74:                             # %if.end205
                                        #   in Loop: Header=BB158_69 Depth=1
	jmp	.LBB158_75
.LBB158_75:                             # %for.inc206
                                        #   in Loop: Header=BB158_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_69
.LBB158_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB158_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB158_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB158_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB158_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB158_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB158_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB158_85
.LBB158_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB158_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB158_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB158_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB158_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB158_91
.LBB158_90:                             # %if.else249
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB158_91:                             # %if.end252
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	$0, -144(%rbp)
.LBB158_92:                             # %if.end253
                                        #   in Loop: Header=BB158_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB158_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB158_95
.LBB158_94:                             # %if.else257
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB158_95:                             # %if.end259
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB158_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB158_97:                             # %if.end266
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB158_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB158_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	$2, -32(%rbp)
.LBB158_100:                            # %if.end273
                                        #   in Loop: Header=BB158_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB158_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_86
.LBB158_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB158_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB158_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB158_106
.LBB158_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB158_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB158_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB158_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB158_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB158_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB158_112
.LBB158_111:                            # %if.then318
	jmp	.LBB158_120
.LBB158_112:                            # %if.end319
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB158_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB158_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB158_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB158_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	$6, -32(%rbp)
.LBB158_116:                            # %if.end327
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-96(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB158_117:                            # %if.end341
                                        #   in Loop: Header=BB158_108 Depth=1
	jmp	.LBB158_118
.LBB158_118:                            # %for.inc342
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_108
.LBB158_119:                            # %for.end344.loopexit
	jmp	.LBB158_120
.LBB158_120:                            # %for.end344
	jmp	.LBB158_121
.LBB158_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB158_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$473529126, -172(%rbp)  # imm = 0x1C397B26
	jne	.LBB158_124
.LBB158_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_123
.Lfunc_end158:
	.size	writeCoeff4x4_CAVLC.117, .Lfunc_end158-writeCoeff4x4_CAVLC.117
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI158_0:
	.quad	.LBB158_2
	.quad	.LBB158_8
	.quad	.LBB158_9
	.quad	.LBB158_22
	.quad	.LBB158_22
	.quad	.LBB158_22
	.quad	.LBB158_10
	.quad	.LBB158_16
                                        # -- End function
	.text
	.globl	writeMotionInfo2NAL.118 # -- Begin function writeMotionInfo2NAL.118
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.118,@function
writeMotionInfo2NAL.118:                # @writeMotionInfo2NAL.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$340995661, -56(%rbp)   # imm = 0x14532E4D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB159_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB159_3
.LBB159_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB159_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB159_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB159_6
.LBB159_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB159_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB159_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB159_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB159_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB159_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB159_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB159_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB159_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB159_39
.LBB159_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB159_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB159_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB159_15 Depth=1
	movl	$0, -16(%rbp)
.LBB159_17:                             # %for.cond45
                                        #   Parent Loop BB159_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB159_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB159_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB159_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB159_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB159_22
.LBB159_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB159_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB159_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB159_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB159_22:                             # %if.end
                                        #   in Loop: Header=BB159_17 Depth=2
	jmp	.LBB159_23
.LBB159_23:                             # %for.inc
                                        #   in Loop: Header=BB159_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB159_17
.LBB159_24:                             # %for.end
                                        #   in Loop: Header=BB159_15 Depth=1
	jmp	.LBB159_25
.LBB159_25:                             # %for.inc79
                                        #   in Loop: Header=BB159_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_15
.LBB159_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB159_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB159_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB159_27 Depth=1
	movl	$0, -16(%rbp)
.LBB159_29:                             # %for.cond86
                                        #   Parent Loop BB159_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB159_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB159_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB159_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB159_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB159_34
.LBB159_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB159_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB159_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB159_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB159_34:                             # %if.end126
                                        #   in Loop: Header=BB159_29 Depth=2
	jmp	.LBB159_35
.LBB159_35:                             # %for.inc127
                                        #   in Loop: Header=BB159_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB159_29
.LBB159_36:                             # %for.end129
                                        #   in Loop: Header=BB159_27 Depth=1
	jmp	.LBB159_37
.LBB159_37:                             # %for.inc130
                                        #   in Loop: Header=BB159_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_27
.LBB159_38:                             # %for.end132
	jmp	.LBB159_39
.LBB159_39:                             # %if.end133
	jmp	.LBB159_40
.LBB159_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB159_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB159_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB159_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB159_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB159_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB159_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB159_45 Depth=1
	movl	$0, -16(%rbp)
.LBB159_47:                             # %for.cond155
                                        #   Parent Loop BB159_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB159_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB159_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB159_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB159_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB159_52
.LBB159_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB159_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB159_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB159_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB159_52:                             # %if.end197
                                        #   in Loop: Header=BB159_47 Depth=2
	jmp	.LBB159_53
.LBB159_53:                             # %for.inc198
                                        #   in Loop: Header=BB159_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB159_47
.LBB159_54:                             # %for.end200
                                        #   in Loop: Header=BB159_45 Depth=1
	jmp	.LBB159_55
.LBB159_55:                             # %for.inc201
                                        #   in Loop: Header=BB159_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_45
.LBB159_56:                             # %for.end203
	jmp	.LBB159_57
.LBB159_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB159_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB159_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB159_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB159_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB159_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB159_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB159_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB159_63 Depth=1
	movl	$0, -16(%rbp)
.LBB159_65:                             # %for.cond227
                                        #   Parent Loop BB159_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB159_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB159_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB159_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB159_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB159_70
.LBB159_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB159_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB159_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB159_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB159_70:                             # %if.end269
                                        #   in Loop: Header=BB159_65 Depth=2
	jmp	.LBB159_71
.LBB159_71:                             # %for.inc270
                                        #   in Loop: Header=BB159_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB159_65
.LBB159_72:                             # %for.end272
                                        #   in Loop: Header=BB159_63 Depth=1
	jmp	.LBB159_73
.LBB159_73:                             # %for.inc273
                                        #   in Loop: Header=BB159_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_63
.LBB159_74:                             # %for.end275
	jmp	.LBB159_75
.LBB159_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$340995661, -56(%rbp)   # imm = 0x14532E4D
	jne	.LBB159_77
.LBB159_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_76
.Lfunc_end159:
	.size	writeMotionInfo2NAL.118, .Lfunc_end159-writeMotionInfo2NAL.118
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.119 # -- Begin function writeCoeff4x4_CAVLC.119
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.119,@function
writeCoeff4x4_CAVLC.119:                # @writeCoeff4x4_CAVLC.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$2141321495, -172(%rbp) # imm = 0x7FA1F917
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB160_22
# %bb.1:                                # %entry
	movq	.LJTI160_0(,%rax,8), %rax
	jmpq	*%rax
.LBB160_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB160_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB160_6
.LBB160_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB160_7
.LBB160_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB160_7:                              # %if.end
	jmp	.LBB160_23
.LBB160_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB160_23
.LBB160_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB160_23
.LBB160_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB160_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB160_14
.LBB160_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB160_15
.LBB160_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB160_15:                             # %if.end67
	jmp	.LBB160_23
.LBB160_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB160_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB160_20
.LBB160_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB160_21
.LBB160_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB160_21:                             # %if.end93
	jmp	.LBB160_23
.LBB160_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB160_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB160_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB160_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB160_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB160_27
.LBB160_26:                             # %cond.false
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB160_27
.LBB160_27:                             # %cond.end
                                        #   in Loop: Header=BB160_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB160_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB160_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB160_29:                             # %land.end
                                        #   in Loop: Header=BB160_24 Depth=1
	testb	$1, %dl
	jne	.LBB160_30
	jmp	.LBB160_41
.LBB160_30:                             # %for.body
                                        #   in Loop: Header=BB160_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB160_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB160_24 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB160_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	-80(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB160_33:                             # %if.end110
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB160_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB160_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	$3, -32(%rbp)
.LBB160_36:                             # %if.end117
                                        #   in Loop: Header=BB160_24 Depth=1
	jmp	.LBB160_38
.LBB160_37:                             # %if.else118
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	$0, -32(%rbp)
.LBB160_38:                             # %if.end119
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB160_39:                             # %if.end121
                                        #   in Loop: Header=BB160_24 Depth=1
	jmp	.LBB160_40
.LBB160_40:                             # %for.inc
                                        #   in Loop: Header=BB160_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_24
.LBB160_41:                             # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB160_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB160_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB160_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB160_46
.LBB160_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB160_46:                             # %cond.end136
	movl	%eax, -88(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB160_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB160_49
.LBB160_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB160_49:                             # %cond.end145
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB160_51
.LBB160_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB160_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB160_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB160_60
.LBB160_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB160_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB160_59
.LBB160_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB160_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB160_58
.LBB160_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB160_58:                             # %if.end168
	jmp	.LBB160_59
.LBB160_59:                             # %if.end169
	jmp	.LBB160_60
.LBB160_60:                             # %if.end170
	jmp	.LBB160_62
.LBB160_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB160_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB160_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB160_65
.LBB160_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB160_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB160_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB160_122
.LBB160_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB160_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB160_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB160_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB160_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB160_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB160_72:                             # %if.end202
                                        #   in Loop: Header=BB160_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB160_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB160_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB160_74:                             # %if.end205
                                        #   in Loop: Header=BB160_69 Depth=1
	jmp	.LBB160_75
.LBB160_75:                             # %for.inc206
                                        #   in Loop: Header=BB160_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_69
.LBB160_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB160_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB160_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB160_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB160_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB160_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB160_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB160_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB160_85
.LBB160_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB160_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB160_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB160_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB160_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB160_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB160_91
.LBB160_90:                             # %if.else249
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB160_91:                             # %if.end252
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	$0, -140(%rbp)
.LBB160_92:                             # %if.end253
                                        #   in Loop: Header=BB160_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB160_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB160_95
.LBB160_94:                             # %if.else257
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB160_95:                             # %if.end259
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB160_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB160_97:                             # %if.end266
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB160_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB160_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	$2, -28(%rbp)
.LBB160_100:                            # %if.end273
                                        #   in Loop: Header=BB160_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB160_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_86
.LBB160_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB160_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB160_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB160_106
.LBB160_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB160_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB160_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB160_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB160_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB160_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB160_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB160_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB160_112
.LBB160_111:                            # %if.then318
	jmp	.LBB160_120
.LBB160_112:                            # %if.end319
                                        #   in Loop: Header=BB160_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB160_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB160_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB160_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB160_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	$6, -28(%rbp)
.LBB160_116:                            # %if.end327
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-80(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB160_117:                            # %if.end341
                                        #   in Loop: Header=BB160_108 Depth=1
	jmp	.LBB160_118
.LBB160_118:                            # %for.inc342
                                        #   in Loop: Header=BB160_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_108
.LBB160_119:                            # %for.end344.loopexit
	jmp	.LBB160_120
.LBB160_120:                            # %for.end344
	jmp	.LBB160_121
.LBB160_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB160_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$2141321495, -172(%rbp) # imm = 0x7FA1F917
	jne	.LBB160_124
.LBB160_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_123
.Lfunc_end160:
	.size	writeCoeff4x4_CAVLC.119, .Lfunc_end160-writeCoeff4x4_CAVLC.119
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI160_0:
	.quad	.LBB160_2
	.quad	.LBB160_8
	.quad	.LBB160_9
	.quad	.LBB160_22
	.quad	.LBB160_22
	.quad	.LBB160_22
	.quad	.LBB160_10
	.quad	.LBB160_16
                                        # -- End function
	.text
	.globl	OneComponentChromaPrediction4x4.120 # -- Begin function OneComponentChromaPrediction4x4.120
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.120,@function
OneComponentChromaPrediction4x4.120:    # @OneComponentChromaPrediction4x4.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1343004045, -112(%rbp) # imm = 0x500C9D8D
	movq	%rdi, -144(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -92(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB161_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB161_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB161_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB161_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB161_6
.LBB161_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB161_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_8
.LBB161_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB161_8:                              # %if.end13
	movl	-92(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB161_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB161_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB161_9 Depth=1
	movl	$0, -32(%rbp)
.LBB161_11:                             # %for.cond20
                                        #   Parent Loop BB161_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB161_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-32(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB161_15
.LBB161_14:                             # %cond.false
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB161_15:                             # %cond.end
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_21
.LBB161_17:                             # %cond.false65
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB161_20
.LBB161_19:                             # %cond.false74
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB161_20:                             # %cond.end76
                                        #   in Loop: Header=BB161_11 Depth=2
.LBB161_21:                             # %cond.end78
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB161_24
.LBB161_23:                             # %cond.false84
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB161_24:                             # %cond.end86
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_30
.LBB161_26:                             # %cond.false91
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB161_29
.LBB161_28:                             # %cond.false96
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB161_29:                             # %cond.end98
                                        #   in Loop: Header=BB161_11 Depth=2
.LBB161_30:                             # %cond.end100
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB161_33
.LBB161_32:                             # %cond.false111
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB161_33:                             # %cond.end114
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_39
.LBB161_35:                             # %cond.false119
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB161_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB161_38
.LBB161_37:                             # %cond.false129
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB161_38:                             # %cond.end132
                                        #   in Loop: Header=BB161_11 Depth=2
.LBB161_39:                             # %cond.end134
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB161_42
.LBB161_41:                             # %cond.false141
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB161_42:                             # %cond.end144
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB161_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB161_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_48
.LBB161_44:                             # %cond.false149
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB161_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB161_47
.LBB161_46:                             # %cond.false155
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB161_47:                             # %cond.end158
                                        #   in Loop: Header=BB161_11 Depth=2
.LBB161_48:                             # %cond.end160
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-64(%rbp), %eax
	imull	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-68(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-64(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-60(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB161_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB161_11
.LBB161_50:                             # %for.end
                                        #   in Loop: Header=BB161_9 Depth=1
	jmp	.LBB161_51
.LBB161_51:                             # %for.inc198
                                        #   in Loop: Header=BB161_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB161_9
.LBB161_52:                             # %for.end200
	cmpl	$1343004045, -112(%rbp) # imm = 0x500C9D8D
	jne	.LBB161_54
.LBB161_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_53
.Lfunc_end161:
	.size	OneComponentChromaPrediction4x4.120, .Lfunc_end161-OneComponentChromaPrediction4x4.120
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.121 # -- Begin function writeLumaCoeff4x4_CABAC.121
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.121,@function
writeLumaCoeff4x4_CABAC.121:            # @writeLumaCoeff4x4_CABAC.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$20239825, -52(%rbp)    # imm = 0x134D5D1
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB162_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB162_3
.LBB162_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB162_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB162_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB162_6
.LBB162_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB162_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB162_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB162_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB162_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB162_9:                              # %land.end
                                        #   in Loop: Header=BB162_7 Depth=1
	testb	$1, %al
	jne	.LBB162_10
	jmp	.LBB162_15
.LBB162_10:                             # %for.body
                                        #   in Loop: Header=BB162_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB162_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB162_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB162_13
.LBB162_12:                             # %cond.false40
                                        #   in Loop: Header=BB162_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB162_13:                             # %cond.end43
                                        #   in Loop: Header=BB162_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB162_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB162_7
.LBB162_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$20239825, -52(%rbp)    # imm = 0x134D5D1
	jne	.LBB162_17
.LBB162_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_16
.Lfunc_end162:
	.size	writeLumaCoeff4x4_CABAC.121, .Lfunc_end162-writeLumaCoeff4x4_CABAC.121
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.122 # -- Begin function terminate_macroblock.122
	.p2align	4, 0x90
	.type	terminate_macroblock.122,@function
terminate_macroblock.122:               # @terminate_macroblock.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1808229356, -108(%rbp) # imm = 0x6BC763EC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB163_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB163_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB163_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB163_5
.LBB163_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB163_8
.LBB163_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB163_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB163_7:                              # %if.end
	jmp	.LBB163_8
.LBB163_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB163_45
# %bb.9:                                # %if.end18
	movq	.LJTI163_0(,%rax,8), %rax
	jmpq	*%rax
.LBB163_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB163_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB163_46
.LBB163_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB163_46
.LBB163_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB163_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB163_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB163_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB163_22
.LBB163_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB163_21:                             # %if.end64
	jmp	.LBB163_22
.LBB163_22:                             # %if.end65
	jmp	.LBB163_23
.LBB163_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB163_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB163_27:                             # %if.end79
	jmp	.LBB163_28
.LBB163_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB163_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB163_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB163_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB163_32:                             # %if.end89
	jmp	.LBB163_33
.LBB163_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB163_35:                             # %if.end95
	jmp	.LBB163_46
.LBB163_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB163_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB163_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB163_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_40:                             # %if.end106
	jmp	.LBB163_41
.LBB163_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB163_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB163_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB163_44:                             # %if.end118
	jmp	.LBB163_46
.LBB163_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB163_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB163_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB163_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB163_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB163_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB163_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB163_51:                             # %if.end139
                                        #   in Loop: Header=BB163_48 Depth=1
	jmp	.LBB163_52
.LBB163_52:                             # %for.inc
                                        #   in Loop: Header=BB163_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB163_48
.LBB163_53:                             # %for.end
	jmp	.LBB163_54
.LBB163_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB163_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB163_60:                             # %if.end174
	jmp	.LBB163_62
.LBB163_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB163_62:                             # %if.end188
	jmp	.LBB163_63
.LBB163_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB163_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB163_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB163_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB163_67:                             # %if.end218
	cmpl	$1808229356, -108(%rbp) # imm = 0x6BC763EC
	jne	.LBB163_69
.LBB163_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_68
.Lfunc_end163:
	.size	terminate_macroblock.122, .Lfunc_end163-terminate_macroblock.122
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI163_0:
	.quad	.LBB163_10
	.quad	.LBB163_13
	.quad	.LBB163_14
	.quad	.LBB163_36
                                        # -- End function
	.text
	.globl	writeMBLayer.123        # -- Begin function writeMBLayer.123
	.p2align	4, 0x90
	.type	writeMBLayer.123,@function
writeMBLayer.123:                       # @writeMBLayer.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1681125292, -96(%rbp)  # imm = 0x6433EFAC
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB164_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB164_3
.LBB164_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB164_3
.LBB164_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB164_9
.LBB164_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB164_8
.LBB164_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB164_8
.LBB164_8:                              # %cond.end14
.LBB164_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB164_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB164_24
.LBB164_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB164_17
	jmp	.LBB164_18
.LBB164_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB164_18
	jmp	.LBB164_17
.LBB164_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB164_17
	jmp	.LBB164_18
.LBB164_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB164_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB164_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB164_23
.LBB164_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB164_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB164_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB164_23:                             # %if.end50
	jmp	.LBB164_24
.LBB164_24:                             # %if.end51
	jmp	.LBB164_25
.LBB164_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB164_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB164_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB164_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_35
.LBB164_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_38
.LBB164_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_39:                             # %if.end96
	jmp	.LBB164_40
.LBB164_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_43
.LBB164_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB164_89
.LBB164_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB164_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB164_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB164_49
.LBB164_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB164_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB164_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB164_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_55
.LBB164_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_58
.LBB164_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_59:                             # %if.end198
	jmp	.LBB164_60
.LBB164_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_64
.LBB164_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_64:                             # %if.end226
	jmp	.LBB164_88
.LBB164_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_76
.LBB164_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB164_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB164_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB164_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_72:                             # %if.end281
	jmp	.LBB164_73
.LBB164_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB164_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB164_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB164_87
.LBB164_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB164_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB164_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB164_77 Depth=1
	movl	$0, -44(%rbp)
.LBB164_79:                             # %for.cond310
                                        #   Parent Loop BB164_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB164_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB164_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB164_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB164_79
.LBB164_82:                             # %for.end
                                        #   in Loop: Header=BB164_77 Depth=1
	jmp	.LBB164_83
.LBB164_83:                             # %for.inc322
                                        #   in Loop: Header=BB164_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB164_77
.LBB164_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB164_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB164_86:                             # %if.end345
	jmp	.LBB164_87
.LBB164_87:                             # %if.end346
	jmp	.LBB164_88
.LBB164_88:                             # %if.end347
	jmp	.LBB164_89
.LBB164_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB164_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB164_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB164_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB164_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB164_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB164_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_98
.LBB164_97:                             # %if.else380
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_98:                             # %if.end382
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB164_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB164_101
.LBB164_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB164_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB164_101:                            # %lor.end415
                                        #   in Loop: Header=BB164_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB164_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB164_94
.LBB164_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB164_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB164_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB164_114
.LBB164_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB164_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_110
.LBB164_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB164_113
.LBB164_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB164_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB164_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB164_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB164_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB164_120
.LBB164_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB164_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB164_119:                            # %if.end483
	jmp	.LBB164_120
.LBB164_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB164_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB164_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB164_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB164_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB164_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB164_129
.LBB164_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB164_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB164_128:                            # %if.end516
	jmp	.LBB164_129
.LBB164_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1681125292, -96(%rbp)  # imm = 0x6433EFAC
	jne	.LBB164_131
.LBB164_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_130
.Lfunc_end164:
	.size	writeMBLayer.123, .Lfunc_end164-writeMBLayer.123
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.124 # -- Begin function OneComponentChromaPrediction4x4.124
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.124,@function
OneComponentChromaPrediction4x4.124:    # @OneComponentChromaPrediction4x4.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1732148440, -116(%rbp) # imm = 0x673E7CD8
	movq	%rdi, -128(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB165_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB165_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB165_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB165_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB165_6
.LBB165_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB165_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB165_8
.LBB165_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB165_8:                              # %if.end13
	movl	-56(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB165_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB165_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB165_9 Depth=1
	movl	$0, -28(%rbp)
.LBB165_11:                             # %for.cond20
                                        #   Parent Loop BB165_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB165_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB165_15
.LBB165_14:                             # %cond.false
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB165_15:                             # %cond.end
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB165_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_21
.LBB165_17:                             # %cond.false65
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB165_20
.LBB165_19:                             # %cond.false74
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB165_20:                             # %cond.end76
                                        #   in Loop: Header=BB165_11 Depth=2
.LBB165_21:                             # %cond.end78
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB165_24
.LBB165_23:                             # %cond.false84
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB165_24:                             # %cond.end86
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB165_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_30
.LBB165_26:                             # %cond.false91
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB165_29
.LBB165_28:                             # %cond.false96
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB165_29:                             # %cond.end98
                                        #   in Loop: Header=BB165_11 Depth=2
.LBB165_30:                             # %cond.end100
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB165_33
.LBB165_32:                             # %cond.false111
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB165_33:                             # %cond.end114
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB165_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_39
.LBB165_35:                             # %cond.false119
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB165_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB165_38
.LBB165_37:                             # %cond.false129
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB165_38:                             # %cond.end132
                                        #   in Loop: Header=BB165_11 Depth=2
.LBB165_39:                             # %cond.end134
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB165_42
.LBB165_41:                             # %cond.false141
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB165_42:                             # %cond.end144
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB165_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB165_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_48
.LBB165_44:                             # %cond.false149
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB165_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB165_47
.LBB165_46:                             # %cond.false155
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB165_47:                             # %cond.end158
                                        #   in Loop: Header=BB165_11 Depth=2
.LBB165_48:                             # %cond.end160
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-76(%rbp), %eax
	imull	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-60(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-64(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-76(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-68(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB165_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB165_11
.LBB165_50:                             # %for.end
                                        #   in Loop: Header=BB165_9 Depth=1
	jmp	.LBB165_51
.LBB165_51:                             # %for.inc198
                                        #   in Loop: Header=BB165_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB165_9
.LBB165_52:                             # %for.end200
	cmpl	$1732148440, -116(%rbp) # imm = 0x673E7CD8
	jne	.LBB165_54
.LBB165_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_53
.Lfunc_end165:
	.size	OneComponentChromaPrediction4x4.124, .Lfunc_end165-OneComponentChromaPrediction4x4.124
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.125    # -- Begin function start_macroblock.125
	.p2align	4, 0x90
	.type	start_macroblock.125,@function
start_macroblock.125:                   # @start_macroblock.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1731067097, -88(%rbp)  # imm = 0x672DFCD9
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB166_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB166_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB166_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB166_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB166_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB166_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB166_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB166_8:                              # %if.end
                                        #   in Loop: Header=BB166_5 Depth=1
	jmp	.LBB166_9
.LBB166_9:                              # %for.inc
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_5
.LBB166_10:                             # %for.end
	jmp	.LBB166_11
.LBB166_11:                             # %if.end19
	jmp	.LBB166_12
.LBB166_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB166_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB166_16
.LBB166_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB166_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB166_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_97
.LBB166_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB166_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB166_21
.LBB166_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_96
.LBB166_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB166_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB166_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB166_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB166_34
.LBB166_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_32
.LBB166_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB166_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_31
.LBB166_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB166_33
.LBB166_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB166_33:                             # %if.end112
	jmp	.LBB166_34
.LBB166_34:                             # %if.end113
	jmp	.LBB166_39
.LBB166_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB166_38
.LBB166_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB166_38:                             # %if.end125
	jmp	.LBB166_39
.LBB166_39:                             # %if.end126
	jmp	.LBB166_47
.LBB166_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB166_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB166_44
.LBB166_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_44:                             # %if.end140
	jmp	.LBB166_46
.LBB166_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB166_46:                             # %if.end145
	jmp	.LBB166_47
.LBB166_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB166_93
.LBB166_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB166_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB166_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB166_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB166_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_74
.LBB166_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB166_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB166_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_73
.LBB166_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB166_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB166_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_72
.LBB166_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB166_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB166_71
.LBB166_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB166_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB166_70:                             # %if.end223
	jmp	.LBB166_71
.LBB166_71:                             # %if.end224
	jmp	.LBB166_72
.LBB166_72:                             # %if.end225
	jmp	.LBB166_73
.LBB166_73:                             # %if.end226
	jmp	.LBB166_74
.LBB166_74:                             # %if.end227
	jmp	.LBB166_75
.LBB166_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB166_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB166_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB166_82
.LBB166_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB166_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB166_81:                             # %if.end256
	jmp	.LBB166_82
.LBB166_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB166_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB166_88
.LBB166_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB166_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB166_87
.LBB166_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB166_87:                             # %if.end292
	jmp	.LBB166_88
.LBB166_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB166_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB166_92
.LBB166_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB166_92:                             # %if.end305
	jmp	.LBB166_94
.LBB166_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB166_94:                             # %if.end309
	jmp	.LBB166_95
.LBB166_95:                             # %if.end310
	jmp	.LBB166_96
.LBB166_96:                             # %if.end311
	jmp	.LBB166_97
.LBB166_97:                             # %if.end312
	jmp	.LBB166_102
.LBB166_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB166_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB166_101
.LBB166_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB166_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB166_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB166_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB166_105
.LBB166_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB166_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB166_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB166_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB166_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_110 Depth 2
                                        #       Child Loop BB166_112 Depth 3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB166_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB166_108 Depth=1
	movl	$0, -16(%rbp)
.LBB166_110:                            # %for.cond364
                                        #   Parent Loop BB166_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_112 Depth 3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB166_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB166_110 Depth=2
	movl	$0, -12(%rbp)
.LBB166_112:                            # %for.cond368
                                        #   Parent Loop BB166_108 Depth=1
                                        #     Parent Loop BB166_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB166_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB166_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB166_112 Depth=3
	movl	$0, -36(%rbp)
.LBB166_114:                            # %for.cond372
                                        #   Parent Loop BB166_108 Depth=1
                                        #     Parent Loop BB166_110 Depth=2
                                        #       Parent Loop BB166_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB166_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB166_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB166_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB166_114
.LBB166_117:                            # %for.end388
                                        #   in Loop: Header=BB166_112 Depth=3
	jmp	.LBB166_118
.LBB166_118:                            # %for.inc389
                                        #   in Loop: Header=BB166_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_112
.LBB166_119:                            # %for.end391
                                        #   in Loop: Header=BB166_110 Depth=2
	jmp	.LBB166_120
.LBB166_120:                            # %for.inc392
                                        #   in Loop: Header=BB166_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_110
.LBB166_121:                            # %for.end394
                                        #   in Loop: Header=BB166_108 Depth=1
	jmp	.LBB166_122
.LBB166_122:                            # %for.inc395
                                        #   in Loop: Header=BB166_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_108
.LBB166_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB166_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_126 Depth 2
                                        #       Child Loop BB166_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB166_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB166_124 Depth=1
	movl	$0, -12(%rbp)
.LBB166_126:                            # %for.cond402
                                        #   Parent Loop BB166_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB166_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB166_126 Depth=2
	movl	$0, -20(%rbp)
.LBB166_128:                            # %for.cond406
                                        #   Parent Loop BB166_124 Depth=1
                                        #     Parent Loop BB166_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB166_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB166_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB166_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_128
.LBB166_131:                            # %for.end432
                                        #   in Loop: Header=BB166_126 Depth=2
	jmp	.LBB166_132
.LBB166_132:                            # %for.inc433
                                        #   in Loop: Header=BB166_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_126
.LBB166_133:                            # %for.end435
                                        #   in Loop: Header=BB166_124 Depth=1
	jmp	.LBB166_134
.LBB166_134:                            # %for.inc436
                                        #   in Loop: Header=BB166_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_124
.LBB166_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB166_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_138 Depth 2
                                        #       Child Loop BB166_140 Depth 3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB166_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB166_136 Depth=1
	movl	$0, -16(%rbp)
.LBB166_138:                            # %for.cond443
                                        #   Parent Loop BB166_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_140 Depth 3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB166_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB166_138 Depth=2
	movl	$0, -12(%rbp)
.LBB166_140:                            # %for.cond447
                                        #   Parent Loop BB166_136 Depth=1
                                        #     Parent Loop BB166_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB166_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB166_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB166_140 Depth=3
	movl	$0, -36(%rbp)
.LBB166_142:                            # %for.cond451
                                        #   Parent Loop BB166_136 Depth=1
                                        #     Parent Loop BB166_138 Depth=2
                                        #       Parent Loop BB166_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB166_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB166_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB166_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB166_142
.LBB166_145:                            # %for.end465
                                        #   in Loop: Header=BB166_140 Depth=3
	jmp	.LBB166_146
.LBB166_146:                            # %for.inc466
                                        #   in Loop: Header=BB166_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_140
.LBB166_147:                            # %for.end468
                                        #   in Loop: Header=BB166_138 Depth=2
	jmp	.LBB166_148
.LBB166_148:                            # %for.inc469
                                        #   in Loop: Header=BB166_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_138
.LBB166_149:                            # %for.end471
                                        #   in Loop: Header=BB166_136 Depth=1
	jmp	.LBB166_150
.LBB166_150:                            # %for.inc472
                                        #   in Loop: Header=BB166_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_136
.LBB166_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB166_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB166_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB166_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB166_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_152
.LBB166_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB166_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB166_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB166_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB166_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_156
.LBB166_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB166_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB166_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB166_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB166_166
.LBB166_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB166_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB166_165:                            # %if.end520
	jmp	.LBB166_166
.LBB166_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB166_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB166_168:                            # %if.end536
	cmpl	$1731067097, -88(%rbp)  # imm = 0x672DFCD9
	jne	.LBB166_170
.LBB166_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_169
.Lfunc_end166:
	.size	start_macroblock.125, .Lfunc_end166-start_macroblock.125
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.126        # -- Begin function writeMBLayer.126
	.p2align	4, 0x90
	.type	writeMBLayer.126,@function
writeMBLayer.126:                       # @writeMBLayer.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1795864759, -100(%rbp) # imm = 0x6B0AB8B7
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB167_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB167_3
.LBB167_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB167_3
.LBB167_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB167_9
.LBB167_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB167_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB167_8
.LBB167_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB167_8
.LBB167_8:                              # %cond.end14
.LBB167_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB167_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB167_24
.LBB167_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB167_17
	jmp	.LBB167_18
.LBB167_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB167_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB167_18
	jmp	.LBB167_17
.LBB167_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB167_17
	jmp	.LBB167_18
.LBB167_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB167_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB167_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB167_23
.LBB167_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB167_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB167_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB167_23:                             # %if.end50
	jmp	.LBB167_24
.LBB167_24:                             # %if.end51
	jmp	.LBB167_25
.LBB167_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB167_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB167_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB167_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB167_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB167_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB167_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB167_35
.LBB167_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB167_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB167_38
.LBB167_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB167_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB167_39:                             # %if.end96
	jmp	.LBB167_40
.LBB167_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB167_43
.LBB167_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB167_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB167_89
.LBB167_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB167_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB167_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB167_49
.LBB167_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB167_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB167_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB167_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB167_55
.LBB167_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB167_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB167_58
.LBB167_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB167_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB167_59:                             # %if.end198
	jmp	.LBB167_60
.LBB167_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB167_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB167_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB167_64
.LBB167_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB167_64:                             # %if.end226
	jmp	.LBB167_88
.LBB167_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB167_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB167_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB167_76
.LBB167_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB167_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB167_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB167_72:                             # %if.end281
	jmp	.LBB167_73
.LBB167_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB167_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB167_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB167_87
.LBB167_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB167_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB167_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB167_77 Depth=1
	movl	$0, -44(%rbp)
.LBB167_79:                             # %for.cond310
                                        #   Parent Loop BB167_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB167_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB167_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB167_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB167_79
.LBB167_82:                             # %for.end
                                        #   in Loop: Header=BB167_77 Depth=1
	jmp	.LBB167_83
.LBB167_83:                             # %for.inc322
                                        #   in Loop: Header=BB167_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB167_77
.LBB167_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB167_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB167_86:                             # %if.end345
	jmp	.LBB167_87
.LBB167_87:                             # %if.end346
	jmp	.LBB167_88
.LBB167_88:                             # %if.end347
	jmp	.LBB167_89
.LBB167_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB167_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB167_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB167_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB167_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB167_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB167_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB167_98
.LBB167_97:                             # %if.else380
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB167_98:                             # %if.end382
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB167_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB167_101
.LBB167_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB167_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB167_101:                            # %lor.end415
                                        #   in Loop: Header=BB167_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB167_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB167_94
.LBB167_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB167_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB167_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB167_114
.LBB167_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB167_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB167_110
.LBB167_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB167_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB167_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB167_113
.LBB167_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB167_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB167_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB167_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB167_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB167_120
.LBB167_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB167_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB167_119:                            # %if.end483
	jmp	.LBB167_120
.LBB167_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB167_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB167_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB167_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB167_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB167_129
.LBB167_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB167_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB167_128:                            # %if.end516
	jmp	.LBB167_129
.LBB167_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1795864759, -100(%rbp) # imm = 0x6B0AB8B7
	jne	.LBB167_131
.LBB167_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_130
.Lfunc_end167:
	.size	writeMBLayer.126, .Lfunc_end167-writeMBLayer.126
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.127 # -- Begin function SetModesAndRefframe.127
	.p2align	4, 0x90
	.type	SetModesAndRefframe.127,@function
SetModesAndRefframe.127:                # @SetModesAndRefframe.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2062090278, -60(%rbp)  # imm = 0x7AE90026
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB168_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_12
.LBB168_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB168_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_11
.LBB168_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB168_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB168_10
.LBB168_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB168_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB168_9
.LBB168_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB168_9:                              # %if.end
	jmp	.LBB168_10
.LBB168_10:                             # %if.end86
	jmp	.LBB168_11
.LBB168_11:                             # %if.end87
	jmp	.LBB168_12
.LBB168_12:                             # %if.end88
	cmpl	$2062090278, -60(%rbp)  # imm = 0x7AE90026
	jne	.LBB168_14
.LBB168_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_13
.Lfunc_end168:
	.size	SetModesAndRefframe.127, .Lfunc_end168-SetModesAndRefframe.127
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.128  # -- Begin function LumaResidualCoding.128
	.p2align	4, 0x90
	.type	LumaResidualCoding.128,@function
LumaResidualCoding.128:                 # @LumaResidualCoding.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$881879375, -48(%rbp)   # imm = 0x3490694F
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB169_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB169_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB169_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-36(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-36(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB169_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_1
.LBB169_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB169_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB169_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB169_33
.LBB169_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB169_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB169_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB169_8 Depth=1
	movl	$0, -12(%rbp)
.LBB169_10:                             # %for.cond13
                                        #   Parent Loop BB169_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB169_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB169_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB169_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB169_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB169_14
.LBB169_13:                             # %if.else
                                        #   in Loop: Header=BB169_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB169_14:                             # %if.end
                                        #   in Loop: Header=BB169_10 Depth=2
	jmp	.LBB169_15
.LBB169_15:                             # %for.inc31
                                        #   in Loop: Header=BB169_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_10
.LBB169_16:                             # %for.end33
                                        #   in Loop: Header=BB169_8 Depth=1
	jmp	.LBB169_17
.LBB169_17:                             # %for.inc34
                                        #   in Loop: Header=BB169_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_8
.LBB169_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB169_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB169_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_22 Depth 2
                                        #       Child Loop BB169_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB169_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB169_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB169_22:                             # %for.cond45
                                        #   Parent Loop BB169_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB169_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB169_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB169_22 Depth=2
	movl	$0, -12(%rbp)
.LBB169_24:                             # %for.cond48
                                        #   Parent Loop BB169_20 Depth=1
                                        #     Parent Loop BB169_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB169_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB169_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB169_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_24
.LBB169_27:                             # %for.end55
                                        #   in Loop: Header=BB169_22 Depth=2
	jmp	.LBB169_28
.LBB169_28:                             # %for.inc56
                                        #   in Loop: Header=BB169_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_22
.LBB169_29:                             # %for.end58
                                        #   in Loop: Header=BB169_20 Depth=1
	jmp	.LBB169_30
.LBB169_30:                             # %for.inc59
                                        #   in Loop: Header=BB169_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_20
.LBB169_31:                             # %for.end61
	jmp	.LBB169_32
.LBB169_32:                             # %if.end62
	jmp	.LBB169_33
.LBB169_33:                             # %if.end63
	cmpl	$881879375, -48(%rbp)   # imm = 0x3490694F
	jne	.LBB169_35
.LBB169_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_34
.Lfunc_end169:
	.size	LumaResidualCoding.128, .Lfunc_end169-LumaResidualCoding.128
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.129  # -- Begin function writeIntra4x4Modes.129
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.129,@function
writeIntra4x4Modes.129:                 # @writeIntra4x4Modes.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$2059957892, -80(%rbp)  # imm = 0x7AC87684
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB170_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_9 Depth 2
                                        #       Child Loop BB170_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB170_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB170_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB170_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB170_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB170_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB170_8
.LBB170_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB170_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB170_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB170_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB170_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB170_17
.LBB170_8:                              # %if.then
                                        #   in Loop: Header=BB170_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB170_9:                              # %for.cond24
                                        #   Parent Loop BB170_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB170_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB170_9 Depth=2
	movl	$0, -12(%rbp)
.LBB170_11:                             # %for.cond27
                                        #   Parent Loop BB170_1 Depth=1
                                        #     Parent Loop BB170_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB170_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB170_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB170_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_11
.LBB170_14:                             # %for.end
                                        #   in Loop: Header=BB170_9 Depth=2
	jmp	.LBB170_15
.LBB170_15:                             # %for.inc42
                                        #   in Loop: Header=BB170_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB170_9
.LBB170_16:                             # %for.end44
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_17
.LBB170_17:                             # %if.end
                                        #   in Loop: Header=BB170_1 Depth=1
	jmp	.LBB170_18
.LBB170_18:                             # %for.inc45
                                        #   in Loop: Header=BB170_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB170_1
.LBB170_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB170_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB170_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB170_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_23:                             # %if.end57
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB170_26
.LBB170_25:                             # %if.else
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB170_26:                             # %if.end65
                                        #   in Loop: Header=BB170_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB170_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_20
.LBB170_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$2059957892, -80(%rbp)  # imm = 0x7AC87684
	jne	.LBB170_30
.LBB170_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_29
.Lfunc_end170:
	.size	writeIntra4x4Modes.129, .Lfunc_end170-writeIntra4x4Modes.129
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.130  # -- Begin function writeIntra4x4Modes.130
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.130,@function
writeIntra4x4Modes.130:                 # @writeIntra4x4Modes.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$928446851, -80(%rbp)   # imm = 0x3756F983
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB171_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_9 Depth 2
                                        #       Child Loop BB171_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB171_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB171_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB171_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB171_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB171_8
.LBB171_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB171_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB171_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB171_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB171_17
.LBB171_8:                              # %if.then
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -28(%rbp)
.LBB171_9:                              # %for.cond24
                                        #   Parent Loop BB171_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB171_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB171_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB171_9 Depth=2
	movl	$0, -12(%rbp)
.LBB171_11:                             # %for.cond27
                                        #   Parent Loop BB171_1 Depth=1
                                        #     Parent Loop BB171_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB171_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB171_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB171_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB171_11
.LBB171_14:                             # %for.end
                                        #   in Loop: Header=BB171_9 Depth=2
	jmp	.LBB171_15
.LBB171_15:                             # %for.inc42
                                        #   in Loop: Header=BB171_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB171_9
.LBB171_16:                             # %for.end44
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_17
.LBB171_17:                             # %if.end
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_18
.LBB171_18:                             # %for.inc45
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB171_1
.LBB171_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB171_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB171_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB171_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_23:                             # %if.end57
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB171_26
.LBB171_25:                             # %if.else
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB171_26:                             # %if.end65
                                        #   in Loop: Header=BB171_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB171_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB171_20
.LBB171_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$928446851, -80(%rbp)   # imm = 0x3756F983
	jne	.LBB171_30
.LBB171_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_29
.Lfunc_end171:
	.size	writeIntra4x4Modes.130, .Lfunc_end171-writeIntra4x4Modes.130
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.131 # -- Begin function writeCoeff4x4_CAVLC.131
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.131,@function
writeCoeff4x4_CAVLC.131:                # @writeCoeff4x4_CAVLC.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$453333857, -172(%rbp)  # imm = 0x1B055361
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB172_22
# %bb.1:                                # %entry
	movq	.LJTI172_0(,%rax,8), %rax
	jmpq	*%rax
.LBB172_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB172_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB172_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB172_6
.LBB172_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB172_7
.LBB172_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB172_7:                              # %if.end
	jmp	.LBB172_23
.LBB172_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB172_23
.LBB172_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB172_23
.LBB172_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB172_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB172_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB172_14
.LBB172_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB172_15
.LBB172_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB172_15:                             # %if.end67
	jmp	.LBB172_23
.LBB172_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB172_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB172_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB172_20
.LBB172_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB172_21
.LBB172_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB172_21:                             # %if.end93
	jmp	.LBB172_23
.LBB172_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB172_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB172_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB172_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB172_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB172_27
.LBB172_26:                             # %cond.false
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB172_27
.LBB172_27:                             # %cond.end
                                        #   in Loop: Header=BB172_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB172_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB172_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB172_29:                             # %land.end
                                        #   in Loop: Header=BB172_24 Depth=1
	testb	$1, %dl
	jne	.LBB172_30
	jmp	.LBB172_41
.LBB172_30:                             # %for.body
                                        #   in Loop: Header=BB172_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB172_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB172_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB172_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB172_33:                             # %if.end110
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB172_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB172_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	$3, -28(%rbp)
.LBB172_36:                             # %if.end117
                                        #   in Loop: Header=BB172_24 Depth=1
	jmp	.LBB172_38
.LBB172_37:                             # %if.else118
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	$0, -28(%rbp)
.LBB172_38:                             # %if.end119
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB172_39:                             # %if.end121
                                        #   in Loop: Header=BB172_24 Depth=1
	jmp	.LBB172_40
.LBB172_40:                             # %for.inc
                                        #   in Loop: Header=BB172_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB172_24
.LBB172_41:                             # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB172_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB172_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB172_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB172_46
.LBB172_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB172_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB172_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB172_49
.LBB172_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB172_49:                             # %cond.end145
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB172_51
.LBB172_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB172_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB172_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB172_60
.LBB172_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB172_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB172_59
.LBB172_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB172_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB172_58
.LBB172_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB172_58:                             # %if.end168
	jmp	.LBB172_59
.LBB172_59:                             # %if.end169
	jmp	.LBB172_60
.LBB172_60:                             # %if.end170
	jmp	.LBB172_62
.LBB172_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB172_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB172_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB172_65
.LBB172_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB172_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB172_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB172_122
.LBB172_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB172_121
# %bb.68:                               # %if.then192
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB172_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB172_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB172_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB172_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB172_72:                             # %if.end202
                                        #   in Loop: Header=BB172_69 Depth=1
	movl	-104(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB172_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB172_69 Depth=1
	movl	-104(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -104(%rbp)
.LBB172_74:                             # %if.end205
                                        #   in Loop: Header=BB172_69 Depth=1
	jmp	.LBB172_75
.LBB172_75:                             # %for.inc206
                                        #   in Loop: Header=BB172_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB172_69
.LBB172_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB172_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB172_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB172_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB172_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB172_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB172_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB172_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB172_85
.LBB172_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB172_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB172_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB172_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB172_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB172_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB172_91
.LBB172_90:                             # %if.else249
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB172_91:                             # %if.end252
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	$0, -140(%rbp)
.LBB172_92:                             # %if.end253
                                        #   in Loop: Header=BB172_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB172_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB172_95
.LBB172_94:                             # %if.else257
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB172_95:                             # %if.end259
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB172_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB172_97:                             # %if.end266
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB172_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB172_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	$2, -32(%rbp)
.LBB172_100:                            # %if.end273
                                        #   in Loop: Header=BB172_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB172_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB172_86
.LBB172_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB172_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB172_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB172_106
.LBB172_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB172_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB172_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB172_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB172_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB172_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB172_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB172_108 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB172_112
.LBB172_111:                            # %if.then318
	jmp	.LBB172_120
.LBB172_112:                            # %if.end319
                                        #   in Loop: Header=BB172_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB172_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB172_108 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB172_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB172_108 Depth=1
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB172_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB172_108 Depth=1
	movl	$6, -32(%rbp)
.LBB172_116:                            # %if.end327
                                        #   in Loop: Header=BB172_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-96(%rbp), %eax
	movl	-92(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB172_117:                            # %if.end341
                                        #   in Loop: Header=BB172_108 Depth=1
	jmp	.LBB172_118
.LBB172_118:                            # %for.inc342
                                        #   in Loop: Header=BB172_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB172_108
.LBB172_119:                            # %for.end344.loopexit
	jmp	.LBB172_120
.LBB172_120:                            # %for.end344
	jmp	.LBB172_121
.LBB172_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB172_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$453333857, -172(%rbp)  # imm = 0x1B055361
	jne	.LBB172_124
.LBB172_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_123
.Lfunc_end172:
	.size	writeCoeff4x4_CAVLC.131, .Lfunc_end172-writeCoeff4x4_CAVLC.131
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI172_0:
	.quad	.LBB172_2
	.quad	.LBB172_8
	.quad	.LBB172_9
	.quad	.LBB172_22
	.quad	.LBB172_22
	.quad	.LBB172_22
	.quad	.LBB172_10
	.quad	.LBB172_16
                                        # -- End function
	.text
	.globl	LumaResidualCoding8x8.132 # -- Begin function LumaResidualCoding8x8.132
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.132,@function
LumaResidualCoding8x8.132:              # @LumaResidualCoding8x8.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$241789166, -116(%rbp)  # imm = 0xE6968EE
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -84(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB173_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -84(%rbp)
	jne	.LBB173_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB173_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB173_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB173_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB173_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_8 Depth 2
                                        #       Child Loop BB173_11 Depth 3
                                        #         Child Loop BB173_13 Depth 4
                                        #       Child Loop BB173_19 Depth 3
                                        #         Child Loop BB173_21 Depth 4
                                        #       Child Loop BB173_29 Depth 3
                                        #         Child Loop BB173_31 Depth 4
                                        #       Child Loop BB173_40 Depth 3
                                        #         Child Loop BB173_42 Depth 4
                                        #       Child Loop BB173_57 Depth 3
                                        #         Child Loop BB173_59 Depth 4
                                        #       Child Loop BB173_67 Depth 3
                                        #         Child Loop BB173_69 Depth 4
                                        #       Child Loop BB173_84 Depth 3
                                        #         Child Loop BB173_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB173_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB173_8:                              # %for.cond9
                                        #   Parent Loop BB173_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB173_11 Depth 3
                                        #         Child Loop BB173_13 Depth 4
                                        #       Child Loop BB173_19 Depth 3
                                        #         Child Loop BB173_21 Depth 4
                                        #       Child Loop BB173_29 Depth 3
                                        #         Child Loop BB173_31 Depth 4
                                        #       Child Loop BB173_40 Depth 3
                                        #         Child Loop BB173_42 Depth 4
                                        #       Child Loop BB173_57 Depth 3
                                        #         Child Loop BB173_59 Depth 4
                                        #       Child Loop BB173_67 Depth 3
                                        #         Child Loop BB173_69 Depth 4
                                        #       Child Loop BB173_84 Depth 3
                                        #         Child Loop BB173_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB173_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB173_11:                             # %for.cond16
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB173_11 Depth=3
	movl	$0, -12(%rbp)
.LBB173_13:                             # %for.cond20
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB173_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB173_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_13
.LBB173_16:                             # %for.end
                                        #   in Loop: Header=BB173_11 Depth=3
	jmp	.LBB173_17
.LBB173_17:                             # %for.inc37
                                        #   in Loop: Header=BB173_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_11
.LBB173_18:                             # %for.end39
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB173_19:                             # %for.cond41
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB173_19 Depth=3
	movl	$0, -12(%rbp)
.LBB173_21:                             # %for.cond45
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB173_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB173_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_21
.LBB173_24:                             # %for.end65
                                        #   in Loop: Header=BB173_19 Depth=3
	jmp	.LBB173_25
.LBB173_25:                             # %for.inc66
                                        #   in Loop: Header=BB173_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_19
.LBB173_26:                             # %for.end68
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_27
.LBB173_27:                             # %if.end69
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB173_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	$0, -16(%rbp)
.LBB173_29:                             # %for.cond74
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB173_29 Depth=3
	movl	$0, -12(%rbp)
.LBB173_31:                             # %for.cond78
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB173_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB173_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_31
.LBB173_34:                             # %for.end98
                                        #   in Loop: Header=BB173_29 Depth=3
	jmp	.LBB173_35
.LBB173_35:                             # %for.inc99
                                        #   in Loop: Header=BB173_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_29
.LBB173_36:                             # %for.end101
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_37
.LBB173_37:                             # %if.end102
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB173_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB173_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	$0, -16(%rbp)
.LBB173_40:                             # %for.cond108
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB173_40 Depth=3
	movl	$0, -12(%rbp)
.LBB173_42:                             # %for.cond112
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB173_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB173_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_42
.LBB173_45:                             # %for.end137
                                        #   in Loop: Header=BB173_40 Depth=3
	jmp	.LBB173_46
.LBB173_46:                             # %for.inc138
                                        #   in Loop: Header=BB173_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_40
.LBB173_47:                             # %for.end140
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB173_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB173_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB173_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB173_52
.LBB173_51:                             # %if.else
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB173_52:                             # %if.end151
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB173_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB173_54:                             # %if.end157
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_55
.LBB173_55:                             # %if.end158
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_65
.LBB173_56:                             # %if.else159
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	$0, -16(%rbp)
.LBB173_57:                             # %for.cond160
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB173_57 Depth=3
	movl	$0, -12(%rbp)
.LBB173_59:                             # %for.cond164
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB173_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB173_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_59
.LBB173_62:                             # %for.end193
                                        #   in Loop: Header=BB173_57 Depth=3
	jmp	.LBB173_63
.LBB173_63:                             # %for.inc194
                                        #   in Loop: Header=BB173_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_57
.LBB173_64:                             # %for.end196
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_65
.LBB173_65:                             # %if.end197
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_95
.LBB173_66:                             # %if.else198
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	$0, -16(%rbp)
.LBB173_67:                             # %for.cond199
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB173_67 Depth=3
	movl	$0, -12(%rbp)
.LBB173_69:                             # %for.cond203
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB173_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -120(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB173_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB173_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB173_73
.LBB173_72:                             # %if.else300
                                        #   in Loop: Header=BB173_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB173_73:                             # %if.end314
                                        #   in Loop: Header=BB173_69 Depth=4
	jmp	.LBB173_74
.LBB173_74:                             # %for.inc315
                                        #   in Loop: Header=BB173_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_69
.LBB173_75:                             # %for.end317
                                        #   in Loop: Header=BB173_67 Depth=3
	jmp	.LBB173_76
.LBB173_76:                             # %for.inc318
                                        #   in Loop: Header=BB173_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_67
.LBB173_77:                             # %for.end320
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB173_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB173_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB173_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB173_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB173_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB173_83
.LBB173_82:                             # %if.else334
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB173_83:                             # %if.end336
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	$0, -16(%rbp)
.LBB173_84:                             # %for.cond337
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB173_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB173_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB173_84 Depth=3
	movl	$0, -12(%rbp)
.LBB173_86:                             # %for.cond341
                                        #   Parent Loop BB173_6 Depth=1
                                        #     Parent Loop BB173_8 Depth=2
                                        #       Parent Loop BB173_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB173_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB173_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB173_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_86
.LBB173_89:                             # %for.end358
                                        #   in Loop: Header=BB173_84 Depth=3
	jmp	.LBB173_90
.LBB173_90:                             # %for.inc359
                                        #   in Loop: Header=BB173_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_84
.LBB173_91:                             # %for.end361
                                        #   in Loop: Header=BB173_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB173_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB173_93:                             # %if.end368
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_94
.LBB173_94:                             # %if.end369
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_95
.LBB173_95:                             # %if.end370
                                        #   in Loop: Header=BB173_8 Depth=2
	jmp	.LBB173_96
.LBB173_96:                             # %for.inc371
                                        #   in Loop: Header=BB173_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB173_8
.LBB173_97:                             # %for.end374
                                        #   in Loop: Header=BB173_6 Depth=1
	jmp	.LBB173_98
.LBB173_98:                             # %for.inc375
                                        #   in Loop: Header=BB173_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB173_6
.LBB173_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB173_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB173_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -60(%rbp)
	jne	.LBB173_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB173_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB173_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB173_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB173_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB173_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB173_106 Depth=1
	movl	$0, -12(%rbp)
.LBB173_108:                            # %for.cond400
                                        #   Parent Loop BB173_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB173_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB173_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB173_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_108
.LBB173_111:                            # %for.end417
                                        #   in Loop: Header=BB173_106 Depth=1
	jmp	.LBB173_112
.LBB173_112:                            # %for.inc418
                                        #   in Loop: Header=BB173_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_106
.LBB173_113:                            # %for.end420
	jmp	.LBB173_114
.LBB173_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB173_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB173_116:                            # %if.end431
	jmp	.LBB173_117
.LBB173_117:                            # %if.end432
	jmp	.LBB173_118
.LBB173_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB173_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -60(%rbp)
	jne	.LBB173_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB173_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB173_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB173_145
.LBB173_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB173_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB173_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB173_126:                            # %for.cond462
                                        #   Parent Loop BB173_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB173_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB173_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB173_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB173_130
.LBB173_129:                            # %if.else481
                                        #   in Loop: Header=BB173_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB173_130:                            # %if.end486
                                        #   in Loop: Header=BB173_126 Depth=2
	jmp	.LBB173_131
.LBB173_131:                            # %for.inc487
                                        #   in Loop: Header=BB173_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_126
.LBB173_132:                            # %for.end489
                                        #   in Loop: Header=BB173_124 Depth=1
	jmp	.LBB173_133
.LBB173_133:                            # %for.inc490
                                        #   in Loop: Header=BB173_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_124
.LBB173_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB173_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB173_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB173_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB173_138:                            # %for.cond502
                                        #   Parent Loop BB173_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB173_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB173_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB173_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB173_138
.LBB173_141:                            # %for.end509
                                        #   in Loop: Header=BB173_136 Depth=1
	jmp	.LBB173_142
.LBB173_142:                            # %for.inc510
                                        #   in Loop: Header=BB173_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_136
.LBB173_143:                            # %for.end512
	jmp	.LBB173_144
.LBB173_144:                            # %if.end513
	jmp	.LBB173_145
.LBB173_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$241789166, -116(%rbp)  # imm = 0xE6968EE
	jne	.LBB173_147
.LBB173_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_146
.Lfunc_end173:
	.size	LumaResidualCoding8x8.132, .Lfunc_end173-LumaResidualCoding8x8.132
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.133 # -- Begin function OneComponentLumaPrediction4x4.133
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.133,@function
OneComponentLumaPrediction4x4.133:      # @OneComponentLumaPrediction4x4.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1078107879, -84(%rbp)  # imm = 0x40429EE7
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1078107879, -84(%rbp)  # imm = 0x40429EE7
	jne	.LBB174_2
.LBB174_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_1
.Lfunc_end174:
	.size	OneComponentLumaPrediction4x4.133, .Lfunc_end174-OneComponentLumaPrediction4x4.133
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.134      # -- Begin function find_sad_16x16.134
	.p2align	4, 0x90
	.type	find_sad_16x16.134,@function
find_sad_16x16.134:                     # @find_sad_16x16.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$203283632, -80(%rbp)   # imm = 0xC1DDCB0
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB175_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB175_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_1
.LBB175_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB175_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB175_20
.LBB175_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB175_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB175_9
.LBB175_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB175_9
.LBB175_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB175_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB175_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB175_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB175_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB175_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB175_14
.LBB175_13:                             # %cond.false23
                                        #   in Loop: Header=BB175_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB175_14
.LBB175_14:                             # %cond.end24
                                        #   in Loop: Header=BB175_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB175_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_10
.LBB175_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB175_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB175_19
.LBB175_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB175_19
.LBB175_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB175_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB175_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_42 Depth 2
                                        #       Child Loop BB175_44 Depth 3
                                        #     Child Loop BB175_50 Depth 2
                                        #       Child Loop BB175_52 Depth 3
                                        #         Child Loop BB175_54 Depth 4
                                        #         Child Loop BB175_58 Depth 4
                                        #           Child Loop BB175_60 Depth 5
                                        #     Child Loop BB175_72 Depth 2
                                        #       Child Loop BB175_74 Depth 3
                                        #     Child Loop BB175_80 Depth 2
                                        #     Child Loop BB175_84 Depth 2
                                        #       Child Loop BB175_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB175_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB175_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB175_32
.LBB175_24:                             # %if.then46
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB175_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB175_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB175_28
.LBB175_27:                             # %if.then51
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_95
.LBB175_28:                             # %if.end52
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB175_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB175_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_95
.LBB175_31:                             # %if.end57
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_32
.LBB175_32:                             # %if.end58
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB175_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB175_40
.LBB175_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB175_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB175_40
.LBB175_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB175_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB175_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB175_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB175_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB175_41
.LBB175_40:                             # %if.then74
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_94
.LBB175_41:                             # %if.else75
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	$0, -16(%rbp)
.LBB175_42:                             # %for.cond76
                                        #   Parent Loop BB175_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB175_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB175_42 Depth=2
	movl	$0, -12(%rbp)
.LBB175_44:                             # %for.cond79
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB175_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB175_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB175_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_44
.LBB175_47:                             # %for.end115
                                        #   in Loop: Header=BB175_42 Depth=2
	jmp	.LBB175_48
.LBB175_48:                             # %for.inc116
                                        #   in Loop: Header=BB175_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_42
.LBB175_49:                             # %for.end118
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB175_50:                             # %for.cond119
                                        #   Parent Loop BB175_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_52 Depth 3
                                        #         Child Loop BB175_54 Depth 4
                                        #         Child Loop BB175_58 Depth 4
                                        #           Child Loop BB175_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB175_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB175_50 Depth=2
	movl	$0, -20(%rbp)
.LBB175_52:                             # %for.cond123
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_54 Depth 4
                                        #         Child Loop BB175_58 Depth 4
                                        #           Child Loop BB175_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB175_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB175_52 Depth=3
	movl	$0, -16(%rbp)
.LBB175_54:                             # %for.cond127
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_50 Depth=2
                                        #       Parent Loop BB175_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB175_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB175_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB175_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_54
.LBB175_57:                             # %for.end237
                                        #   in Loop: Header=BB175_52 Depth=3
	movl	$0, -12(%rbp)
.LBB175_58:                             # %for.cond238
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_50 Depth=2
                                        #       Parent Loop BB175_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB175_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB175_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB175_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB175_60:                             # %for.cond346
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_50 Depth=2
                                        #       Parent Loop BB175_52 Depth=3
                                        #         Parent Loop BB175_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB175_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB175_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB175_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB175_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB175_63:                             # %if.end363
                                        #   in Loop: Header=BB175_60 Depth=5
	jmp	.LBB175_64
.LBB175_64:                             # %for.inc364
                                        #   in Loop: Header=BB175_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_60
.LBB175_65:                             # %for.end366
                                        #   in Loop: Header=BB175_58 Depth=4
	jmp	.LBB175_66
.LBB175_66:                             # %for.inc367
                                        #   in Loop: Header=BB175_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_58
.LBB175_67:                             # %for.end369
                                        #   in Loop: Header=BB175_52 Depth=3
	jmp	.LBB175_68
.LBB175_68:                             # %for.inc370
                                        #   in Loop: Header=BB175_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_52
.LBB175_69:                             # %for.end372
                                        #   in Loop: Header=BB175_50 Depth=2
	jmp	.LBB175_70
.LBB175_70:                             # %for.inc373
                                        #   in Loop: Header=BB175_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB175_50
.LBB175_71:                             # %for.end375
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	$0, -16(%rbp)
.LBB175_72:                             # %for.cond376
                                        #   Parent Loop BB175_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB175_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB175_72 Depth=2
	movl	$0, -12(%rbp)
.LBB175_74:                             # %for.cond380
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB175_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB175_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB175_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_74
.LBB175_77:                             # %for.end397
                                        #   in Loop: Header=BB175_72 Depth=2
	jmp	.LBB175_78
.LBB175_78:                             # %for.inc398
                                        #   in Loop: Header=BB175_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_72
.LBB175_79:                             # %for.end400
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	$0, -16(%rbp)
.LBB175_80:                             # %for.cond401
                                        #   Parent Loop BB175_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB175_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB175_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB175_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_80
.LBB175_83:                             # %for.end463
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	$0, -12(%rbp)
.LBB175_84:                             # %for.cond464
                                        #   Parent Loop BB175_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB175_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB175_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB175_86:                             # %for.cond524
                                        #   Parent Loop BB175_21 Depth=1
                                        #     Parent Loop BB175_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB175_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB175_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB175_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_86
.LBB175_89:                             # %for.end536
                                        #   in Loop: Header=BB175_84 Depth=2
	jmp	.LBB175_90
.LBB175_90:                             # %for.inc537
                                        #   in Loop: Header=BB175_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_84
.LBB175_91:                             # %for.end539
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB175_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB175_93:                             # %if.end543
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_94
.LBB175_94:                             # %if.end544
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_95
.LBB175_95:                             # %for.inc545
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB175_21
.LBB175_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$203283632, -80(%rbp)   # imm = 0xC1DDCB0
	jne	.LBB175_98
.LBB175_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_97
.Lfunc_end175:
	.size	find_sad_16x16.134, .Lfunc_end175-find_sad_16x16.134
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.135 # -- Begin function writeCBPandLumaCoeff.135
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.135,@function
writeCBPandLumaCoeff.135:               # @writeCBPandLumaCoeff.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$298142717, -104(%rbp)  # imm = 0x11C54BFD
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB176_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB176_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB176_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB176_7
.LBB176_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB176_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB176_10
.LBB176_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB176_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB176_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB176_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB176_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB176_18
.LBB176_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB176_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB176_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB176_18
.LBB176_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB176_22
.LBB176_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB176_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB176_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB176_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB176_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB176_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_26
.LBB176_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB176_29
.LBB176_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB176_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_30:                             # %if.end93
	jmp	.LBB176_31
.LBB176_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB176_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB176_42
.LBB176_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_36
.LBB176_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB176_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB176_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB176_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB176_41
.LBB176_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB176_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB176_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB176_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB176_43 Depth=1
	movl	$0, -20(%rbp)
.LBB176_45:                             # %for.cond141
                                        #   Parent Loop BB176_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB176_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB176_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB176_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_45
.LBB176_48:                             # %for.end
                                        #   in Loop: Header=BB176_43 Depth=1
	jmp	.LBB176_49
.LBB176_49:                             # %for.inc152
                                        #   in Loop: Header=BB176_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB176_43
.LBB176_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB176_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB176_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB176_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB176_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB176_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB176_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB176_55:                             # %if.end169
                                        #   in Loop: Header=BB176_52 Depth=1
	jmp	.LBB176_56
.LBB176_56:                             # %for.inc170
                                        #   in Loop: Header=BB176_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_52
.LBB176_57:                             # %for.end172
	jmp	.LBB176_101
.LBB176_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB176_70
.LBB176_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB176_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB176_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB176_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB176_63:                             # %land.end184
                                        #   in Loop: Header=BB176_61 Depth=1
	testb	$1, %al
	jne	.LBB176_64
	jmp	.LBB176_69
.LBB176_64:                             # %for.body186
                                        #   in Loop: Header=BB176_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB176_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_67
.LBB176_66:                             # %if.else196
                                        #   in Loop: Header=BB176_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_67:                             # %if.end198
                                        #   in Loop: Header=BB176_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB176_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB176_61
.LBB176_69:                             # %for.end218
	jmp	.LBB176_70
.LBB176_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB176_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB176_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_74 Depth 2
                                        #       Child Loop BB176_76 Depth 3
                                        #         Child Loop BB176_78 Depth 4
                                        #           Child Loop BB176_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB176_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB176_72 Depth=1
	movl	$0, -52(%rbp)
.LBB176_74:                             # %for.cond226
                                        #   Parent Loop BB176_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB176_76 Depth 3
                                        #         Child Loop BB176_78 Depth 4
                                        #           Child Loop BB176_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB176_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB176_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB176_76:                             # %for.cond229
                                        #   Parent Loop BB176_72 Depth=1
                                        #     Parent Loop BB176_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB176_78 Depth 4
                                        #           Child Loop BB176_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB176_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB176_78:                             # %for.cond233
                                        #   Parent Loop BB176_72 Depth=1
                                        #     Parent Loop BB176_74 Depth=2
                                        #       Parent Loop BB176_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB176_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB176_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB176_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB176_91
.LBB176_81:                             # %if.else247
                                        #   in Loop: Header=BB176_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB176_82:                             # %for.cond259
                                        #   Parent Loop BB176_72 Depth=1
                                        #     Parent Loop BB176_74 Depth=2
                                        #       Parent Loop BB176_76 Depth=3
                                        #         Parent Loop BB176_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB176_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB176_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB176_84:                             # %land.end263
                                        #   in Loop: Header=BB176_82 Depth=5
	testb	$1, %al
	jne	.LBB176_85
	jmp	.LBB176_90
.LBB176_85:                             # %for.body265
                                        #   in Loop: Header=BB176_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB176_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_88
.LBB176_87:                             # %if.else276
                                        #   in Loop: Header=BB176_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_88:                             # %if.end278
                                        #   in Loop: Header=BB176_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB176_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB176_82
.LBB176_90:                             # %for.end300
                                        #   in Loop: Header=BB176_78 Depth=4
	jmp	.LBB176_91
.LBB176_91:                             # %if.end301
                                        #   in Loop: Header=BB176_78 Depth=4
	jmp	.LBB176_92
.LBB176_92:                             # %for.inc302
                                        #   in Loop: Header=BB176_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_78
.LBB176_93:                             # %for.end304
                                        #   in Loop: Header=BB176_76 Depth=3
	jmp	.LBB176_94
.LBB176_94:                             # %for.inc305
                                        #   in Loop: Header=BB176_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB176_76
.LBB176_95:                             # %for.end307
                                        #   in Loop: Header=BB176_74 Depth=2
	jmp	.LBB176_96
.LBB176_96:                             # %for.inc308
                                        #   in Loop: Header=BB176_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB176_74
.LBB176_97:                             # %for.end310
                                        #   in Loop: Header=BB176_72 Depth=1
	jmp	.LBB176_98
.LBB176_98:                             # %for.inc311
                                        #   in Loop: Header=BB176_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB176_72
.LBB176_99:                             # %for.end313
	jmp	.LBB176_100
.LBB176_100:                            # %if.end314
	jmp	.LBB176_101
.LBB176_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$298142717, -104(%rbp)  # imm = 0x11C54BFD
	jne	.LBB176_103
.LBB176_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_102
.Lfunc_end176:
	.size	writeCBPandLumaCoeff.135, .Lfunc_end176-writeCBPandLumaCoeff.135
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.136 # -- Begin function ChromaPrediction4x4.136
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.136,@function
ChromaPrediction4x4.136:                # @ChromaPrediction4x4.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$703092059, -72(%rbp)   # imm = 0x29E8555B
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB177_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB177_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB177_6
.LBB177_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB177_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB177_5:                              # %land.end
.LBB177_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB177_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB177_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB177_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB177_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB177_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB177_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB177_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB177_15
.LBB177_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB177_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB177_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB177_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB177_87
.LBB177_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB177_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB177_21
.LBB177_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB177_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB177_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB177_24
.LBB177_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB177_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB177_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB177_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB177_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_29:                             # %for.cond52
                                        #   Parent Loop BB177_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB177_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB177_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_29
.LBB177_32:                             # %for.end
                                        #   in Loop: Header=BB177_27 Depth=1
	jmp	.LBB177_33
.LBB177_33:                             # %for.inc99
                                        #   in Loop: Header=BB177_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_27
.LBB177_34:                             # %for.end101
	jmp	.LBB177_55
.LBB177_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB177_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB177_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_39:                             # %for.cond109
                                        #   Parent Loop BB177_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB177_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB177_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_39
.LBB177_42:                             # %for.end139
                                        #   in Loop: Header=BB177_37 Depth=1
	jmp	.LBB177_43
.LBB177_43:                             # %for.inc140
                                        #   in Loop: Header=BB177_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_37
.LBB177_44:                             # %for.end142
	jmp	.LBB177_54
.LBB177_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB177_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_48:                             # %for.cond148
                                        #   Parent Loop BB177_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB177_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB177_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_48
.LBB177_51:                             # %for.end178
                                        #   in Loop: Header=BB177_46 Depth=1
	jmp	.LBB177_52
.LBB177_52:                             # %for.inc179
                                        #   in Loop: Header=BB177_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_46
.LBB177_53:                             # %for.end181
	jmp	.LBB177_54
.LBB177_54:                             # %if.end182
	jmp	.LBB177_55
.LBB177_55:                             # %if.end183
	jmp	.LBB177_87
.LBB177_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB177_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB177_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_60:                             # %for.cond192
                                        #   Parent Loop BB177_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB177_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB177_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_60
.LBB177_63:                             # %for.end208
                                        #   in Loop: Header=BB177_58 Depth=1
	jmp	.LBB177_64
.LBB177_64:                             # %for.inc209
                                        #   in Loop: Header=BB177_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_58
.LBB177_65:                             # %for.end211
	jmp	.LBB177_86
.LBB177_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB177_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB177_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_70:                             # %for.cond220
                                        #   Parent Loop BB177_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB177_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB177_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_70
.LBB177_73:                             # %for.end233
                                        #   in Loop: Header=BB177_68 Depth=1
	jmp	.LBB177_74
.LBB177_74:                             # %for.inc234
                                        #   in Loop: Header=BB177_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_68
.LBB177_75:                             # %for.end236
	jmp	.LBB177_85
.LBB177_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB177_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB177_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB177_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB177_79:                             # %for.cond242
                                        #   Parent Loop BB177_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB177_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB177_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB177_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_79
.LBB177_82:                             # %for.end255
                                        #   in Loop: Header=BB177_77 Depth=1
	jmp	.LBB177_83
.LBB177_83:                             # %for.inc256
                                        #   in Loop: Header=BB177_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_77
.LBB177_84:                             # %for.end258
	jmp	.LBB177_85
.LBB177_85:                             # %if.end259
	jmp	.LBB177_86
.LBB177_86:                             # %if.end260
	jmp	.LBB177_87
.LBB177_87:                             # %if.end261
	cmpl	$703092059, -72(%rbp)   # imm = 0x29E8555B
	jne	.LBB177_89
.LBB177_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_88
.Lfunc_end177:
	.size	ChromaPrediction4x4.136, .Lfunc_end177-ChromaPrediction4x4.136
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.137 # -- Begin function writeMotionVector8x8.137
	.p2align	4, 0x90
	.type	writeMotionVector8x8.137,@function
writeMotionVector8x8.137:               # @writeMotionVector8x8.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$53097705, -96(%rbp)    # imm = 0x32A34E9
	movl	%edi, -88(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB178_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB178_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB178_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB178_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB178_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB178_7
.LBB178_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB178_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB178_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB178_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_11 Depth 2
                                        #       Child Loop BB178_13 Depth 3
                                        #         Child Loop BB178_15 Depth 4
                                        #           Child Loop BB178_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB178_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB178_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB178_11:                             # %for.cond22
                                        #   Parent Loop BB178_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB178_13 Depth 3
                                        #         Child Loop BB178_15 Depth 4
                                        #           Child Loop BB178_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB178_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB178_11 Depth=2
	movl	$0, -12(%rbp)
.LBB178_13:                             # %for.cond25
                                        #   Parent Loop BB178_9 Depth=1
                                        #     Parent Loop BB178_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB178_15 Depth 4
                                        #           Child Loop BB178_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB178_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB178_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB178_15:                             # %for.cond53
                                        #   Parent Loop BB178_9 Depth=1
                                        #     Parent Loop BB178_11 Depth=2
                                        #       Parent Loop BB178_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB178_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB178_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB178_15 Depth=4
	movl	$0, -40(%rbp)
.LBB178_17:                             # %for.cond57
                                        #   Parent Loop BB178_9 Depth=1
                                        #     Parent Loop BB178_11 Depth=2
                                        #       Parent Loop BB178_13 Depth=3
                                        #         Parent Loop BB178_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB178_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB178_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB178_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB178_17
.LBB178_20:                             # %for.end
                                        #   in Loop: Header=BB178_15 Depth=4
	jmp	.LBB178_21
.LBB178_21:                             # %for.inc70
                                        #   in Loop: Header=BB178_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB178_15
.LBB178_22:                             # %for.end72
                                        #   in Loop: Header=BB178_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB178_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB178_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB178_25
.LBB178_24:                             # %if.else
                                        #   in Loop: Header=BB178_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB178_25:                             # %if.end78
                                        #   in Loop: Header=BB178_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB178_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB178_13
.LBB178_27:                             # %for.end90
                                        #   in Loop: Header=BB178_11 Depth=2
	jmp	.LBB178_28
.LBB178_28:                             # %for.inc91
                                        #   in Loop: Header=BB178_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB178_11
.LBB178_29:                             # %for.end93
                                        #   in Loop: Header=BB178_9 Depth=1
	jmp	.LBB178_30
.LBB178_30:                             # %for.inc94
                                        #   in Loop: Header=BB178_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB178_9
.LBB178_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$53097705, -96(%rbp)    # imm = 0x32A34E9
	jne	.LBB178_33
.LBB178_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_32
.Lfunc_end178:
	.size	writeMotionVector8x8.137, .Lfunc_end178-writeMotionVector8x8.137
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.138        # -- Begin function B8Mode2Value.138
	.p2align	4, 0x90
	.type	B8Mode2Value.138,@function
B8Mode2Value.138:                       # @B8Mode2Value.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$283477115, -24(%rbp)   # imm = 0x10E5847B
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB179_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB179_3
.LBB179_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB179_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$283477115, -24(%rbp)   # imm = 0x10E5847B
	jne	.LBB179_5
.LBB179_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_4
.Lfunc_end179:
	.size	B8Mode2Value.138, .Lfunc_end179-B8Mode2Value.138
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.139  # -- Begin function LumaResidualCoding.139
	.p2align	4, 0x90
	.type	LumaResidualCoding.139,@function
LumaResidualCoding.139:                 # @LumaResidualCoding.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$165366619, -52(%rbp)   # imm = 0x9DB4B5B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB180_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB180_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB180_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB180_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_1
.LBB180_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB180_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB180_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB180_33
.LBB180_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB180_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB180_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB180_8 Depth=1
	movl	$0, -8(%rbp)
.LBB180_10:                             # %for.cond13
                                        #   Parent Loop BB180_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB180_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB180_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB180_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB180_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB180_14
.LBB180_13:                             # %if.else
                                        #   in Loop: Header=BB180_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB180_14:                             # %if.end
                                        #   in Loop: Header=BB180_10 Depth=2
	jmp	.LBB180_15
.LBB180_15:                             # %for.inc31
                                        #   in Loop: Header=BB180_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_10
.LBB180_16:                             # %for.end33
                                        #   in Loop: Header=BB180_8 Depth=1
	jmp	.LBB180_17
.LBB180_17:                             # %for.inc34
                                        #   in Loop: Header=BB180_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_8
.LBB180_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB180_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB180_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_22 Depth 2
                                        #       Child Loop BB180_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB180_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB180_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB180_22:                             # %for.cond45
                                        #   Parent Loop BB180_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB180_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB180_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB180_22 Depth=2
	movl	$0, -8(%rbp)
.LBB180_24:                             # %for.cond48
                                        #   Parent Loop BB180_20 Depth=1
                                        #     Parent Loop BB180_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB180_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB180_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB180_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_24
.LBB180_27:                             # %for.end55
                                        #   in Loop: Header=BB180_22 Depth=2
	jmp	.LBB180_28
.LBB180_28:                             # %for.inc56
                                        #   in Loop: Header=BB180_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB180_22
.LBB180_29:                             # %for.end58
                                        #   in Loop: Header=BB180_20 Depth=1
	jmp	.LBB180_30
.LBB180_30:                             # %for.inc59
                                        #   in Loop: Header=BB180_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_20
.LBB180_31:                             # %for.end61
	jmp	.LBB180_32
.LBB180_32:                             # %if.end62
	jmp	.LBB180_33
.LBB180_33:                             # %if.end63
	cmpl	$165366619, -52(%rbp)   # imm = 0x9DB4B5B
	jne	.LBB180_35
.LBB180_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_34
.Lfunc_end180:
	.size	LumaResidualCoding.139, .Lfunc_end180-LumaResidualCoding.139
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.140 # -- Begin function writeChromaIntraPredMode.140
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.140,@function
writeChromaIntraPredMode.140:           # @writeChromaIntraPredMode.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$407216172, -36(%rbp)   # imm = 0x1845A02C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_3
.LBB181_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$407216172, -36(%rbp)   # imm = 0x1845A02C
	jne	.LBB181_5
.LBB181_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_4
.Lfunc_end181:
	.size	writeChromaIntraPredMode.140, .Lfunc_end181-writeChromaIntraPredMode.140
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.141    # -- Begin function writeChromaCoeff.141
	.p2align	4, 0x90
	.type	writeChromaCoeff.141,@function
writeChromaCoeff.141:                   # @writeChromaCoeff.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$64667980, -84(%rbp)    # imm = 0x3DAC14C
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB182_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB182_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB182_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB182_21
.LBB182_5:                              # %if.else
                                        #   in Loop: Header=BB182_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB182_6:                              # %for.cond18
                                        #   Parent Loop BB182_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB182_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB182_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB182_8:                              # %land.end
                                        #   in Loop: Header=BB182_6 Depth=2
	testb	$1, %al
	jne	.LBB182_9
	jmp	.LBB182_20
.LBB182_9:                              # %for.body21
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_12
.LBB182_11:                             # %if.else29
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_12:                             # %if.end
                                        #   in Loop: Header=BB182_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_15:                             # %lor.end
                                        #   in Loop: Header=BB182_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB182_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_18:                             # %lor.end45
                                        #   in Loop: Header=BB182_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB182_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_6
.LBB182_20:                             # %for.end
                                        #   in Loop: Header=BB182_2 Depth=1
	jmp	.LBB182_21
.LBB182_21:                             # %if.end58
                                        #   in Loop: Header=BB182_2 Depth=1
	jmp	.LBB182_22
.LBB182_22:                             # %for.inc59
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB182_2
.LBB182_23:                             # %for.end61
	jmp	.LBB182_24
.LBB182_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB182_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB182_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_28 Depth 2
                                        #       Child Loop BB182_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB182_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB182_26 Depth=1
	movl	$0, -28(%rbp)
.LBB182_28:                             # %for.cond69
                                        #   Parent Loop BB182_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB182_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB182_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB182_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB182_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB182_47
.LBB182_31:                             # %if.else84
                                        #   in Loop: Header=BB182_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB182_32:                             # %for.cond115
                                        #   Parent Loop BB182_26 Depth=1
                                        #     Parent Loop BB182_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB182_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB182_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB182_34:                             # %land.end121
                                        #   in Loop: Header=BB182_32 Depth=3
	testb	$1, %al
	jne	.LBB182_35
	jmp	.LBB182_46
.LBB182_35:                             # %for.body122
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_38
.LBB182_37:                             # %if.else134
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_38:                             # %if.end136
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_41:                             # %lor.end149
                                        #   in Loop: Header=BB182_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB182_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB182_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB182_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB182_44:                             # %lor.end164
                                        #   in Loop: Header=BB182_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB182_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_32
.LBB182_46:                             # %for.end189
                                        #   in Loop: Header=BB182_28 Depth=2
	jmp	.LBB182_47
.LBB182_47:                             # %if.end190
                                        #   in Loop: Header=BB182_28 Depth=2
	jmp	.LBB182_48
.LBB182_48:                             # %for.inc191
                                        #   in Loop: Header=BB182_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB182_28
.LBB182_49:                             # %for.end193
                                        #   in Loop: Header=BB182_26 Depth=1
	jmp	.LBB182_50
.LBB182_50:                             # %for.inc194
                                        #   in Loop: Header=BB182_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_26
.LBB182_51:                             # %for.end196
	jmp	.LBB182_52
.LBB182_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$64667980, -84(%rbp)    # imm = 0x3DAC14C
	jne	.LBB182_54
.LBB182_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_53
.Lfunc_end182:
	.size	writeChromaCoeff.141, .Lfunc_end182-writeChromaCoeff.141
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.142 # -- Begin function writeMotionVector8x8.142
	.p2align	4, 0x90
	.type	writeMotionVector8x8.142,@function
writeMotionVector8x8.142:               # @writeMotionVector8x8.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1456893793, -92(%rbp)  # imm = 0x56D66F61
	movl	%edi, -100(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB183_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB183_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB183_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB183_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB183_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB183_7
.LBB183_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB183_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB183_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB183_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_11 Depth 2
                                        #       Child Loop BB183_13 Depth 3
                                        #         Child Loop BB183_15 Depth 4
                                        #           Child Loop BB183_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB183_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB183_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB183_11:                             # %for.cond22
                                        #   Parent Loop BB183_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_13 Depth 3
                                        #         Child Loop BB183_15 Depth 4
                                        #           Child Loop BB183_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB183_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB183_11 Depth=2
	movl	$0, -20(%rbp)
.LBB183_13:                             # %for.cond25
                                        #   Parent Loop BB183_9 Depth=1
                                        #     Parent Loop BB183_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB183_15 Depth 4
                                        #           Child Loop BB183_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB183_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB183_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB183_15:                             # %for.cond53
                                        #   Parent Loop BB183_9 Depth=1
                                        #     Parent Loop BB183_11 Depth=2
                                        #       Parent Loop BB183_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB183_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB183_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB183_15 Depth=4
	movl	$0, -44(%rbp)
.LBB183_17:                             # %for.cond57
                                        #   Parent Loop BB183_9 Depth=1
                                        #     Parent Loop BB183_11 Depth=2
                                        #       Parent Loop BB183_13 Depth=3
                                        #         Parent Loop BB183_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB183_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB183_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB183_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB183_17
.LBB183_20:                             # %for.end
                                        #   in Loop: Header=BB183_15 Depth=4
	jmp	.LBB183_21
.LBB183_21:                             # %for.inc70
                                        #   in Loop: Header=BB183_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB183_15
.LBB183_22:                             # %for.end72
                                        #   in Loop: Header=BB183_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB183_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB183_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB183_25
.LBB183_24:                             # %if.else
                                        #   in Loop: Header=BB183_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB183_25:                             # %if.end78
                                        #   in Loop: Header=BB183_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB183_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_13
.LBB183_27:                             # %for.end90
                                        #   in Loop: Header=BB183_11 Depth=2
	jmp	.LBB183_28
.LBB183_28:                             # %for.inc91
                                        #   in Loop: Header=BB183_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_11
.LBB183_29:                             # %for.end93
                                        #   in Loop: Header=BB183_9 Depth=1
	jmp	.LBB183_30
.LBB183_30:                             # %for.inc94
                                        #   in Loop: Header=BB183_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_9
.LBB183_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1456893793, -92(%rbp)  # imm = 0x56D66F61
	jne	.LBB183_33
.LBB183_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_32
.Lfunc_end183:
	.size	writeMotionVector8x8.142, .Lfunc_end183-writeMotionVector8x8.142
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.143 # -- Begin function LumaResidualCoding8x8.143
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.143,@function
LumaResidualCoding8x8.143:              # @LumaResidualCoding8x8.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1077218391, -116(%rbp) # imm = 0x40350C57
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB184_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB184_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB184_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB184_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB184_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB184_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_8 Depth 2
                                        #       Child Loop BB184_11 Depth 3
                                        #         Child Loop BB184_13 Depth 4
                                        #       Child Loop BB184_19 Depth 3
                                        #         Child Loop BB184_21 Depth 4
                                        #       Child Loop BB184_29 Depth 3
                                        #         Child Loop BB184_31 Depth 4
                                        #       Child Loop BB184_40 Depth 3
                                        #         Child Loop BB184_42 Depth 4
                                        #       Child Loop BB184_57 Depth 3
                                        #         Child Loop BB184_59 Depth 4
                                        #       Child Loop BB184_67 Depth 3
                                        #         Child Loop BB184_69 Depth 4
                                        #       Child Loop BB184_84 Depth 3
                                        #         Child Loop BB184_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB184_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -80(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB184_8:                              # %for.cond9
                                        #   Parent Loop BB184_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB184_11 Depth 3
                                        #         Child Loop BB184_13 Depth 4
                                        #       Child Loop BB184_19 Depth 3
                                        #         Child Loop BB184_21 Depth 4
                                        #       Child Loop BB184_29 Depth 3
                                        #         Child Loop BB184_31 Depth 4
                                        #       Child Loop BB184_40 Depth 3
                                        #         Child Loop BB184_42 Depth 4
                                        #       Child Loop BB184_57 Depth 3
                                        #         Child Loop BB184_59 Depth 4
                                        #       Child Loop BB184_67 Depth 3
                                        #         Child Loop BB184_69 Depth 4
                                        #       Child Loop BB184_84 Depth 3
                                        #         Child Loop BB184_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB184_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB184_11:                             # %for.cond16
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB184_11 Depth=3
	movl	$0, -12(%rbp)
.LBB184_13:                             # %for.cond20
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB184_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB184_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_13
.LBB184_16:                             # %for.end
                                        #   in Loop: Header=BB184_11 Depth=3
	jmp	.LBB184_17
.LBB184_17:                             # %for.inc37
                                        #   in Loop: Header=BB184_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_11
.LBB184_18:                             # %for.end39
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB184_19:                             # %for.cond41
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB184_19 Depth=3
	movl	$0, -12(%rbp)
.LBB184_21:                             # %for.cond45
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB184_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB184_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_21
.LBB184_24:                             # %for.end65
                                        #   in Loop: Header=BB184_19 Depth=3
	jmp	.LBB184_25
.LBB184_25:                             # %for.inc66
                                        #   in Loop: Header=BB184_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_19
.LBB184_26:                             # %for.end68
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_27
.LBB184_27:                             # %if.end69
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB184_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	$0, -16(%rbp)
.LBB184_29:                             # %for.cond74
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB184_29 Depth=3
	movl	$0, -12(%rbp)
.LBB184_31:                             # %for.cond78
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB184_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB184_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_31
.LBB184_34:                             # %for.end98
                                        #   in Loop: Header=BB184_29 Depth=3
	jmp	.LBB184_35
.LBB184_35:                             # %for.inc99
                                        #   in Loop: Header=BB184_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_29
.LBB184_36:                             # %for.end101
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_37
.LBB184_37:                             # %if.end102
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB184_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB184_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	$0, -16(%rbp)
.LBB184_40:                             # %for.cond108
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB184_40 Depth=3
	movl	$0, -12(%rbp)
.LBB184_42:                             # %for.cond112
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB184_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB184_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_42
.LBB184_45:                             # %for.end137
                                        #   in Loop: Header=BB184_40 Depth=3
	jmp	.LBB184_46
.LBB184_46:                             # %for.inc138
                                        #   in Loop: Header=BB184_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_40
.LBB184_47:                             # %for.end140
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB184_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB184_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB184_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB184_52
.LBB184_51:                             # %if.else
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB184_52:                             # %if.end151
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB184_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB184_54:                             # %if.end157
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_55
.LBB184_55:                             # %if.end158
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_65
.LBB184_56:                             # %if.else159
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	$0, -16(%rbp)
.LBB184_57:                             # %for.cond160
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB184_57 Depth=3
	movl	$0, -12(%rbp)
.LBB184_59:                             # %for.cond164
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB184_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB184_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_59
.LBB184_62:                             # %for.end193
                                        #   in Loop: Header=BB184_57 Depth=3
	jmp	.LBB184_63
.LBB184_63:                             # %for.inc194
                                        #   in Loop: Header=BB184_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_57
.LBB184_64:                             # %for.end196
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_65
.LBB184_65:                             # %if.end197
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_95
.LBB184_66:                             # %if.else198
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	$0, -16(%rbp)
.LBB184_67:                             # %for.cond199
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB184_67 Depth=3
	movl	$0, -12(%rbp)
.LBB184_69:                             # %for.cond203
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB184_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -120(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -84(%rbp)
	jne	.LBB184_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB184_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB184_73
.LBB184_72:                             # %if.else300
                                        #   in Loop: Header=BB184_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB184_73:                             # %if.end314
                                        #   in Loop: Header=BB184_69 Depth=4
	jmp	.LBB184_74
.LBB184_74:                             # %for.inc315
                                        #   in Loop: Header=BB184_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_69
.LBB184_75:                             # %for.end317
                                        #   in Loop: Header=BB184_67 Depth=3
	jmp	.LBB184_76
.LBB184_76:                             # %for.inc318
                                        #   in Loop: Header=BB184_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_67
.LBB184_77:                             # %for.end320
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB184_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB184_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB184_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB184_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB184_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB184_83
.LBB184_82:                             # %if.else334
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB184_83:                             # %if.end336
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	$0, -16(%rbp)
.LBB184_84:                             # %for.cond337
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB184_84 Depth=3
	movl	$0, -12(%rbp)
.LBB184_86:                             # %for.cond341
                                        #   Parent Loop BB184_6 Depth=1
                                        #     Parent Loop BB184_8 Depth=2
                                        #       Parent Loop BB184_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB184_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB184_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_86
.LBB184_89:                             # %for.end358
                                        #   in Loop: Header=BB184_84 Depth=3
	jmp	.LBB184_90
.LBB184_90:                             # %for.inc359
                                        #   in Loop: Header=BB184_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_84
.LBB184_91:                             # %for.end361
                                        #   in Loop: Header=BB184_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB184_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB184_93:                             # %if.end368
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_94
.LBB184_94:                             # %if.end369
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_95
.LBB184_95:                             # %if.end370
                                        #   in Loop: Header=BB184_8 Depth=2
	jmp	.LBB184_96
.LBB184_96:                             # %for.inc371
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB184_8
.LBB184_97:                             # %for.end374
                                        #   in Loop: Header=BB184_6 Depth=1
	jmp	.LBB184_98
.LBB184_98:                             # %for.inc375
                                        #   in Loop: Header=BB184_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB184_6
.LBB184_99:                             # %for.end378
	cmpl	$0, -84(%rbp)
	je	.LBB184_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB184_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB184_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB184_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB184_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB184_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB184_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB184_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB184_106 Depth=1
	movl	$0, -12(%rbp)
.LBB184_108:                            # %for.cond400
                                        #   Parent Loop BB184_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB184_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB184_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB184_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_108
.LBB184_111:                            # %for.end417
                                        #   in Loop: Header=BB184_106 Depth=1
	jmp	.LBB184_112
.LBB184_112:                            # %for.inc418
                                        #   in Loop: Header=BB184_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_106
.LBB184_113:                            # %for.end420
	jmp	.LBB184_114
.LBB184_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB184_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB184_116:                            # %if.end431
	jmp	.LBB184_117
.LBB184_117:                            # %if.end432
	jmp	.LBB184_118
.LBB184_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB184_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB184_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB184_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB184_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB184_145
.LBB184_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB184_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB184_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB184_126:                            # %for.cond462
                                        #   Parent Loop BB184_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB184_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB184_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB184_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB184_130
.LBB184_129:                            # %if.else481
                                        #   in Loop: Header=BB184_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB184_130:                            # %if.end486
                                        #   in Loop: Header=BB184_126 Depth=2
	jmp	.LBB184_131
.LBB184_131:                            # %for.inc487
                                        #   in Loop: Header=BB184_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_126
.LBB184_132:                            # %for.end489
                                        #   in Loop: Header=BB184_124 Depth=1
	jmp	.LBB184_133
.LBB184_133:                            # %for.inc490
                                        #   in Loop: Header=BB184_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_124
.LBB184_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB184_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB184_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB184_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB184_138:                            # %for.cond502
                                        #   Parent Loop BB184_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB184_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB184_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_138
.LBB184_141:                            # %for.end509
                                        #   in Loop: Header=BB184_136 Depth=1
	jmp	.LBB184_142
.LBB184_142:                            # %for.inc510
                                        #   in Loop: Header=BB184_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_136
.LBB184_143:                            # %for.end512
	jmp	.LBB184_144
.LBB184_144:                            # %if.end513
	jmp	.LBB184_145
.LBB184_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1077218391, -116(%rbp) # imm = 0x40350C57
	jne	.LBB184_147
.LBB184_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_146
.Lfunc_end184:
	.size	LumaResidualCoding8x8.143, .Lfunc_end184-LumaResidualCoding8x8.143
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.144 # -- Begin function writeMotionInfo2NAL.144
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.144,@function
writeMotionInfo2NAL.144:                # @writeMotionInfo2NAL.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$72145445, -56(%rbp)    # imm = 0x44CDA25
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB185_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB185_3
.LBB185_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB185_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB185_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB185_6
.LBB185_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB185_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB185_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB185_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB185_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB185_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB185_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB185_39
.LBB185_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB185_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB185_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB185_15 Depth=1
	movl	$0, -12(%rbp)
.LBB185_17:                             # %for.cond45
                                        #   Parent Loop BB185_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB185_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB185_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB185_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB185_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB185_22
.LBB185_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB185_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB185_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB185_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB185_22:                             # %if.end
                                        #   in Loop: Header=BB185_17 Depth=2
	jmp	.LBB185_23
.LBB185_23:                             # %for.inc
                                        #   in Loop: Header=BB185_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_17
.LBB185_24:                             # %for.end
                                        #   in Loop: Header=BB185_15 Depth=1
	jmp	.LBB185_25
.LBB185_25:                             # %for.inc79
                                        #   in Loop: Header=BB185_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_15
.LBB185_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB185_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB185_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB185_27 Depth=1
	movl	$0, -12(%rbp)
.LBB185_29:                             # %for.cond86
                                        #   Parent Loop BB185_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB185_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB185_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB185_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB185_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB185_34
.LBB185_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB185_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB185_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB185_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB185_34:                             # %if.end126
                                        #   in Loop: Header=BB185_29 Depth=2
	jmp	.LBB185_35
.LBB185_35:                             # %for.inc127
                                        #   in Loop: Header=BB185_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_29
.LBB185_36:                             # %for.end129
                                        #   in Loop: Header=BB185_27 Depth=1
	jmp	.LBB185_37
.LBB185_37:                             # %for.inc130
                                        #   in Loop: Header=BB185_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_27
.LBB185_38:                             # %for.end132
	jmp	.LBB185_39
.LBB185_39:                             # %if.end133
	jmp	.LBB185_40
.LBB185_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB185_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB185_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB185_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB185_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB185_45 Depth=1
	movl	$0, -12(%rbp)
.LBB185_47:                             # %for.cond155
                                        #   Parent Loop BB185_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB185_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB185_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB185_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB185_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB185_52
.LBB185_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB185_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB185_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB185_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB185_52:                             # %if.end197
                                        #   in Loop: Header=BB185_47 Depth=2
	jmp	.LBB185_53
.LBB185_53:                             # %for.inc198
                                        #   in Loop: Header=BB185_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_47
.LBB185_54:                             # %for.end200
                                        #   in Loop: Header=BB185_45 Depth=1
	jmp	.LBB185_55
.LBB185_55:                             # %for.inc201
                                        #   in Loop: Header=BB185_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_45
.LBB185_56:                             # %for.end203
	jmp	.LBB185_57
.LBB185_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB185_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB185_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB185_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB185_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB185_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB185_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB185_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB185_63 Depth=1
	movl	$0, -12(%rbp)
.LBB185_65:                             # %for.cond227
                                        #   Parent Loop BB185_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB185_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB185_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB185_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB185_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB185_70
.LBB185_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB185_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB185_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB185_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB185_70:                             # %if.end269
                                        #   in Loop: Header=BB185_65 Depth=2
	jmp	.LBB185_71
.LBB185_71:                             # %for.inc270
                                        #   in Loop: Header=BB185_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_65
.LBB185_72:                             # %for.end272
                                        #   in Loop: Header=BB185_63 Depth=1
	jmp	.LBB185_73
.LBB185_73:                             # %for.inc273
                                        #   in Loop: Header=BB185_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_63
.LBB185_74:                             # %for.end275
	jmp	.LBB185_75
.LBB185_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$72145445, -56(%rbp)    # imm = 0x44CDA25
	jne	.LBB185_77
.LBB185_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_76
.Lfunc_end185:
	.size	writeMotionInfo2NAL.144, .Lfunc_end185-writeMotionInfo2NAL.144
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.145  # -- Begin function writeIntra4x4Modes.145
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.145,@function
writeIntra4x4Modes.145:                 # @writeIntra4x4Modes.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$12886559, -80(%rbp)    # imm = 0xC4A21F
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_9 Depth 2
                                        #       Child Loop BB186_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB186_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB186_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB186_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB186_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB186_8
.LBB186_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB186_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB186_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB186_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB186_17
.LBB186_8:                              # %if.then
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -28(%rbp)
.LBB186_9:                              # %for.cond24
                                        #   Parent Loop BB186_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB186_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB186_9 Depth=2
	movl	$0, -12(%rbp)
.LBB186_11:                             # %for.cond27
                                        #   Parent Loop BB186_1 Depth=1
                                        #     Parent Loop BB186_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB186_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB186_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB186_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_11
.LBB186_14:                             # %for.end
                                        #   in Loop: Header=BB186_9 Depth=2
	jmp	.LBB186_15
.LBB186_15:                             # %for.inc42
                                        #   in Loop: Header=BB186_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB186_9
.LBB186_16:                             # %for.end44
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_17
.LBB186_17:                             # %if.end
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_18
.LBB186_18:                             # %for.inc45
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB186_1
.LBB186_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB186_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB186_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB186_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB186_23:                             # %if.end57
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB186_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB186_26
.LBB186_25:                             # %if.else
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB186_26:                             # %if.end65
                                        #   in Loop: Header=BB186_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB186_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_20
.LBB186_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$12886559, -80(%rbp)    # imm = 0xC4A21F
	jne	.LBB186_30
.LBB186_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_29
.Lfunc_end186:
	.size	writeIntra4x4Modes.145, .Lfunc_end186-writeIntra4x4Modes.145
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.146  # -- Begin function predict_nnz_chroma.146
	.p2align	4, 0x90
	.type	predict_nnz_chroma.146,@function
predict_nnz_chroma.146:                 # @predict_nnz_chroma.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$977307470, -64(%rbp)   # imm = 0x3A40874E
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB187_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB187_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB187_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB187_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB187_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB187_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB187_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB187_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB187_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB187_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB187_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB187_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB187_13:                             # %if.end57
	jmp	.LBB187_27
.LBB187_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB187_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB187_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB187_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB187_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB187_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB187_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB187_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB187_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB187_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB187_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB187_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB187_26:                             # %if.end124
	jmp	.LBB187_27
.LBB187_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB187_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB187_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$977307470, -64(%rbp)   # imm = 0x3A40874E
	jne	.LBB187_31
.LBB187_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_30
.Lfunc_end187:
	.size	predict_nnz_chroma.146, .Lfunc_end187-predict_nnz_chroma.146
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.147  # -- Begin function predict_nnz_chroma.147
	.p2align	4, 0x90
	.type	predict_nnz_chroma.147,@function
predict_nnz_chroma.147:                 # @predict_nnz_chroma.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$879291643, -64(%rbp)   # imm = 0x3468ECFB
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB188_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB188_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB188_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB188_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB188_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB188_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB188_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_13:                             # %if.end57
	jmp	.LBB188_27
.LBB188_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB188_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB188_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB188_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB188_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB188_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB188_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB188_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB188_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB188_26:                             # %if.end124
	jmp	.LBB188_27
.LBB188_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB188_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB188_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$879291643, -64(%rbp)   # imm = 0x3468ECFB
	jne	.LBB188_31
.LBB188_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_30
.Lfunc_end188:
	.size	predict_nnz_chroma.147, .Lfunc_end188-predict_nnz_chroma.147
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.148  # -- Begin function LumaResidualCoding.148
	.p2align	4, 0x90
	.type	LumaResidualCoding.148,@function
LumaResidualCoding.148:                 # @LumaResidualCoding.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1465702021, -40(%rbp)  # imm = 0x575CD685
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB189_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB189_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB189_1
.LBB189_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB189_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB189_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB189_33
.LBB189_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB189_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB189_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB189_8 Depth=1
	movl	$0, -12(%rbp)
.LBB189_10:                             # %for.cond13
                                        #   Parent Loop BB189_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB189_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB189_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB189_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB189_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB189_14
.LBB189_13:                             # %if.else
                                        #   in Loop: Header=BB189_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB189_14:                             # %if.end
                                        #   in Loop: Header=BB189_10 Depth=2
	jmp	.LBB189_15
.LBB189_15:                             # %for.inc31
                                        #   in Loop: Header=BB189_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_10
.LBB189_16:                             # %for.end33
                                        #   in Loop: Header=BB189_8 Depth=1
	jmp	.LBB189_17
.LBB189_17:                             # %for.inc34
                                        #   in Loop: Header=BB189_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB189_8
.LBB189_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB189_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB189_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_22 Depth 2
                                        #       Child Loop BB189_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB189_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB189_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB189_22:                             # %for.cond45
                                        #   Parent Loop BB189_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB189_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB189_22 Depth=2
	movl	$0, -12(%rbp)
.LBB189_24:                             # %for.cond48
                                        #   Parent Loop BB189_20 Depth=1
                                        #     Parent Loop BB189_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB189_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB189_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB189_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_24
.LBB189_27:                             # %for.end55
                                        #   in Loop: Header=BB189_22 Depth=2
	jmp	.LBB189_28
.LBB189_28:                             # %for.inc56
                                        #   in Loop: Header=BB189_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB189_22
.LBB189_29:                             # %for.end58
                                        #   in Loop: Header=BB189_20 Depth=1
	jmp	.LBB189_30
.LBB189_30:                             # %for.inc59
                                        #   in Loop: Header=BB189_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB189_20
.LBB189_31:                             # %for.end61
	jmp	.LBB189_32
.LBB189_32:                             # %if.end62
	jmp	.LBB189_33
.LBB189_33:                             # %if.end63
	cmpl	$1465702021, -40(%rbp)  # imm = 0x575CD685
	jne	.LBB189_35
.LBB189_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_34
.Lfunc_end189:
	.size	LumaResidualCoding.148, .Lfunc_end189-LumaResidualCoding.148
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.149 # -- Begin function LumaPrediction4x4Bi.149
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.149,@function
LumaPrediction4x4Bi.149:                # @LumaPrediction4x4Bi.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1343830307, -76(%rbp)  # imm = 0x50193923
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB190_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB190_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB190_6
.LBB190_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB190_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB190_5:                              # %land.end
.LBB190_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB190_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB190_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB190_10
.LBB190_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB190_10
.LBB190_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB190_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB190_13
.LBB190_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB190_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB190_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB190_16
.LBB190_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB190_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB190_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB190_19
.LBB190_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB190_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB190_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB190_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB190_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_24:                             # %for.cond58
                                        #   Parent Loop BB190_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB190_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB190_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_24
.LBB190_27:                             # %for.end
                                        #   in Loop: Header=BB190_22 Depth=1
	jmp	.LBB190_28
.LBB190_28:                             # %for.inc96
                                        #   in Loop: Header=BB190_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_22
.LBB190_29:                             # %for.end98
	jmp	.LBB190_50
.LBB190_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB190_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB190_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_34:                             # %for.cond106
                                        #   Parent Loop BB190_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB190_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB190_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_34
.LBB190_37:                             # %for.end132
                                        #   in Loop: Header=BB190_32 Depth=1
	jmp	.LBB190_38
.LBB190_38:                             # %for.inc133
                                        #   in Loop: Header=BB190_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_32
.LBB190_39:                             # %for.end135
	jmp	.LBB190_49
.LBB190_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB190_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_43:                             # %for.cond141
                                        #   Parent Loop BB190_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB190_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB190_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_43
.LBB190_46:                             # %for.end167
                                        #   in Loop: Header=BB190_41 Depth=1
	jmp	.LBB190_47
.LBB190_47:                             # %for.inc168
                                        #   in Loop: Header=BB190_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_41
.LBB190_48:                             # %for.end170
	jmp	.LBB190_49
.LBB190_49:                             # %if.end171
	jmp	.LBB190_50
.LBB190_50:                             # %if.end172
	jmp	.LBB190_82
.LBB190_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB190_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB190_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_55:                             # %for.cond181
                                        #   Parent Loop BB190_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB190_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB190_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_55
.LBB190_58:                             # %for.end197
                                        #   in Loop: Header=BB190_53 Depth=1
	jmp	.LBB190_59
.LBB190_59:                             # %for.inc198
                                        #   in Loop: Header=BB190_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_53
.LBB190_60:                             # %for.end200
	jmp	.LBB190_81
.LBB190_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB190_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB190_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_65:                             # %for.cond209
                                        #   Parent Loop BB190_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB190_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB190_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_65
.LBB190_68:                             # %for.end222
                                        #   in Loop: Header=BB190_63 Depth=1
	jmp	.LBB190_69
.LBB190_69:                             # %for.inc223
                                        #   in Loop: Header=BB190_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_63
.LBB190_70:                             # %for.end225
	jmp	.LBB190_80
.LBB190_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB190_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_74:                             # %for.cond231
                                        #   Parent Loop BB190_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB190_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB190_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_74
.LBB190_77:                             # %for.end244
                                        #   in Loop: Header=BB190_72 Depth=1
	jmp	.LBB190_78
.LBB190_78:                             # %for.inc245
                                        #   in Loop: Header=BB190_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_72
.LBB190_79:                             # %for.end247
	jmp	.LBB190_80
.LBB190_80:                             # %if.end248
	jmp	.LBB190_81
.LBB190_81:                             # %if.end249
	jmp	.LBB190_82
.LBB190_82:                             # %if.end250
	cmpl	$1343830307, -76(%rbp)  # imm = 0x50193923
	jne	.LBB190_84
.LBB190_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_83
.Lfunc_end190:
	.size	LumaPrediction4x4Bi.149, .Lfunc_end190-LumaPrediction4x4Bi.149
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.150    # -- Begin function start_macroblock.150
	.p2align	4, 0x90
	.type	start_macroblock.150,@function
start_macroblock.150:                   # @start_macroblock.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1348712558, -84(%rbp)  # imm = 0x5063B86E
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB191_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB191_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB191_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB191_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB191_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB191_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB191_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB191_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB191_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB191_8:                              # %if.end
                                        #   in Loop: Header=BB191_5 Depth=1
	jmp	.LBB191_9
.LBB191_9:                              # %for.inc
                                        #   in Loop: Header=BB191_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_5
.LBB191_10:                             # %for.end
	jmp	.LBB191_11
.LBB191_11:                             # %if.end19
	jmp	.LBB191_12
.LBB191_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB191_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB191_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB191_16
.LBB191_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB191_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB191_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_97
.LBB191_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB191_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB191_21
.LBB191_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_96
.LBB191_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB191_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB191_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB191_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB191_34
.LBB191_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_32
.LBB191_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB191_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_31
.LBB191_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB191_33
.LBB191_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB191_33:                             # %if.end112
	jmp	.LBB191_34
.LBB191_34:                             # %if.end113
	jmp	.LBB191_39
.LBB191_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_38
.LBB191_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB191_38:                             # %if.end125
	jmp	.LBB191_39
.LBB191_39:                             # %if.end126
	jmp	.LBB191_47
.LBB191_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB191_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB191_44
.LBB191_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_44:                             # %if.end140
	jmp	.LBB191_46
.LBB191_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB191_46:                             # %if.end145
	jmp	.LBB191_47
.LBB191_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_93
.LBB191_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB191_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB191_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB191_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB191_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_74
.LBB191_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB191_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB191_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_73
.LBB191_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB191_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB191_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_72
.LBB191_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB191_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_71
.LBB191_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB191_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB191_70:                             # %if.end223
	jmp	.LBB191_71
.LBB191_71:                             # %if.end224
	jmp	.LBB191_72
.LBB191_72:                             # %if.end225
	jmp	.LBB191_73
.LBB191_73:                             # %if.end226
	jmp	.LBB191_74
.LBB191_74:                             # %if.end227
	jmp	.LBB191_75
.LBB191_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB191_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB191_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB191_82
.LBB191_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB191_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB191_81:                             # %if.end256
	jmp	.LBB191_82
.LBB191_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB191_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB191_88
.LBB191_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB191_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB191_87
.LBB191_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_87:                             # %if.end292
	jmp	.LBB191_88
.LBB191_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB191_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB191_92
.LBB191_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB191_92:                             # %if.end305
	jmp	.LBB191_94
.LBB191_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB191_94:                             # %if.end309
	jmp	.LBB191_95
.LBB191_95:                             # %if.end310
	jmp	.LBB191_96
.LBB191_96:                             # %if.end311
	jmp	.LBB191_97
.LBB191_97:                             # %if.end312
	jmp	.LBB191_102
.LBB191_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB191_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB191_101
.LBB191_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB191_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB191_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB191_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB191_105
.LBB191_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB191_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB191_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB191_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB191_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_110 Depth 2
                                        #       Child Loop BB191_112 Depth 3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB191_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB191_108 Depth=1
	movl	$0, -20(%rbp)
.LBB191_110:                            # %for.cond364
                                        #   Parent Loop BB191_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_112 Depth 3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB191_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB191_110 Depth=2
	movl	$0, -12(%rbp)
.LBB191_112:                            # %for.cond368
                                        #   Parent Loop BB191_108 Depth=1
                                        #     Parent Loop BB191_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB191_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB191_112 Depth=3
	movl	$0, -36(%rbp)
.LBB191_114:                            # %for.cond372
                                        #   Parent Loop BB191_108 Depth=1
                                        #     Parent Loop BB191_110 Depth=2
                                        #       Parent Loop BB191_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB191_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB191_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB191_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB191_114
.LBB191_117:                            # %for.end388
                                        #   in Loop: Header=BB191_112 Depth=3
	jmp	.LBB191_118
.LBB191_118:                            # %for.inc389
                                        #   in Loop: Header=BB191_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_112
.LBB191_119:                            # %for.end391
                                        #   in Loop: Header=BB191_110 Depth=2
	jmp	.LBB191_120
.LBB191_120:                            # %for.inc392
                                        #   in Loop: Header=BB191_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_110
.LBB191_121:                            # %for.end394
                                        #   in Loop: Header=BB191_108 Depth=1
	jmp	.LBB191_122
.LBB191_122:                            # %for.inc395
                                        #   in Loop: Header=BB191_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_108
.LBB191_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB191_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_126 Depth 2
                                        #       Child Loop BB191_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB191_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB191_124 Depth=1
	movl	$0, -12(%rbp)
.LBB191_126:                            # %for.cond402
                                        #   Parent Loop BB191_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB191_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB191_126 Depth=2
	movl	$0, -16(%rbp)
.LBB191_128:                            # %for.cond406
                                        #   Parent Loop BB191_124 Depth=1
                                        #     Parent Loop BB191_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB191_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB191_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB191_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_128
.LBB191_131:                            # %for.end432
                                        #   in Loop: Header=BB191_126 Depth=2
	jmp	.LBB191_132
.LBB191_132:                            # %for.inc433
                                        #   in Loop: Header=BB191_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_126
.LBB191_133:                            # %for.end435
                                        #   in Loop: Header=BB191_124 Depth=1
	jmp	.LBB191_134
.LBB191_134:                            # %for.inc436
                                        #   in Loop: Header=BB191_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_124
.LBB191_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB191_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_138 Depth 2
                                        #       Child Loop BB191_140 Depth 3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB191_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB191_136 Depth=1
	movl	$0, -20(%rbp)
.LBB191_138:                            # %for.cond443
                                        #   Parent Loop BB191_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_140 Depth 3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB191_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB191_138 Depth=2
	movl	$0, -12(%rbp)
.LBB191_140:                            # %for.cond447
                                        #   Parent Loop BB191_136 Depth=1
                                        #     Parent Loop BB191_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB191_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB191_140 Depth=3
	movl	$0, -36(%rbp)
.LBB191_142:                            # %for.cond451
                                        #   Parent Loop BB191_136 Depth=1
                                        #     Parent Loop BB191_138 Depth=2
                                        #       Parent Loop BB191_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB191_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB191_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB191_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB191_142
.LBB191_145:                            # %for.end465
                                        #   in Loop: Header=BB191_140 Depth=3
	jmp	.LBB191_146
.LBB191_146:                            # %for.inc466
                                        #   in Loop: Header=BB191_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_140
.LBB191_147:                            # %for.end468
                                        #   in Loop: Header=BB191_138 Depth=2
	jmp	.LBB191_148
.LBB191_148:                            # %for.inc469
                                        #   in Loop: Header=BB191_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_138
.LBB191_149:                            # %for.end471
                                        #   in Loop: Header=BB191_136 Depth=1
	jmp	.LBB191_150
.LBB191_150:                            # %for.inc472
                                        #   in Loop: Header=BB191_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_136
.LBB191_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB191_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB191_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB191_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB191_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_152
.LBB191_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB191_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB191_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB191_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB191_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_156
.LBB191_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB191_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB191_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB191_166
.LBB191_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB191_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB191_165:                            # %if.end520
	jmp	.LBB191_166
.LBB191_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB191_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB191_168:                            # %if.end536
	cmpl	$1348712558, -84(%rbp)  # imm = 0x5063B86E
	jne	.LBB191_170
.LBB191_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_169
.Lfunc_end191:
	.size	start_macroblock.150, .Lfunc_end191-start_macroblock.150
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.151 # -- Begin function writeLumaCoeff8x8_CABAC.151
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.151,@function
writeLumaCoeff8x8_CABAC.151:            # @writeLumaCoeff8x8_CABAC.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1644535425, -60(%rbp)  # imm = 0x62059E81
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB192_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB192_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB192_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB192_3:                              # %land.end
                                        #   in Loop: Header=BB192_1 Depth=1
	testb	$1, %al
	jne	.LBB192_4
	jmp	.LBB192_12
.LBB192_4:                              # %for.body
                                        #   in Loop: Header=BB192_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB192_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB192_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB192_7
.LBB192_6:                              # %cond.false
                                        #   in Loop: Header=BB192_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB192_7:                              # %cond.end
                                        #   in Loop: Header=BB192_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB192_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB192_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB192_10
.LBB192_9:                              # %if.else
                                        #   in Loop: Header=BB192_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB192_10:                             # %if.end
                                        #   in Loop: Header=BB192_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB192_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB192_1
.LBB192_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1644535425, -60(%rbp)  # imm = 0x62059E81
	jne	.LBB192_14
.LBB192_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_13
.Lfunc_end192:
	.size	writeLumaCoeff8x8_CABAC.151, .Lfunc_end192-writeLumaCoeff8x8_CABAC.151
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.152  # -- Begin function predict_nnz_chroma.152
	.p2align	4, 0x90
	.type	predict_nnz_chroma.152,@function
predict_nnz_chroma.152:                 # @predict_nnz_chroma.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$609680548, -64(%rbp)   # imm = 0x2456FCA4
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB193_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB193_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB193_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB193_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB193_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB193_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB193_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB193_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB193_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB193_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB193_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB193_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB193_13:                             # %if.end57
	jmp	.LBB193_27
.LBB193_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB193_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB193_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB193_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB193_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB193_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB193_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB193_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB193_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB193_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB193_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB193_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB193_26:                             # %if.end124
	jmp	.LBB193_27
.LBB193_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB193_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB193_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$609680548, -64(%rbp)   # imm = 0x2456FCA4
	jne	.LBB193_31
.LBB193_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_30
.Lfunc_end193:
	.size	predict_nnz_chroma.152, .Lfunc_end193-predict_nnz_chroma.152
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.153        # -- Begin function MBType2Value.153
	.p2align	4, 0x90
	.type	MBType2Value.153,@function
MBType2Value.153:                       # @MBType2Value.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1444384575, -36(%rbp)  # imm = 0x56178F3F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB194_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB194_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB194_4
.LBB194_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB194_26
.LBB194_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB194_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB194_26
.LBB194_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB194_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB194_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB194_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB194_26
.LBB194_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB194_26
.LBB194_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_26
.LBB194_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB194_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB194_26
.LBB194_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB194_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB194_17
.LBB194_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB194_26
.LBB194_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB194_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_26
.LBB194_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB194_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB194_26
.LBB194_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB194_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_26
.LBB194_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB194_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_26
.LBB194_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB194_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1444384575, -36(%rbp)  # imm = 0x56178F3F
	jne	.LBB194_28
.LBB194_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_27
.Lfunc_end194:
	.size	MBType2Value.153, .Lfunc_end194-MBType2Value.153
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.154 # -- Begin function ChromaResidualCoding.154
	.p2align	4, 0x90
	.type	ChromaResidualCoding.154,@function
ChromaResidualCoding.154:               # @ChromaResidualCoding.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$576738480, -76(%rbp)   # imm = 0x226054B0
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB195_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB195_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB195_3:                              # %lor.end
.LBB195_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB195_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_7 Depth 2
                                        #       Child Loop BB195_9 Depth 3
                                        #     Child Loop BB195_16 Depth 2
                                        #       Child Loop BB195_18 Depth 3
                                        #     Child Loop BB195_33 Depth 2
                                        #       Child Loop BB195_35 Depth 3
                                        #     Child Loop BB195_43 Depth 2
                                        #       Child Loop BB195_45 Depth 3
                                        #     Child Loop BB195_58 Depth 2
                                        #       Child Loop BB195_60 Depth 3
                                        #     Child Loop BB195_87 Depth 2
                                        #       Child Loop BB195_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB195_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB195_7:                              # %for.cond5
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB195_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB195_7 Depth=2
	movl	$0, -20(%rbp)
.LBB195_9:                              # %for.cond8
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB195_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB195_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB195_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_9
.LBB195_12:                             # %for.end
                                        #   in Loop: Header=BB195_7 Depth=2
	jmp	.LBB195_13
.LBB195_13:                             # %for.inc18
                                        #   in Loop: Header=BB195_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB195_7
.LBB195_14:                             # %for.end20
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB195_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -8(%rbp)
.LBB195_16:                             # %for.cond21
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB195_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB195_16 Depth=2
	movl	$0, -4(%rbp)
.LBB195_18:                             # %for.cond26
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB195_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB195_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB195_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB195_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB195_25
.LBB195_21:                             # %if.else
                                        #   in Loop: Header=BB195_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB195_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB195_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB195_24
.LBB195_23:                             # %if.else52
                                        #   in Loop: Header=BB195_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB195_24:                             # %if.end
                                        #   in Loop: Header=BB195_18 Depth=3
	jmp	.LBB195_25
.LBB195_25:                             # %if.end57
                                        #   in Loop: Header=BB195_18 Depth=3
	jmp	.LBB195_26
.LBB195_26:                             # %for.inc58
                                        #   in Loop: Header=BB195_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_18
.LBB195_27:                             # %for.end59
                                        #   in Loop: Header=BB195_16 Depth=2
	jmp	.LBB195_28
.LBB195_28:                             # %for.inc60
                                        #   in Loop: Header=BB195_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_16
.LBB195_29:                             # %for.end62
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_74
.LBB195_30:                             # %if.else63
                                        #   in Loop: Header=BB195_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB195_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB195_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -8(%rbp)
.LBB195_33:                             # %for.cond69
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB195_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB195_33 Depth=2
	movl	$0, -4(%rbp)
.LBB195_35:                             # %for.cond73
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB195_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB195_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB195_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_35
.LBB195_38:                             # %for.end83
                                        #   in Loop: Header=BB195_33 Depth=2
	jmp	.LBB195_39
.LBB195_39:                             # %for.inc84
                                        #   in Loop: Header=BB195_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_33
.LBB195_40:                             # %for.end86
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_73
.LBB195_41:                             # %if.else87
                                        #   in Loop: Header=BB195_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB195_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -8(%rbp)
.LBB195_43:                             # %for.cond90
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB195_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB195_43 Depth=2
	movl	$0, -4(%rbp)
.LBB195_45:                             # %for.cond95
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB195_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB195_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB195_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB195_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB195_52
.LBB195_48:                             # %if.else119
                                        #   in Loop: Header=BB195_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB195_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB195_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB195_51
.LBB195_50:                             # %if.else127
                                        #   in Loop: Header=BB195_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB195_51:                             # %if.end132
                                        #   in Loop: Header=BB195_45 Depth=3
	jmp	.LBB195_52
.LBB195_52:                             # %if.end133
                                        #   in Loop: Header=BB195_45 Depth=3
	jmp	.LBB195_53
.LBB195_53:                             # %for.inc134
                                        #   in Loop: Header=BB195_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_45
.LBB195_54:                             # %for.end136
                                        #   in Loop: Header=BB195_43 Depth=2
	jmp	.LBB195_55
.LBB195_55:                             # %for.inc137
                                        #   in Loop: Header=BB195_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_43
.LBB195_56:                             # %for.end139
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_72
.LBB195_57:                             # %if.else140
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -8(%rbp)
.LBB195_58:                             # %for.cond141
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB195_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB195_58 Depth=2
	movl	$0, -4(%rbp)
.LBB195_60:                             # %for.cond146
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB195_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB195_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB195_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB195_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB195_67
.LBB195_63:                             # %if.else175
                                        #   in Loop: Header=BB195_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB195_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB195_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB195_66
.LBB195_65:                             # %if.else188
                                        #   in Loop: Header=BB195_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB195_66:                             # %if.end198
                                        #   in Loop: Header=BB195_60 Depth=3
	jmp	.LBB195_67
.LBB195_67:                             # %if.end199
                                        #   in Loop: Header=BB195_60 Depth=3
	jmp	.LBB195_68
.LBB195_68:                             # %for.inc200
                                        #   in Loop: Header=BB195_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_60
.LBB195_69:                             # %for.end202
                                        #   in Loop: Header=BB195_58 Depth=2
	jmp	.LBB195_70
.LBB195_70:                             # %for.inc203
                                        #   in Loop: Header=BB195_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_58
.LBB195_71:                             # %for.end205
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_72
.LBB195_72:                             # %if.end206
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_73
.LBB195_73:                             # %if.end207
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_74
.LBB195_74:                             # %if.end208
                                        #   in Loop: Header=BB195_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB195_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB195_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB195_100
.LBB195_77:                             # %if.else215
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB195_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB195_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB195_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB195_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB195_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB195_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB195_84
.LBB195_83:                             # %if.then247
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB195_85
.LBB195_84:                             # %if.else249
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB195_85:                             # %if.end251
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB195_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	$0, -8(%rbp)
.LBB195_87:                             # %for.cond255
                                        #   Parent Loop BB195_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB195_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB195_87 Depth=2
	movl	$0, -4(%rbp)
.LBB195_89:                             # %for.cond260
                                        #   Parent Loop BB195_5 Depth=1
                                        #     Parent Loop BB195_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB195_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB195_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB195_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB195_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB195_93
.LBB195_92:                             # %if.else277
                                        #   in Loop: Header=BB195_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB195_93:                             # %if.end287
                                        #   in Loop: Header=BB195_89 Depth=3
	jmp	.LBB195_94
.LBB195_94:                             # %for.inc288
                                        #   in Loop: Header=BB195_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_89
.LBB195_95:                             # %for.end290
                                        #   in Loop: Header=BB195_87 Depth=2
	jmp	.LBB195_96
.LBB195_96:                             # %for.inc291
                                        #   in Loop: Header=BB195_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_87
.LBB195_97:                             # %for.end293
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_98
.LBB195_98:                             # %if.end294
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_99
.LBB195_99:                             # %if.end295
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_100
.LBB195_100:                            # %if.end296
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_101
.LBB195_101:                            # %for.inc297
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_5
.LBB195_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB195_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB195_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB195_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB195_104 Depth=1
	movl	$0, -4(%rbp)
.LBB195_106:                            # %for.cond312
                                        #   Parent Loop BB195_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB195_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB195_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB195_110
.LBB195_109:                            # %cond.false
                                        #   in Loop: Header=BB195_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB195_110:                            # %cond.end
                                        #   in Loop: Header=BB195_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB195_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB195_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB195_116
.LBB195_112:                            # %cond.false358
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB195_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB195_115
.LBB195_114:                            # %cond.false367
                                        #   in Loop: Header=BB195_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB195_115:                            # %cond.end373
                                        #   in Loop: Header=BB195_106 Depth=2
.LBB195_116:                            # %cond.end375
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB195_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB195_119
.LBB195_118:                            # %cond.false394
                                        #   in Loop: Header=BB195_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB195_119:                            # %cond.end400
                                        #   in Loop: Header=BB195_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB195_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB195_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB195_125
.LBB195_121:                            # %cond.false406
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB195_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB195_124
.LBB195_123:                            # %cond.false415
                                        #   in Loop: Header=BB195_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB195_124:                            # %cond.end421
                                        #   in Loop: Header=BB195_106 Depth=2
.LBB195_125:                            # %cond.end423
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB195_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB195_128
.LBB195_127:                            # %cond.false443
                                        #   in Loop: Header=BB195_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB195_128:                            # %cond.end449
                                        #   in Loop: Header=BB195_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB195_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB195_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB195_134
.LBB195_130:                            # %cond.false455
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB195_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB195_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB195_133
.LBB195_132:                            # %cond.false464
                                        #   in Loop: Header=BB195_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB195_133:                            # %cond.end470
                                        #   in Loop: Header=BB195_106 Depth=2
.LBB195_134:                            # %cond.end472
                                        #   in Loop: Header=BB195_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB195_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_106
.LBB195_136:                            # %for.end487
                                        #   in Loop: Header=BB195_104 Depth=1
	jmp	.LBB195_137
.LBB195_137:                            # %for.inc488
                                        #   in Loop: Header=BB195_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_104
.LBB195_138:                            # %for.end490
	jmp	.LBB195_139
.LBB195_139:                            # %if.end491
	cmpl	$576738480, -76(%rbp)   # imm = 0x226054B0
	jne	.LBB195_141
.LBB195_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_140
.Lfunc_end195:
	.size	ChromaResidualCoding.154, .Lfunc_end195-ChromaResidualCoding.154
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.155 # -- Begin function LumaResidualCoding8x8.155
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.155,@function
LumaResidualCoding8x8.155:              # @LumaResidualCoding8x8.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$739586696, -124(%rbp)  # imm = 0x2C153288
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB196_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB196_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB196_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB196_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB196_5:                              # %if.end
	movl	$0, -76(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB196_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_8 Depth 2
                                        #       Child Loop BB196_11 Depth 3
                                        #         Child Loop BB196_13 Depth 4
                                        #       Child Loop BB196_19 Depth 3
                                        #         Child Loop BB196_21 Depth 4
                                        #       Child Loop BB196_29 Depth 3
                                        #         Child Loop BB196_31 Depth 4
                                        #       Child Loop BB196_40 Depth 3
                                        #         Child Loop BB196_42 Depth 4
                                        #       Child Loop BB196_57 Depth 3
                                        #         Child Loop BB196_59 Depth 4
                                        #       Child Loop BB196_67 Depth 3
                                        #         Child Loop BB196_69 Depth 4
                                        #       Child Loop BB196_84 Depth 3
                                        #         Child Loop BB196_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB196_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB196_8:                              # %for.cond9
                                        #   Parent Loop BB196_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB196_11 Depth 3
                                        #         Child Loop BB196_13 Depth 4
                                        #       Child Loop BB196_19 Depth 3
                                        #         Child Loop BB196_21 Depth 4
                                        #       Child Loop BB196_29 Depth 3
                                        #         Child Loop BB196_31 Depth 4
                                        #       Child Loop BB196_40 Depth 3
                                        #         Child Loop BB196_42 Depth 4
                                        #       Child Loop BB196_57 Depth 3
                                        #         Child Loop BB196_59 Depth 4
                                        #       Child Loop BB196_67 Depth 3
                                        #         Child Loop BB196_69 Depth 4
                                        #       Child Loop BB196_84 Depth 3
                                        #         Child Loop BB196_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB196_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB196_11:                             # %for.cond16
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB196_11 Depth=3
	movl	$0, -12(%rbp)
.LBB196_13:                             # %for.cond20
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB196_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB196_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_13
.LBB196_16:                             # %for.end
                                        #   in Loop: Header=BB196_11 Depth=3
	jmp	.LBB196_17
.LBB196_17:                             # %for.inc37
                                        #   in Loop: Header=BB196_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_11
.LBB196_18:                             # %for.end39
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB196_19:                             # %for.cond41
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB196_19 Depth=3
	movl	$0, -12(%rbp)
.LBB196_21:                             # %for.cond45
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB196_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB196_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_21
.LBB196_24:                             # %for.end65
                                        #   in Loop: Header=BB196_19 Depth=3
	jmp	.LBB196_25
.LBB196_25:                             # %for.inc66
                                        #   in Loop: Header=BB196_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_19
.LBB196_26:                             # %for.end68
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_27
.LBB196_27:                             # %if.end69
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB196_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	$0, -16(%rbp)
.LBB196_29:                             # %for.cond74
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB196_29 Depth=3
	movl	$0, -12(%rbp)
.LBB196_31:                             # %for.cond78
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB196_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB196_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_31
.LBB196_34:                             # %for.end98
                                        #   in Loop: Header=BB196_29 Depth=3
	jmp	.LBB196_35
.LBB196_35:                             # %for.inc99
                                        #   in Loop: Header=BB196_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_29
.LBB196_36:                             # %for.end101
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_37
.LBB196_37:                             # %if.end102
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB196_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB196_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	$0, -16(%rbp)
.LBB196_40:                             # %for.cond108
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB196_40 Depth=3
	movl	$0, -12(%rbp)
.LBB196_42:                             # %for.cond112
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB196_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB196_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_42
.LBB196_45:                             # %for.end137
                                        #   in Loop: Header=BB196_40 Depth=3
	jmp	.LBB196_46
.LBB196_46:                             # %for.inc138
                                        #   in Loop: Header=BB196_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_40
.LBB196_47:                             # %for.end140
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB196_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB196_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB196_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB196_52
.LBB196_51:                             # %if.else
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB196_52:                             # %if.end151
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB196_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB196_54:                             # %if.end157
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_55
.LBB196_55:                             # %if.end158
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_65
.LBB196_56:                             # %if.else159
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	$0, -16(%rbp)
.LBB196_57:                             # %for.cond160
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB196_57 Depth=3
	movl	$0, -12(%rbp)
.LBB196_59:                             # %for.cond164
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB196_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB196_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_59
.LBB196_62:                             # %for.end193
                                        #   in Loop: Header=BB196_57 Depth=3
	jmp	.LBB196_63
.LBB196_63:                             # %for.inc194
                                        #   in Loop: Header=BB196_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_57
.LBB196_64:                             # %for.end196
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_65
.LBB196_65:                             # %if.end197
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_95
.LBB196_66:                             # %if.else198
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	$0, -16(%rbp)
.LBB196_67:                             # %for.cond199
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB196_67 Depth=3
	movl	$0, -12(%rbp)
.LBB196_69:                             # %for.cond203
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB196_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB196_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB196_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB196_73
.LBB196_72:                             # %if.else300
                                        #   in Loop: Header=BB196_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB196_73:                             # %if.end314
                                        #   in Loop: Header=BB196_69 Depth=4
	jmp	.LBB196_74
.LBB196_74:                             # %for.inc315
                                        #   in Loop: Header=BB196_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_69
.LBB196_75:                             # %for.end317
                                        #   in Loop: Header=BB196_67 Depth=3
	jmp	.LBB196_76
.LBB196_76:                             # %for.inc318
                                        #   in Loop: Header=BB196_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_67
.LBB196_77:                             # %for.end320
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB196_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB196_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB196_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB196_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB196_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB196_83
.LBB196_82:                             # %if.else334
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB196_83:                             # %if.end336
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	$0, -16(%rbp)
.LBB196_84:                             # %for.cond337
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB196_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB196_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB196_84 Depth=3
	movl	$0, -12(%rbp)
.LBB196_86:                             # %for.cond341
                                        #   Parent Loop BB196_6 Depth=1
                                        #     Parent Loop BB196_8 Depth=2
                                        #       Parent Loop BB196_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB196_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB196_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB196_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_86
.LBB196_89:                             # %for.end358
                                        #   in Loop: Header=BB196_84 Depth=3
	jmp	.LBB196_90
.LBB196_90:                             # %for.inc359
                                        #   in Loop: Header=BB196_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_84
.LBB196_91:                             # %for.end361
                                        #   in Loop: Header=BB196_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB196_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB196_93:                             # %if.end368
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_94
.LBB196_94:                             # %if.end369
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_95
.LBB196_95:                             # %if.end370
                                        #   in Loop: Header=BB196_8 Depth=2
	jmp	.LBB196_96
.LBB196_96:                             # %for.inc371
                                        #   in Loop: Header=BB196_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB196_8
.LBB196_97:                             # %for.end374
                                        #   in Loop: Header=BB196_6 Depth=1
	jmp	.LBB196_98
.LBB196_98:                             # %for.inc375
                                        #   in Loop: Header=BB196_6 Depth=1
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB196_6
.LBB196_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB196_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB196_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -64(%rbp)
	jne	.LBB196_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB196_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB196_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB196_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB196_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB196_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB196_106 Depth=1
	movl	$0, -12(%rbp)
.LBB196_108:                            # %for.cond400
                                        #   Parent Loop BB196_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB196_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB196_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB196_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_108
.LBB196_111:                            # %for.end417
                                        #   in Loop: Header=BB196_106 Depth=1
	jmp	.LBB196_112
.LBB196_112:                            # %for.inc418
                                        #   in Loop: Header=BB196_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_106
.LBB196_113:                            # %for.end420
	jmp	.LBB196_114
.LBB196_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB196_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB196_116:                            # %if.end431
	jmp	.LBB196_117
.LBB196_117:                            # %if.end432
	jmp	.LBB196_118
.LBB196_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB196_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -64(%rbp)
	jne	.LBB196_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB196_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB196_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB196_145
.LBB196_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB196_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB196_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB196_126:                            # %for.cond462
                                        #   Parent Loop BB196_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB196_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB196_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB196_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB196_130
.LBB196_129:                            # %if.else481
                                        #   in Loop: Header=BB196_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB196_130:                            # %if.end486
                                        #   in Loop: Header=BB196_126 Depth=2
	jmp	.LBB196_131
.LBB196_131:                            # %for.inc487
                                        #   in Loop: Header=BB196_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_126
.LBB196_132:                            # %for.end489
                                        #   in Loop: Header=BB196_124 Depth=1
	jmp	.LBB196_133
.LBB196_133:                            # %for.inc490
                                        #   in Loop: Header=BB196_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_124
.LBB196_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB196_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB196_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB196_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB196_138:                            # %for.cond502
                                        #   Parent Loop BB196_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB196_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB196_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB196_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB196_138
.LBB196_141:                            # %for.end509
                                        #   in Loop: Header=BB196_136 Depth=1
	jmp	.LBB196_142
.LBB196_142:                            # %for.inc510
                                        #   in Loop: Header=BB196_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB196_136
.LBB196_143:                            # %for.end512
	jmp	.LBB196_144
.LBB196_144:                            # %if.end513
	jmp	.LBB196_145
.LBB196_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$739586696, -124(%rbp)  # imm = 0x2C153288
	jne	.LBB196_147
.LBB196_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_146
.Lfunc_end196:
	.size	LumaResidualCoding8x8.155, .Lfunc_end196-LumaResidualCoding8x8.155
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.156 # -- Begin function writeCoeff4x4_CAVLC.156
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.156,@function
writeCoeff4x4_CAVLC.156:                # @writeCoeff4x4_CAVLC.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1627402226, -172(%rbp) # imm = 0x61002FF2
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB197_22
# %bb.1:                                # %entry
	movq	.LJTI197_0(,%rax,8), %rax
	jmpq	*%rax
.LBB197_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB197_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB197_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB197_6
.LBB197_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB197_7
.LBB197_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB197_7:                              # %if.end
	jmp	.LBB197_23
.LBB197_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB197_23
.LBB197_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB197_23
.LBB197_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB197_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB197_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB197_14
.LBB197_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB197_15
.LBB197_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB197_15:                             # %if.end67
	jmp	.LBB197_23
.LBB197_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB197_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB197_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB197_20
.LBB197_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB197_21
.LBB197_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB197_21:                             # %if.end93
	jmp	.LBB197_23
.LBB197_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB197_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB197_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB197_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB197_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB197_27
.LBB197_26:                             # %cond.false
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB197_27
.LBB197_27:                             # %cond.end
                                        #   in Loop: Header=BB197_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB197_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB197_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB197_29:                             # %land.end
                                        #   in Loop: Header=BB197_24 Depth=1
	testb	$1, %dl
	jne	.LBB197_30
	jmp	.LBB197_41
.LBB197_30:                             # %for.body
                                        #   in Loop: Header=BB197_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB197_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB197_24 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB197_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB197_33:                             # %if.end110
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB197_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB197_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	$3, -28(%rbp)
.LBB197_36:                             # %if.end117
                                        #   in Loop: Header=BB197_24 Depth=1
	jmp	.LBB197_38
.LBB197_37:                             # %if.else118
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	$0, -28(%rbp)
.LBB197_38:                             # %if.end119
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB197_39:                             # %if.end121
                                        #   in Loop: Header=BB197_24 Depth=1
	jmp	.LBB197_40
.LBB197_40:                             # %for.inc
                                        #   in Loop: Header=BB197_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_24
.LBB197_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB197_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB197_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB197_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB197_46
.LBB197_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB197_46:                             # %cond.end136
	movl	%eax, -96(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB197_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB197_49
.LBB197_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB197_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB197_51
.LBB197_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB197_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB197_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB197_60
.LBB197_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB197_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB197_59
.LBB197_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB197_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB197_58
.LBB197_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB197_58:                             # %if.end168
	jmp	.LBB197_59
.LBB197_59:                             # %if.end169
	jmp	.LBB197_60
.LBB197_60:                             # %if.end170
	jmp	.LBB197_62
.LBB197_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB197_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB197_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB197_65
.LBB197_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB197_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB197_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB197_122
.LBB197_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB197_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB197_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB197_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB197_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB197_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB197_72:                             # %if.end202
                                        #   in Loop: Header=BB197_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB197_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB197_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB197_74:                             # %if.end205
                                        #   in Loop: Header=BB197_69 Depth=1
	jmp	.LBB197_75
.LBB197_75:                             # %for.inc206
                                        #   in Loop: Header=BB197_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_69
.LBB197_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB197_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB197_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB197_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB197_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB197_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB197_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB197_85
.LBB197_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB197_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB197_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB197_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB197_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB197_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB197_91
.LBB197_90:                             # %if.else249
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB197_91:                             # %if.end252
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	$0, -144(%rbp)
.LBB197_92:                             # %if.end253
                                        #   in Loop: Header=BB197_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB197_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB197_95
.LBB197_94:                             # %if.else257
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB197_95:                             # %if.end259
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB197_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB197_97:                             # %if.end266
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB197_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB197_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	$2, -32(%rbp)
.LBB197_100:                            # %if.end273
                                        #   in Loop: Header=BB197_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB197_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_86
.LBB197_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB197_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB197_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB197_106
.LBB197_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB197_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB197_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB197_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB197_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB197_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB197_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB197_112
.LBB197_111:                            # %if.then318
	jmp	.LBB197_120
.LBB197_112:                            # %if.end319
                                        #   in Loop: Header=BB197_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB197_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB197_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB197_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB197_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB197_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB197_108 Depth=1
	movl	$6, -32(%rbp)
.LBB197_116:                            # %if.end327
                                        #   in Loop: Header=BB197_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-100(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB197_117:                            # %if.end341
                                        #   in Loop: Header=BB197_108 Depth=1
	jmp	.LBB197_118
.LBB197_118:                            # %for.inc342
                                        #   in Loop: Header=BB197_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_108
.LBB197_119:                            # %for.end344.loopexit
	jmp	.LBB197_120
.LBB197_120:                            # %for.end344
	jmp	.LBB197_121
.LBB197_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB197_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1627402226, -172(%rbp) # imm = 0x61002FF2
	jne	.LBB197_124
.LBB197_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_123
.Lfunc_end197:
	.size	writeCoeff4x4_CAVLC.156, .Lfunc_end197-writeCoeff4x4_CAVLC.156
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI197_0:
	.quad	.LBB197_2
	.quad	.LBB197_8
	.quad	.LBB197_9
	.quad	.LBB197_22
	.quad	.LBB197_22
	.quad	.LBB197_22
	.quad	.LBB197_10
	.quad	.LBB197_16
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.157 # -- Begin function writeMotionVector8x8.157
	.p2align	4, 0x90
	.type	writeMotionVector8x8.157,@function
writeMotionVector8x8.157:               # @writeMotionVector8x8.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2092733725, -100(%rbp) # imm = 0x7CBC951D
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -88(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB198_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB198_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB198_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB198_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB198_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB198_7
.LBB198_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB198_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB198_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB198_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_11 Depth 2
                                        #       Child Loop BB198_13 Depth 3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB198_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB198_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB198_11:                             # %for.cond22
                                        #   Parent Loop BB198_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_13 Depth 3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB198_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB198_11 Depth=2
	movl	$0, -16(%rbp)
.LBB198_13:                             # %for.cond25
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB198_15 Depth 4
                                        #           Child Loop BB198_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB198_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB198_15:                             # %for.cond53
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        #       Parent Loop BB198_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB198_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB198_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB198_15 Depth=4
	movl	$0, -36(%rbp)
.LBB198_17:                             # %for.cond57
                                        #   Parent Loop BB198_9 Depth=1
                                        #     Parent Loop BB198_11 Depth=2
                                        #       Parent Loop BB198_13 Depth=3
                                        #         Parent Loop BB198_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB198_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB198_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB198_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB198_17
.LBB198_20:                             # %for.end
                                        #   in Loop: Header=BB198_15 Depth=4
	jmp	.LBB198_21
.LBB198_21:                             # %for.inc70
                                        #   in Loop: Header=BB198_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB198_15
.LBB198_22:                             # %for.end72
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB198_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB198_25
.LBB198_24:                             # %if.else
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB198_25:                             # %if.end78
                                        #   in Loop: Header=BB198_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB198_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_13
.LBB198_27:                             # %for.end90
                                        #   in Loop: Header=BB198_11 Depth=2
	jmp	.LBB198_28
.LBB198_28:                             # %for.inc91
                                        #   in Loop: Header=BB198_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_11
.LBB198_29:                             # %for.end93
                                        #   in Loop: Header=BB198_9 Depth=1
	jmp	.LBB198_30
.LBB198_30:                             # %for.inc94
                                        #   in Loop: Header=BB198_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB198_9
.LBB198_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$2092733725, -100(%rbp) # imm = 0x7CBC951D
	jne	.LBB198_33
.LBB198_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_32
.Lfunc_end198:
	.size	writeMotionVector8x8.157, .Lfunc_end198-writeMotionVector8x8.157
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.158      # -- Begin function find_sad_16x16.158
	.p2align	4, 0x90
	.type	find_sad_16x16.158,@function
find_sad_16x16.158:                     # @find_sad_16x16.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1218211726, -80(%rbp)  # imm = 0x489C6F8E
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB199_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB199_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_1
.LBB199_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB199_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB199_20
.LBB199_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB199_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB199_9
.LBB199_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB199_9
.LBB199_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB199_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB199_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB199_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB199_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB199_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB199_14
.LBB199_13:                             # %cond.false23
                                        #   in Loop: Header=BB199_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB199_14
.LBB199_14:                             # %cond.end24
                                        #   in Loop: Header=BB199_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB199_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_10
.LBB199_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB199_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB199_19
.LBB199_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB199_19
.LBB199_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB199_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB199_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_42 Depth 2
                                        #       Child Loop BB199_44 Depth 3
                                        #     Child Loop BB199_50 Depth 2
                                        #       Child Loop BB199_52 Depth 3
                                        #         Child Loop BB199_54 Depth 4
                                        #         Child Loop BB199_58 Depth 4
                                        #           Child Loop BB199_60 Depth 5
                                        #     Child Loop BB199_72 Depth 2
                                        #       Child Loop BB199_74 Depth 3
                                        #     Child Loop BB199_80 Depth 2
                                        #     Child Loop BB199_84 Depth 2
                                        #       Child Loop BB199_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB199_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB199_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB199_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB199_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB199_32
.LBB199_24:                             # %if.then46
                                        #   in Loop: Header=BB199_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB199_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB199_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB199_28
.LBB199_27:                             # %if.then51
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_95
.LBB199_28:                             # %if.end52
                                        #   in Loop: Header=BB199_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB199_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB199_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_95
.LBB199_31:                             # %if.end57
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_32
.LBB199_32:                             # %if.end58
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB199_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB199_40
.LBB199_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB199_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB199_40
.LBB199_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB199_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB199_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB199_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB199_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB199_41
.LBB199_40:                             # %if.then74
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_94
.LBB199_41:                             # %if.else75
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	$0, -16(%rbp)
.LBB199_42:                             # %for.cond76
                                        #   Parent Loop BB199_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB199_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB199_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB199_42 Depth=2
	movl	$0, -12(%rbp)
.LBB199_44:                             # %for.cond79
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB199_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB199_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB199_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_44
.LBB199_47:                             # %for.end115
                                        #   in Loop: Header=BB199_42 Depth=2
	jmp	.LBB199_48
.LBB199_48:                             # %for.inc116
                                        #   in Loop: Header=BB199_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_42
.LBB199_49:                             # %for.end118
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB199_50:                             # %for.cond119
                                        #   Parent Loop BB199_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB199_52 Depth 3
                                        #         Child Loop BB199_54 Depth 4
                                        #         Child Loop BB199_58 Depth 4
                                        #           Child Loop BB199_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB199_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB199_50 Depth=2
	movl	$0, -24(%rbp)
.LBB199_52:                             # %for.cond123
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB199_54 Depth 4
                                        #         Child Loop BB199_58 Depth 4
                                        #           Child Loop BB199_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB199_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB199_52 Depth=3
	movl	$0, -16(%rbp)
.LBB199_54:                             # %for.cond127
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_50 Depth=2
                                        #       Parent Loop BB199_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB199_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB199_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB199_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_54
.LBB199_57:                             # %for.end237
                                        #   in Loop: Header=BB199_52 Depth=3
	movl	$0, -12(%rbp)
.LBB199_58:                             # %for.cond238
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_50 Depth=2
                                        #       Parent Loop BB199_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB199_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB199_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB199_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB199_60:                             # %for.cond346
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_50 Depth=2
                                        #       Parent Loop BB199_52 Depth=3
                                        #         Parent Loop BB199_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB199_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB199_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB199_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB199_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB199_63:                             # %if.end363
                                        #   in Loop: Header=BB199_60 Depth=5
	jmp	.LBB199_64
.LBB199_64:                             # %for.inc364
                                        #   in Loop: Header=BB199_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_60
.LBB199_65:                             # %for.end366
                                        #   in Loop: Header=BB199_58 Depth=4
	jmp	.LBB199_66
.LBB199_66:                             # %for.inc367
                                        #   in Loop: Header=BB199_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_58
.LBB199_67:                             # %for.end369
                                        #   in Loop: Header=BB199_52 Depth=3
	jmp	.LBB199_68
.LBB199_68:                             # %for.inc370
                                        #   in Loop: Header=BB199_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB199_52
.LBB199_69:                             # %for.end372
                                        #   in Loop: Header=BB199_50 Depth=2
	jmp	.LBB199_70
.LBB199_70:                             # %for.inc373
                                        #   in Loop: Header=BB199_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB199_50
.LBB199_71:                             # %for.end375
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	$0, -16(%rbp)
.LBB199_72:                             # %for.cond376
                                        #   Parent Loop BB199_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB199_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB199_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB199_72 Depth=2
	movl	$0, -12(%rbp)
.LBB199_74:                             # %for.cond380
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB199_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB199_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB199_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_74
.LBB199_77:                             # %for.end397
                                        #   in Loop: Header=BB199_72 Depth=2
	jmp	.LBB199_78
.LBB199_78:                             # %for.inc398
                                        #   in Loop: Header=BB199_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_72
.LBB199_79:                             # %for.end400
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	$0, -16(%rbp)
.LBB199_80:                             # %for.cond401
                                        #   Parent Loop BB199_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB199_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB199_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB199_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_80
.LBB199_83:                             # %for.end463
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	$0, -12(%rbp)
.LBB199_84:                             # %for.cond464
                                        #   Parent Loop BB199_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB199_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB199_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB199_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB199_86:                             # %for.cond524
                                        #   Parent Loop BB199_21 Depth=1
                                        #     Parent Loop BB199_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB199_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB199_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB199_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB199_86
.LBB199_89:                             # %for.end536
                                        #   in Loop: Header=BB199_84 Depth=2
	jmp	.LBB199_90
.LBB199_90:                             # %for.inc537
                                        #   in Loop: Header=BB199_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_84
.LBB199_91:                             # %for.end539
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB199_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB199_93:                             # %if.end543
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_94
.LBB199_94:                             # %if.end544
                                        #   in Loop: Header=BB199_21 Depth=1
	jmp	.LBB199_95
.LBB199_95:                             # %for.inc545
                                        #   in Loop: Header=BB199_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB199_21
.LBB199_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1218211726, -80(%rbp)  # imm = 0x489C6F8E
	jne	.LBB199_98
.LBB199_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_97
.Lfunc_end199:
	.size	find_sad_16x16.158, .Lfunc_end199-find_sad_16x16.158
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.159 # -- Begin function writeLumaCoeff8x8_CABAC.159
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.159,@function
writeLumaCoeff8x8_CABAC.159:            # @writeLumaCoeff8x8_CABAC.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$438141960, -60(%rbp)   # imm = 0x1A1D8408
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB200_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB200_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB200_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB200_3:                              # %land.end
                                        #   in Loop: Header=BB200_1 Depth=1
	testb	$1, %al
	jne	.LBB200_4
	jmp	.LBB200_12
.LBB200_4:                              # %for.body
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB200_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB200_7
.LBB200_6:                              # %cond.false
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB200_7:                              # %cond.end
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB200_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB200_10
.LBB200_9:                              # %if.else
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB200_10:                             # %if.end
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB200_1
.LBB200_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$438141960, -60(%rbp)   # imm = 0x1A1D8408
	jne	.LBB200_14
.LBB200_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_13
.Lfunc_end200:
	.size	writeLumaCoeff8x8_CABAC.159, .Lfunc_end200-writeLumaCoeff8x8_CABAC.159
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.160 # -- Begin function IntraChromaPrediction4x4.160
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.160,@function
IntraChromaPrediction4x4.160:           # @IntraChromaPrediction4x4.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1704337996, -24(%rbp)  # imm = 0x6596224C
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB201_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB201_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB201_3:                              # %for.cond1
                                        #   Parent Loop BB201_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB201_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB201_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB201_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_3
.LBB201_6:                              # %for.end
                                        #   in Loop: Header=BB201_1 Depth=1
	jmp	.LBB201_7
.LBB201_7:                              # %for.inc17
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB201_1
.LBB201_8:                              # %for.end19
	cmpl	$1704337996, -24(%rbp)  # imm = 0x6596224C
	jne	.LBB201_10
.LBB201_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_9
.Lfunc_end201:
	.size	IntraChromaPrediction4x4.160, .Lfunc_end201-IntraChromaPrediction4x4.160
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.161 # -- Begin function writeMotionInfo2NAL.161
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.161,@function
writeMotionInfo2NAL.161:                # @writeMotionInfo2NAL.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1254388418, -56(%rbp)  # imm = 0x4AC472C2
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB202_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB202_3
.LBB202_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB202_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB202_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB202_6
.LBB202_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB202_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB202_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB202_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB202_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB202_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB202_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB202_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB202_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB202_39
.LBB202_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB202_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB202_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB202_15 Depth=1
	movl	$0, -12(%rbp)
.LBB202_17:                             # %for.cond45
                                        #   Parent Loop BB202_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB202_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB202_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB202_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB202_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB202_22
.LBB202_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB202_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB202_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB202_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB202_22:                             # %if.end
                                        #   in Loop: Header=BB202_17 Depth=2
	jmp	.LBB202_23
.LBB202_23:                             # %for.inc
                                        #   in Loop: Header=BB202_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_17
.LBB202_24:                             # %for.end
                                        #   in Loop: Header=BB202_15 Depth=1
	jmp	.LBB202_25
.LBB202_25:                             # %for.inc79
                                        #   in Loop: Header=BB202_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB202_15
.LBB202_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB202_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB202_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB202_27 Depth=1
	movl	$0, -12(%rbp)
.LBB202_29:                             # %for.cond86
                                        #   Parent Loop BB202_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB202_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB202_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB202_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB202_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB202_34
.LBB202_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB202_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB202_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB202_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB202_34:                             # %if.end126
                                        #   in Loop: Header=BB202_29 Depth=2
	jmp	.LBB202_35
.LBB202_35:                             # %for.inc127
                                        #   in Loop: Header=BB202_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_29
.LBB202_36:                             # %for.end129
                                        #   in Loop: Header=BB202_27 Depth=1
	jmp	.LBB202_37
.LBB202_37:                             # %for.inc130
                                        #   in Loop: Header=BB202_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB202_27
.LBB202_38:                             # %for.end132
	jmp	.LBB202_39
.LBB202_39:                             # %if.end133
	jmp	.LBB202_40
.LBB202_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB202_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB202_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB202_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB202_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB202_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB202_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB202_45 Depth=1
	movl	$0, -12(%rbp)
.LBB202_47:                             # %for.cond155
                                        #   Parent Loop BB202_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB202_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB202_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB202_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB202_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB202_52
.LBB202_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB202_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB202_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB202_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB202_52:                             # %if.end197
                                        #   in Loop: Header=BB202_47 Depth=2
	jmp	.LBB202_53
.LBB202_53:                             # %for.inc198
                                        #   in Loop: Header=BB202_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_47
.LBB202_54:                             # %for.end200
                                        #   in Loop: Header=BB202_45 Depth=1
	jmp	.LBB202_55
.LBB202_55:                             # %for.inc201
                                        #   in Loop: Header=BB202_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB202_45
.LBB202_56:                             # %for.end203
	jmp	.LBB202_57
.LBB202_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB202_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB202_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB202_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB202_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB202_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB202_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB202_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB202_63 Depth=1
	movl	$0, -12(%rbp)
.LBB202_65:                             # %for.cond227
                                        #   Parent Loop BB202_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB202_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB202_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB202_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB202_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB202_70
.LBB202_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB202_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB202_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB202_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB202_70:                             # %if.end269
                                        #   in Loop: Header=BB202_65 Depth=2
	jmp	.LBB202_71
.LBB202_71:                             # %for.inc270
                                        #   in Loop: Header=BB202_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB202_65
.LBB202_72:                             # %for.end272
                                        #   in Loop: Header=BB202_63 Depth=1
	jmp	.LBB202_73
.LBB202_73:                             # %for.inc273
                                        #   in Loop: Header=BB202_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB202_63
.LBB202_74:                             # %for.end275
	jmp	.LBB202_75
.LBB202_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1254388418, -56(%rbp)  # imm = 0x4AC472C2
	jne	.LBB202_77
.LBB202_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_76
.Lfunc_end202:
	.size	writeMotionInfo2NAL.161, .Lfunc_end202-writeMotionInfo2NAL.161
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.162 # -- Begin function SetModesAndRefframe.162
	.p2align	4, 0x90
	.type	SetModesAndRefframe.162,@function
SetModesAndRefframe.162:                # @SetModesAndRefframe.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$673965606, -60(%rbp)   # imm = 0x282BE626
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB203_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_12
.LBB203_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB203_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_11
.LBB203_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB203_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB203_10
.LBB203_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB203_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB203_9
.LBB203_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_9:                              # %if.end
	jmp	.LBB203_10
.LBB203_10:                             # %if.end86
	jmp	.LBB203_11
.LBB203_11:                             # %if.end87
	jmp	.LBB203_12
.LBB203_12:                             # %if.end88
	cmpl	$673965606, -60(%rbp)   # imm = 0x282BE626
	jne	.LBB203_14
.LBB203_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_13
.Lfunc_end203:
	.size	SetModesAndRefframe.162, .Lfunc_end203-SetModesAndRefframe.162
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.163 # -- Begin function OneComponentLumaPrediction4x4.163
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.163,@function
OneComponentLumaPrediction4x4.163:      # @OneComponentLumaPrediction4x4.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1748128624, -88(%rbp)  # imm = 0x68325370
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1748128624, -88(%rbp)  # imm = 0x68325370
	jne	.LBB204_2
.LBB204_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_1
.Lfunc_end204:
	.size	OneComponentLumaPrediction4x4.163, .Lfunc_end204-OneComponentLumaPrediction4x4.163
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.164 # -- Begin function writeReferenceFrame.164
	.p2align	4, 0x90
	.type	writeReferenceFrame.164,@function
writeReferenceFrame.164:                # @writeReferenceFrame.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$195768157, -68(%rbp)   # imm = 0xBAB2F5D
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB205_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB205_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB205_4
.LBB205_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB205_4
.LBB205_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB205_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB205_7
.LBB205_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB205_7:                              # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB205_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB205_18
.LBB205_9:                              # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB205_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB205_11:                             # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB205_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB205_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB205_15
.LBB205_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB205_15:                             # %if.end33
	jmp	.LBB205_17
.LBB205_16:                             # %if.else34
	movl	-84(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB205_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB205_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$195768157, -68(%rbp)   # imm = 0xBAB2F5D
	jne	.LBB205_20
.LBB205_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_19
.Lfunc_end205:
	.size	writeReferenceFrame.164, .Lfunc_end205-writeReferenceFrame.164
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.165      # -- Begin function find_sad_16x16.165
	.p2align	4, 0x90
	.type	find_sad_16x16.165,@function
find_sad_16x16.165:                     # @find_sad_16x16.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$188950633, -80(%rbp)   # imm = 0xB432869
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB206_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_1
.LBB206_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB206_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB206_20
.LBB206_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB206_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB206_9
.LBB206_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB206_9
.LBB206_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB206_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB206_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB206_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB206_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB206_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB206_14
.LBB206_13:                             # %cond.false23
                                        #   in Loop: Header=BB206_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB206_14
.LBB206_14:                             # %cond.end24
                                        #   in Loop: Header=BB206_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB206_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_10
.LBB206_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB206_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB206_19
.LBB206_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB206_19
.LBB206_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB206_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB206_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_42 Depth 2
                                        #       Child Loop BB206_44 Depth 3
                                        #     Child Loop BB206_50 Depth 2
                                        #       Child Loop BB206_52 Depth 3
                                        #         Child Loop BB206_54 Depth 4
                                        #         Child Loop BB206_58 Depth 4
                                        #           Child Loop BB206_60 Depth 5
                                        #     Child Loop BB206_72 Depth 2
                                        #       Child Loop BB206_74 Depth 3
                                        #     Child Loop BB206_80 Depth 2
                                        #     Child Loop BB206_84 Depth 2
                                        #       Child Loop BB206_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB206_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB206_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB206_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB206_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB206_32
.LBB206_24:                             # %if.then46
                                        #   in Loop: Header=BB206_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB206_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB206_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB206_28
.LBB206_27:                             # %if.then51
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_95
.LBB206_28:                             # %if.end52
                                        #   in Loop: Header=BB206_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB206_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB206_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_95
.LBB206_31:                             # %if.end57
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_32
.LBB206_32:                             # %if.end58
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB206_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB206_40
.LBB206_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB206_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB206_40
.LBB206_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB206_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB206_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB206_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB206_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB206_41
.LBB206_40:                             # %if.then74
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_94
.LBB206_41:                             # %if.else75
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	$0, -16(%rbp)
.LBB206_42:                             # %for.cond76
                                        #   Parent Loop BB206_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB206_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB206_42 Depth=2
	movl	$0, -12(%rbp)
.LBB206_44:                             # %for.cond79
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB206_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB206_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB206_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_44
.LBB206_47:                             # %for.end115
                                        #   in Loop: Header=BB206_42 Depth=2
	jmp	.LBB206_48
.LBB206_48:                             # %for.inc116
                                        #   in Loop: Header=BB206_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_42
.LBB206_49:                             # %for.end118
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB206_50:                             # %for.cond119
                                        #   Parent Loop BB206_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_52 Depth 3
                                        #         Child Loop BB206_54 Depth 4
                                        #         Child Loop BB206_58 Depth 4
                                        #           Child Loop BB206_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB206_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB206_50 Depth=2
	movl	$0, -20(%rbp)
.LBB206_52:                             # %for.cond123
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB206_54 Depth 4
                                        #         Child Loop BB206_58 Depth 4
                                        #           Child Loop BB206_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB206_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB206_52 Depth=3
	movl	$0, -16(%rbp)
.LBB206_54:                             # %for.cond127
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_50 Depth=2
                                        #       Parent Loop BB206_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB206_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB206_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB206_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_54
.LBB206_57:                             # %for.end237
                                        #   in Loop: Header=BB206_52 Depth=3
	movl	$0, -12(%rbp)
.LBB206_58:                             # %for.cond238
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_50 Depth=2
                                        #       Parent Loop BB206_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB206_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB206_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB206_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB206_60:                             # %for.cond346
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_50 Depth=2
                                        #       Parent Loop BB206_52 Depth=3
                                        #         Parent Loop BB206_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB206_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB206_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB206_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB206_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB206_63:                             # %if.end363
                                        #   in Loop: Header=BB206_60 Depth=5
	jmp	.LBB206_64
.LBB206_64:                             # %for.inc364
                                        #   in Loop: Header=BB206_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_60
.LBB206_65:                             # %for.end366
                                        #   in Loop: Header=BB206_58 Depth=4
	jmp	.LBB206_66
.LBB206_66:                             # %for.inc367
                                        #   in Loop: Header=BB206_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_58
.LBB206_67:                             # %for.end369
                                        #   in Loop: Header=BB206_52 Depth=3
	jmp	.LBB206_68
.LBB206_68:                             # %for.inc370
                                        #   in Loop: Header=BB206_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB206_52
.LBB206_69:                             # %for.end372
                                        #   in Loop: Header=BB206_50 Depth=2
	jmp	.LBB206_70
.LBB206_70:                             # %for.inc373
                                        #   in Loop: Header=BB206_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB206_50
.LBB206_71:                             # %for.end375
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	$0, -16(%rbp)
.LBB206_72:                             # %for.cond376
                                        #   Parent Loop BB206_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB206_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB206_72 Depth=2
	movl	$0, -12(%rbp)
.LBB206_74:                             # %for.cond380
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB206_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB206_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB206_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_74
.LBB206_77:                             # %for.end397
                                        #   in Loop: Header=BB206_72 Depth=2
	jmp	.LBB206_78
.LBB206_78:                             # %for.inc398
                                        #   in Loop: Header=BB206_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_72
.LBB206_79:                             # %for.end400
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	$0, -16(%rbp)
.LBB206_80:                             # %for.cond401
                                        #   Parent Loop BB206_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB206_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB206_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB206_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_80
.LBB206_83:                             # %for.end463
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	$0, -12(%rbp)
.LBB206_84:                             # %for.cond464
                                        #   Parent Loop BB206_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB206_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB206_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB206_86:                             # %for.cond524
                                        #   Parent Loop BB206_21 Depth=1
                                        #     Parent Loop BB206_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB206_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB206_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB206_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_86
.LBB206_89:                             # %for.end536
                                        #   in Loop: Header=BB206_84 Depth=2
	jmp	.LBB206_90
.LBB206_90:                             # %for.inc537
                                        #   in Loop: Header=BB206_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_84
.LBB206_91:                             # %for.end539
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB206_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_93:                             # %if.end543
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_94
.LBB206_94:                             # %if.end544
                                        #   in Loop: Header=BB206_21 Depth=1
	jmp	.LBB206_95
.LBB206_95:                             # %for.inc545
                                        #   in Loop: Header=BB206_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB206_21
.LBB206_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$188950633, -80(%rbp)   # imm = 0xB432869
	jne	.LBB206_98
.LBB206_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_97
.Lfunc_end206:
	.size	find_sad_16x16.165, .Lfunc_end206-find_sad_16x16.165
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.166 # -- Begin function writeMotionVector8x8.166
	.p2align	4, 0x90
	.type	writeMotionVector8x8.166,@function
writeMotionVector8x8.166:               # @writeMotionVector8x8.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$667410449, -96(%rbp)   # imm = 0x27C7E011
	movl	%edi, -100(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB207_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB207_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB207_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB207_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB207_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB207_7
.LBB207_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB207_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB207_8:                              # %if.end
	movl	-84(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB207_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_11 Depth 2
                                        #       Child Loop BB207_13 Depth 3
                                        #         Child Loop BB207_15 Depth 4
                                        #           Child Loop BB207_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB207_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB207_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB207_11:                             # %for.cond22
                                        #   Parent Loop BB207_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB207_13 Depth 3
                                        #         Child Loop BB207_15 Depth 4
                                        #           Child Loop BB207_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB207_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB207_11 Depth=2
	movl	$0, -16(%rbp)
.LBB207_13:                             # %for.cond25
                                        #   Parent Loop BB207_9 Depth=1
                                        #     Parent Loop BB207_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB207_15 Depth 4
                                        #           Child Loop BB207_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB207_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB207_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -44(%rbp)
.LBB207_15:                             # %for.cond53
                                        #   Parent Loop BB207_9 Depth=1
                                        #     Parent Loop BB207_11 Depth=2
                                        #       Parent Loop BB207_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB207_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB207_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB207_15 Depth=4
	movl	$0, -36(%rbp)
.LBB207_17:                             # %for.cond57
                                        #   Parent Loop BB207_9 Depth=1
                                        #     Parent Loop BB207_11 Depth=2
                                        #       Parent Loop BB207_13 Depth=3
                                        #         Parent Loop BB207_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB207_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB207_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB207_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB207_17
.LBB207_20:                             # %for.end
                                        #   in Loop: Header=BB207_15 Depth=4
	jmp	.LBB207_21
.LBB207_21:                             # %for.inc70
                                        #   in Loop: Header=BB207_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB207_15
.LBB207_22:                             # %for.end72
                                        #   in Loop: Header=BB207_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB207_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB207_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB207_25
.LBB207_24:                             # %if.else
                                        #   in Loop: Header=BB207_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB207_25:                             # %if.end78
                                        #   in Loop: Header=BB207_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB207_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB207_13
.LBB207_27:                             # %for.end90
                                        #   in Loop: Header=BB207_11 Depth=2
	jmp	.LBB207_28
.LBB207_28:                             # %for.inc91
                                        #   in Loop: Header=BB207_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB207_11
.LBB207_29:                             # %for.end93
                                        #   in Loop: Header=BB207_9 Depth=1
	jmp	.LBB207_30
.LBB207_30:                             # %for.inc94
                                        #   in Loop: Header=BB207_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB207_9
.LBB207_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$667410449, -96(%rbp)   # imm = 0x27C7E011
	jne	.LBB207_33
.LBB207_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_32
.Lfunc_end207:
	.size	writeMotionVector8x8.166, .Lfunc_end207-writeMotionVector8x8.166
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.167  # -- Begin function writeIntra4x4Modes.167
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.167,@function
writeIntra4x4Modes.167:                 # @writeIntra4x4Modes.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$126851003, -84(%rbp)   # imm = 0x78F97BB
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB208_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_9 Depth 2
                                        #       Child Loop BB208_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB208_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB208_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB208_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB208_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB208_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB208_8
.LBB208_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB208_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB208_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB208_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB208_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB208_17
.LBB208_8:                              # %if.then
                                        #   in Loop: Header=BB208_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB208_9:                              # %for.cond24
                                        #   Parent Loop BB208_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB208_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB208_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB208_9 Depth=2
	movl	$0, -12(%rbp)
.LBB208_11:                             # %for.cond27
                                        #   Parent Loop BB208_1 Depth=1
                                        #     Parent Loop BB208_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB208_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB208_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB208_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_11
.LBB208_14:                             # %for.end
                                        #   in Loop: Header=BB208_9 Depth=2
	jmp	.LBB208_15
.LBB208_15:                             # %for.inc42
                                        #   in Loop: Header=BB208_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB208_9
.LBB208_16:                             # %for.end44
                                        #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_17
.LBB208_17:                             # %if.end
                                        #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_18
.LBB208_18:                             # %for.inc45
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_1
.LBB208_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB208_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB208_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB208_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB208_23:                             # %if.end57
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB208_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB208_26
.LBB208_25:                             # %if.else
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB208_26:                             # %if.end65
                                        #   in Loop: Header=BB208_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB208_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_20
.LBB208_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$126851003, -84(%rbp)   # imm = 0x78F97BB
	jne	.LBB208_30
.LBB208_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_29
.Lfunc_end208:
	.size	writeIntra4x4Modes.167, .Lfunc_end208-writeIntra4x4Modes.167
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.168 # -- Begin function OneComponentLumaPrediction4x4.168
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.168,@function
OneComponentLumaPrediction4x4.168:      # @OneComponentLumaPrediction4x4.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1487787348, -92(%rbp)  # imm = 0x58ADD554
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1487787348, -92(%rbp)  # imm = 0x58ADD554
	jne	.LBB209_2
.LBB209_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_1
.Lfunc_end209:
	.size	OneComponentLumaPrediction4x4.168, .Lfunc_end209-OneComponentLumaPrediction4x4.168
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.169        # -- Begin function MBType2Value.169
	.p2align	4, 0x90
	.type	MBType2Value.169,@function
MBType2Value.169:                       # @MBType2Value.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1169414751, -36(%rbp)  # imm = 0x45B3DA5F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB210_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB210_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB210_4
.LBB210_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB210_26
.LBB210_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB210_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB210_26
.LBB210_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB210_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB210_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB210_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB210_26
.LBB210_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB210_26
.LBB210_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_26
.LBB210_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB210_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB210_26
.LBB210_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB210_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB210_17
.LBB210_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB210_26
.LBB210_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB210_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_26
.LBB210_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB210_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB210_26
.LBB210_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB210_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_26
.LBB210_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB210_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_26
.LBB210_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB210_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1169414751, -36(%rbp)  # imm = 0x45B3DA5F
	jne	.LBB210_28
.LBB210_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_27
.Lfunc_end210:
	.size	MBType2Value.169, .Lfunc_end210-MBType2Value.169
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.170 # -- Begin function write_one_macroblock.170
	.p2align	4, 0x90
	.type	write_one_macroblock.170,@function
write_one_macroblock.170:               # @write_one_macroblock.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1679305810, -28(%rbp)  # imm = 0x64182C52
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB211_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB211_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB211_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB211_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB211_6
.LBB211_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB211_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB211_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB211_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB211_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB211_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB211_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB211_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB211_22
.LBB211_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB211_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB211_14 Depth=1
	movl	$0, -20(%rbp)
.LBB211_16:                             # %for.cond24
                                        #   Parent Loop BB211_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB211_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB211_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB211_16
.LBB211_19:                             # %for.end
                                        #   in Loop: Header=BB211_14 Depth=1
	jmp	.LBB211_20
.LBB211_20:                             # %for.inc35
                                        #   in Loop: Header=BB211_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB211_14
.LBB211_21:                             # %for.end37
	jmp	.LBB211_22
.LBB211_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB211_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB211_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB211_30
.LBB211_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB211_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB211_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB211_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB211_29:                             # %if.end59
	jmp	.LBB211_30
.LBB211_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB211_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB211_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1679305810, -28(%rbp)  # imm = 0x64182C52
	jne	.LBB211_34
.LBB211_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_33
.Lfunc_end211:
	.size	write_one_macroblock.170, .Lfunc_end211-write_one_macroblock.170
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.171   # -- Begin function TransformDecision.171
	.p2align	4, 0x90
	.type	TransformDecision.171,@function
TransformDecision.171:                  # @TransformDecision.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1257143122, -76(%rbp)  # imm = 0x4AEE7B52
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB212_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB212_3
.LBB212_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB212_3:                              # %if.end
	jmp	.LBB212_4
.LBB212_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_6 Depth 2
                                        #       Child Loop BB212_8 Depth 3
                                        #         Child Loop BB212_10 Depth 4
                                        #           Child Loop BB212_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB212_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB212_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB212_6:                              # %for.cond3
                                        #   Parent Loop BB212_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB212_8 Depth 3
                                        #         Child Loop BB212_10 Depth 4
                                        #           Child Loop BB212_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB212_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB212_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB212_8:                              # %for.cond8
                                        #   Parent Loop BB212_4 Depth=1
                                        #     Parent Loop BB212_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB212_10 Depth 4
                                        #           Child Loop BB212_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB212_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB212_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB212_10:                             # %for.cond13
                                        #   Parent Loop BB212_4 Depth=1
                                        #     Parent Loop BB212_6 Depth=2
                                        #       Parent Loop BB212_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB212_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB212_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB212_10 Depth=4
	movl	$0, -28(%rbp)
.LBB212_12:                             # %for.cond17
                                        #   Parent Loop BB212_4 Depth=1
                                        #     Parent Loop BB212_6 Depth=2
                                        #       Parent Loop BB212_8 Depth=3
                                        #         Parent Loop BB212_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB212_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB212_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB212_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB212_12
.LBB212_15:                             # %for.end
                                        #   in Loop: Header=BB212_10 Depth=4
	jmp	.LBB212_16
.LBB212_16:                             # %for.inc38
                                        #   in Loop: Header=BB212_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB212_10
.LBB212_17:                             # %for.end40
                                        #   in Loop: Header=BB212_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB212_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB212_8
.LBB212_19:                             # %for.end44
                                        #   in Loop: Header=BB212_6 Depth=2
	jmp	.LBB212_20
.LBB212_20:                             # %for.inc45
                                        #   in Loop: Header=BB212_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB212_6
.LBB212_21:                             # %for.end47
                                        #   in Loop: Header=BB212_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB212_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB212_4
.LBB212_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB212_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB212_28
.LBB212_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB212_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB212_28
.LBB212_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB212_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1257143122, -76(%rbp)  # imm = 0x4AEE7B52
	jne	.LBB212_30
.LBB212_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_29
.Lfunc_end212:
	.size	TransformDecision.171, .Lfunc_end212-TransformDecision.171
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.172 # -- Begin function write_one_macroblock.172
	.p2align	4, 0x90
	.type	write_one_macroblock.172,@function
write_one_macroblock.172:               # @write_one_macroblock.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1819554488, -28(%rbp)  # imm = 0x6C7432B8
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB213_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB213_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB213_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB213_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB213_6
.LBB213_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB213_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB213_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB213_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB213_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB213_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB213_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB213_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB213_22
.LBB213_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB213_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB213_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB213_14 Depth=1
	movl	$0, -20(%rbp)
.LBB213_16:                             # %for.cond24
                                        #   Parent Loop BB213_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB213_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB213_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB213_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB213_16
.LBB213_19:                             # %for.end
                                        #   in Loop: Header=BB213_14 Depth=1
	jmp	.LBB213_20
.LBB213_20:                             # %for.inc35
                                        #   in Loop: Header=BB213_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB213_14
.LBB213_21:                             # %for.end37
	jmp	.LBB213_22
.LBB213_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB213_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB213_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB213_30
.LBB213_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB213_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB213_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB213_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB213_29:                             # %if.end59
	jmp	.LBB213_30
.LBB213_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB213_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB213_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1819554488, -28(%rbp)  # imm = 0x6C7432B8
	jne	.LBB213_34
.LBB213_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_33
.Lfunc_end213:
	.size	write_one_macroblock.172, .Lfunc_end213-write_one_macroblock.172
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.173 # -- Begin function write_terminating_bit.173
	.p2align	4, 0x90
	.type	write_terminating_bit.173,@function
write_terminating_bit.173:              # @write_terminating_bit.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2090596065, -8(%rbp)   # imm = 0x7C9BF6E1
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$2090596065, -8(%rbp)   # imm = 0x7C9BF6E1
	jne	.LBB214_2
.LBB214_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_1
.Lfunc_end214:
	.size	write_terminating_bit.173, .Lfunc_end214-write_terminating_bit.173
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.174 # -- Begin function writeReferenceFrame.174
	.p2align	4, 0x90
	.type	writeReferenceFrame.174,@function
writeReferenceFrame.174:                # @writeReferenceFrame.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$348815602, -84(%rbp)   # imm = 0x14CA80F2
	movl	%edi, -72(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB215_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB215_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB215_4
.LBB215_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB215_4
.LBB215_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB215_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB215_7
.LBB215_6:                              # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB215_7:                              # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB215_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB215_18
.LBB215_9:                              # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB215_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB215_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB215_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB215_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB215_15
.LBB215_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB215_15:                             # %if.end33
	jmp	.LBB215_17
.LBB215_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB215_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB215_18:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$348815602, -84(%rbp)   # imm = 0x14CA80F2
	jne	.LBB215_20
.LBB215_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_19
.Lfunc_end215:
	.size	writeReferenceFrame.174, .Lfunc_end215-writeReferenceFrame.174
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.175 # -- Begin function writeChromaIntraPredMode.175
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.175,@function
writeChromaIntraPredMode.175:           # @writeChromaIntraPredMode.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1973060638, -36(%rbp)  # imm = 0x759A841E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB216_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB216_3
.LBB216_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB216_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1973060638, -36(%rbp)  # imm = 0x759A841E
	jne	.LBB216_5
.LBB216_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_4
.Lfunc_end216:
	.size	writeChromaIntraPredMode.175, .Lfunc_end216-writeChromaIntraPredMode.175
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.176   # -- Begin function writeLumaCoeff8x8.176
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.176,@function
writeLumaCoeff8x8.176:                  # @writeLumaCoeff8x8.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$85897527, -36(%rbp)    # imm = 0x51EB137
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB217_2
# %bb.1:                                # %if.then
	jmp	.LBB217_2
.LBB217_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB217_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_15
.LBB217_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB217_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB217_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB217_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB217_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB217_10
.LBB217_9:                              # %cond.false
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB217_10:                             # %cond.end
                                        #   in Loop: Header=BB217_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB217_12
.LBB217_11:                             # %if.else
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB217_12:                             # %if.end17
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_13
.LBB217_13:                             # %for.inc
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB217_5
.LBB217_14:                             # %for.end
	jmp	.LBB217_19
.LBB217_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB217_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB217_18
.LBB217_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB217_18:                             # %if.end27
	jmp	.LBB217_19
.LBB217_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$85897527, -36(%rbp)    # imm = 0x51EB137
	jne	.LBB217_21
.LBB217_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_20
.Lfunc_end217:
	.size	writeLumaCoeff8x8.176, .Lfunc_end217-writeLumaCoeff8x8.176
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.177  # -- Begin function LumaResidualCoding.177
	.p2align	4, 0x90
	.type	LumaResidualCoding.177,@function
LumaResidualCoding.177:                 # @LumaResidualCoding.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1246118180, -40(%rbp)  # imm = 0x4A464124
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB218_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB218_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_1
.LBB218_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB218_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB218_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB218_33
.LBB218_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB218_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB218_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB218_8 Depth=1
	movl	$0, -12(%rbp)
.LBB218_10:                             # %for.cond13
                                        #   Parent Loop BB218_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB218_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB218_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB218_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB218_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB218_14
.LBB218_13:                             # %if.else
                                        #   in Loop: Header=BB218_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB218_14:                             # %if.end
                                        #   in Loop: Header=BB218_10 Depth=2
	jmp	.LBB218_15
.LBB218_15:                             # %for.inc31
                                        #   in Loop: Header=BB218_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_10
.LBB218_16:                             # %for.end33
                                        #   in Loop: Header=BB218_8 Depth=1
	jmp	.LBB218_17
.LBB218_17:                             # %for.inc34
                                        #   in Loop: Header=BB218_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_8
.LBB218_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB218_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB218_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_22 Depth 2
                                        #       Child Loop BB218_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB218_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB218_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB218_22:                             # %for.cond45
                                        #   Parent Loop BB218_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB218_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB218_22 Depth=2
	movl	$0, -12(%rbp)
.LBB218_24:                             # %for.cond48
                                        #   Parent Loop BB218_20 Depth=1
                                        #     Parent Loop BB218_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB218_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB218_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB218_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_24
.LBB218_27:                             # %for.end55
                                        #   in Loop: Header=BB218_22 Depth=2
	jmp	.LBB218_28
.LBB218_28:                             # %for.inc56
                                        #   in Loop: Header=BB218_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_22
.LBB218_29:                             # %for.end58
                                        #   in Loop: Header=BB218_20 Depth=1
	jmp	.LBB218_30
.LBB218_30:                             # %for.inc59
                                        #   in Loop: Header=BB218_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_20
.LBB218_31:                             # %for.end61
	jmp	.LBB218_32
.LBB218_32:                             # %if.end62
	jmp	.LBB218_33
.LBB218_33:                             # %if.end63
	cmpl	$1246118180, -40(%rbp)  # imm = 0x4A464124
	jne	.LBB218_35
.LBB218_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_34
.Lfunc_end218:
	.size	LumaResidualCoding.177, .Lfunc_end218-LumaResidualCoding.177
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.178 # -- Begin function terminate_macroblock.178
	.p2align	4, 0x90
	.type	terminate_macroblock.178,@function
terminate_macroblock.178:               # @terminate_macroblock.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1685207346, -112(%rbp) # imm = 0x64723932
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB219_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB219_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB219_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB219_5
.LBB219_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB219_8
.LBB219_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB219_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB219_7:                              # %if.end
	jmp	.LBB219_8
.LBB219_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB219_45
# %bb.9:                                # %if.end18
	movq	.LJTI219_0(,%rax,8), %rax
	jmpq	*%rax
.LBB219_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB219_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB219_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB219_46
.LBB219_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB219_46
.LBB219_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB219_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB219_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB219_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB219_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB219_22
.LBB219_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB219_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB219_21:                             # %if.end64
	jmp	.LBB219_22
.LBB219_22:                             # %if.end65
	jmp	.LBB219_23
.LBB219_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB219_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB219_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB219_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB219_27:                             # %if.end79
	jmp	.LBB219_28
.LBB219_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB219_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB219_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB219_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB219_32:                             # %if.end89
	jmp	.LBB219_33
.LBB219_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB219_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB219_35:                             # %if.end95
	jmp	.LBB219_46
.LBB219_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB219_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB219_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB219_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB219_40:                             # %if.end106
	jmp	.LBB219_41
.LBB219_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB219_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB219_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB219_44:                             # %if.end118
	jmp	.LBB219_46
.LBB219_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB219_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB219_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB219_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB219_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB219_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB219_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB219_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB219_51:                             # %if.end139
                                        #   in Loop: Header=BB219_48 Depth=1
	jmp	.LBB219_52
.LBB219_52:                             # %for.inc
                                        #   in Loop: Header=BB219_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB219_48
.LBB219_53:                             # %for.end
	jmp	.LBB219_54
.LBB219_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB219_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB219_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB219_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB219_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB219_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB219_60:                             # %if.end174
	jmp	.LBB219_62
.LBB219_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB219_62:                             # %if.end188
	jmp	.LBB219_63
.LBB219_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB219_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB219_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB219_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB219_67:                             # %if.end218
	cmpl	$1685207346, -112(%rbp) # imm = 0x64723932
	jne	.LBB219_69
.LBB219_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_68
.Lfunc_end219:
	.size	terminate_macroblock.178, .Lfunc_end219-terminate_macroblock.178
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI219_0:
	.quad	.LBB219_10
	.quad	.LBB219_13
	.quad	.LBB219_14
	.quad	.LBB219_36
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.179 # -- Begin function writeMotionVector8x8.179
	.p2align	4, 0x90
	.type	writeMotionVector8x8.179,@function
writeMotionVector8x8.179:               # @writeMotionVector8x8.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1212255408, -80(%rbp)  # imm = 0x48418CB0
	movl	%edi, -88(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB220_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB220_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB220_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB220_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB220_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB220_7
.LBB220_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB220_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB220_8:                              # %if.end
	movl	-96(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB220_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_11 Depth 2
                                        #       Child Loop BB220_13 Depth 3
                                        #         Child Loop BB220_15 Depth 4
                                        #           Child Loop BB220_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB220_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB220_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB220_11:                             # %for.cond22
                                        #   Parent Loop BB220_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB220_13 Depth 3
                                        #         Child Loop BB220_15 Depth 4
                                        #           Child Loop BB220_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB220_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB220_11 Depth=2
	movl	$0, -16(%rbp)
.LBB220_13:                             # %for.cond25
                                        #   Parent Loop BB220_9 Depth=1
                                        #     Parent Loop BB220_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB220_15 Depth 4
                                        #           Child Loop BB220_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB220_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB220_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB220_15:                             # %for.cond53
                                        #   Parent Loop BB220_9 Depth=1
                                        #     Parent Loop BB220_11 Depth=2
                                        #       Parent Loop BB220_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB220_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB220_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB220_15 Depth=4
	movl	$0, -40(%rbp)
.LBB220_17:                             # %for.cond57
                                        #   Parent Loop BB220_9 Depth=1
                                        #     Parent Loop BB220_11 Depth=2
                                        #       Parent Loop BB220_13 Depth=3
                                        #         Parent Loop BB220_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB220_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB220_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB220_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB220_17
.LBB220_20:                             # %for.end
                                        #   in Loop: Header=BB220_15 Depth=4
	jmp	.LBB220_21
.LBB220_21:                             # %for.inc70
                                        #   in Loop: Header=BB220_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB220_15
.LBB220_22:                             # %for.end72
                                        #   in Loop: Header=BB220_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB220_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB220_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB220_25
.LBB220_24:                             # %if.else
                                        #   in Loop: Header=BB220_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB220_25:                             # %if.end78
                                        #   in Loop: Header=BB220_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB220_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_13
.LBB220_27:                             # %for.end90
                                        #   in Loop: Header=BB220_11 Depth=2
	jmp	.LBB220_28
.LBB220_28:                             # %for.inc91
                                        #   in Loop: Header=BB220_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_11
.LBB220_29:                             # %for.end93
                                        #   in Loop: Header=BB220_9 Depth=1
	jmp	.LBB220_30
.LBB220_30:                             # %for.inc94
                                        #   in Loop: Header=BB220_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB220_9
.LBB220_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1212255408, -80(%rbp)  # imm = 0x48418CB0
	jne	.LBB220_33
.LBB220_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_32
.Lfunc_end220:
	.size	writeMotionVector8x8.179, .Lfunc_end220-writeMotionVector8x8.179
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.180 # -- Begin function ChromaPrediction4x4.180
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.180,@function
ChromaPrediction4x4.180:                # @ChromaPrediction4x4.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$564772349, -72(%rbp)   # imm = 0x21A9BDFD
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB221_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB221_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB221_6
.LBB221_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB221_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB221_5:                              # %land.end
.LBB221_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB221_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB221_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB221_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB221_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB221_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB221_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB221_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB221_15
.LBB221_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB221_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB221_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB221_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB221_87
.LBB221_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB221_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB221_21
.LBB221_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB221_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB221_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB221_24
.LBB221_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB221_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB221_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB221_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB221_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_29:                             # %for.cond52
                                        #   Parent Loop BB221_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB221_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB221_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_29
.LBB221_32:                             # %for.end
                                        #   in Loop: Header=BB221_27 Depth=1
	jmp	.LBB221_33
.LBB221_33:                             # %for.inc99
                                        #   in Loop: Header=BB221_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_27
.LBB221_34:                             # %for.end101
	jmp	.LBB221_55
.LBB221_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB221_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB221_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_39:                             # %for.cond109
                                        #   Parent Loop BB221_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB221_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB221_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_39
.LBB221_42:                             # %for.end139
                                        #   in Loop: Header=BB221_37 Depth=1
	jmp	.LBB221_43
.LBB221_43:                             # %for.inc140
                                        #   in Loop: Header=BB221_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_37
.LBB221_44:                             # %for.end142
	jmp	.LBB221_54
.LBB221_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB221_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_48:                             # %for.cond148
                                        #   Parent Loop BB221_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB221_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB221_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_48
.LBB221_51:                             # %for.end178
                                        #   in Loop: Header=BB221_46 Depth=1
	jmp	.LBB221_52
.LBB221_52:                             # %for.inc179
                                        #   in Loop: Header=BB221_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_46
.LBB221_53:                             # %for.end181
	jmp	.LBB221_54
.LBB221_54:                             # %if.end182
	jmp	.LBB221_55
.LBB221_55:                             # %if.end183
	jmp	.LBB221_87
.LBB221_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB221_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB221_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_60:                             # %for.cond192
                                        #   Parent Loop BB221_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB221_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB221_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_60
.LBB221_63:                             # %for.end208
                                        #   in Loop: Header=BB221_58 Depth=1
	jmp	.LBB221_64
.LBB221_64:                             # %for.inc209
                                        #   in Loop: Header=BB221_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_58
.LBB221_65:                             # %for.end211
	jmp	.LBB221_86
.LBB221_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB221_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB221_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_70:                             # %for.cond220
                                        #   Parent Loop BB221_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB221_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB221_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_70
.LBB221_73:                             # %for.end233
                                        #   in Loop: Header=BB221_68 Depth=1
	jmp	.LBB221_74
.LBB221_74:                             # %for.inc234
                                        #   in Loop: Header=BB221_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_68
.LBB221_75:                             # %for.end236
	jmp	.LBB221_85
.LBB221_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB221_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB221_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB221_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB221_79:                             # %for.cond242
                                        #   Parent Loop BB221_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB221_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB221_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB221_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_79
.LBB221_82:                             # %for.end255
                                        #   in Loop: Header=BB221_77 Depth=1
	jmp	.LBB221_83
.LBB221_83:                             # %for.inc256
                                        #   in Loop: Header=BB221_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_77
.LBB221_84:                             # %for.end258
	jmp	.LBB221_85
.LBB221_85:                             # %if.end259
	jmp	.LBB221_86
.LBB221_86:                             # %if.end260
	jmp	.LBB221_87
.LBB221_87:                             # %if.end261
	cmpl	$564772349, -72(%rbp)   # imm = 0x21A9BDFD
	jne	.LBB221_89
.LBB221_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_88
.Lfunc_end221:
	.size	ChromaPrediction4x4.180, .Lfunc_end221-ChromaPrediction4x4.180
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.181        # -- Begin function B8Mode2Value.181
	.p2align	4, 0x90
	.type	B8Mode2Value.181,@function
B8Mode2Value.181:                       # @B8Mode2Value.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1431489530, -24(%rbp)  # imm = 0x5552CBFA
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB222_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_3
.LBB222_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB222_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1431489530, -24(%rbp)  # imm = 0x5552CBFA
	jne	.LBB222_5
.LBB222_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_4
.Lfunc_end222:
	.size	B8Mode2Value.181, .Lfunc_end222-B8Mode2Value.181
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.182        # -- Begin function B8Mode2Value.182
	.p2align	4, 0x90
	.type	B8Mode2Value.182,@function
B8Mode2Value.182:                       # @B8Mode2Value.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$282597835, -24(%rbp)   # imm = 0x10D819CB
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB223_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB223_3
.LBB223_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB223_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$282597835, -24(%rbp)   # imm = 0x10D819CB
	jne	.LBB223_5
.LBB223_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_4
.Lfunc_end223:
	.size	B8Mode2Value.182, .Lfunc_end223-B8Mode2Value.182
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.183             # -- Begin function ZeroRef.183
	.p2align	4, 0x90
	.type	ZeroRef.183,@function
ZeroRef.183:                            # @ZeroRef.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1184747314, -24(%rbp)  # imm = 0x469DCF32
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB224_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB224_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	$0, -12(%rbp)
.LBB224_3:                              # %for.cond1
                                        #   Parent Loop BB224_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB224_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB224_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB224_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB224_11
.LBB224_6:                              # %if.end
                                        #   in Loop: Header=BB224_3 Depth=2
	jmp	.LBB224_7
.LBB224_7:                              # %for.inc
                                        #   in Loop: Header=BB224_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB224_3
.LBB224_8:                              # %for.end
                                        #   in Loop: Header=BB224_1 Depth=1
	jmp	.LBB224_9
.LBB224_9:                              # %for.inc10
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB224_1
.LBB224_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB224_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1184747314, -24(%rbp)  # imm = 0x469DCF32
	jne	.LBB224_13
.LBB224_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_12
.Lfunc_end224:
	.size	ZeroRef.183, .Lfunc_end224-ZeroRef.183
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.184 # -- Begin function writeMotionInfo2NAL.184
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.184,@function
writeMotionInfo2NAL.184:                # @writeMotionInfo2NAL.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1451148594, -56(%rbp)  # imm = 0x567EC532
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB225_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB225_3
.LBB225_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB225_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB225_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB225_6
.LBB225_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB225_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB225_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB225_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB225_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB225_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB225_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB225_39
.LBB225_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB225_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB225_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB225_15 Depth=1
	movl	$0, -12(%rbp)
.LBB225_17:                             # %for.cond45
                                        #   Parent Loop BB225_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB225_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB225_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB225_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB225_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB225_22
.LBB225_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB225_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB225_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB225_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB225_22:                             # %if.end
                                        #   in Loop: Header=BB225_17 Depth=2
	jmp	.LBB225_23
.LBB225_23:                             # %for.inc
                                        #   in Loop: Header=BB225_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_17
.LBB225_24:                             # %for.end
                                        #   in Loop: Header=BB225_15 Depth=1
	jmp	.LBB225_25
.LBB225_25:                             # %for.inc79
                                        #   in Loop: Header=BB225_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_15
.LBB225_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB225_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB225_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB225_27 Depth=1
	movl	$0, -12(%rbp)
.LBB225_29:                             # %for.cond86
                                        #   Parent Loop BB225_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB225_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB225_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB225_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB225_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB225_34
.LBB225_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB225_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB225_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB225_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB225_34:                             # %if.end126
                                        #   in Loop: Header=BB225_29 Depth=2
	jmp	.LBB225_35
.LBB225_35:                             # %for.inc127
                                        #   in Loop: Header=BB225_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_29
.LBB225_36:                             # %for.end129
                                        #   in Loop: Header=BB225_27 Depth=1
	jmp	.LBB225_37
.LBB225_37:                             # %for.inc130
                                        #   in Loop: Header=BB225_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_27
.LBB225_38:                             # %for.end132
	jmp	.LBB225_39
.LBB225_39:                             # %if.end133
	jmp	.LBB225_40
.LBB225_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB225_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB225_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB225_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB225_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB225_45 Depth=1
	movl	$0, -12(%rbp)
.LBB225_47:                             # %for.cond155
                                        #   Parent Loop BB225_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB225_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB225_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB225_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB225_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB225_52
.LBB225_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB225_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB225_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB225_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB225_52:                             # %if.end197
                                        #   in Loop: Header=BB225_47 Depth=2
	jmp	.LBB225_53
.LBB225_53:                             # %for.inc198
                                        #   in Loop: Header=BB225_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_47
.LBB225_54:                             # %for.end200
                                        #   in Loop: Header=BB225_45 Depth=1
	jmp	.LBB225_55
.LBB225_55:                             # %for.inc201
                                        #   in Loop: Header=BB225_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_45
.LBB225_56:                             # %for.end203
	jmp	.LBB225_57
.LBB225_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB225_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB225_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB225_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB225_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB225_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB225_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB225_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB225_63 Depth=1
	movl	$0, -12(%rbp)
.LBB225_65:                             # %for.cond227
                                        #   Parent Loop BB225_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB225_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB225_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB225_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB225_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB225_70
.LBB225_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB225_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB225_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB225_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB225_70:                             # %if.end269
                                        #   in Loop: Header=BB225_65 Depth=2
	jmp	.LBB225_71
.LBB225_71:                             # %for.inc270
                                        #   in Loop: Header=BB225_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB225_65
.LBB225_72:                             # %for.end272
                                        #   in Loop: Header=BB225_63 Depth=1
	jmp	.LBB225_73
.LBB225_73:                             # %for.inc273
                                        #   in Loop: Header=BB225_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB225_63
.LBB225_74:                             # %for.end275
	jmp	.LBB225_75
.LBB225_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1451148594, -56(%rbp)  # imm = 0x567EC532
	jne	.LBB225_77
.LBB225_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_76
.Lfunc_end225:
	.size	writeMotionInfo2NAL.184, .Lfunc_end225-writeMotionInfo2NAL.184
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.185  # -- Begin function LumaResidualCoding.185
	.p2align	4, 0x90
	.type	LumaResidualCoding.185,@function
LumaResidualCoding.185:                 # @LumaResidualCoding.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1637742761, -44(%rbp)  # imm = 0x619DF8A9
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB226_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB226_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_1
.LBB226_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB226_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB226_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB226_33
.LBB226_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB226_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB226_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB226_8 Depth=1
	movl	$0, -8(%rbp)
.LBB226_10:                             # %for.cond13
                                        #   Parent Loop BB226_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB226_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB226_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB226_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB226_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB226_14
.LBB226_13:                             # %if.else
                                        #   in Loop: Header=BB226_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB226_14:                             # %if.end
                                        #   in Loop: Header=BB226_10 Depth=2
	jmp	.LBB226_15
.LBB226_15:                             # %for.inc31
                                        #   in Loop: Header=BB226_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_10
.LBB226_16:                             # %for.end33
                                        #   in Loop: Header=BB226_8 Depth=1
	jmp	.LBB226_17
.LBB226_17:                             # %for.inc34
                                        #   in Loop: Header=BB226_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB226_8
.LBB226_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB226_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB226_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB226_22 Depth 2
                                        #       Child Loop BB226_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB226_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB226_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB226_22:                             # %for.cond45
                                        #   Parent Loop BB226_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB226_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB226_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB226_22 Depth=2
	movl	$0, -8(%rbp)
.LBB226_24:                             # %for.cond48
                                        #   Parent Loop BB226_20 Depth=1
                                        #     Parent Loop BB226_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB226_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB226_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB226_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB226_24
.LBB226_27:                             # %for.end55
                                        #   in Loop: Header=BB226_22 Depth=2
	jmp	.LBB226_28
.LBB226_28:                             # %for.inc56
                                        #   in Loop: Header=BB226_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB226_22
.LBB226_29:                             # %for.end58
                                        #   in Loop: Header=BB226_20 Depth=1
	jmp	.LBB226_30
.LBB226_30:                             # %for.inc59
                                        #   in Loop: Header=BB226_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB226_20
.LBB226_31:                             # %for.end61
	jmp	.LBB226_32
.LBB226_32:                             # %if.end62
	jmp	.LBB226_33
.LBB226_33:                             # %if.end63
	cmpl	$1637742761, -44(%rbp)  # imm = 0x619DF8A9
	jne	.LBB226_35
.LBB226_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_34
.Lfunc_end226:
	.size	LumaResidualCoding.185, .Lfunc_end226-LumaResidualCoding.185
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.186 # -- Begin function writeChromaIntraPredMode.186
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.186,@function
writeChromaIntraPredMode.186:           # @writeChromaIntraPredMode.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$51644127, -36(%rbp)    # imm = 0x31406DF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB227_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB227_3
.LBB227_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB227_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$51644127, -36(%rbp)    # imm = 0x31406DF
	jne	.LBB227_5
.LBB227_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_4
.Lfunc_end227:
	.size	writeChromaIntraPredMode.186, .Lfunc_end227-writeChromaIntraPredMode.186
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.187 # -- Begin function writeMotionInfo2NAL.187
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.187,@function
writeMotionInfo2NAL.187:                # @writeMotionInfo2NAL.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1051332031, -56(%rbp)  # imm = 0x3EAA0DBF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB228_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB228_3
.LBB228_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB228_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB228_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB228_6
.LBB228_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB228_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB228_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB228_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB228_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB228_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB228_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB228_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB228_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB228_39
.LBB228_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB228_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB228_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB228_15 Depth=1
	movl	$0, -12(%rbp)
.LBB228_17:                             # %for.cond45
                                        #   Parent Loop BB228_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB228_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB228_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB228_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB228_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB228_22
.LBB228_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB228_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB228_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB228_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB228_22:                             # %if.end
                                        #   in Loop: Header=BB228_17 Depth=2
	jmp	.LBB228_23
.LBB228_23:                             # %for.inc
                                        #   in Loop: Header=BB228_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_17
.LBB228_24:                             # %for.end
                                        #   in Loop: Header=BB228_15 Depth=1
	jmp	.LBB228_25
.LBB228_25:                             # %for.inc79
                                        #   in Loop: Header=BB228_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB228_15
.LBB228_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB228_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB228_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB228_27 Depth=1
	movl	$0, -12(%rbp)
.LBB228_29:                             # %for.cond86
                                        #   Parent Loop BB228_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB228_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB228_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB228_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB228_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB228_34
.LBB228_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB228_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB228_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB228_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB228_34:                             # %if.end126
                                        #   in Loop: Header=BB228_29 Depth=2
	jmp	.LBB228_35
.LBB228_35:                             # %for.inc127
                                        #   in Loop: Header=BB228_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_29
.LBB228_36:                             # %for.end129
                                        #   in Loop: Header=BB228_27 Depth=1
	jmp	.LBB228_37
.LBB228_37:                             # %for.inc130
                                        #   in Loop: Header=BB228_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB228_27
.LBB228_38:                             # %for.end132
	jmp	.LBB228_39
.LBB228_39:                             # %if.end133
	jmp	.LBB228_40
.LBB228_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB228_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB228_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB228_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB228_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB228_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB228_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB228_45 Depth=1
	movl	$0, -12(%rbp)
.LBB228_47:                             # %for.cond155
                                        #   Parent Loop BB228_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB228_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB228_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB228_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB228_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB228_52
.LBB228_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB228_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB228_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB228_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB228_52:                             # %if.end197
                                        #   in Loop: Header=BB228_47 Depth=2
	jmp	.LBB228_53
.LBB228_53:                             # %for.inc198
                                        #   in Loop: Header=BB228_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_47
.LBB228_54:                             # %for.end200
                                        #   in Loop: Header=BB228_45 Depth=1
	jmp	.LBB228_55
.LBB228_55:                             # %for.inc201
                                        #   in Loop: Header=BB228_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB228_45
.LBB228_56:                             # %for.end203
	jmp	.LBB228_57
.LBB228_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB228_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB228_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB228_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB228_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB228_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB228_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB228_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB228_63 Depth=1
	movl	$0, -12(%rbp)
.LBB228_65:                             # %for.cond227
                                        #   Parent Loop BB228_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB228_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB228_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB228_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB228_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB228_70
.LBB228_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB228_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB228_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB228_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB228_70:                             # %if.end269
                                        #   in Loop: Header=BB228_65 Depth=2
	jmp	.LBB228_71
.LBB228_71:                             # %for.inc270
                                        #   in Loop: Header=BB228_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_65
.LBB228_72:                             # %for.end272
                                        #   in Loop: Header=BB228_63 Depth=1
	jmp	.LBB228_73
.LBB228_73:                             # %for.inc273
                                        #   in Loop: Header=BB228_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB228_63
.LBB228_74:                             # %for.end275
	jmp	.LBB228_75
.LBB228_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1051332031, -56(%rbp)  # imm = 0x3EAA0DBF
	jne	.LBB228_77
.LBB228_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_76
.Lfunc_end228:
	.size	writeMotionInfo2NAL.187, .Lfunc_end228-writeMotionInfo2NAL.187
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.188 # -- Begin function writeMotionVector8x8.188
	.p2align	4, 0x90
	.type	writeMotionVector8x8.188,@function
writeMotionVector8x8.188:               # @writeMotionVector8x8.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$571312627, -84(%rbp)   # imm = 0x220D89F3
	movl	%edi, -80(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB229_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB229_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB229_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB229_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB229_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB229_7
.LBB229_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB229_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB229_8:                              # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB229_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_11 Depth 2
                                        #       Child Loop BB229_13 Depth 3
                                        #         Child Loop BB229_15 Depth 4
                                        #           Child Loop BB229_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB229_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB229_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB229_11:                             # %for.cond22
                                        #   Parent Loop BB229_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB229_13 Depth 3
                                        #         Child Loop BB229_15 Depth 4
                                        #           Child Loop BB229_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB229_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB229_11 Depth=2
	movl	$0, -20(%rbp)
.LBB229_13:                             # %for.cond25
                                        #   Parent Loop BB229_9 Depth=1
                                        #     Parent Loop BB229_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB229_15 Depth 4
                                        #           Child Loop BB229_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB229_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB229_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB229_15:                             # %for.cond53
                                        #   Parent Loop BB229_9 Depth=1
                                        #     Parent Loop BB229_11 Depth=2
                                        #       Parent Loop BB229_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB229_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB229_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB229_15 Depth=4
	movl	$0, -44(%rbp)
.LBB229_17:                             # %for.cond57
                                        #   Parent Loop BB229_9 Depth=1
                                        #     Parent Loop BB229_11 Depth=2
                                        #       Parent Loop BB229_13 Depth=3
                                        #         Parent Loop BB229_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB229_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB229_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB229_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB229_17
.LBB229_20:                             # %for.end
                                        #   in Loop: Header=BB229_15 Depth=4
	jmp	.LBB229_21
.LBB229_21:                             # %for.inc70
                                        #   in Loop: Header=BB229_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB229_15
.LBB229_22:                             # %for.end72
                                        #   in Loop: Header=BB229_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB229_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB229_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB229_25
.LBB229_24:                             # %if.else
                                        #   in Loop: Header=BB229_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB229_25:                             # %if.end78
                                        #   in Loop: Header=BB229_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB229_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB229_13
.LBB229_27:                             # %for.end90
                                        #   in Loop: Header=BB229_11 Depth=2
	jmp	.LBB229_28
.LBB229_28:                             # %for.inc91
                                        #   in Loop: Header=BB229_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_11
.LBB229_29:                             # %for.end93
                                        #   in Loop: Header=BB229_9 Depth=1
	jmp	.LBB229_30
.LBB229_30:                             # %for.inc94
                                        #   in Loop: Header=BB229_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB229_9
.LBB229_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$571312627, -84(%rbp)   # imm = 0x220D89F3
	jne	.LBB229_33
.LBB229_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_32
.Lfunc_end229:
	.size	writeMotionVector8x8.188, .Lfunc_end229-writeMotionVector8x8.188
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.189             # -- Begin function ZeroRef.189
	.p2align	4, 0x90
	.type	ZeroRef.189,@function
ZeroRef.189:                            # @ZeroRef.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1896440698, -24(%rbp)  # imm = 0x7109637A
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB230_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB230_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB230_1 Depth=1
	movl	$0, -16(%rbp)
.LBB230_3:                              # %for.cond1
                                        #   Parent Loop BB230_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB230_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB230_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB230_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB230_11
.LBB230_6:                              # %if.end
                                        #   in Loop: Header=BB230_3 Depth=2
	jmp	.LBB230_7
.LBB230_7:                              # %for.inc
                                        #   in Loop: Header=BB230_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_3
.LBB230_8:                              # %for.end
                                        #   in Loop: Header=BB230_1 Depth=1
	jmp	.LBB230_9
.LBB230_9:                              # %for.inc10
                                        #   in Loop: Header=BB230_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_1
.LBB230_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB230_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1896440698, -24(%rbp)  # imm = 0x7109637A
	jne	.LBB230_13
.LBB230_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_12
.Lfunc_end230:
	.size	ZeroRef.189, .Lfunc_end230-ZeroRef.189
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.190 # -- Begin function LumaPrediction4x4Bi.190
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.190,@function
LumaPrediction4x4Bi.190:                # @LumaPrediction4x4Bi.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1910102222, -80(%rbp)  # imm = 0x71D9D8CE
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB231_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB231_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB231_6
.LBB231_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB231_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB231_5:                              # %land.end
.LBB231_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB231_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB231_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB231_10
.LBB231_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB231_10
.LBB231_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB231_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB231_13
.LBB231_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB231_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB231_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB231_16
.LBB231_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB231_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB231_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB231_19
.LBB231_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB231_19:                             # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB231_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB231_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB231_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_24:                             # %for.cond58
                                        #   Parent Loop BB231_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB231_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB231_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_24
.LBB231_27:                             # %for.end
                                        #   in Loop: Header=BB231_22 Depth=1
	jmp	.LBB231_28
.LBB231_28:                             # %for.inc96
                                        #   in Loop: Header=BB231_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_22
.LBB231_29:                             # %for.end98
	jmp	.LBB231_50
.LBB231_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB231_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB231_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_34:                             # %for.cond106
                                        #   Parent Loop BB231_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB231_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB231_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_34
.LBB231_37:                             # %for.end132
                                        #   in Loop: Header=BB231_32 Depth=1
	jmp	.LBB231_38
.LBB231_38:                             # %for.inc133
                                        #   in Loop: Header=BB231_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_32
.LBB231_39:                             # %for.end135
	jmp	.LBB231_49
.LBB231_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB231_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_43:                             # %for.cond141
                                        #   Parent Loop BB231_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB231_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB231_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_43
.LBB231_46:                             # %for.end167
                                        #   in Loop: Header=BB231_41 Depth=1
	jmp	.LBB231_47
.LBB231_47:                             # %for.inc168
                                        #   in Loop: Header=BB231_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_41
.LBB231_48:                             # %for.end170
	jmp	.LBB231_49
.LBB231_49:                             # %if.end171
	jmp	.LBB231_50
.LBB231_50:                             # %if.end172
	jmp	.LBB231_82
.LBB231_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB231_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB231_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_55:                             # %for.cond181
                                        #   Parent Loop BB231_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB231_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB231_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_55
.LBB231_58:                             # %for.end197
                                        #   in Loop: Header=BB231_53 Depth=1
	jmp	.LBB231_59
.LBB231_59:                             # %for.inc198
                                        #   in Loop: Header=BB231_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_53
.LBB231_60:                             # %for.end200
	jmp	.LBB231_81
.LBB231_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB231_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB231_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_65:                             # %for.cond209
                                        #   Parent Loop BB231_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB231_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB231_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_65
.LBB231_68:                             # %for.end222
                                        #   in Loop: Header=BB231_63 Depth=1
	jmp	.LBB231_69
.LBB231_69:                             # %for.inc223
                                        #   in Loop: Header=BB231_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_63
.LBB231_70:                             # %for.end225
	jmp	.LBB231_80
.LBB231_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB231_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB231_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB231_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB231_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB231_74:                             # %for.cond231
                                        #   Parent Loop BB231_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB231_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB231_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB231_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB231_74
.LBB231_77:                             # %for.end244
                                        #   in Loop: Header=BB231_72 Depth=1
	jmp	.LBB231_78
.LBB231_78:                             # %for.inc245
                                        #   in Loop: Header=BB231_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB231_72
.LBB231_79:                             # %for.end247
	jmp	.LBB231_80
.LBB231_80:                             # %if.end248
	jmp	.LBB231_81
.LBB231_81:                             # %if.end249
	jmp	.LBB231_82
.LBB231_82:                             # %if.end250
	cmpl	$1910102222, -80(%rbp)  # imm = 0x71D9D8CE
	jne	.LBB231_84
.LBB231_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_83
.Lfunc_end231:
	.size	LumaPrediction4x4Bi.190, .Lfunc_end231-LumaPrediction4x4Bi.190
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.191       # -- Begin function slice_too_big.191
	.p2align	4, 0x90
	.type	slice_too_big.191,@function
slice_too_big.191:                      # @slice_too_big.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$422307898, -56(%rbp)   # imm = 0x192BE83A
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB232_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB232_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB232_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB232_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB232_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB232_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB232_5:                              # %if.end
                                        #   in Loop: Header=BB232_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB232_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB232_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB232_7:                              # %if.end8
                                        #   in Loop: Header=BB232_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB232_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB232_21
.LBB232_9:                              # %if.end11
                                        #   in Loop: Header=BB232_2 Depth=1
	jmp	.LBB232_10
.LBB232_10:                             # %for.inc
                                        #   in Loop: Header=BB232_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_2
.LBB232_11:                             # %for.end
	jmp	.LBB232_12
.LBB232_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB232_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB232_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB232_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB232_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB232_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB232_21
.LBB232_17:                             # %if.end27
                                        #   in Loop: Header=BB232_14 Depth=1
	jmp	.LBB232_18
.LBB232_18:                             # %for.inc28
                                        #   in Loop: Header=BB232_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_14
.LBB232_19:                             # %for.end30
	jmp	.LBB232_20
.LBB232_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB232_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$422307898, -56(%rbp)   # imm = 0x192BE83A
	jne	.LBB232_23
.LBB232_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_22
.Lfunc_end232:
	.size	slice_too_big.191, .Lfunc_end232-slice_too_big.191
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.192 # -- Begin function writeChromaIntraPredMode.192
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.192,@function
writeChromaIntraPredMode.192:           # @writeChromaIntraPredMode.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$627144995, -36(%rbp)   # imm = 0x25617923
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB233_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB233_3
.LBB233_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB233_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$627144995, -36(%rbp)   # imm = 0x25617923
	jne	.LBB233_5
.LBB233_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_4
.Lfunc_end233:
	.size	writeChromaIntraPredMode.192, .Lfunc_end233-writeChromaIntraPredMode.192
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.193   # -- Begin function writeLumaCoeff8x8.193
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.193,@function
writeLumaCoeff8x8.193:                  # @writeLumaCoeff8x8.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1037298595, -36(%rbp)  # imm = 0x3DD3EBA3
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB234_2
# %bb.1:                                # %if.then
	jmp	.LBB234_2
.LBB234_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB234_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB234_15
.LBB234_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB234_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB234_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB234_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB234_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB234_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB234_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB234_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB234_10
.LBB234_9:                              # %cond.false
                                        #   in Loop: Header=BB234_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB234_10:                             # %cond.end
                                        #   in Loop: Header=BB234_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_12
.LBB234_11:                             # %if.else
                                        #   in Loop: Header=BB234_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB234_12:                             # %if.end17
                                        #   in Loop: Header=BB234_5 Depth=1
	jmp	.LBB234_13
.LBB234_13:                             # %for.inc
                                        #   in Loop: Header=BB234_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB234_5
.LBB234_14:                             # %for.end
	jmp	.LBB234_19
.LBB234_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB234_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_18
.LBB234_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB234_18:                             # %if.end27
	jmp	.LBB234_19
.LBB234_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1037298595, -36(%rbp)  # imm = 0x3DD3EBA3
	jne	.LBB234_21
.LBB234_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_20
.Lfunc_end234:
	.size	writeLumaCoeff8x8.193, .Lfunc_end234-writeLumaCoeff8x8.193
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.194 # -- Begin function LumaPrediction4x4Bi.194
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.194,@function
LumaPrediction4x4Bi.194:                # @LumaPrediction4x4Bi.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1571460421, -84(%rbp)  # imm = 0x5DAA9545
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB235_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB235_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB235_6
.LBB235_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB235_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB235_5:                              # %land.end
.LBB235_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB235_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB235_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB235_10
.LBB235_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB235_10
.LBB235_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB235_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB235_13
.LBB235_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB235_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB235_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB235_16
.LBB235_15:                             # %if.then
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB235_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB235_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB235_19
.LBB235_18:                             # %if.then39
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB235_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB235_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB235_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB235_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_24:                             # %for.cond58
                                        #   Parent Loop BB235_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB235_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB235_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_24
.LBB235_27:                             # %for.end
                                        #   in Loop: Header=BB235_22 Depth=1
	jmp	.LBB235_28
.LBB235_28:                             # %for.inc96
                                        #   in Loop: Header=BB235_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_22
.LBB235_29:                             # %for.end98
	jmp	.LBB235_50
.LBB235_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB235_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB235_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_34:                             # %for.cond106
                                        #   Parent Loop BB235_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB235_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB235_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_34
.LBB235_37:                             # %for.end132
                                        #   in Loop: Header=BB235_32 Depth=1
	jmp	.LBB235_38
.LBB235_38:                             # %for.inc133
                                        #   in Loop: Header=BB235_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_32
.LBB235_39:                             # %for.end135
	jmp	.LBB235_49
.LBB235_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB235_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_43:                             # %for.cond141
                                        #   Parent Loop BB235_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB235_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB235_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_43
.LBB235_46:                             # %for.end167
                                        #   in Loop: Header=BB235_41 Depth=1
	jmp	.LBB235_47
.LBB235_47:                             # %for.inc168
                                        #   in Loop: Header=BB235_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_41
.LBB235_48:                             # %for.end170
	jmp	.LBB235_49
.LBB235_49:                             # %if.end171
	jmp	.LBB235_50
.LBB235_50:                             # %if.end172
	jmp	.LBB235_82
.LBB235_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB235_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB235_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_55:                             # %for.cond181
                                        #   Parent Loop BB235_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB235_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB235_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_55
.LBB235_58:                             # %for.end197
                                        #   in Loop: Header=BB235_53 Depth=1
	jmp	.LBB235_59
.LBB235_59:                             # %for.inc198
                                        #   in Loop: Header=BB235_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_53
.LBB235_60:                             # %for.end200
	jmp	.LBB235_81
.LBB235_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB235_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB235_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_65:                             # %for.cond209
                                        #   Parent Loop BB235_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB235_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB235_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_65
.LBB235_68:                             # %for.end222
                                        #   in Loop: Header=BB235_63 Depth=1
	jmp	.LBB235_69
.LBB235_69:                             # %for.inc223
                                        #   in Loop: Header=BB235_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_63
.LBB235_70:                             # %for.end225
	jmp	.LBB235_80
.LBB235_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB235_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB235_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB235_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB235_74:                             # %for.cond231
                                        #   Parent Loop BB235_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB235_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB235_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB235_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB235_74
.LBB235_77:                             # %for.end244
                                        #   in Loop: Header=BB235_72 Depth=1
	jmp	.LBB235_78
.LBB235_78:                             # %for.inc245
                                        #   in Loop: Header=BB235_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB235_72
.LBB235_79:                             # %for.end247
	jmp	.LBB235_80
.LBB235_80:                             # %if.end248
	jmp	.LBB235_81
.LBB235_81:                             # %if.end249
	jmp	.LBB235_82
.LBB235_82:                             # %if.end250
	cmpl	$1571460421, -84(%rbp)  # imm = 0x5DAA9545
	jne	.LBB235_84
.LBB235_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_83
.Lfunc_end235:
	.size	LumaPrediction4x4Bi.194, .Lfunc_end235-LumaPrediction4x4Bi.194
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.195 # -- Begin function IntraChromaPrediction4x4.195
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.195,@function
IntraChromaPrediction4x4.195:           # @IntraChromaPrediction4x4.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1898137592, -28(%rbp)  # imm = 0x712347F8
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB236_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB236_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB236_3:                              # %for.cond1
                                        #   Parent Loop BB236_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB236_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB236_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB236_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB236_3
.LBB236_6:                              # %for.end
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_7
.LBB236_7:                              # %for.inc17
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB236_1
.LBB236_8:                              # %for.end19
	cmpl	$1898137592, -28(%rbp)  # imm = 0x712347F8
	jne	.LBB236_10
.LBB236_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_9
.Lfunc_end236:
	.size	IntraChromaPrediction4x4.195, .Lfunc_end236-IntraChromaPrediction4x4.195
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.196 # -- Begin function ChromaPrediction4x4.196
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.196,@function
ChromaPrediction4x4.196:                # @ChromaPrediction4x4.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1431559474, -68(%rbp)  # imm = 0x5553DD32
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB237_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB237_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB237_6
.LBB237_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB237_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB237_5:                              # %land.end
.LBB237_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB237_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB237_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB237_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB237_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB237_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB237_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB237_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB237_15
.LBB237_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB237_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB237_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB237_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB237_87
.LBB237_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB237_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB237_21
.LBB237_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB237_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB237_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB237_24
.LBB237_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB237_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB237_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB237_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB237_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_29:                             # %for.cond52
                                        #   Parent Loop BB237_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB237_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB237_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_29
.LBB237_32:                             # %for.end
                                        #   in Loop: Header=BB237_27 Depth=1
	jmp	.LBB237_33
.LBB237_33:                             # %for.inc99
                                        #   in Loop: Header=BB237_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_27
.LBB237_34:                             # %for.end101
	jmp	.LBB237_55
.LBB237_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB237_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB237_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_39:                             # %for.cond109
                                        #   Parent Loop BB237_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB237_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB237_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_39
.LBB237_42:                             # %for.end139
                                        #   in Loop: Header=BB237_37 Depth=1
	jmp	.LBB237_43
.LBB237_43:                             # %for.inc140
                                        #   in Loop: Header=BB237_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_37
.LBB237_44:                             # %for.end142
	jmp	.LBB237_54
.LBB237_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB237_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_48:                             # %for.cond148
                                        #   Parent Loop BB237_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB237_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB237_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_48
.LBB237_51:                             # %for.end178
                                        #   in Loop: Header=BB237_46 Depth=1
	jmp	.LBB237_52
.LBB237_52:                             # %for.inc179
                                        #   in Loop: Header=BB237_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_46
.LBB237_53:                             # %for.end181
	jmp	.LBB237_54
.LBB237_54:                             # %if.end182
	jmp	.LBB237_55
.LBB237_55:                             # %if.end183
	jmp	.LBB237_87
.LBB237_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB237_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB237_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_60:                             # %for.cond192
                                        #   Parent Loop BB237_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB237_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB237_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_60
.LBB237_63:                             # %for.end208
                                        #   in Loop: Header=BB237_58 Depth=1
	jmp	.LBB237_64
.LBB237_64:                             # %for.inc209
                                        #   in Loop: Header=BB237_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_58
.LBB237_65:                             # %for.end211
	jmp	.LBB237_86
.LBB237_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB237_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB237_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_70:                             # %for.cond220
                                        #   Parent Loop BB237_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB237_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB237_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_70
.LBB237_73:                             # %for.end233
                                        #   in Loop: Header=BB237_68 Depth=1
	jmp	.LBB237_74
.LBB237_74:                             # %for.inc234
                                        #   in Loop: Header=BB237_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_68
.LBB237_75:                             # %for.end236
	jmp	.LBB237_85
.LBB237_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB237_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB237_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB237_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB237_79:                             # %for.cond242
                                        #   Parent Loop BB237_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB237_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB237_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB237_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_79
.LBB237_82:                             # %for.end255
                                        #   in Loop: Header=BB237_77 Depth=1
	jmp	.LBB237_83
.LBB237_83:                             # %for.inc256
                                        #   in Loop: Header=BB237_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_77
.LBB237_84:                             # %for.end258
	jmp	.LBB237_85
.LBB237_85:                             # %if.end259
	jmp	.LBB237_86
.LBB237_86:                             # %if.end260
	jmp	.LBB237_87
.LBB237_87:                             # %if.end261
	cmpl	$1431559474, -68(%rbp)  # imm = 0x5553DD32
	jne	.LBB237_89
.LBB237_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_88
.Lfunc_end237:
	.size	ChromaPrediction4x4.196, .Lfunc_end237-ChromaPrediction4x4.196
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.197   # -- Begin function TransformDecision.197
	.p2align	4, 0x90
	.type	TransformDecision.197,@function
TransformDecision.197:                  # @TransformDecision.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$517560049, -72(%rbp)   # imm = 0x1ED956F1
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB238_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB238_3
.LBB238_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB238_3:                              # %if.end
	jmp	.LBB238_4
.LBB238_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_6 Depth 2
                                        #       Child Loop BB238_8 Depth 3
                                        #         Child Loop BB238_10 Depth 4
                                        #           Child Loop BB238_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB238_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB238_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB238_6:                              # %for.cond3
                                        #   Parent Loop BB238_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB238_8 Depth 3
                                        #         Child Loop BB238_10 Depth 4
                                        #           Child Loop BB238_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB238_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB238_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB238_8:                              # %for.cond8
                                        #   Parent Loop BB238_4 Depth=1
                                        #     Parent Loop BB238_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB238_10 Depth 4
                                        #           Child Loop BB238_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB238_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB238_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB238_10:                             # %for.cond13
                                        #   Parent Loop BB238_4 Depth=1
                                        #     Parent Loop BB238_6 Depth=2
                                        #       Parent Loop BB238_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB238_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB238_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB238_10 Depth=4
	movl	$0, -24(%rbp)
.LBB238_12:                             # %for.cond17
                                        #   Parent Loop BB238_4 Depth=1
                                        #     Parent Loop BB238_6 Depth=2
                                        #       Parent Loop BB238_8 Depth=3
                                        #         Parent Loop BB238_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB238_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB238_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB238_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB238_12
.LBB238_15:                             # %for.end
                                        #   in Loop: Header=BB238_10 Depth=4
	jmp	.LBB238_16
.LBB238_16:                             # %for.inc38
                                        #   in Loop: Header=BB238_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB238_10
.LBB238_17:                             # %for.end40
                                        #   in Loop: Header=BB238_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB238_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB238_8
.LBB238_19:                             # %for.end44
                                        #   in Loop: Header=BB238_6 Depth=2
	jmp	.LBB238_20
.LBB238_20:                             # %for.inc45
                                        #   in Loop: Header=BB238_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB238_6
.LBB238_21:                             # %for.end47
                                        #   in Loop: Header=BB238_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB238_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB238_4
.LBB238_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB238_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB238_28
.LBB238_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB238_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB238_28
.LBB238_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB238_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$517560049, -72(%rbp)   # imm = 0x1ED956F1
	jne	.LBB238_30
.LBB238_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_29
.Lfunc_end238:
	.size	TransformDecision.197, .Lfunc_end238-TransformDecision.197
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.198 # -- Begin function OneComponentLumaPrediction4x4.198
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.198,@function
OneComponentLumaPrediction4x4.198:      # @OneComponentLumaPrediction4x4.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1434021687, -92(%rbp)  # imm = 0x55796F37
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1434021687, -92(%rbp)  # imm = 0x55796F37
	jne	.LBB239_2
.LBB239_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_1
.Lfunc_end239:
	.size	OneComponentLumaPrediction4x4.198, .Lfunc_end239-OneComponentLumaPrediction4x4.198
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.199 # -- Begin function writeCBPandLumaCoeff.199
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.199,@function
writeCBPandLumaCoeff.199:               # @writeCBPandLumaCoeff.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1525251517, -108(%rbp) # imm = 0x5AE97DBD
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB240_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB240_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB240_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB240_7
.LBB240_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB240_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB240_10
.LBB240_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB240_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB240_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB240_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB240_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB240_18
.LBB240_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB240_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB240_18
.LBB240_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB240_22
.LBB240_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB240_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB240_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB240_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB240_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB240_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_26
.LBB240_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB240_29
.LBB240_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB240_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_30:                             # %if.end93
	jmp	.LBB240_31
.LBB240_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB240_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB240_42
.LBB240_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_36
.LBB240_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB240_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB240_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB240_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB240_41
.LBB240_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB240_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB240_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB240_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB240_43 Depth=1
	movl	$0, -20(%rbp)
.LBB240_45:                             # %for.cond141
                                        #   Parent Loop BB240_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB240_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB240_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB240_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB240_45
.LBB240_48:                             # %for.end
                                        #   in Loop: Header=BB240_43 Depth=1
	jmp	.LBB240_49
.LBB240_49:                             # %for.inc152
                                        #   in Loop: Header=BB240_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB240_43
.LBB240_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB240_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB240_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB240_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB240_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB240_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB240_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB240_55:                             # %if.end169
                                        #   in Loop: Header=BB240_52 Depth=1
	jmp	.LBB240_56
.LBB240_56:                             # %for.inc170
                                        #   in Loop: Header=BB240_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB240_52
.LBB240_57:                             # %for.end172
	jmp	.LBB240_101
.LBB240_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB240_70
.LBB240_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB240_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB240_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB240_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB240_63:                             # %land.end184
                                        #   in Loop: Header=BB240_61 Depth=1
	testb	$1, %al
	jne	.LBB240_64
	jmp	.LBB240_69
.LBB240_64:                             # %for.body186
                                        #   in Loop: Header=BB240_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB240_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_67
.LBB240_66:                             # %if.else196
                                        #   in Loop: Header=BB240_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_67:                             # %if.end198
                                        #   in Loop: Header=BB240_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB240_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB240_61
.LBB240_69:                             # %for.end218
	jmp	.LBB240_70
.LBB240_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB240_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB240_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_74 Depth 2
                                        #       Child Loop BB240_76 Depth 3
                                        #         Child Loop BB240_78 Depth 4
                                        #           Child Loop BB240_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB240_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB240_72 Depth=1
	movl	$0, -60(%rbp)
.LBB240_74:                             # %for.cond226
                                        #   Parent Loop BB240_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB240_76 Depth 3
                                        #         Child Loop BB240_78 Depth 4
                                        #           Child Loop BB240_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB240_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB240_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB240_76:                             # %for.cond229
                                        #   Parent Loop BB240_72 Depth=1
                                        #     Parent Loop BB240_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB240_78 Depth 4
                                        #           Child Loop BB240_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB240_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB240_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB240_78:                             # %for.cond233
                                        #   Parent Loop BB240_72 Depth=1
                                        #     Parent Loop BB240_74 Depth=2
                                        #       Parent Loop BB240_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB240_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB240_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB240_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB240_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB240_91
.LBB240_81:                             # %if.else247
                                        #   in Loop: Header=BB240_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -40(%rbp)
.LBB240_82:                             # %for.cond259
                                        #   Parent Loop BB240_72 Depth=1
                                        #     Parent Loop BB240_74 Depth=2
                                        #       Parent Loop BB240_76 Depth=3
                                        #         Parent Loop BB240_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB240_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB240_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB240_84:                             # %land.end263
                                        #   in Loop: Header=BB240_82 Depth=5
	testb	$1, %al
	jne	.LBB240_85
	jmp	.LBB240_90
.LBB240_85:                             # %for.body265
                                        #   in Loop: Header=BB240_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB240_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_88
.LBB240_87:                             # %if.else276
                                        #   in Loop: Header=BB240_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_88:                             # %if.end278
                                        #   in Loop: Header=BB240_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB240_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB240_82
.LBB240_90:                             # %for.end300
                                        #   in Loop: Header=BB240_78 Depth=4
	jmp	.LBB240_91
.LBB240_91:                             # %if.end301
                                        #   in Loop: Header=BB240_78 Depth=4
	jmp	.LBB240_92
.LBB240_92:                             # %for.inc302
                                        #   in Loop: Header=BB240_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB240_78
.LBB240_93:                             # %for.end304
                                        #   in Loop: Header=BB240_76 Depth=3
	jmp	.LBB240_94
.LBB240_94:                             # %for.inc305
                                        #   in Loop: Header=BB240_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB240_76
.LBB240_95:                             # %for.end307
                                        #   in Loop: Header=BB240_74 Depth=2
	jmp	.LBB240_96
.LBB240_96:                             # %for.inc308
                                        #   in Loop: Header=BB240_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB240_74
.LBB240_97:                             # %for.end310
                                        #   in Loop: Header=BB240_72 Depth=1
	jmp	.LBB240_98
.LBB240_98:                             # %for.inc311
                                        #   in Loop: Header=BB240_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB240_72
.LBB240_99:                             # %for.end313
	jmp	.LBB240_100
.LBB240_100:                            # %if.end314
	jmp	.LBB240_101
.LBB240_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1525251517, -108(%rbp) # imm = 0x5AE97DBD
	jne	.LBB240_103
.LBB240_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_102
.Lfunc_end240:
	.size	writeCBPandLumaCoeff.199, .Lfunc_end240-writeCBPandLumaCoeff.199
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.200   # -- Begin function TransformDecision.200
	.p2align	4, 0x90
	.type	TransformDecision.200,@function
TransformDecision.200:                  # @TransformDecision.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$165040705, -72(%rbp)   # imm = 0x9D65241
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB241_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB241_3
.LBB241_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB241_3:                              # %if.end
	jmp	.LBB241_4
.LBB241_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_6 Depth 2
                                        #       Child Loop BB241_8 Depth 3
                                        #         Child Loop BB241_10 Depth 4
                                        #           Child Loop BB241_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB241_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB241_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB241_6:                              # %for.cond3
                                        #   Parent Loop BB241_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB241_8 Depth 3
                                        #         Child Loop BB241_10 Depth 4
                                        #           Child Loop BB241_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB241_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB241_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB241_8:                              # %for.cond8
                                        #   Parent Loop BB241_4 Depth=1
                                        #     Parent Loop BB241_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB241_10 Depth 4
                                        #           Child Loop BB241_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB241_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB241_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB241_10:                             # %for.cond13
                                        #   Parent Loop BB241_4 Depth=1
                                        #     Parent Loop BB241_6 Depth=2
                                        #       Parent Loop BB241_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB241_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB241_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB241_10 Depth=4
	movl	$0, -28(%rbp)
.LBB241_12:                             # %for.cond17
                                        #   Parent Loop BB241_4 Depth=1
                                        #     Parent Loop BB241_6 Depth=2
                                        #       Parent Loop BB241_8 Depth=3
                                        #         Parent Loop BB241_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB241_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB241_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB241_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB241_12
.LBB241_15:                             # %for.end
                                        #   in Loop: Header=BB241_10 Depth=4
	jmp	.LBB241_16
.LBB241_16:                             # %for.inc38
                                        #   in Loop: Header=BB241_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB241_10
.LBB241_17:                             # %for.end40
                                        #   in Loop: Header=BB241_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB241_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_8
.LBB241_19:                             # %for.end44
                                        #   in Loop: Header=BB241_6 Depth=2
	jmp	.LBB241_20
.LBB241_20:                             # %for.inc45
                                        #   in Loop: Header=BB241_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB241_6
.LBB241_21:                             # %for.end47
                                        #   in Loop: Header=BB241_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB241_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB241_4
.LBB241_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB241_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB241_28
.LBB241_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB241_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB241_28
.LBB241_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB241_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$165040705, -72(%rbp)   # imm = 0x9D65241
	jne	.LBB241_30
.LBB241_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_29
.Lfunc_end241:
	.size	TransformDecision.200, .Lfunc_end241-TransformDecision.200
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.201         # -- Begin function predict_nnz.201
	.p2align	4, 0x90
	.type	predict_nnz.201,@function
predict_nnz.201:                        # @predict_nnz.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$356347844, -56(%rbp)   # imm = 0x153D6FC4
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB242_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB242_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB242_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB242_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB242_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB242_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB242_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB242_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB242_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB242_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB242_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB242_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB242_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB242_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$356347844, -56(%rbp)   # imm = 0x153D6FC4
	jne	.LBB242_16
.LBB242_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_15
.Lfunc_end242:
	.size	predict_nnz.201, .Lfunc_end242-predict_nnz.201
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.202 # -- Begin function LumaPrediction4x4Bi.202
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.202,@function
LumaPrediction4x4Bi.202:                # @LumaPrediction4x4Bi.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1783825732, -80(%rbp)  # imm = 0x6A530544
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB243_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB243_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB243_6
.LBB243_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB243_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB243_5:                              # %land.end
.LBB243_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB243_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB243_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB243_10
.LBB243_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB243_10
.LBB243_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB243_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB243_13
.LBB243_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB243_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB243_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB243_16
.LBB243_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB243_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB243_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB243_19
.LBB243_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB243_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB243_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB243_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB243_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_24:                             # %for.cond58
                                        #   Parent Loop BB243_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB243_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB243_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_24
.LBB243_27:                             # %for.end
                                        #   in Loop: Header=BB243_22 Depth=1
	jmp	.LBB243_28
.LBB243_28:                             # %for.inc96
                                        #   in Loop: Header=BB243_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_22
.LBB243_29:                             # %for.end98
	jmp	.LBB243_50
.LBB243_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB243_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB243_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_34:                             # %for.cond106
                                        #   Parent Loop BB243_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB243_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB243_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_34
.LBB243_37:                             # %for.end132
                                        #   in Loop: Header=BB243_32 Depth=1
	jmp	.LBB243_38
.LBB243_38:                             # %for.inc133
                                        #   in Loop: Header=BB243_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_32
.LBB243_39:                             # %for.end135
	jmp	.LBB243_49
.LBB243_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB243_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_43:                             # %for.cond141
                                        #   Parent Loop BB243_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB243_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB243_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_43
.LBB243_46:                             # %for.end167
                                        #   in Loop: Header=BB243_41 Depth=1
	jmp	.LBB243_47
.LBB243_47:                             # %for.inc168
                                        #   in Loop: Header=BB243_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_41
.LBB243_48:                             # %for.end170
	jmp	.LBB243_49
.LBB243_49:                             # %if.end171
	jmp	.LBB243_50
.LBB243_50:                             # %if.end172
	jmp	.LBB243_82
.LBB243_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB243_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB243_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_55:                             # %for.cond181
                                        #   Parent Loop BB243_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB243_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB243_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_55
.LBB243_58:                             # %for.end197
                                        #   in Loop: Header=BB243_53 Depth=1
	jmp	.LBB243_59
.LBB243_59:                             # %for.inc198
                                        #   in Loop: Header=BB243_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_53
.LBB243_60:                             # %for.end200
	jmp	.LBB243_81
.LBB243_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB243_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB243_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_65:                             # %for.cond209
                                        #   Parent Loop BB243_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB243_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB243_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_65
.LBB243_68:                             # %for.end222
                                        #   in Loop: Header=BB243_63 Depth=1
	jmp	.LBB243_69
.LBB243_69:                             # %for.inc223
                                        #   in Loop: Header=BB243_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_63
.LBB243_70:                             # %for.end225
	jmp	.LBB243_80
.LBB243_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB243_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB243_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB243_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB243_74:                             # %for.cond231
                                        #   Parent Loop BB243_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB243_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB243_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB243_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB243_74
.LBB243_77:                             # %for.end244
                                        #   in Loop: Header=BB243_72 Depth=1
	jmp	.LBB243_78
.LBB243_78:                             # %for.inc245
                                        #   in Loop: Header=BB243_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_72
.LBB243_79:                             # %for.end247
	jmp	.LBB243_80
.LBB243_80:                             # %if.end248
	jmp	.LBB243_81
.LBB243_81:                             # %if.end249
	jmp	.LBB243_82
.LBB243_82:                             # %if.end250
	cmpl	$1783825732, -80(%rbp)  # imm = 0x6A530544
	jne	.LBB243_84
.LBB243_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_83
.Lfunc_end243:
	.size	LumaPrediction4x4Bi.202, .Lfunc_end243-LumaPrediction4x4Bi.202
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.203  # -- Begin function writeIntra4x4Modes.203
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.203,@function
writeIntra4x4Modes.203:                 # @writeIntra4x4Modes.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1217820904, -68(%rbp)  # imm = 0x489678E8
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB244_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_9 Depth 2
                                        #       Child Loop BB244_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB244_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB244_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB244_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB244_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB244_8
.LBB244_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB244_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB244_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB244_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB244_17
.LBB244_8:                              # %if.then
                                        #   in Loop: Header=BB244_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -28(%rbp)
.LBB244_9:                              # %for.cond24
                                        #   Parent Loop BB244_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB244_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB244_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB244_9 Depth=2
	movl	$0, -12(%rbp)
.LBB244_11:                             # %for.cond27
                                        #   Parent Loop BB244_1 Depth=1
                                        #     Parent Loop BB244_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB244_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB244_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB244_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_11
.LBB244_14:                             # %for.end
                                        #   in Loop: Header=BB244_9 Depth=2
	jmp	.LBB244_15
.LBB244_15:                             # %for.inc42
                                        #   in Loop: Header=BB244_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB244_9
.LBB244_16:                             # %for.end44
                                        #   in Loop: Header=BB244_1 Depth=1
	jmp	.LBB244_17
.LBB244_17:                             # %if.end
                                        #   in Loop: Header=BB244_1 Depth=1
	jmp	.LBB244_18
.LBB244_18:                             # %for.inc45
                                        #   in Loop: Header=BB244_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB244_1
.LBB244_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB244_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB244_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB244_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB244_23:                             # %if.end57
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB244_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB244_26
.LBB244_25:                             # %if.else
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB244_26:                             # %if.end65
                                        #   in Loop: Header=BB244_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB244_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_20
.LBB244_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1217820904, -68(%rbp)  # imm = 0x489678E8
	jne	.LBB244_30
.LBB244_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_29
.Lfunc_end244:
	.size	writeIntra4x4Modes.203, .Lfunc_end244-writeIntra4x4Modes.203
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.204      # -- Begin function find_sad_16x16.204
	.p2align	4, 0x90
	.type	find_sad_16x16.204,@function
find_sad_16x16.204:                     # @find_sad_16x16.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1754239318, -80(%rbp)  # imm = 0x688F9156
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB245_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB245_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_1
.LBB245_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB245_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB245_20
.LBB245_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB245_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_9
.LBB245_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB245_9
.LBB245_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB245_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB245_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB245_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB245_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB245_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_14
.LBB245_13:                             # %cond.false23
                                        #   in Loop: Header=BB245_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB245_14
.LBB245_14:                             # %cond.end24
                                        #   in Loop: Header=BB245_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB245_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_10
.LBB245_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB245_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_19
.LBB245_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB245_19
.LBB245_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB245_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB245_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_42 Depth 2
                                        #       Child Loop BB245_44 Depth 3
                                        #     Child Loop BB245_50 Depth 2
                                        #       Child Loop BB245_52 Depth 3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
                                        #     Child Loop BB245_72 Depth 2
                                        #       Child Loop BB245_74 Depth 3
                                        #     Child Loop BB245_80 Depth 2
                                        #     Child Loop BB245_84 Depth 2
                                        #       Child Loop BB245_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB245_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB245_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB245_32
.LBB245_24:                             # %if.then46
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB245_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB245_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB245_28
.LBB245_27:                             # %if.then51
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_28:                             # %if.end52
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB245_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB245_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_31:                             # %if.end57
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_32
.LBB245_32:                             # %if.end58
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB245_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB245_40
.LBB245_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB245_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB245_40
.LBB245_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB245_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB245_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB245_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB245_41
.LBB245_40:                             # %if.then74
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_94
.LBB245_41:                             # %if.else75
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_42:                             # %for.cond76
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB245_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB245_42 Depth=2
	movl	$0, -12(%rbp)
.LBB245_44:                             # %for.cond79
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB245_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB245_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB245_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_44
.LBB245_47:                             # %for.end115
                                        #   in Loop: Header=BB245_42 Depth=2
	jmp	.LBB245_48
.LBB245_48:                             # %for.inc116
                                        #   in Loop: Header=BB245_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_42
.LBB245_49:                             # %for.end118
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB245_50:                             # %for.cond119
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_52 Depth 3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB245_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB245_50 Depth=2
	movl	$0, -20(%rbp)
.LBB245_52:                             # %for.cond123
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB245_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	$0, -16(%rbp)
.LBB245_54:                             # %for.cond127
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB245_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB245_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB245_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_54
.LBB245_57:                             # %for.end237
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	$0, -12(%rbp)
.LBB245_58:                             # %for.cond238
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB245_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB245_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB245_60:                             # %for.cond346
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        #         Parent Loop BB245_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB245_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB245_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB245_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB245_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB245_63:                             # %if.end363
                                        #   in Loop: Header=BB245_60 Depth=5
	jmp	.LBB245_64
.LBB245_64:                             # %for.inc364
                                        #   in Loop: Header=BB245_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_60
.LBB245_65:                             # %for.end366
                                        #   in Loop: Header=BB245_58 Depth=4
	jmp	.LBB245_66
.LBB245_66:                             # %for.inc367
                                        #   in Loop: Header=BB245_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_58
.LBB245_67:                             # %for.end369
                                        #   in Loop: Header=BB245_52 Depth=3
	jmp	.LBB245_68
.LBB245_68:                             # %for.inc370
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB245_52
.LBB245_69:                             # %for.end372
                                        #   in Loop: Header=BB245_50 Depth=2
	jmp	.LBB245_70
.LBB245_70:                             # %for.inc373
                                        #   in Loop: Header=BB245_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB245_50
.LBB245_71:                             # %for.end375
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_72:                             # %for.cond376
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB245_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB245_72 Depth=2
	movl	$0, -12(%rbp)
.LBB245_74:                             # %for.cond380
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB245_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB245_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB245_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_74
.LBB245_77:                             # %for.end397
                                        #   in Loop: Header=BB245_72 Depth=2
	jmp	.LBB245_78
.LBB245_78:                             # %for.inc398
                                        #   in Loop: Header=BB245_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_72
.LBB245_79:                             # %for.end400
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_80:                             # %for.cond401
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB245_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB245_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB245_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_80
.LBB245_83:                             # %for.end463
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -12(%rbp)
.LBB245_84:                             # %for.cond464
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB245_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB245_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB245_86:                             # %for.cond524
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB245_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB245_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB245_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_86
.LBB245_89:                             # %for.end536
                                        #   in Loop: Header=BB245_84 Depth=2
	jmp	.LBB245_90
.LBB245_90:                             # %for.inc537
                                        #   in Loop: Header=BB245_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_84
.LBB245_91:                             # %for.end539
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB245_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB245_93:                             # %if.end543
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_94
.LBB245_94:                             # %if.end544
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_95:                             # %for.inc545
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB245_21
.LBB245_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1754239318, -80(%rbp)  # imm = 0x688F9156
	jne	.LBB245_98
.LBB245_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_97
.Lfunc_end245:
	.size	find_sad_16x16.204, .Lfunc_end245-find_sad_16x16.204
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.205   # -- Begin function TransformDecision.205
	.p2align	4, 0x90
	.type	TransformDecision.205,@function
TransformDecision.205:                  # @TransformDecision.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1490488580, -80(%rbp)  # imm = 0x58D70D04
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB246_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB246_3
.LBB246_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB246_3:                              # %if.end
	jmp	.LBB246_4
.LBB246_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_6 Depth 2
                                        #       Child Loop BB246_8 Depth 3
                                        #         Child Loop BB246_10 Depth 4
                                        #           Child Loop BB246_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB246_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB246_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB246_6:                              # %for.cond3
                                        #   Parent Loop BB246_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB246_8 Depth 3
                                        #         Child Loop BB246_10 Depth 4
                                        #           Child Loop BB246_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB246_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB246_8:                              # %for.cond8
                                        #   Parent Loop BB246_4 Depth=1
                                        #     Parent Loop BB246_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB246_10 Depth 4
                                        #           Child Loop BB246_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB246_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB246_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB246_10:                             # %for.cond13
                                        #   Parent Loop BB246_4 Depth=1
                                        #     Parent Loop BB246_6 Depth=2
                                        #       Parent Loop BB246_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB246_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB246_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB246_10 Depth=4
	movl	$0, -24(%rbp)
.LBB246_12:                             # %for.cond17
                                        #   Parent Loop BB246_4 Depth=1
                                        #     Parent Loop BB246_6 Depth=2
                                        #       Parent Loop BB246_8 Depth=3
                                        #         Parent Loop BB246_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB246_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB246_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB246_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB246_12
.LBB246_15:                             # %for.end
                                        #   in Loop: Header=BB246_10 Depth=4
	jmp	.LBB246_16
.LBB246_16:                             # %for.inc38
                                        #   in Loop: Header=BB246_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB246_10
.LBB246_17:                             # %for.end40
                                        #   in Loop: Header=BB246_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB246_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB246_8
.LBB246_19:                             # %for.end44
                                        #   in Loop: Header=BB246_6 Depth=2
	jmp	.LBB246_20
.LBB246_20:                             # %for.inc45
                                        #   in Loop: Header=BB246_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB246_6
.LBB246_21:                             # %for.end47
                                        #   in Loop: Header=BB246_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB246_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB246_4
.LBB246_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB246_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB246_28
.LBB246_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB246_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB246_28
.LBB246_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB246_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1490488580, -80(%rbp)  # imm = 0x58D70D04
	jne	.LBB246_30
.LBB246_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_29
.Lfunc_end246:
	.size	TransformDecision.205, .Lfunc_end246-TransformDecision.205
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.206         # -- Begin function predict_nnz.206
	.p2align	4, 0x90
	.type	predict_nnz.206,@function
predict_nnz.206:                        # @predict_nnz.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1604822122, -56(%rbp)  # imm = 0x5FA7A46A
	movl	%edi, -44(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB247_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB247_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB247_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB247_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB247_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB247_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB247_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB247_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB247_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB247_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB247_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB247_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB247_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB247_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1604822122, -56(%rbp)  # imm = 0x5FA7A46A
	jne	.LBB247_16
.LBB247_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_15
.Lfunc_end247:
	.size	predict_nnz.206, .Lfunc_end247-predict_nnz.206
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.207 # -- Begin function SetModesAndRefframe.207
	.p2align	4, 0x90
	.type	SetModesAndRefframe.207,@function
SetModesAndRefframe.207:                # @SetModesAndRefframe.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$572731958, -60(%rbp)   # imm = 0x22233236
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB248_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB248_12
.LBB248_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB248_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB248_11
.LBB248_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB248_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB248_10
.LBB248_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB248_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB248_9
.LBB248_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB248_9:                              # %if.end
	jmp	.LBB248_10
.LBB248_10:                             # %if.end86
	jmp	.LBB248_11
.LBB248_11:                             # %if.end87
	jmp	.LBB248_12
.LBB248_12:                             # %if.end88
	cmpl	$572731958, -60(%rbp)   # imm = 0x22233236
	jne	.LBB248_14
.LBB248_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_13
.Lfunc_end248:
	.size	SetModesAndRefframe.207, .Lfunc_end248-SetModesAndRefframe.207
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.208 # -- Begin function LumaPrediction4x4Bi.208
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.208,@function
LumaPrediction4x4Bi.208:                # @LumaPrediction4x4Bi.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$819679878, -76(%rbp)   # imm = 0x30DB5286
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB249_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB249_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB249_6
.LBB249_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB249_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB249_5:                              # %land.end
.LBB249_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB249_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB249_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB249_10
.LBB249_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB249_10
.LBB249_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB249_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB249_13
.LBB249_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB249_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB249_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB249_16
.LBB249_15:                             # %if.then
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB249_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB249_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB249_19
.LBB249_18:                             # %if.then39
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB249_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB249_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB249_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB249_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_24:                             # %for.cond58
                                        #   Parent Loop BB249_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB249_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB249_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_24
.LBB249_27:                             # %for.end
                                        #   in Loop: Header=BB249_22 Depth=1
	jmp	.LBB249_28
.LBB249_28:                             # %for.inc96
                                        #   in Loop: Header=BB249_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_22
.LBB249_29:                             # %for.end98
	jmp	.LBB249_50
.LBB249_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB249_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB249_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_34:                             # %for.cond106
                                        #   Parent Loop BB249_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB249_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB249_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_34
.LBB249_37:                             # %for.end132
                                        #   in Loop: Header=BB249_32 Depth=1
	jmp	.LBB249_38
.LBB249_38:                             # %for.inc133
                                        #   in Loop: Header=BB249_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_32
.LBB249_39:                             # %for.end135
	jmp	.LBB249_49
.LBB249_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB249_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_43:                             # %for.cond141
                                        #   Parent Loop BB249_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB249_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB249_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_43
.LBB249_46:                             # %for.end167
                                        #   in Loop: Header=BB249_41 Depth=1
	jmp	.LBB249_47
.LBB249_47:                             # %for.inc168
                                        #   in Loop: Header=BB249_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_41
.LBB249_48:                             # %for.end170
	jmp	.LBB249_49
.LBB249_49:                             # %if.end171
	jmp	.LBB249_50
.LBB249_50:                             # %if.end172
	jmp	.LBB249_82
.LBB249_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB249_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB249_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_55:                             # %for.cond181
                                        #   Parent Loop BB249_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB249_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB249_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_55
.LBB249_58:                             # %for.end197
                                        #   in Loop: Header=BB249_53 Depth=1
	jmp	.LBB249_59
.LBB249_59:                             # %for.inc198
                                        #   in Loop: Header=BB249_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_53
.LBB249_60:                             # %for.end200
	jmp	.LBB249_81
.LBB249_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB249_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB249_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_65:                             # %for.cond209
                                        #   Parent Loop BB249_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB249_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB249_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_65
.LBB249_68:                             # %for.end222
                                        #   in Loop: Header=BB249_63 Depth=1
	jmp	.LBB249_69
.LBB249_69:                             # %for.inc223
                                        #   in Loop: Header=BB249_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_63
.LBB249_70:                             # %for.end225
	jmp	.LBB249_80
.LBB249_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB249_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB249_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB249_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB249_74:                             # %for.cond231
                                        #   Parent Loop BB249_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB249_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB249_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB249_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_74
.LBB249_77:                             # %for.end244
                                        #   in Loop: Header=BB249_72 Depth=1
	jmp	.LBB249_78
.LBB249_78:                             # %for.inc245
                                        #   in Loop: Header=BB249_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_72
.LBB249_79:                             # %for.end247
	jmp	.LBB249_80
.LBB249_80:                             # %if.end248
	jmp	.LBB249_81
.LBB249_81:                             # %if.end249
	jmp	.LBB249_82
.LBB249_82:                             # %if.end250
	cmpl	$819679878, -76(%rbp)   # imm = 0x30DB5286
	jne	.LBB249_84
.LBB249_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_83
.Lfunc_end249:
	.size	LumaPrediction4x4Bi.208, .Lfunc_end249-LumaPrediction4x4Bi.208
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.209 # -- Begin function writeReferenceFrame.209
	.p2align	4, 0x90
	.type	writeReferenceFrame.209,@function
writeReferenceFrame.209:                # @writeReferenceFrame.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1692945882, -84(%rbp)  # imm = 0x64E84DDA
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB250_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB250_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB250_4
.LBB250_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB250_4
.LBB250_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB250_6
# %bb.5:                                # %cond.true10
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB250_7
.LBB250_6:                              # %cond.false13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB250_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB250_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB250_18
.LBB250_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB250_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB250_11:                             # %if.end21
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB250_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB250_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB250_15
.LBB250_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB250_15:                             # %if.end33
	jmp	.LBB250_17
.LBB250_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-52(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB250_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB250_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1692945882, -84(%rbp)  # imm = 0x64E84DDA
	jne	.LBB250_20
.LBB250_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_19
.Lfunc_end250:
	.size	writeReferenceFrame.209, .Lfunc_end250-writeReferenceFrame.209
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.210 # -- Begin function writeMotionVector8x8.210
	.p2align	4, 0x90
	.type	writeMotionVector8x8.210,@function
writeMotionVector8x8.210:               # @writeMotionVector8x8.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1268218709, -96(%rbp)  # imm = 0x4B977B55
	movl	%edi, -92(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB251_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB251_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB251_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB251_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB251_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB251_7
.LBB251_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB251_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB251_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB251_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_11 Depth 2
                                        #       Child Loop BB251_13 Depth 3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB251_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB251_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB251_11:                             # %for.cond22
                                        #   Parent Loop BB251_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB251_13 Depth 3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB251_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB251_11 Depth=2
	movl	$0, -20(%rbp)
.LBB251_13:                             # %for.cond25
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB251_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -44(%rbp)
.LBB251_15:                             # %for.cond53
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        #       Parent Loop BB251_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB251_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB251_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB251_15 Depth=4
	movl	$0, -36(%rbp)
.LBB251_17:                             # %for.cond57
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        #       Parent Loop BB251_13 Depth=3
                                        #         Parent Loop BB251_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB251_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB251_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB251_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB251_17
.LBB251_20:                             # %for.end
                                        #   in Loop: Header=BB251_15 Depth=4
	jmp	.LBB251_21
.LBB251_21:                             # %for.inc70
                                        #   in Loop: Header=BB251_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB251_15
.LBB251_22:                             # %for.end72
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_25
.LBB251_24:                             # %if.else
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_25:                             # %if.end78
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_13
.LBB251_27:                             # %for.end90
                                        #   in Loop: Header=BB251_11 Depth=2
	jmp	.LBB251_28
.LBB251_28:                             # %for.inc91
                                        #   in Loop: Header=BB251_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_11
.LBB251_29:                             # %for.end93
                                        #   in Loop: Header=BB251_9 Depth=1
	jmp	.LBB251_30
.LBB251_30:                             # %for.inc94
                                        #   in Loop: Header=BB251_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB251_9
.LBB251_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1268218709, -96(%rbp)  # imm = 0x4B977B55
	jne	.LBB251_33
.LBB251_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_32
.Lfunc_end251:
	.size	writeMotionVector8x8.210, .Lfunc_end251-writeMotionVector8x8.210
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.211   # -- Begin function TransformDecision.211
	.p2align	4, 0x90
	.type	TransformDecision.211,@function
TransformDecision.211:                  # @TransformDecision.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$861555242, -80(%rbp)   # imm = 0x335A4A2A
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB252_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB252_3
.LBB252_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB252_3:                              # %if.end
	jmp	.LBB252_4
.LBB252_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_6 Depth 2
                                        #       Child Loop BB252_8 Depth 3
                                        #         Child Loop BB252_10 Depth 4
                                        #           Child Loop BB252_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB252_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB252_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB252_6:                              # %for.cond3
                                        #   Parent Loop BB252_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB252_8 Depth 3
                                        #         Child Loop BB252_10 Depth 4
                                        #           Child Loop BB252_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB252_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB252_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB252_8:                              # %for.cond8
                                        #   Parent Loop BB252_4 Depth=1
                                        #     Parent Loop BB252_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB252_10 Depth 4
                                        #           Child Loop BB252_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB252_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB252_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB252_10:                             # %for.cond13
                                        #   Parent Loop BB252_4 Depth=1
                                        #     Parent Loop BB252_6 Depth=2
                                        #       Parent Loop BB252_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB252_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB252_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB252_10 Depth=4
	movl	$0, -24(%rbp)
.LBB252_12:                             # %for.cond17
                                        #   Parent Loop BB252_4 Depth=1
                                        #     Parent Loop BB252_6 Depth=2
                                        #       Parent Loop BB252_8 Depth=3
                                        #         Parent Loop BB252_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB252_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB252_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB252_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB252_12
.LBB252_15:                             # %for.end
                                        #   in Loop: Header=BB252_10 Depth=4
	jmp	.LBB252_16
.LBB252_16:                             # %for.inc38
                                        #   in Loop: Header=BB252_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB252_10
.LBB252_17:                             # %for.end40
                                        #   in Loop: Header=BB252_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB252_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB252_8
.LBB252_19:                             # %for.end44
                                        #   in Loop: Header=BB252_6 Depth=2
	jmp	.LBB252_20
.LBB252_20:                             # %for.inc45
                                        #   in Loop: Header=BB252_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB252_6
.LBB252_21:                             # %for.end47
                                        #   in Loop: Header=BB252_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB252_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB252_4
.LBB252_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB252_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB252_28
.LBB252_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB252_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB252_28
.LBB252_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB252_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$861555242, -80(%rbp)   # imm = 0x335A4A2A
	jne	.LBB252_30
.LBB252_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_29
.Lfunc_end252:
	.size	TransformDecision.211, .Lfunc_end252-TransformDecision.211
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.212 # -- Begin function IntraChromaPrediction.212
	.p2align	4, 0x90
	.type	IntraChromaPrediction.212,@function
IntraChromaPrediction.212:              # @IntraChromaPrediction.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$186700101, -164(%rbp)  # imm = 0xB20D145
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB253_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_1
.LBB253_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB253_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB253_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB253_8
.LBB253_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB253_8
.LBB253_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB253_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB253_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB253_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB253_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB253_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB253_13
.LBB253_12:                             # %cond.false32
                                        #   in Loop: Header=BB253_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB253_13
.LBB253_13:                             # %cond.end33
                                        #   in Loop: Header=BB253_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB253_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_9
.LBB253_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB253_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB253_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB253_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB253_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB253_20
.LBB253_19:                             # %cond.false57
                                        #   in Loop: Header=BB253_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB253_20
.LBB253_20:                             # %cond.end58
                                        #   in Loop: Header=BB253_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB253_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_16
.LBB253_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB253_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB253_25
.LBB253_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB253_25
.LBB253_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB253_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB253_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB253_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB253_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB253_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB253_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB253_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB253_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB253_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB253_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_37 Depth 2
                                        #       Child Loop BB253_39 Depth 3
                                        #         Child Loop BB253_104 Depth 4
                                        #         Child Loop BB253_110 Depth 4
                                        #         Child Loop BB253_85 Depth 4
                                        #         Child Loop BB253_91 Depth 4
                                        #         Child Loop BB253_66 Depth 4
                                        #         Child Loop BB253_72 Depth 4
                                        #         Child Loop BB253_44 Depth 4
                                        #         Child Loop BB253_50 Depth 4
                                        #         Child Loop BB253_125 Depth 4
                                        #           Child Loop BB253_127 Depth 5
                                        #     Child Loop BB253_138 Depth 2
                                        #     Child Loop BB253_142 Depth 2
                                        #       Child Loop BB253_144 Depth 3
                                        #     Child Loop BB253_153 Depth 2
                                        #     Child Loop BB253_157 Depth 2
                                        #       Child Loop BB253_159 Depth 3
                                        #     Child Loop BB253_170 Depth 2
                                        #     Child Loop BB253_174 Depth 2
                                        #     Child Loop BB253_178 Depth 2
                                        #       Child Loop BB253_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB253_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB253_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB253_37:                             # %for.cond95
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_39 Depth 3
                                        #         Child Loop BB253_104 Depth 4
                                        #         Child Loop BB253_110 Depth 4
                                        #         Child Loop BB253_85 Depth 4
                                        #         Child Loop BB253_91 Depth 4
                                        #         Child Loop BB253_66 Depth 4
                                        #         Child Loop BB253_72 Depth 4
                                        #         Child Loop BB253_44 Depth 4
                                        #         Child Loop BB253_50 Depth 4
                                        #         Child Loop BB253_125 Depth 4
                                        #           Child Loop BB253_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB253_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB253_37 Depth=2
	movl	$0, -84(%rbp)
.LBB253_39:                             # %for.cond99
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB253_104 Depth 4
                                        #         Child Loop BB253_110 Depth 4
                                        #         Child Loop BB253_85 Depth 4
                                        #         Child Loop BB253_91 Depth 4
                                        #         Child Loop BB253_66 Depth 4
                                        #         Child Loop BB253_72 Depth 4
                                        #         Child Loop BB253_44 Depth 4
                                        #         Child Loop BB253_50 Depth 4
                                        #         Child Loop BB253_125 Depth 4
                                        #           Child Loop BB253_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB253_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB253_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB253_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB253_39 Depth=3
	movq	.LJTI253_0(,%rax,8), %rax
	jmpq	*%rax
.LBB253_42:                             # %sw.bb
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_44:                             # %for.cond124
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB253_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB253_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_44
.LBB253_47:                             # %for.end138
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_48
.LBB253_48:                             # %if.end139
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB253_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_50:                             # %for.cond143
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB253_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB253_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_50
.LBB253_53:                             # %for.end162
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_54
.LBB253_54:                             # %if.end163
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB253_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_63
.LBB253_57:                             # %if.else
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_62
.LBB253_59:                             # %if.else174
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB253_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB253_61:                             # %if.end180
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_62
.LBB253_62:                             # %if.end181
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_63
.LBB253_63:                             # %if.end182
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_124
.LBB253_64:                             # %sw.bb183
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_66:                             # %for.cond186
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB253_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB253_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_66
.LBB253_69:                             # %for.end202
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_77
.LBB253_70:                             # %if.else203
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB253_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_72:                             # %for.cond207
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB253_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB253_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_72
.LBB253_75:                             # %for.end226
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_76
.LBB253_76:                             # %if.end227
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_77
.LBB253_77:                             # %if.end228
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_82
.LBB253_79:                             # %if.else233
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB253_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB253_81:                             # %if.end239
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_82
.LBB253_82:                             # %if.end240
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_124
.LBB253_83:                             # %sw.bb241
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB253_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_85:                             # %for.cond245
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB253_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB253_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_85
.LBB253_88:                             # %for.end264
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_96
.LBB253_89:                             # %if.else265
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_91:                             # %for.cond268
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB253_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB253_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_91
.LBB253_94:                             # %for.end284
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_95
.LBB253_95:                             # %if.end285
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_96
.LBB253_96:                             # %if.end286
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB253_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_101
.LBB253_98:                             # %if.else292
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB253_100:                            # %if.end297
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_101
.LBB253_101:                            # %if.end298
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_124
.LBB253_102:                            # %sw.bb299
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_104:                            # %for.cond302
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB253_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB253_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_104
.LBB253_107:                            # %for.end318
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_108
.LBB253_108:                            # %if.end319
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB253_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_110:                            # %for.cond323
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB253_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB253_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_110
.LBB253_113:                            # %for.end342
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_114
.LBB253_114:                            # %if.end343
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB253_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_123
.LBB253_117:                            # %if.else352
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB253_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_122
.LBB253_119:                            # %if.else357
                                        #   in Loop: Header=BB253_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB253_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB253_121:                            # %if.end363
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_122
.LBB253_122:                            # %if.end364
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_123
.LBB253_123:                            # %if.end365
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_124
.LBB253_124:                            # %sw.epilog
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB253_125:                            # %for.cond366
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB253_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB253_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_127:                            # %for.cond371
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_37 Depth=2
                                        #       Parent Loop BB253_39 Depth=3
                                        #         Parent Loop BB253_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB253_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB253_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_127
.LBB253_130:                            # %for.end386
                                        #   in Loop: Header=BB253_125 Depth=4
	jmp	.LBB253_131
.LBB253_131:                            # %for.inc387
                                        #   in Loop: Header=BB253_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB253_125
.LBB253_132:                            # %for.end389
                                        #   in Loop: Header=BB253_39 Depth=3
	jmp	.LBB253_133
.LBB253_133:                            # %for.inc390
                                        #   in Loop: Header=BB253_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB253_39
.LBB253_134:                            # %for.end392
                                        #   in Loop: Header=BB253_37 Depth=2
	jmp	.LBB253_135
.LBB253_135:                            # %for.inc393
                                        #   in Loop: Header=BB253_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB253_37
.LBB253_136:                            # %for.end395
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB253_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	$0, -4(%rbp)
.LBB253_138:                            # %for.cond398
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB253_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB253_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB253_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_138
.LBB253_141:                            # %for.end414
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	$0, -4(%rbp)
.LBB253_142:                            # %for.cond415
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB253_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB253_142 Depth=2
	movl	$0, -8(%rbp)
.LBB253_144:                            # %for.cond419
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB253_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB253_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB253_144
.LBB253_147:                            # %for.end436
                                        #   in Loop: Header=BB253_142 Depth=2
	jmp	.LBB253_148
.LBB253_148:                            # %for.inc437
                                        #   in Loop: Header=BB253_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_142
.LBB253_149:                            # %for.end439
                                        #   in Loop: Header=BB253_35 Depth=1
	jmp	.LBB253_150
.LBB253_150:                            # %if.end440
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB253_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB253_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	$0, -4(%rbp)
.LBB253_153:                            # %for.cond447
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB253_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB253_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_153
.LBB253_156:                            # %for.end468
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	$0, -4(%rbp)
.LBB253_157:                            # %for.cond469
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB253_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB253_157 Depth=2
	movl	$0, -8(%rbp)
.LBB253_159:                            # %for.cond473
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB253_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB253_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB253_159
.LBB253_162:                            # %for.end490
                                        #   in Loop: Header=BB253_157 Depth=2
	jmp	.LBB253_163
.LBB253_163:                            # %for.inc491
                                        #   in Loop: Header=BB253_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_157
.LBB253_164:                            # %for.end493
                                        #   in Loop: Header=BB253_35 Depth=1
	jmp	.LBB253_165
.LBB253_165:                            # %if.end494
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB253_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB253_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB253_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB253_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB253_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB253_170:                            # %for.cond519
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB253_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB253_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB253_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_170
.LBB253_173:                            # %for.end540
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB253_174:                            # %for.cond556
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB253_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB253_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB253_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_174
.LBB253_177:                            # %for.end577
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB253_178:                            # %for.cond606
                                        #   Parent Loop BB253_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB253_178 Depth=2
	movl	$0, -4(%rbp)
.LBB253_180:                            # %for.cond610
                                        #   Parent Loop BB253_35 Depth=1
                                        #     Parent Loop BB253_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB253_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB253_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB253_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB253_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB253_184
.LBB253_183:                            # %cond.false630
                                        #   in Loop: Header=BB253_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB253_184:                            # %cond.end643
                                        #   in Loop: Header=BB253_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB253_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB253_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB253_190
.LBB253_186:                            # %cond.false648
                                        #   in Loop: Header=BB253_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB253_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB253_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB253_189
.LBB253_188:                            # %cond.false666
                                        #   in Loop: Header=BB253_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB253_189:                            # %cond.end679
                                        #   in Loop: Header=BB253_180 Depth=3
.LBB253_190:                            # %cond.end681
                                        #   in Loop: Header=BB253_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB253_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_180
.LBB253_192:                            # %for.end694
                                        #   in Loop: Header=BB253_178 Depth=2
	jmp	.LBB253_193
.LBB253_193:                            # %for.inc695
                                        #   in Loop: Header=BB253_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB253_178
.LBB253_194:                            # %for.end697
                                        #   in Loop: Header=BB253_35 Depth=1
	jmp	.LBB253_195
.LBB253_195:                            # %if.end698
                                        #   in Loop: Header=BB253_35 Depth=1
	jmp	.LBB253_196
.LBB253_196:                            # %for.inc699
                                        #   in Loop: Header=BB253_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB253_35
.LBB253_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB253_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB253_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB253_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB253_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_199
.LBB253_202:                            # %for.end712
	movl	$0, -48(%rbp)
.LBB253_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_219 Depth 2
                                        #       Child Loop BB253_221 Depth 3
                                        #         Child Loop BB253_223 Depth 4
                                        #           Child Loop BB253_225 Depth 5
                                        #             Child Loop BB253_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB253_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB253_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB253_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB253_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB253_203 Depth=1
	jmp	.LBB253_241
.LBB253_207:                            # %if.end723
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB253_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB253_217
.LBB253_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB253_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB253_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB253_217
.LBB253_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB253_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB253_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB253_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB253_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB253_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB253_218
.LBB253_217:                            # %if.then749
                                        #   in Loop: Header=BB253_203 Depth=1
	jmp	.LBB253_241
.LBB253_218:                            # %if.end750
                                        #   in Loop: Header=BB253_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB253_219:                            # %for.cond751
                                        #   Parent Loop BB253_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_221 Depth 3
                                        #         Child Loop BB253_223 Depth 4
                                        #           Child Loop BB253_225 Depth 5
                                        #             Child Loop BB253_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB253_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB253_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB253_221:                            # %for.cond757
                                        #   Parent Loop BB253_203 Depth=1
                                        #     Parent Loop BB253_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB253_223 Depth 4
                                        #           Child Loop BB253_225 Depth 5
                                        #             Child Loop BB253_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB253_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB253_221 Depth=3
	movl	$0, -44(%rbp)
.LBB253_223:                            # %for.cond761
                                        #   Parent Loop BB253_203 Depth=1
                                        #     Parent Loop BB253_219 Depth=2
                                        #       Parent Loop BB253_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB253_225 Depth 5
                                        #             Child Loop BB253_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB253_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB253_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB253_225:                            # %for.cond765
                                        #   Parent Loop BB253_203 Depth=1
                                        #     Parent Loop BB253_219 Depth=2
                                        #       Parent Loop BB253_221 Depth=3
                                        #         Parent Loop BB253_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB253_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB253_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB253_227:                            # %for.cond770
                                        #   Parent Loop BB253_203 Depth=1
                                        #     Parent Loop BB253_219 Depth=2
                                        #       Parent Loop BB253_221 Depth=3
                                        #         Parent Loop BB253_223 Depth=4
                                        #           Parent Loop BB253_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB253_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB253_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB253_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB253_227
.LBB253_230:                            # %for.end803
                                        #   in Loop: Header=BB253_225 Depth=5
	jmp	.LBB253_231
.LBB253_231:                            # %for.inc804
                                        #   in Loop: Header=BB253_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB253_225
.LBB253_232:                            # %for.end806
                                        #   in Loop: Header=BB253_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB253_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB253_223
.LBB253_234:                            # %for.end810
                                        #   in Loop: Header=BB253_221 Depth=3
	jmp	.LBB253_235
.LBB253_235:                            # %for.inc811
                                        #   in Loop: Header=BB253_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB253_221
.LBB253_236:                            # %for.end813
                                        #   in Loop: Header=BB253_219 Depth=2
	jmp	.LBB253_237
.LBB253_237:                            # %for.inc814
                                        #   in Loop: Header=BB253_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB253_219
.LBB253_238:                            # %for.end816
                                        #   in Loop: Header=BB253_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB253_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB253_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB253_240:                            # %if.end820
                                        #   in Loop: Header=BB253_203 Depth=1
	jmp	.LBB253_241
.LBB253_241:                            # %for.inc821
                                        #   in Loop: Header=BB253_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB253_203
.LBB253_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB253_243:                            # %if.end824
	cmpl	$186700101, -164(%rbp)  # imm = 0xB20D145
	jne	.LBB253_245
.LBB253_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_244
.Lfunc_end253:
	.size	IntraChromaPrediction.212, .Lfunc_end253-IntraChromaPrediction.212
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI253_0:
	.quad	.LBB253_42
	.quad	.LBB253_64
	.quad	.LBB253_83
	.quad	.LBB253_102
                                        # -- End function
	.text
	.globl	ZeroRef.213             # -- Begin function ZeroRef.213
	.p2align	4, 0x90
	.type	ZeroRef.213,@function
ZeroRef.213:                            # @ZeroRef.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1341613099, -24(%rbp)  # imm = 0x4FF7642B
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB254_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB254_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB254_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB254_1 Depth=1
	movl	$0, -16(%rbp)
.LBB254_3:                              # %for.cond1
                                        #   Parent Loop BB254_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB254_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB254_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB254_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB254_11
.LBB254_6:                              # %if.end
                                        #   in Loop: Header=BB254_3 Depth=2
	jmp	.LBB254_7
.LBB254_7:                              # %for.inc
                                        #   in Loop: Header=BB254_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB254_3
.LBB254_8:                              # %for.end
                                        #   in Loop: Header=BB254_1 Depth=1
	jmp	.LBB254_9
.LBB254_9:                              # %for.inc10
                                        #   in Loop: Header=BB254_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_1
.LBB254_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB254_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1341613099, -24(%rbp)  # imm = 0x4FF7642B
	jne	.LBB254_13
.LBB254_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_12
.Lfunc_end254:
	.size	ZeroRef.213, .Lfunc_end254-ZeroRef.213
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.214   # -- Begin function LumaPrediction4x4.214
	.p2align	4, 0x90
	.type	LumaPrediction4x4.214,@function
LumaPrediction4x4.214:                  # @LumaPrediction4x4.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1326958869, -100(%rbp) # imm = 0x4F17C915
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB255_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB255_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB255_6
.LBB255_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB255_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB255_5:                              # %land.end
.LBB255_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB255_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB255_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB255_10
.LBB255_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB255_10
.LBB255_10:                             # %cond.end
	movl	%ecx, -76(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB255_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB255_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB255_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB255_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB255_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB255_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB255_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB255_19
.LBB255_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB255_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB255_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB255_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB255_23
.LBB255_22:                             # %if.then45
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB255_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB255_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB255_26
.LBB255_25:                             # %if.then64
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB255_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB255_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB255_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB255_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_31:                             # %for.cond85
                                        #   Parent Loop BB255_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB255_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB255_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_31
.LBB255_34:                             # %for.end
                                        #   in Loop: Header=BB255_29 Depth=1
	jmp	.LBB255_35
.LBB255_35:                             # %for.inc125
                                        #   in Loop: Header=BB255_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_29
.LBB255_36:                             # %for.end127
	jmp	.LBB255_57
.LBB255_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB255_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB255_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_41:                             # %for.cond135
                                        #   Parent Loop BB255_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB255_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB255_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_41
.LBB255_44:                             # %for.end161
                                        #   in Loop: Header=BB255_39 Depth=1
	jmp	.LBB255_45
.LBB255_45:                             # %for.inc162
                                        #   in Loop: Header=BB255_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_39
.LBB255_46:                             # %for.end164
	jmp	.LBB255_56
.LBB255_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB255_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_50:                             # %for.cond170
                                        #   Parent Loop BB255_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB255_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB255_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_50
.LBB255_53:                             # %for.end196
                                        #   in Loop: Header=BB255_48 Depth=1
	jmp	.LBB255_54
.LBB255_54:                             # %for.inc197
                                        #   in Loop: Header=BB255_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_48
.LBB255_55:                             # %for.end199
	jmp	.LBB255_56
.LBB255_56:                             # %if.end200
	jmp	.LBB255_57
.LBB255_57:                             # %if.end201
	jmp	.LBB255_89
.LBB255_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB255_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB255_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_62:                             # %for.cond210
                                        #   Parent Loop BB255_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB255_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB255_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_62
.LBB255_65:                             # %for.end226
                                        #   in Loop: Header=BB255_60 Depth=1
	jmp	.LBB255_66
.LBB255_66:                             # %for.inc227
                                        #   in Loop: Header=BB255_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_60
.LBB255_67:                             # %for.end229
	jmp	.LBB255_88
.LBB255_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB255_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB255_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_72:                             # %for.cond238
                                        #   Parent Loop BB255_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB255_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB255_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_72
.LBB255_75:                             # %for.end251
                                        #   in Loop: Header=BB255_70 Depth=1
	jmp	.LBB255_76
.LBB255_76:                             # %for.inc252
                                        #   in Loop: Header=BB255_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_70
.LBB255_77:                             # %for.end254
	jmp	.LBB255_87
.LBB255_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB255_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_81:                             # %for.cond260
                                        #   Parent Loop BB255_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB255_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB255_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_81
.LBB255_84:                             # %for.end273
                                        #   in Loop: Header=BB255_79 Depth=1
	jmp	.LBB255_85
.LBB255_85:                             # %for.inc274
                                        #   in Loop: Header=BB255_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_79
.LBB255_86:                             # %for.end276
	jmp	.LBB255_87
.LBB255_87:                             # %if.end277
	jmp	.LBB255_88
.LBB255_88:                             # %if.end278
	jmp	.LBB255_89
.LBB255_89:                             # %if.end279
	cmpl	$1326958869, -100(%rbp) # imm = 0x4F17C915
	jne	.LBB255_91
.LBB255_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_90
.Lfunc_end255:
	.size	LumaPrediction4x4.214, .Lfunc_end255-LumaPrediction4x4.214
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.215 # -- Begin function LumaPrediction4x4Bi.215
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.215,@function
LumaPrediction4x4Bi.215:                # @LumaPrediction4x4Bi.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$27454110, -80(%rbp)    # imm = 0x1A2EA9E
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB256_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB256_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB256_6
.LBB256_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB256_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB256_5:                              # %land.end
.LBB256_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB256_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB256_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB256_10
.LBB256_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB256_10
.LBB256_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB256_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB256_13
.LBB256_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB256_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB256_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB256_16
.LBB256_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB256_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB256_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB256_19
.LBB256_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB256_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB256_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB256_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB256_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_24:                             # %for.cond58
                                        #   Parent Loop BB256_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB256_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB256_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_24
.LBB256_27:                             # %for.end
                                        #   in Loop: Header=BB256_22 Depth=1
	jmp	.LBB256_28
.LBB256_28:                             # %for.inc96
                                        #   in Loop: Header=BB256_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_22
.LBB256_29:                             # %for.end98
	jmp	.LBB256_50
.LBB256_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB256_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB256_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_34:                             # %for.cond106
                                        #   Parent Loop BB256_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB256_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB256_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_34
.LBB256_37:                             # %for.end132
                                        #   in Loop: Header=BB256_32 Depth=1
	jmp	.LBB256_38
.LBB256_38:                             # %for.inc133
                                        #   in Loop: Header=BB256_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_32
.LBB256_39:                             # %for.end135
	jmp	.LBB256_49
.LBB256_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB256_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_43:                             # %for.cond141
                                        #   Parent Loop BB256_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB256_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB256_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_43
.LBB256_46:                             # %for.end167
                                        #   in Loop: Header=BB256_41 Depth=1
	jmp	.LBB256_47
.LBB256_47:                             # %for.inc168
                                        #   in Loop: Header=BB256_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_41
.LBB256_48:                             # %for.end170
	jmp	.LBB256_49
.LBB256_49:                             # %if.end171
	jmp	.LBB256_50
.LBB256_50:                             # %if.end172
	jmp	.LBB256_82
.LBB256_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB256_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB256_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_55:                             # %for.cond181
                                        #   Parent Loop BB256_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB256_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB256_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_55
.LBB256_58:                             # %for.end197
                                        #   in Loop: Header=BB256_53 Depth=1
	jmp	.LBB256_59
.LBB256_59:                             # %for.inc198
                                        #   in Loop: Header=BB256_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_53
.LBB256_60:                             # %for.end200
	jmp	.LBB256_81
.LBB256_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB256_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB256_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_65:                             # %for.cond209
                                        #   Parent Loop BB256_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB256_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB256_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_65
.LBB256_68:                             # %for.end222
                                        #   in Loop: Header=BB256_63 Depth=1
	jmp	.LBB256_69
.LBB256_69:                             # %for.inc223
                                        #   in Loop: Header=BB256_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_63
.LBB256_70:                             # %for.end225
	jmp	.LBB256_80
.LBB256_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB256_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB256_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_74:                             # %for.cond231
                                        #   Parent Loop BB256_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB256_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB256_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB256_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_74
.LBB256_77:                             # %for.end244
                                        #   in Loop: Header=BB256_72 Depth=1
	jmp	.LBB256_78
.LBB256_78:                             # %for.inc245
                                        #   in Loop: Header=BB256_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_72
.LBB256_79:                             # %for.end247
	jmp	.LBB256_80
.LBB256_80:                             # %if.end248
	jmp	.LBB256_81
.LBB256_81:                             # %if.end249
	jmp	.LBB256_82
.LBB256_82:                             # %if.end250
	cmpl	$27454110, -80(%rbp)    # imm = 0x1A2EA9E
	jne	.LBB256_84
.LBB256_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_83
.Lfunc_end256:
	.size	LumaPrediction4x4Bi.215, .Lfunc_end256-LumaPrediction4x4Bi.215
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.216 # -- Begin function OneComponentLumaPrediction4x4.216
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.216,@function
OneComponentLumaPrediction4x4.216:      # @OneComponentLumaPrediction4x4.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$774164362, -92(%rbp)   # imm = 0x2E24CF8A
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$774164362, -92(%rbp)   # imm = 0x2E24CF8A
	jne	.LBB257_2
.LBB257_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_1
.Lfunc_end257:
	.size	OneComponentLumaPrediction4x4.216, .Lfunc_end257-OneComponentLumaPrediction4x4.216
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.217  # -- Begin function predict_nnz_chroma.217
	.p2align	4, 0x90
	.type	predict_nnz_chroma.217,@function
predict_nnz_chroma.217:                 # @predict_nnz_chroma.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1744216719, -64(%rbp)  # imm = 0x67F6A28F
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB258_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB258_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB258_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB258_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB258_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB258_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB258_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB258_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB258_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB258_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB258_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB258_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB258_13:                             # %if.end57
	jmp	.LBB258_27
.LBB258_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB258_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB258_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB258_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB258_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB258_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB258_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB258_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB258_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB258_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB258_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB258_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB258_26:                             # %if.end124
	jmp	.LBB258_27
.LBB258_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB258_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB258_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1744216719, -64(%rbp)  # imm = 0x67F6A28F
	jne	.LBB258_31
.LBB258_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_30
.Lfunc_end258:
	.size	predict_nnz_chroma.217, .Lfunc_end258-predict_nnz_chroma.217
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.218 # -- Begin function IntraChromaPrediction.218
	.p2align	4, 0x90
	.type	IntraChromaPrediction.218,@function
IntraChromaPrediction.218:              # @IntraChromaPrediction.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$24040974, -164(%rbp)   # imm = 0x16ED60E
	movq	%rdi, -176(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB259_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB259_1 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB259_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_1
.LBB259_4:                              # %for.end
	movl	-124(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB259_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB259_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_8
.LBB259_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB259_8
.LBB259_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB259_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB259_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB259_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB259_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB259_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_13
.LBB259_12:                             # %cond.false32
                                        #   in Loop: Header=BB259_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB259_13
.LBB259_13:                             # %cond.end33
                                        #   in Loop: Header=BB259_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB259_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_9
.LBB259_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB259_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB259_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB259_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB259_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_20
.LBB259_19:                             # %cond.false57
                                        #   in Loop: Header=BB259_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB259_20
.LBB259_20:                             # %cond.end58
                                        #   in Loop: Header=BB259_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB259_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_16
.LBB259_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB259_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB259_25
.LBB259_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB259_25
.LBB259_25:                             # %cond.end75
	movl	%eax, -104(%rbp)
.LBB259_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB259_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB259_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB259_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB259_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB259_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB259_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB259_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_37 Depth 2
                                        #       Child Loop BB259_39 Depth 3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
                                        #     Child Loop BB259_138 Depth 2
                                        #     Child Loop BB259_142 Depth 2
                                        #       Child Loop BB259_144 Depth 3
                                        #     Child Loop BB259_153 Depth 2
                                        #     Child Loop BB259_157 Depth 2
                                        #       Child Loop BB259_159 Depth 3
                                        #     Child Loop BB259_170 Depth 2
                                        #     Child Loop BB259_174 Depth 2
                                        #     Child Loop BB259_178 Depth 2
                                        #       Child Loop BB259_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB259_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB259_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB259_37:                             # %for.cond95
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_39 Depth 3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB259_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB259_37 Depth=2
	movl	$0, -88(%rbp)
.LBB259_39:                             # %for.cond99
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_104 Depth 4
                                        #         Child Loop BB259_110 Depth 4
                                        #         Child Loop BB259_85 Depth 4
                                        #         Child Loop BB259_91 Depth 4
                                        #         Child Loop BB259_66 Depth 4
                                        #         Child Loop BB259_72 Depth 4
                                        #         Child Loop BB259_44 Depth 4
                                        #         Child Loop BB259_50 Depth 4
                                        #         Child Loop BB259_125 Depth 4
                                        #           Child Loop BB259_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB259_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB259_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB259_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB259_39 Depth=3
	movq	.LJTI259_0(,%rax,8), %rax
	jmpq	*%rax
.LBB259_42:                             # %sw.bb
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_44:                             # %for.cond124
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB259_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB259_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_44
.LBB259_47:                             # %for.end138
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_48
.LBB259_48:                             # %if.end139
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_50:                             # %for.cond143
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB259_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB259_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_50
.LBB259_53:                             # %for.end162
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_54
.LBB259_54:                             # %if.end163
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_63
.LBB259_57:                             # %if.else
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_62
.LBB259_59:                             # %if.else174
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_61:                             # %if.end180
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_62
.LBB259_62:                             # %if.end181
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_63
.LBB259_63:                             # %if.end182
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_64:                             # %sw.bb183
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_66:                             # %for.cond186
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB259_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB259_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_66
.LBB259_69:                             # %for.end202
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_77
.LBB259_70:                             # %if.else203
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_72:                             # %for.cond207
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB259_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB259_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_72
.LBB259_75:                             # %for.end226
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_76
.LBB259_76:                             # %if.end227
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_77
.LBB259_77:                             # %if.end228
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_82
.LBB259_79:                             # %if.else233
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB259_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_81:                             # %if.end239
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_82
.LBB259_82:                             # %if.end240
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_83:                             # %sw.bb241
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_85:                             # %for.cond245
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB259_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB259_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_85
.LBB259_88:                             # %for.end264
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_96
.LBB259_89:                             # %if.else265
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_91:                             # %for.cond268
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB259_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB259_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_91
.LBB259_94:                             # %for.end284
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_95
.LBB259_95:                             # %if.end285
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_96
.LBB259_96:                             # %if.end286
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_101
.LBB259_98:                             # %if.else292
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_100:                            # %if.end297
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_101
.LBB259_101:                            # %if.end298
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_102:                            # %sw.bb299
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_104:                            # %for.cond302
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB259_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB259_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_104
.LBB259_107:                            # %for.end318
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_108
.LBB259_108:                            # %if.end319
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_110:                            # %for.cond323
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB259_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB259_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_110
.LBB259_113:                            # %for.end342
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_114
.LBB259_114:                            # %if.end343
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_123
.LBB259_117:                            # %if.else352
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB259_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB259_122
.LBB259_119:                            # %if.else357
                                        #   in Loop: Header=BB259_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB259_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB259_121:                            # %if.end363
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_122
.LBB259_122:                            # %if.end364
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_123
.LBB259_123:                            # %if.end365
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_124
.LBB259_124:                            # %sw.epilog
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB259_125:                            # %for.cond366
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB259_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB259_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_127:                            # %for.cond371
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_37 Depth=2
                                        #       Parent Loop BB259_39 Depth=3
                                        #         Parent Loop BB259_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB259_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB259_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_127
.LBB259_130:                            # %for.end386
                                        #   in Loop: Header=BB259_125 Depth=4
	jmp	.LBB259_131
.LBB259_131:                            # %for.inc387
                                        #   in Loop: Header=BB259_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_125
.LBB259_132:                            # %for.end389
                                        #   in Loop: Header=BB259_39 Depth=3
	jmp	.LBB259_133
.LBB259_133:                            # %for.inc390
                                        #   in Loop: Header=BB259_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB259_39
.LBB259_134:                            # %for.end392
                                        #   in Loop: Header=BB259_37 Depth=2
	jmp	.LBB259_135
.LBB259_135:                            # %for.inc393
                                        #   in Loop: Header=BB259_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB259_37
.LBB259_136:                            # %for.end395
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_138:                            # %for.cond398
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB259_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB259_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_138
.LBB259_141:                            # %for.end414
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_142:                            # %for.cond415
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB259_142 Depth=2
	movl	$0, -8(%rbp)
.LBB259_144:                            # %for.cond419
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB259_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB259_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_144
.LBB259_147:                            # %for.end436
                                        #   in Loop: Header=BB259_142 Depth=2
	jmp	.LBB259_148
.LBB259_148:                            # %for.inc437
                                        #   in Loop: Header=BB259_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_142
.LBB259_149:                            # %for.end439
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_150
.LBB259_150:                            # %if.end440
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_153:                            # %for.cond447
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB259_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB259_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_153
.LBB259_156:                            # %for.end468
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	$0, -4(%rbp)
.LBB259_157:                            # %for.cond469
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB259_157 Depth=2
	movl	$0, -8(%rbp)
.LBB259_159:                            # %for.cond473
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB259_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB259_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_159
.LBB259_162:                            # %for.end490
                                        #   in Loop: Header=BB259_157 Depth=2
	jmp	.LBB259_163
.LBB259_163:                            # %for.inc491
                                        #   in Loop: Header=BB259_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_157
.LBB259_164:                            # %for.end493
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_165
.LBB259_165:                            # %if.end494
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB259_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB259_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB259_170:                            # %for.cond519
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB259_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB259_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB259_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_170
.LBB259_173:                            # %for.end540
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB259_174:                            # %for.cond556
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB259_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB259_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB259_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_174
.LBB259_177:                            # %for.end577
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB259_178:                            # %for.cond606
                                        #   Parent Loop BB259_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB259_178 Depth=2
	movl	$0, -4(%rbp)
.LBB259_180:                            # %for.cond610
                                        #   Parent Loop BB259_35 Depth=1
                                        #     Parent Loop BB259_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB259_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB259_184
.LBB259_183:                            # %cond.false630
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB259_184:                            # %cond.end643
                                        #   in Loop: Header=BB259_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB259_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB259_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB259_190
.LBB259_186:                            # %cond.false648
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB259_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB259_189
.LBB259_188:                            # %cond.false666
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB259_189:                            # %cond.end679
                                        #   in Loop: Header=BB259_180 Depth=3
.LBB259_190:                            # %cond.end681
                                        #   in Loop: Header=BB259_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB259_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_180
.LBB259_192:                            # %for.end694
                                        #   in Loop: Header=BB259_178 Depth=2
	jmp	.LBB259_193
.LBB259_193:                            # %for.inc695
                                        #   in Loop: Header=BB259_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_178
.LBB259_194:                            # %for.end697
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_195
.LBB259_195:                            # %if.end698
                                        #   in Loop: Header=BB259_35 Depth=1
	jmp	.LBB259_196
.LBB259_196:                            # %for.inc699
                                        #   in Loop: Header=BB259_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB259_35
.LBB259_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB259_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB259_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB259_199 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB259_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_199
.LBB259_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB259_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_219 Depth 2
                                        #       Child Loop BB259_221 Depth 3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB259_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB259_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB259_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB259_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_207:                            # %if.end723
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB259_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_217
.LBB259_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB259_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_217
.LBB259_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB259_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB259_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB259_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB259_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB259_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB259_218
.LBB259_217:                            # %if.then749
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_218:                            # %if.end750
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB259_219:                            # %for.cond751
                                        #   Parent Loop BB259_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_221 Depth 3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB259_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB259_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB259_221:                            # %for.cond757
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_223 Depth 4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB259_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB259_221 Depth=3
	movl	$0, -48(%rbp)
.LBB259_223:                            # %for.cond761
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB259_225 Depth 5
                                        #             Child Loop BB259_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB259_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB259_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB259_225:                            # %for.cond765
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        #         Parent Loop BB259_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB259_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB259_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB259_227:                            # %for.cond770
                                        #   Parent Loop BB259_203 Depth=1
                                        #     Parent Loop BB259_219 Depth=2
                                        #       Parent Loop BB259_221 Depth=3
                                        #         Parent Loop BB259_223 Depth=4
                                        #           Parent Loop BB259_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB259_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB259_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB259_227
.LBB259_230:                            # %for.end803
                                        #   in Loop: Header=BB259_225 Depth=5
	jmp	.LBB259_231
.LBB259_231:                            # %for.inc804
                                        #   in Loop: Header=BB259_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB259_225
.LBB259_232:                            # %for.end806
                                        #   in Loop: Header=BB259_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB259_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB259_223
.LBB259_234:                            # %for.end810
                                        #   in Loop: Header=BB259_221 Depth=3
	jmp	.LBB259_235
.LBB259_235:                            # %for.inc811
                                        #   in Loop: Header=BB259_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB259_221
.LBB259_236:                            # %for.end813
                                        #   in Loop: Header=BB259_219 Depth=2
	jmp	.LBB259_237
.LBB259_237:                            # %for.inc814
                                        #   in Loop: Header=BB259_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB259_219
.LBB259_238:                            # %for.end816
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB259_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB259_240:                            # %if.end820
                                        #   in Loop: Header=BB259_203 Depth=1
	jmp	.LBB259_241
.LBB259_241:                            # %for.inc821
                                        #   in Loop: Header=BB259_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB259_203
.LBB259_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB259_243:                            # %if.end824
	cmpl	$24040974, -164(%rbp)   # imm = 0x16ED60E
	jne	.LBB259_245
.LBB259_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_244
.Lfunc_end259:
	.size	IntraChromaPrediction.218, .Lfunc_end259-IntraChromaPrediction.218
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI259_0:
	.quad	.LBB259_42
	.quad	.LBB259_64
	.quad	.LBB259_83
	.quad	.LBB259_102
                                        # -- End function
	.text
	.globl	terminate_macroblock.219 # -- Begin function terminate_macroblock.219
	.p2align	4, 0x90
	.type	terminate_macroblock.219,@function
terminate_macroblock.219:               # @terminate_macroblock.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1415745659, -108(%rbp) # imm = 0x5462907B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB260_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB260_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB260_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB260_5
.LBB260_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB260_8
.LBB260_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB260_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB260_7:                              # %if.end
	jmp	.LBB260_8
.LBB260_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB260_45
# %bb.9:                                # %if.end18
	movq	.LJTI260_0(,%rax,8), %rax
	jmpq	*%rax
.LBB260_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB260_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB260_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB260_46
.LBB260_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB260_46
.LBB260_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB260_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB260_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB260_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB260_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB260_22
.LBB260_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB260_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB260_21:                             # %if.end64
	jmp	.LBB260_22
.LBB260_22:                             # %if.end65
	jmp	.LBB260_23
.LBB260_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB260_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB260_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB260_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB260_27:                             # %if.end79
	jmp	.LBB260_28
.LBB260_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB260_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB260_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB260_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB260_32:                             # %if.end89
	jmp	.LBB260_33
.LBB260_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB260_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB260_35:                             # %if.end95
	jmp	.LBB260_46
.LBB260_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB260_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB260_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB260_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB260_40:                             # %if.end106
	jmp	.LBB260_41
.LBB260_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB260_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB260_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB260_44:                             # %if.end118
	jmp	.LBB260_46
.LBB260_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB260_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB260_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB260_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB260_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB260_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB260_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB260_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB260_51:                             # %if.end139
                                        #   in Loop: Header=BB260_48 Depth=1
	jmp	.LBB260_52
.LBB260_52:                             # %for.inc
                                        #   in Loop: Header=BB260_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB260_48
.LBB260_53:                             # %for.end
	jmp	.LBB260_54
.LBB260_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB260_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB260_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB260_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB260_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB260_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB260_60:                             # %if.end174
	jmp	.LBB260_62
.LBB260_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB260_62:                             # %if.end188
	jmp	.LBB260_63
.LBB260_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB260_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB260_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB260_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB260_67:                             # %if.end218
	cmpl	$1415745659, -108(%rbp) # imm = 0x5462907B
	jne	.LBB260_69
.LBB260_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_68
.Lfunc_end260:
	.size	terminate_macroblock.219, .Lfunc_end260-terminate_macroblock.219
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI260_0:
	.quad	.LBB260_10
	.quad	.LBB260_13
	.quad	.LBB260_14
	.quad	.LBB260_36
                                        # -- End function
	.text
	.globl	TransformDecision.220   # -- Begin function TransformDecision.220
	.p2align	4, 0x90
	.type	TransformDecision.220,@function
TransformDecision.220:                  # @TransformDecision.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1576937739, -76(%rbp)  # imm = 0x5DFE290B
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB261_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB261_3
.LBB261_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB261_3:                              # %if.end
	jmp	.LBB261_4
.LBB261_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_6 Depth 2
                                        #       Child Loop BB261_8 Depth 3
                                        #         Child Loop BB261_10 Depth 4
                                        #           Child Loop BB261_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB261_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB261_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB261_6:                              # %for.cond3
                                        #   Parent Loop BB261_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_8 Depth 3
                                        #         Child Loop BB261_10 Depth 4
                                        #           Child Loop BB261_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB261_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB261_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB261_8:                              # %for.cond8
                                        #   Parent Loop BB261_4 Depth=1
                                        #     Parent Loop BB261_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB261_10 Depth 4
                                        #           Child Loop BB261_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB261_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB261_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB261_10:                             # %for.cond13
                                        #   Parent Loop BB261_4 Depth=1
                                        #     Parent Loop BB261_6 Depth=2
                                        #       Parent Loop BB261_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB261_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB261_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB261_10 Depth=4
	movl	$0, -24(%rbp)
.LBB261_12:                             # %for.cond17
                                        #   Parent Loop BB261_4 Depth=1
                                        #     Parent Loop BB261_6 Depth=2
                                        #       Parent Loop BB261_8 Depth=3
                                        #         Parent Loop BB261_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB261_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB261_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB261_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB261_12
.LBB261_15:                             # %for.end
                                        #   in Loop: Header=BB261_10 Depth=4
	jmp	.LBB261_16
.LBB261_16:                             # %for.inc38
                                        #   in Loop: Header=BB261_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB261_10
.LBB261_17:                             # %for.end40
                                        #   in Loop: Header=BB261_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB261_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB261_8
.LBB261_19:                             # %for.end44
                                        #   in Loop: Header=BB261_6 Depth=2
	jmp	.LBB261_20
.LBB261_20:                             # %for.inc45
                                        #   in Loop: Header=BB261_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB261_6
.LBB261_21:                             # %for.end47
                                        #   in Loop: Header=BB261_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB261_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB261_4
.LBB261_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB261_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB261_28
.LBB261_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB261_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB261_28
.LBB261_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB261_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1576937739, -76(%rbp)  # imm = 0x5DFE290B
	jne	.LBB261_30
.LBB261_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_29
.Lfunc_end261:
	.size	TransformDecision.220, .Lfunc_end261-TransformDecision.220
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.221   # -- Begin function LumaPrediction4x4.221
	.p2align	4, 0x90
	.type	LumaPrediction4x4.221,@function
LumaPrediction4x4.221:                  # @LumaPrediction4x4.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1695985616, -100(%rbp) # imm = 0x6516AFD0
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB262_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB262_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB262_6
.LBB262_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB262_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB262_5:                              # %land.end
.LBB262_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB262_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB262_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB262_10
.LBB262_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB262_10
.LBB262_10:                             # %cond.end
	movl	%ecx, -76(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB262_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB262_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB262_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB262_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB262_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB262_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB262_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB262_19
.LBB262_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB262_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB262_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB262_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB262_23
.LBB262_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB262_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB262_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB262_26
.LBB262_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB262_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB262_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB262_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB262_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_31:                             # %for.cond85
                                        #   Parent Loop BB262_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB262_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB262_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_31
.LBB262_34:                             # %for.end
                                        #   in Loop: Header=BB262_29 Depth=1
	jmp	.LBB262_35
.LBB262_35:                             # %for.inc125
                                        #   in Loop: Header=BB262_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_29
.LBB262_36:                             # %for.end127
	jmp	.LBB262_57
.LBB262_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB262_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB262_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_41:                             # %for.cond135
                                        #   Parent Loop BB262_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB262_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB262_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_41
.LBB262_44:                             # %for.end161
                                        #   in Loop: Header=BB262_39 Depth=1
	jmp	.LBB262_45
.LBB262_45:                             # %for.inc162
                                        #   in Loop: Header=BB262_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_39
.LBB262_46:                             # %for.end164
	jmp	.LBB262_56
.LBB262_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB262_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_50:                             # %for.cond170
                                        #   Parent Loop BB262_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB262_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB262_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_50
.LBB262_53:                             # %for.end196
                                        #   in Loop: Header=BB262_48 Depth=1
	jmp	.LBB262_54
.LBB262_54:                             # %for.inc197
                                        #   in Loop: Header=BB262_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_48
.LBB262_55:                             # %for.end199
	jmp	.LBB262_56
.LBB262_56:                             # %if.end200
	jmp	.LBB262_57
.LBB262_57:                             # %if.end201
	jmp	.LBB262_89
.LBB262_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB262_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB262_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_62:                             # %for.cond210
                                        #   Parent Loop BB262_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB262_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB262_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_62
.LBB262_65:                             # %for.end226
                                        #   in Loop: Header=BB262_60 Depth=1
	jmp	.LBB262_66
.LBB262_66:                             # %for.inc227
                                        #   in Loop: Header=BB262_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_60
.LBB262_67:                             # %for.end229
	jmp	.LBB262_88
.LBB262_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB262_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB262_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_72:                             # %for.cond238
                                        #   Parent Loop BB262_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB262_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB262_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_72
.LBB262_75:                             # %for.end251
                                        #   in Loop: Header=BB262_70 Depth=1
	jmp	.LBB262_76
.LBB262_76:                             # %for.inc252
                                        #   in Loop: Header=BB262_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_70
.LBB262_77:                             # %for.end254
	jmp	.LBB262_87
.LBB262_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB262_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_81:                             # %for.cond260
                                        #   Parent Loop BB262_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB262_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB262_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_81
.LBB262_84:                             # %for.end273
                                        #   in Loop: Header=BB262_79 Depth=1
	jmp	.LBB262_85
.LBB262_85:                             # %for.inc274
                                        #   in Loop: Header=BB262_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_79
.LBB262_86:                             # %for.end276
	jmp	.LBB262_87
.LBB262_87:                             # %if.end277
	jmp	.LBB262_88
.LBB262_88:                             # %if.end278
	jmp	.LBB262_89
.LBB262_89:                             # %if.end279
	cmpl	$1695985616, -100(%rbp) # imm = 0x6516AFD0
	jne	.LBB262_91
.LBB262_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_90
.Lfunc_end262:
	.size	LumaPrediction4x4.221, .Lfunc_end262-LumaPrediction4x4.221
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.222 # -- Begin function SetModesAndRefframe.222
	.p2align	4, 0x90
	.type	SetModesAndRefframe.222,@function
SetModesAndRefframe.222:                # @SetModesAndRefframe.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1360669286, -60(%rbp)  # imm = 0x511A2A66
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB263_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB263_12
.LBB263_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB263_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB263_11
.LBB263_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB263_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB263_10
.LBB263_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB263_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB263_9
.LBB263_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB263_9:                              # %if.end
	jmp	.LBB263_10
.LBB263_10:                             # %if.end86
	jmp	.LBB263_11
.LBB263_11:                             # %if.end87
	jmp	.LBB263_12
.LBB263_12:                             # %if.end88
	cmpl	$1360669286, -60(%rbp)  # imm = 0x511A2A66
	jne	.LBB263_14
.LBB263_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_13
.Lfunc_end263:
	.size	SetModesAndRefframe.222, .Lfunc_end263-SetModesAndRefframe.222
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.223    # -- Begin function writeChromaCoeff.223
	.p2align	4, 0x90
	.type	writeChromaCoeff.223,@function
writeChromaCoeff.223:                   # @writeChromaCoeff.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1131641596, -80(%rbp)  # imm = 0x43737AFC
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB264_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB264_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB264_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB264_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB264_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB264_21
.LBB264_5:                              # %if.else
                                        #   in Loop: Header=BB264_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB264_6:                              # %for.cond18
                                        #   Parent Loop BB264_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB264_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB264_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB264_8:                              # %land.end
                                        #   in Loop: Header=BB264_6 Depth=2
	testb	$1, %al
	jne	.LBB264_9
	jmp	.LBB264_20
.LBB264_9:                              # %for.body21
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB264_12
.LBB264_11:                             # %if.else29
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB264_12:                             # %if.end
                                        #   in Loop: Header=BB264_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB264_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB264_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB264_15:                             # %lor.end
                                        #   in Loop: Header=BB264_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB264_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB264_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB264_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB264_18:                             # %lor.end45
                                        #   in Loop: Header=BB264_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB264_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB264_6
.LBB264_20:                             # %for.end
                                        #   in Loop: Header=BB264_2 Depth=1
	jmp	.LBB264_21
.LBB264_21:                             # %if.end58
                                        #   in Loop: Header=BB264_2 Depth=1
	jmp	.LBB264_22
.LBB264_22:                             # %for.inc59
                                        #   in Loop: Header=BB264_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB264_2
.LBB264_23:                             # %for.end61
	jmp	.LBB264_24
.LBB264_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB264_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB264_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_28 Depth 2
                                        #       Child Loop BB264_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB264_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB264_26 Depth=1
	movl	$0, -32(%rbp)
.LBB264_28:                             # %for.cond69
                                        #   Parent Loop BB264_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB264_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB264_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB264_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB264_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB264_47
.LBB264_31:                             # %if.else84
                                        #   in Loop: Header=BB264_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB264_32:                             # %for.cond115
                                        #   Parent Loop BB264_26 Depth=1
                                        #     Parent Loop BB264_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB264_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB264_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB264_34:                             # %land.end121
                                        #   in Loop: Header=BB264_32 Depth=3
	testb	$1, %al
	jne	.LBB264_35
	jmp	.LBB264_46
.LBB264_35:                             # %for.body122
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB264_38
.LBB264_37:                             # %if.else134
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB264_38:                             # %if.end136
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB264_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB264_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB264_41:                             # %lor.end149
                                        #   in Loop: Header=BB264_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB264_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB264_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB264_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB264_44:                             # %lor.end164
                                        #   in Loop: Header=BB264_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB264_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB264_32
.LBB264_46:                             # %for.end189
                                        #   in Loop: Header=BB264_28 Depth=2
	jmp	.LBB264_47
.LBB264_47:                             # %if.end190
                                        #   in Loop: Header=BB264_28 Depth=2
	jmp	.LBB264_48
.LBB264_48:                             # %for.inc191
                                        #   in Loop: Header=BB264_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB264_28
.LBB264_49:                             # %for.end193
                                        #   in Loop: Header=BB264_26 Depth=1
	jmp	.LBB264_50
.LBB264_50:                             # %for.inc194
                                        #   in Loop: Header=BB264_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB264_26
.LBB264_51:                             # %for.end196
	jmp	.LBB264_52
.LBB264_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$1131641596, -80(%rbp)  # imm = 0x43737AFC
	jne	.LBB264_54
.LBB264_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_53
.Lfunc_end264:
	.size	writeChromaCoeff.223, .Lfunc_end264-writeChromaCoeff.223
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.224    # -- Begin function writeChromaCoeff.224
	.p2align	4, 0x90
	.type	writeChromaCoeff.224,@function
writeChromaCoeff.224:                   # @writeChromaCoeff.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$2004618594, -80(%rbp)  # imm = 0x777C0D62
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB265_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB265_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB265_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB265_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB265_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB265_21
.LBB265_5:                              # %if.else
                                        #   in Loop: Header=BB265_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB265_6:                              # %for.cond18
                                        #   Parent Loop BB265_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB265_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB265_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB265_8:                              # %land.end
                                        #   in Loop: Header=BB265_6 Depth=2
	testb	$1, %al
	jne	.LBB265_9
	jmp	.LBB265_20
.LBB265_9:                              # %for.body21
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB265_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB265_12
.LBB265_11:                             # %if.else29
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB265_12:                             # %if.end
                                        #   in Loop: Header=BB265_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB265_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB265_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB265_15:                             # %lor.end
                                        #   in Loop: Header=BB265_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB265_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB265_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB265_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB265_18:                             # %lor.end45
                                        #   in Loop: Header=BB265_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB265_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB265_6
.LBB265_20:                             # %for.end
                                        #   in Loop: Header=BB265_2 Depth=1
	jmp	.LBB265_21
.LBB265_21:                             # %if.end58
                                        #   in Loop: Header=BB265_2 Depth=1
	jmp	.LBB265_22
.LBB265_22:                             # %for.inc59
                                        #   in Loop: Header=BB265_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB265_2
.LBB265_23:                             # %for.end61
	jmp	.LBB265_24
.LBB265_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB265_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB265_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_28 Depth 2
                                        #       Child Loop BB265_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB265_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB265_26 Depth=1
	movl	$0, -32(%rbp)
.LBB265_28:                             # %for.cond69
                                        #   Parent Loop BB265_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB265_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB265_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB265_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB265_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB265_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB265_47
.LBB265_31:                             # %if.else84
                                        #   in Loop: Header=BB265_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB265_32:                             # %for.cond115
                                        #   Parent Loop BB265_26 Depth=1
                                        #     Parent Loop BB265_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB265_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB265_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB265_34:                             # %land.end121
                                        #   in Loop: Header=BB265_32 Depth=3
	testb	$1, %al
	jne	.LBB265_35
	jmp	.LBB265_46
.LBB265_35:                             # %for.body122
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB265_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB265_38
.LBB265_37:                             # %if.else134
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB265_38:                             # %if.end136
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB265_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB265_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB265_41:                             # %lor.end149
                                        #   in Loop: Header=BB265_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB265_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB265_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB265_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB265_44:                             # %lor.end164
                                        #   in Loop: Header=BB265_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB265_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB265_32
.LBB265_46:                             # %for.end189
                                        #   in Loop: Header=BB265_28 Depth=2
	jmp	.LBB265_47
.LBB265_47:                             # %if.end190
                                        #   in Loop: Header=BB265_28 Depth=2
	jmp	.LBB265_48
.LBB265_48:                             # %for.inc191
                                        #   in Loop: Header=BB265_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB265_28
.LBB265_49:                             # %for.end193
                                        #   in Loop: Header=BB265_26 Depth=1
	jmp	.LBB265_50
.LBB265_50:                             # %for.inc194
                                        #   in Loop: Header=BB265_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB265_26
.LBB265_51:                             # %for.end196
	jmp	.LBB265_52
.LBB265_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$2004618594, -80(%rbp)  # imm = 0x777C0D62
	jne	.LBB265_54
.LBB265_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_53
.Lfunc_end265:
	.size	writeChromaCoeff.224, .Lfunc_end265-writeChromaCoeff.224
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.225 # -- Begin function write_one_macroblock.225
	.p2align	4, 0x90
	.type	write_one_macroblock.225,@function
write_one_macroblock.225:               # @write_one_macroblock.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$555958078, -32(%rbp)   # imm = 0x21233F3E
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB266_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB266_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB266_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB266_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB266_6
.LBB266_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB266_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB266_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB266_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB266_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB266_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB266_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB266_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB266_22
.LBB266_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB266_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB266_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB266_14 Depth=1
	movl	$0, -20(%rbp)
.LBB266_16:                             # %for.cond24
                                        #   Parent Loop BB266_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB266_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB266_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB266_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB266_16
.LBB266_19:                             # %for.end
                                        #   in Loop: Header=BB266_14 Depth=1
	jmp	.LBB266_20
.LBB266_20:                             # %for.inc35
                                        #   in Loop: Header=BB266_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB266_14
.LBB266_21:                             # %for.end37
	jmp	.LBB266_22
.LBB266_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB266_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB266_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB266_30
.LBB266_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB266_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB266_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB266_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB266_29:                             # %if.end59
	jmp	.LBB266_30
.LBB266_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB266_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB266_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$555958078, -32(%rbp)   # imm = 0x21233F3E
	jne	.LBB266_34
.LBB266_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_33
.Lfunc_end266:
	.size	write_one_macroblock.225, .Lfunc_end266-write_one_macroblock.225
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.226       # -- Begin function slice_too_big.226
	.p2align	4, 0x90
	.type	slice_too_big.226,@function
slice_too_big.226:                      # @slice_too_big.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1975452444, -52(%rbp)  # imm = 0x75BF031C
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB267_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB267_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB267_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB267_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB267_5:                              # %if.end
                                        #   in Loop: Header=BB267_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB267_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB267_7:                              # %if.end8
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB267_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB267_21
.LBB267_9:                              # %if.end11
                                        #   in Loop: Header=BB267_2 Depth=1
	jmp	.LBB267_10
.LBB267_10:                             # %for.inc
                                        #   in Loop: Header=BB267_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_2
.LBB267_11:                             # %for.end
	jmp	.LBB267_12
.LBB267_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB267_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB267_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB267_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB267_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB267_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB267_21
.LBB267_17:                             # %if.end27
                                        #   in Loop: Header=BB267_14 Depth=1
	jmp	.LBB267_18
.LBB267_18:                             # %for.inc28
                                        #   in Loop: Header=BB267_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_14
.LBB267_19:                             # %for.end30
	jmp	.LBB267_20
.LBB267_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB267_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1975452444, -52(%rbp)  # imm = 0x75BF031C
	jne	.LBB267_23
.LBB267_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_22
.Lfunc_end267:
	.size	slice_too_big.226, .Lfunc_end267-slice_too_big.226
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.227         # -- Begin function predict_nnz.227
	.p2align	4, 0x90
	.type	predict_nnz.227,@function
predict_nnz.227:                        # @predict_nnz.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1973543932, -56(%rbp)  # imm = 0x75A1E3FC
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB268_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB268_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB268_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB268_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB268_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB268_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB268_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB268_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB268_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB268_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB268_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB268_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB268_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB268_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1973543932, -56(%rbp)  # imm = 0x75A1E3FC
	jne	.LBB268_16
.LBB268_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_15
.Lfunc_end268:
	.size	predict_nnz.227, .Lfunc_end268-predict_nnz.227
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.228 # -- Begin function write_terminating_bit.228
	.p2align	4, 0x90
	.type	write_terminating_bit.228,@function
write_terminating_bit.228:              # @write_terminating_bit.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1565034036, -8(%rbp)   # imm = 0x5D488634
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1565034036, -8(%rbp)   # imm = 0x5D488634
	jne	.LBB269_2
.LBB269_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_1
.Lfunc_end269:
	.size	write_terminating_bit.228, .Lfunc_end269-write_terminating_bit.228
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.229        # -- Begin function B8Mode2Value.229
	.p2align	4, 0x90
	.type	B8Mode2Value.229,@function
B8Mode2Value.229:                       # @B8Mode2Value.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2031568375, -24(%rbp)  # imm = 0x791745F7
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB270_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB270_3
.LBB270_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB270_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$2031568375, -24(%rbp)  # imm = 0x791745F7
	jne	.LBB270_5
.LBB270_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_4
.Lfunc_end270:
	.size	B8Mode2Value.229, .Lfunc_end270-B8Mode2Value.229
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.230             # -- Begin function ZeroRef.230
	.p2align	4, 0x90
	.type	ZeroRef.230,@function
ZeroRef.230:                            # @ZeroRef.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$100783025, -24(%rbp)   # imm = 0x601D3B1
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB271_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB271_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB271_1 Depth=1
	movl	$0, -12(%rbp)
.LBB271_3:                              # %for.cond1
                                        #   Parent Loop BB271_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB271_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB271_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB271_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB271_11
.LBB271_6:                              # %if.end
                                        #   in Loop: Header=BB271_3 Depth=2
	jmp	.LBB271_7
.LBB271_7:                              # %for.inc
                                        #   in Loop: Header=BB271_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB271_3
.LBB271_8:                              # %for.end
                                        #   in Loop: Header=BB271_1 Depth=1
	jmp	.LBB271_9
.LBB271_9:                              # %for.inc10
                                        #   in Loop: Header=BB271_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB271_1
.LBB271_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB271_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$100783025, -24(%rbp)   # imm = 0x601D3B1
	jne	.LBB271_13
.LBB271_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_12
.Lfunc_end271:
	.size	ZeroRef.230, .Lfunc_end271-ZeroRef.230
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.231   # -- Begin function LumaPrediction4x4.231
	.p2align	4, 0x90
	.type	LumaPrediction4x4.231,@function
LumaPrediction4x4.231:                  # @LumaPrediction4x4.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1070856418, -100(%rbp) # imm = 0x3FD3F8E2
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB272_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB272_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB272_6
.LBB272_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB272_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB272_5:                              # %land.end
.LBB272_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB272_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB272_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB272_10
.LBB272_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB272_10
.LBB272_10:                             # %cond.end
	movl	%ecx, -76(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB272_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB272_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB272_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB272_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -68(%rbp)
	jne	.LBB272_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -56(%rbp)
	jne	.LBB272_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB272_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB272_19
.LBB272_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB272_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB272_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB272_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB272_23
.LBB272_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB272_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB272_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB272_26
.LBB272_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB272_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB272_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB272_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB272_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_31:                             # %for.cond85
                                        #   Parent Loop BB272_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB272_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB272_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_31
.LBB272_34:                             # %for.end
                                        #   in Loop: Header=BB272_29 Depth=1
	jmp	.LBB272_35
.LBB272_35:                             # %for.inc125
                                        #   in Loop: Header=BB272_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_29
.LBB272_36:                             # %for.end127
	jmp	.LBB272_57
.LBB272_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB272_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB272_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_41:                             # %for.cond135
                                        #   Parent Loop BB272_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB272_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB272_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_41
.LBB272_44:                             # %for.end161
                                        #   in Loop: Header=BB272_39 Depth=1
	jmp	.LBB272_45
.LBB272_45:                             # %for.inc162
                                        #   in Loop: Header=BB272_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_39
.LBB272_46:                             # %for.end164
	jmp	.LBB272_56
.LBB272_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB272_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_50:                             # %for.cond170
                                        #   Parent Loop BB272_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB272_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB272_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_50
.LBB272_53:                             # %for.end196
                                        #   in Loop: Header=BB272_48 Depth=1
	jmp	.LBB272_54
.LBB272_54:                             # %for.inc197
                                        #   in Loop: Header=BB272_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_48
.LBB272_55:                             # %for.end199
	jmp	.LBB272_56
.LBB272_56:                             # %if.end200
	jmp	.LBB272_57
.LBB272_57:                             # %if.end201
	jmp	.LBB272_89
.LBB272_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB272_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB272_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_62:                             # %for.cond210
                                        #   Parent Loop BB272_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB272_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB272_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_62
.LBB272_65:                             # %for.end226
                                        #   in Loop: Header=BB272_60 Depth=1
	jmp	.LBB272_66
.LBB272_66:                             # %for.inc227
                                        #   in Loop: Header=BB272_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_60
.LBB272_67:                             # %for.end229
	jmp	.LBB272_88
.LBB272_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB272_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB272_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_72:                             # %for.cond238
                                        #   Parent Loop BB272_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB272_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB272_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_72
.LBB272_75:                             # %for.end251
                                        #   in Loop: Header=BB272_70 Depth=1
	jmp	.LBB272_76
.LBB272_76:                             # %for.inc252
                                        #   in Loop: Header=BB272_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_70
.LBB272_77:                             # %for.end254
	jmp	.LBB272_87
.LBB272_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB272_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB272_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB272_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB272_81:                             # %for.cond260
                                        #   Parent Loop BB272_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB272_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB272_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB272_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_81
.LBB272_84:                             # %for.end273
                                        #   in Loop: Header=BB272_79 Depth=1
	jmp	.LBB272_85
.LBB272_85:                             # %for.inc274
                                        #   in Loop: Header=BB272_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB272_79
.LBB272_86:                             # %for.end276
	jmp	.LBB272_87
.LBB272_87:                             # %if.end277
	jmp	.LBB272_88
.LBB272_88:                             # %if.end278
	jmp	.LBB272_89
.LBB272_89:                             # %if.end279
	cmpl	$1070856418, -100(%rbp) # imm = 0x3FD3F8E2
	jne	.LBB272_91
.LBB272_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_90
.Lfunc_end272:
	.size	LumaPrediction4x4.231, .Lfunc_end272-LumaPrediction4x4.231
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.232        # -- Begin function writeMBLayer.232
	.p2align	4, 0x90
	.type	writeMBLayer.232,@function
writeMBLayer.232:                       # @writeMBLayer.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1337653159, -100(%rbp) # imm = 0x4FBAF7A7
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB273_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB273_3
.LBB273_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB273_3
.LBB273_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB273_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB273_9
.LBB273_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB273_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB273_8
.LBB273_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB273_8
.LBB273_8:                              # %cond.end14
.LBB273_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB273_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB273_24
.LBB273_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB273_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB273_17
	jmp	.LBB273_18
.LBB273_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB273_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB273_18
	jmp	.LBB273_17
.LBB273_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB273_17
	jmp	.LBB273_18
.LBB273_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB273_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB273_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB273_23
.LBB273_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB273_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB273_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB273_23:                             # %if.end50
	jmp	.LBB273_24
.LBB273_24:                             # %if.end51
	jmp	.LBB273_25
.LBB273_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB273_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB273_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB273_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB273_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB273_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB273_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB273_35
.LBB273_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB273_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB273_38
.LBB273_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB273_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_39:                             # %if.end96
	jmp	.LBB273_40
.LBB273_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB273_43
.LBB273_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB273_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB273_89
.LBB273_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB273_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB273_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB273_49
.LBB273_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB273_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB273_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB273_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB273_55
.LBB273_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB273_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB273_58
.LBB273_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB273_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_59:                             # %if.end198
	jmp	.LBB273_60
.LBB273_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB273_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB273_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB273_64
.LBB273_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_64:                             # %if.end226
	jmp	.LBB273_88
.LBB273_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB273_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB273_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB273_76
.LBB273_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB273_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB273_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_72:                             # %if.end281
	jmp	.LBB273_73
.LBB273_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB273_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB273_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB273_87
.LBB273_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB273_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB273_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB273_77 Depth=1
	movl	$0, -44(%rbp)
.LBB273_79:                             # %for.cond310
                                        #   Parent Loop BB273_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB273_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB273_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB273_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB273_79
.LBB273_82:                             # %for.end
                                        #   in Loop: Header=BB273_77 Depth=1
	jmp	.LBB273_83
.LBB273_83:                             # %for.inc322
                                        #   in Loop: Header=BB273_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB273_77
.LBB273_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB273_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB273_86:                             # %if.end345
	jmp	.LBB273_87
.LBB273_87:                             # %if.end346
	jmp	.LBB273_88
.LBB273_88:                             # %if.end347
	jmp	.LBB273_89
.LBB273_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB273_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB273_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB273_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB273_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB273_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB273_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB273_98
.LBB273_97:                             # %if.else380
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB273_98:                             # %if.end382
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB273_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB273_101
.LBB273_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB273_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB273_101:                            # %lor.end415
                                        #   in Loop: Header=BB273_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB273_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB273_94
.LBB273_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB273_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB273_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB273_114
.LBB273_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB273_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB273_110
.LBB273_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB273_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB273_113
.LBB273_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB273_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB273_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB273_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB273_120
.LBB273_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB273_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB273_119:                            # %if.end483
	jmp	.LBB273_120
.LBB273_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB273_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB273_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB273_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB273_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB273_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB273_129
.LBB273_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB273_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB273_128:                            # %if.end516
	jmp	.LBB273_129
.LBB273_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1337653159, -100(%rbp) # imm = 0x4FBAF7A7
	jne	.LBB273_131
.LBB273_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_130
.Lfunc_end273:
	.size	writeMBLayer.232, .Lfunc_end273-writeMBLayer.232
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.233         # -- Begin function predict_nnz.233
	.p2align	4, 0x90
	.type	predict_nnz.233,@function
predict_nnz.233:                        # @predict_nnz.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1982235999, -56(%rbp)  # imm = 0x7626855F
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB274_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB274_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB274_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB274_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB274_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB274_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB274_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB274_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB274_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB274_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB274_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB274_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB274_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB274_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1982235999, -56(%rbp)  # imm = 0x7626855F
	jne	.LBB274_16
.LBB274_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_15
.Lfunc_end274:
	.size	predict_nnz.233, .Lfunc_end274-predict_nnz.233
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.234   # -- Begin function writeLumaCoeff8x8.234
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.234,@function
writeLumaCoeff8x8.234:                  # @writeLumaCoeff8x8.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1031085755, -36(%rbp)  # imm = 0x3D751EBB
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB275_2
# %bb.1:                                # %if.then
	jmp	.LBB275_2
.LBB275_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB275_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_15
.LBB275_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB275_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB275_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB275_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB275_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB275_10
.LBB275_9:                              # %cond.false
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB275_10:                             # %cond.end
                                        #   in Loop: Header=BB275_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_12
.LBB275_11:                             # %if.else
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB275_12:                             # %if.end17
                                        #   in Loop: Header=BB275_5 Depth=1
	jmp	.LBB275_13
.LBB275_13:                             # %for.inc
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_5
.LBB275_14:                             # %for.end
	jmp	.LBB275_19
.LBB275_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB275_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_18
.LBB275_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB275_18:                             # %if.end27
	jmp	.LBB275_19
.LBB275_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1031085755, -36(%rbp)  # imm = 0x3D751EBB
	jne	.LBB275_21
.LBB275_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_20
.Lfunc_end275:
	.size	writeLumaCoeff8x8.234, .Lfunc_end275-writeLumaCoeff8x8.234
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.235  # -- Begin function predict_nnz_chroma.235
	.p2align	4, 0x90
	.type	predict_nnz_chroma.235,@function
predict_nnz_chroma.235:                 # @predict_nnz_chroma.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1826631900, -64(%rbp)  # imm = 0x6CE030DC
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB276_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB276_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB276_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB276_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB276_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB276_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB276_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB276_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB276_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB276_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB276_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB276_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB276_13:                             # %if.end57
	jmp	.LBB276_27
.LBB276_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB276_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB276_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB276_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB276_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB276_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB276_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB276_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB276_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB276_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB276_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB276_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB276_26:                             # %if.end124
	jmp	.LBB276_27
.LBB276_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB276_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB276_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1826631900, -64(%rbp)  # imm = 0x6CE030DC
	jne	.LBB276_31
.LBB276_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_30
.Lfunc_end276:
	.size	predict_nnz_chroma.235, .Lfunc_end276-predict_nnz_chroma.235
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.236         # -- Begin function predict_nnz.236
	.p2align	4, 0x90
	.type	predict_nnz.236,@function
predict_nnz.236:                        # @predict_nnz.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$423790905, -56(%rbp)   # imm = 0x19428939
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB277_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB277_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB277_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB277_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB277_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB277_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB277_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB277_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB277_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB277_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB277_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB277_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB277_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB277_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$423790905, -56(%rbp)   # imm = 0x19428939
	jne	.LBB277_16
.LBB277_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_15
.Lfunc_end277:
	.size	predict_nnz.236, .Lfunc_end277-predict_nnz.236
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.237 # -- Begin function write_terminating_bit.237
	.p2align	4, 0x90
	.type	write_terminating_bit.237,@function
write_terminating_bit.237:              # @write_terminating_bit.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$973937668, -8(%rbp)    # imm = 0x3A0D1C04
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$973937668, -8(%rbp)    # imm = 0x3A0D1C04
	jne	.LBB278_2
.LBB278_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_1
.Lfunc_end278:
	.size	write_terminating_bit.237, .Lfunc_end278-write_terminating_bit.237
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.238 # -- Begin function write_one_macroblock.238
	.p2align	4, 0x90
	.type	write_one_macroblock.238,@function
write_one_macroblock.238:               # @write_one_macroblock.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1511907253, -32(%rbp)  # imm = 0x5A1DDFB5
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB279_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB279_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB279_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB279_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB279_6
.LBB279_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB279_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB279_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB279_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB279_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB279_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB279_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB279_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB279_22
.LBB279_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB279_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB279_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB279_14 Depth=1
	movl	$0, -24(%rbp)
.LBB279_16:                             # %for.cond24
                                        #   Parent Loop BB279_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB279_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB279_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB279_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB279_16
.LBB279_19:                             # %for.end
                                        #   in Loop: Header=BB279_14 Depth=1
	jmp	.LBB279_20
.LBB279_20:                             # %for.inc35
                                        #   in Loop: Header=BB279_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB279_14
.LBB279_21:                             # %for.end37
	jmp	.LBB279_22
.LBB279_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB279_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB279_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB279_30
.LBB279_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB279_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB279_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB279_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB279_29:                             # %if.end59
	jmp	.LBB279_30
.LBB279_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB279_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB279_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1511907253, -32(%rbp)  # imm = 0x5A1DDFB5
	jne	.LBB279_34
.LBB279_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_33
.Lfunc_end279:
	.size	write_one_macroblock.238, .Lfunc_end279-write_one_macroblock.238
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.239 # -- Begin function IntraChromaPrediction4x4.239
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.239,@function
IntraChromaPrediction4x4.239:           # @IntraChromaPrediction4x4.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$873270211, -28(%rbp)   # imm = 0x340D0BC3
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB280_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB280_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB280_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB280_3:                              # %for.cond1
                                        #   Parent Loop BB280_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB280_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB280_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB280_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_3
.LBB280_6:                              # %for.end
                                        #   in Loop: Header=BB280_1 Depth=1
	jmp	.LBB280_7
.LBB280_7:                              # %for.inc17
                                        #   in Loop: Header=BB280_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_1
.LBB280_8:                              # %for.end19
	cmpl	$873270211, -28(%rbp)   # imm = 0x340D0BC3
	jne	.LBB280_10
.LBB280_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_9
.Lfunc_end280:
	.size	IntraChromaPrediction4x4.239, .Lfunc_end280-IntraChromaPrediction4x4.239
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.240 # -- Begin function IntraChromaPrediction.240
	.p2align	4, 0x90
	.type	IntraChromaPrediction.240,@function
IntraChromaPrediction.240:              # @IntraChromaPrediction.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$189296838, -164(%rbp)  # imm = 0xB4870C6
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB281_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB281_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB281_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_1
.LBB281_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB281_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB281_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB281_8
.LBB281_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB281_8
.LBB281_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB281_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB281_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB281_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB281_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB281_13
.LBB281_12:                             # %cond.false32
                                        #   in Loop: Header=BB281_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB281_13
.LBB281_13:                             # %cond.end33
                                        #   in Loop: Header=BB281_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB281_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_9
.LBB281_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB281_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB281_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB281_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB281_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB281_20
.LBB281_19:                             # %cond.false57
                                        #   in Loop: Header=BB281_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB281_20
.LBB281_20:                             # %cond.end58
                                        #   in Loop: Header=BB281_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB281_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_16
.LBB281_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB281_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB281_25
.LBB281_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB281_25
.LBB281_25:                             # %cond.end75
	movl	%eax, -100(%rbp)
.LBB281_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB281_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB281_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB281_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB281_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB281_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB281_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB281_34
# %bb.33:                               # %if.then88
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB281_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB281_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_37 Depth 2
                                        #       Child Loop BB281_39 Depth 3
                                        #         Child Loop BB281_104 Depth 4
                                        #         Child Loop BB281_110 Depth 4
                                        #         Child Loop BB281_85 Depth 4
                                        #         Child Loop BB281_91 Depth 4
                                        #         Child Loop BB281_66 Depth 4
                                        #         Child Loop BB281_72 Depth 4
                                        #         Child Loop BB281_44 Depth 4
                                        #         Child Loop BB281_50 Depth 4
                                        #         Child Loop BB281_125 Depth 4
                                        #           Child Loop BB281_127 Depth 5
                                        #     Child Loop BB281_138 Depth 2
                                        #     Child Loop BB281_142 Depth 2
                                        #       Child Loop BB281_144 Depth 3
                                        #     Child Loop BB281_153 Depth 2
                                        #     Child Loop BB281_157 Depth 2
                                        #       Child Loop BB281_159 Depth 3
                                        #     Child Loop BB281_170 Depth 2
                                        #     Child Loop BB281_174 Depth 2
                                        #     Child Loop BB281_178 Depth 2
                                        #       Child Loop BB281_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB281_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB281_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB281_37:                             # %for.cond95
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB281_39 Depth 3
                                        #         Child Loop BB281_104 Depth 4
                                        #         Child Loop BB281_110 Depth 4
                                        #         Child Loop BB281_85 Depth 4
                                        #         Child Loop BB281_91 Depth 4
                                        #         Child Loop BB281_66 Depth 4
                                        #         Child Loop BB281_72 Depth 4
                                        #         Child Loop BB281_44 Depth 4
                                        #         Child Loop BB281_50 Depth 4
                                        #         Child Loop BB281_125 Depth 4
                                        #           Child Loop BB281_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB281_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB281_37 Depth=2
	movl	$0, -88(%rbp)
.LBB281_39:                             # %for.cond99
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB281_104 Depth 4
                                        #         Child Loop BB281_110 Depth 4
                                        #         Child Loop BB281_85 Depth 4
                                        #         Child Loop BB281_91 Depth 4
                                        #         Child Loop BB281_66 Depth 4
                                        #         Child Loop BB281_72 Depth 4
                                        #         Child Loop BB281_44 Depth 4
                                        #         Child Loop BB281_50 Depth 4
                                        #         Child Loop BB281_125 Depth 4
                                        #           Child Loop BB281_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB281_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB281_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB281_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB281_39 Depth=3
	movq	.LJTI281_0(,%rax,8), %rax
	jmpq	*%rax
.LBB281_42:                             # %sw.bb
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_44:                             # %for.cond124
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB281_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB281_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_44
.LBB281_47:                             # %for.end138
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_48
.LBB281_48:                             # %if.end139
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB281_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_50:                             # %for.cond143
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB281_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB281_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_50
.LBB281_53:                             # %for.end162
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_54
.LBB281_54:                             # %if.end163
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB281_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_63
.LBB281_57:                             # %if.else
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_62
.LBB281_59:                             # %if.else174
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB281_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB281_61:                             # %if.end180
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_62
.LBB281_62:                             # %if.end181
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_63
.LBB281_63:                             # %if.end182
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_124
.LBB281_64:                             # %sw.bb183
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_66:                             # %for.cond186
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB281_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB281_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_66
.LBB281_69:                             # %for.end202
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_77
.LBB281_70:                             # %if.else203
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB281_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_72:                             # %for.cond207
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB281_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB281_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_72
.LBB281_75:                             # %for.end226
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_76
.LBB281_76:                             # %if.end227
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_77
.LBB281_77:                             # %if.end228
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_82
.LBB281_79:                             # %if.else233
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB281_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB281_81:                             # %if.end239
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_82
.LBB281_82:                             # %if.end240
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_124
.LBB281_83:                             # %sw.bb241
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB281_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_85:                             # %for.cond245
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB281_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB281_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_85
.LBB281_88:                             # %for.end264
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_96
.LBB281_89:                             # %if.else265
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_91:                             # %for.cond268
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB281_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB281_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_91
.LBB281_94:                             # %for.end284
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_95
.LBB281_95:                             # %if.end285
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_96
.LBB281_96:                             # %if.end286
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB281_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_101
.LBB281_98:                             # %if.else292
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB281_100:                            # %if.end297
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_101
.LBB281_101:                            # %if.end298
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_124
.LBB281_102:                            # %sw.bb299
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_104:                            # %for.cond302
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB281_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB281_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_104
.LBB281_107:                            # %for.end318
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_108
.LBB281_108:                            # %if.end319
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB281_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_110:                            # %for.cond323
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB281_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB281_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_110
.LBB281_113:                            # %for.end342
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_114
.LBB281_114:                            # %if.end343
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB281_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_123
.LBB281_117:                            # %if.else352
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB281_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB281_122
.LBB281_119:                            # %if.else357
                                        #   in Loop: Header=BB281_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB281_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB281_121:                            # %if.end363
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_122
.LBB281_122:                            # %if.end364
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_123
.LBB281_123:                            # %if.end365
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_124
.LBB281_124:                            # %sw.epilog
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB281_125:                            # %for.cond366
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB281_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB281_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_127:                            # %for.cond371
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_37 Depth=2
                                        #       Parent Loop BB281_39 Depth=3
                                        #         Parent Loop BB281_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB281_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB281_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_127
.LBB281_130:                            # %for.end386
                                        #   in Loop: Header=BB281_125 Depth=4
	jmp	.LBB281_131
.LBB281_131:                            # %for.inc387
                                        #   in Loop: Header=BB281_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB281_125
.LBB281_132:                            # %for.end389
                                        #   in Loop: Header=BB281_39 Depth=3
	jmp	.LBB281_133
.LBB281_133:                            # %for.inc390
                                        #   in Loop: Header=BB281_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB281_39
.LBB281_134:                            # %for.end392
                                        #   in Loop: Header=BB281_37 Depth=2
	jmp	.LBB281_135
.LBB281_135:                            # %for.inc393
                                        #   in Loop: Header=BB281_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB281_37
.LBB281_136:                            # %for.end395
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB281_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	$0, -4(%rbp)
.LBB281_138:                            # %for.cond398
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB281_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB281_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB281_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_138
.LBB281_141:                            # %for.end414
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	$0, -4(%rbp)
.LBB281_142:                            # %for.cond415
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB281_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB281_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB281_142 Depth=2
	movl	$0, -8(%rbp)
.LBB281_144:                            # %for.cond419
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB281_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB281_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB281_144
.LBB281_147:                            # %for.end436
                                        #   in Loop: Header=BB281_142 Depth=2
	jmp	.LBB281_148
.LBB281_148:                            # %for.inc437
                                        #   in Loop: Header=BB281_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_142
.LBB281_149:                            # %for.end439
                                        #   in Loop: Header=BB281_35 Depth=1
	jmp	.LBB281_150
.LBB281_150:                            # %if.end440
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB281_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB281_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	$0, -4(%rbp)
.LBB281_153:                            # %for.cond447
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB281_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB281_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_153
.LBB281_156:                            # %for.end468
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	$0, -4(%rbp)
.LBB281_157:                            # %for.cond469
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB281_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB281_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB281_157 Depth=2
	movl	$0, -8(%rbp)
.LBB281_159:                            # %for.cond473
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB281_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB281_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB281_159
.LBB281_162:                            # %for.end490
                                        #   in Loop: Header=BB281_157 Depth=2
	jmp	.LBB281_163
.LBB281_163:                            # %for.inc491
                                        #   in Loop: Header=BB281_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_157
.LBB281_164:                            # %for.end493
                                        #   in Loop: Header=BB281_35 Depth=1
	jmp	.LBB281_165
.LBB281_165:                            # %if.end494
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB281_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB281_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB281_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB281_35 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB281_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB281_170:                            # %for.cond519
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB281_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB281_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB281_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_170
.LBB281_173:                            # %for.end540
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB281_174:                            # %for.cond556
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB281_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB281_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB281_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_174
.LBB281_177:                            # %for.end577
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB281_178:                            # %for.cond606
                                        #   Parent Loop BB281_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB281_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB281_178 Depth=2
	movl	$0, -4(%rbp)
.LBB281_180:                            # %for.cond610
                                        #   Parent Loop BB281_35 Depth=1
                                        #     Parent Loop BB281_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB281_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB281_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB281_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB281_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB281_184
.LBB281_183:                            # %cond.false630
                                        #   in Loop: Header=BB281_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB281_184:                            # %cond.end643
                                        #   in Loop: Header=BB281_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB281_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB281_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB281_190
.LBB281_186:                            # %cond.false648
                                        #   in Loop: Header=BB281_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB281_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB281_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB281_189
.LBB281_188:                            # %cond.false666
                                        #   in Loop: Header=BB281_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB281_189:                            # %cond.end679
                                        #   in Loop: Header=BB281_180 Depth=3
.LBB281_190:                            # %cond.end681
                                        #   in Loop: Header=BB281_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB281_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_180
.LBB281_192:                            # %for.end694
                                        #   in Loop: Header=BB281_178 Depth=2
	jmp	.LBB281_193
.LBB281_193:                            # %for.inc695
                                        #   in Loop: Header=BB281_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB281_178
.LBB281_194:                            # %for.end697
                                        #   in Loop: Header=BB281_35 Depth=1
	jmp	.LBB281_195
.LBB281_195:                            # %if.end698
                                        #   in Loop: Header=BB281_35 Depth=1
	jmp	.LBB281_196
.LBB281_196:                            # %for.inc699
                                        #   in Loop: Header=BB281_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB281_35
.LBB281_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB281_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB281_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB281_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB281_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB281_199
.LBB281_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB281_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB281_219 Depth 2
                                        #       Child Loop BB281_221 Depth 3
                                        #         Child Loop BB281_223 Depth 4
                                        #           Child Loop BB281_225 Depth 5
                                        #             Child Loop BB281_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB281_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB281_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB281_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB281_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB281_203 Depth=1
	jmp	.LBB281_241
.LBB281_207:                            # %if.end723
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB281_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB281_217
.LBB281_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB281_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB281_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB281_217
.LBB281_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB281_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB281_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB281_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB281_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB281_203 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB281_218
.LBB281_217:                            # %if.then749
                                        #   in Loop: Header=BB281_203 Depth=1
	jmp	.LBB281_241
.LBB281_218:                            # %if.end750
                                        #   in Loop: Header=BB281_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB281_219:                            # %for.cond751
                                        #   Parent Loop BB281_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB281_221 Depth 3
                                        #         Child Loop BB281_223 Depth 4
                                        #           Child Loop BB281_225 Depth 5
                                        #             Child Loop BB281_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB281_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB281_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB281_221:                            # %for.cond757
                                        #   Parent Loop BB281_203 Depth=1
                                        #     Parent Loop BB281_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB281_223 Depth 4
                                        #           Child Loop BB281_225 Depth 5
                                        #             Child Loop BB281_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB281_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB281_221 Depth=3
	movl	$0, -44(%rbp)
.LBB281_223:                            # %for.cond761
                                        #   Parent Loop BB281_203 Depth=1
                                        #     Parent Loop BB281_219 Depth=2
                                        #       Parent Loop BB281_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB281_225 Depth 5
                                        #             Child Loop BB281_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB281_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB281_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB281_225:                            # %for.cond765
                                        #   Parent Loop BB281_203 Depth=1
                                        #     Parent Loop BB281_219 Depth=2
                                        #       Parent Loop BB281_221 Depth=3
                                        #         Parent Loop BB281_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB281_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB281_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB281_227:                            # %for.cond770
                                        #   Parent Loop BB281_203 Depth=1
                                        #     Parent Loop BB281_219 Depth=2
                                        #       Parent Loop BB281_221 Depth=3
                                        #         Parent Loop BB281_223 Depth=4
                                        #           Parent Loop BB281_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB281_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB281_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB281_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB281_227
.LBB281_230:                            # %for.end803
                                        #   in Loop: Header=BB281_225 Depth=5
	jmp	.LBB281_231
.LBB281_231:                            # %for.inc804
                                        #   in Loop: Header=BB281_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB281_225
.LBB281_232:                            # %for.end806
                                        #   in Loop: Header=BB281_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB281_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB281_223
.LBB281_234:                            # %for.end810
                                        #   in Loop: Header=BB281_221 Depth=3
	jmp	.LBB281_235
.LBB281_235:                            # %for.inc811
                                        #   in Loop: Header=BB281_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB281_221
.LBB281_236:                            # %for.end813
                                        #   in Loop: Header=BB281_219 Depth=2
	jmp	.LBB281_237
.LBB281_237:                            # %for.inc814
                                        #   in Loop: Header=BB281_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB281_219
.LBB281_238:                            # %for.end816
                                        #   in Loop: Header=BB281_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB281_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB281_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB281_240:                            # %if.end820
                                        #   in Loop: Header=BB281_203 Depth=1
	jmp	.LBB281_241
.LBB281_241:                            # %for.inc821
                                        #   in Loop: Header=BB281_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB281_203
.LBB281_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB281_243:                            # %if.end824
	cmpl	$189296838, -164(%rbp)  # imm = 0xB4870C6
	jne	.LBB281_245
.LBB281_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_244
.Lfunc_end281:
	.size	IntraChromaPrediction.240, .Lfunc_end281-IntraChromaPrediction.240
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI281_0:
	.quad	.LBB281_42
	.quad	.LBB281_64
	.quad	.LBB281_83
	.quad	.LBB281_102
                                        # -- End function
	.text
	.globl	writeChromaCoeff.241    # -- Begin function writeChromaCoeff.241
	.p2align	4, 0x90
	.type	writeChromaCoeff.241,@function
writeChromaCoeff.241:                   # @writeChromaCoeff.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1331300507, -84(%rbp)  # imm = 0x4F5A089B
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB282_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB282_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB282_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB282_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB282_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB282_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB282_21
.LBB282_5:                              # %if.else
                                        #   in Loop: Header=BB282_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB282_6:                              # %for.cond18
                                        #   Parent Loop BB282_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB282_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB282_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB282_8:                              # %land.end
                                        #   in Loop: Header=BB282_6 Depth=2
	testb	$1, %al
	jne	.LBB282_9
	jmp	.LBB282_20
.LBB282_9:                              # %for.body21
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB282_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB282_12
.LBB282_11:                             # %if.else29
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB282_12:                             # %if.end
                                        #   in Loop: Header=BB282_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB282_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB282_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB282_15:                             # %lor.end
                                        #   in Loop: Header=BB282_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB282_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB282_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB282_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB282_18:                             # %lor.end45
                                        #   in Loop: Header=BB282_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB282_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB282_6
.LBB282_20:                             # %for.end
                                        #   in Loop: Header=BB282_2 Depth=1
	jmp	.LBB282_21
.LBB282_21:                             # %if.end58
                                        #   in Loop: Header=BB282_2 Depth=1
	jmp	.LBB282_22
.LBB282_22:                             # %for.inc59
                                        #   in Loop: Header=BB282_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB282_2
.LBB282_23:                             # %for.end61
	jmp	.LBB282_24
.LBB282_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB282_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB282_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_28 Depth 2
                                        #       Child Loop BB282_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB282_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB282_26 Depth=1
	movl	$0, -36(%rbp)
.LBB282_28:                             # %for.cond69
                                        #   Parent Loop BB282_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB282_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB282_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB282_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB282_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB282_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB282_47
.LBB282_31:                             # %if.else84
                                        #   in Loop: Header=BB282_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB282_32:                             # %for.cond115
                                        #   Parent Loop BB282_26 Depth=1
                                        #     Parent Loop BB282_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB282_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB282_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB282_34:                             # %land.end121
                                        #   in Loop: Header=BB282_32 Depth=3
	testb	$1, %al
	jne	.LBB282_35
	jmp	.LBB282_46
.LBB282_35:                             # %for.body122
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB282_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB282_38
.LBB282_37:                             # %if.else134
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB282_38:                             # %if.end136
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB282_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB282_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB282_41:                             # %lor.end149
                                        #   in Loop: Header=BB282_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB282_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB282_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB282_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB282_44:                             # %lor.end164
                                        #   in Loop: Header=BB282_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB282_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB282_32
.LBB282_46:                             # %for.end189
                                        #   in Loop: Header=BB282_28 Depth=2
	jmp	.LBB282_47
.LBB282_47:                             # %if.end190
                                        #   in Loop: Header=BB282_28 Depth=2
	jmp	.LBB282_48
.LBB282_48:                             # %for.inc191
                                        #   in Loop: Header=BB282_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB282_28
.LBB282_49:                             # %for.end193
                                        #   in Loop: Header=BB282_26 Depth=1
	jmp	.LBB282_50
.LBB282_50:                             # %for.inc194
                                        #   in Loop: Header=BB282_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB282_26
.LBB282_51:                             # %for.end196
	jmp	.LBB282_52
.LBB282_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1331300507, -84(%rbp)  # imm = 0x4F5A089B
	jne	.LBB282_54
.LBB282_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_53
.Lfunc_end282:
	.size	writeChromaCoeff.241, .Lfunc_end282-writeChromaCoeff.241
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.242 # -- Begin function writeCBPandLumaCoeff.242
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.242,@function
writeCBPandLumaCoeff.242:               # @writeCBPandLumaCoeff.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1882465063, -100(%rbp) # imm = 0x70342327
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB283_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB283_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB283_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB283_7
.LBB283_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB283_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB283_10
.LBB283_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB283_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB283_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB283_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB283_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB283_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB283_18
.LBB283_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB283_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB283_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB283_18
.LBB283_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB283_22
.LBB283_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB283_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB283_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB283_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB283_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB283_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB283_26
.LBB283_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB283_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB283_29
.LBB283_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB283_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB283_30:                             # %if.end93
	jmp	.LBB283_31
.LBB283_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB283_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB283_42
.LBB283_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB283_36
.LBB283_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB283_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB283_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB283_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB283_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB283_41
.LBB283_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB283_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB283_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB283_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB283_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB283_43 Depth=1
	movl	$0, -20(%rbp)
.LBB283_45:                             # %for.cond141
                                        #   Parent Loop BB283_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB283_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB283_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB283_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_45
.LBB283_48:                             # %for.end
                                        #   in Loop: Header=BB283_43 Depth=1
	jmp	.LBB283_49
.LBB283_49:                             # %for.inc152
                                        #   in Loop: Header=BB283_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB283_43
.LBB283_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB283_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB283_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB283_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB283_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB283_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB283_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB283_55:                             # %if.end169
                                        #   in Loop: Header=BB283_52 Depth=1
	jmp	.LBB283_56
.LBB283_56:                             # %for.inc170
                                        #   in Loop: Header=BB283_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_52
.LBB283_57:                             # %for.end172
	jmp	.LBB283_101
.LBB283_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB283_70
.LBB283_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB283_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB283_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB283_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB283_63:                             # %land.end184
                                        #   in Loop: Header=BB283_61 Depth=1
	testb	$1, %al
	jne	.LBB283_64
	jmp	.LBB283_69
.LBB283_64:                             # %for.body186
                                        #   in Loop: Header=BB283_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB283_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB283_67
.LBB283_66:                             # %if.else196
                                        #   in Loop: Header=BB283_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB283_67:                             # %if.end198
                                        #   in Loop: Header=BB283_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB283_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB283_61
.LBB283_69:                             # %for.end218
	jmp	.LBB283_70
.LBB283_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB283_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB283_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_74 Depth 2
                                        #       Child Loop BB283_76 Depth 3
                                        #         Child Loop BB283_78 Depth 4
                                        #           Child Loop BB283_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB283_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB283_72 Depth=1
	movl	$0, -56(%rbp)
.LBB283_74:                             # %for.cond226
                                        #   Parent Loop BB283_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB283_76 Depth 3
                                        #         Child Loop BB283_78 Depth 4
                                        #           Child Loop BB283_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB283_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB283_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB283_76:                             # %for.cond229
                                        #   Parent Loop BB283_72 Depth=1
                                        #     Parent Loop BB283_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB283_78 Depth 4
                                        #           Child Loop BB283_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB283_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB283_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB283_78:                             # %for.cond233
                                        #   Parent Loop BB283_72 Depth=1
                                        #     Parent Loop BB283_74 Depth=2
                                        #       Parent Loop BB283_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB283_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB283_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB283_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB283_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB283_91
.LBB283_81:                             # %if.else247
                                        #   in Loop: Header=BB283_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB283_82:                             # %for.cond259
                                        #   Parent Loop BB283_72 Depth=1
                                        #     Parent Loop BB283_74 Depth=2
                                        #       Parent Loop BB283_76 Depth=3
                                        #         Parent Loop BB283_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB283_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB283_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB283_84:                             # %land.end263
                                        #   in Loop: Header=BB283_82 Depth=5
	testb	$1, %al
	jne	.LBB283_85
	jmp	.LBB283_90
.LBB283_85:                             # %for.body265
                                        #   in Loop: Header=BB283_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB283_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB283_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB283_88
.LBB283_87:                             # %if.else276
                                        #   in Loop: Header=BB283_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB283_88:                             # %if.end278
                                        #   in Loop: Header=BB283_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB283_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB283_82
.LBB283_90:                             # %for.end300
                                        #   in Loop: Header=BB283_78 Depth=4
	jmp	.LBB283_91
.LBB283_91:                             # %if.end301
                                        #   in Loop: Header=BB283_78 Depth=4
	jmp	.LBB283_92
.LBB283_92:                             # %for.inc302
                                        #   in Loop: Header=BB283_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_78
.LBB283_93:                             # %for.end304
                                        #   in Loop: Header=BB283_76 Depth=3
	jmp	.LBB283_94
.LBB283_94:                             # %for.inc305
                                        #   in Loop: Header=BB283_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB283_76
.LBB283_95:                             # %for.end307
                                        #   in Loop: Header=BB283_74 Depth=2
	jmp	.LBB283_96
.LBB283_96:                             # %for.inc308
                                        #   in Loop: Header=BB283_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB283_74
.LBB283_97:                             # %for.end310
                                        #   in Loop: Header=BB283_72 Depth=1
	jmp	.LBB283_98
.LBB283_98:                             # %for.inc311
                                        #   in Loop: Header=BB283_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB283_72
.LBB283_99:                             # %for.end313
	jmp	.LBB283_100
.LBB283_100:                            # %if.end314
	jmp	.LBB283_101
.LBB283_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1882465063, -100(%rbp) # imm = 0x70342327
	jne	.LBB283_103
.LBB283_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_102
.Lfunc_end283:
	.size	writeCBPandLumaCoeff.242, .Lfunc_end283-writeCBPandLumaCoeff.242
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.243             # -- Begin function ZeroRef.243
	.p2align	4, 0x90
	.type	ZeroRef.243,@function
ZeroRef.243:                            # @ZeroRef.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$979610288, -24(%rbp)   # imm = 0x3A63AAB0
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB284_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB284_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB284_1 Depth=1
	movl	$0, -12(%rbp)
.LBB284_3:                              # %for.cond1
                                        #   Parent Loop BB284_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB284_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB284_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB284_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB284_11
.LBB284_6:                              # %if.end
                                        #   in Loop: Header=BB284_3 Depth=2
	jmp	.LBB284_7
.LBB284_7:                              # %for.inc
                                        #   in Loop: Header=BB284_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_3
.LBB284_8:                              # %for.end
                                        #   in Loop: Header=BB284_1 Depth=1
	jmp	.LBB284_9
.LBB284_9:                              # %for.inc10
                                        #   in Loop: Header=BB284_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB284_1
.LBB284_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB284_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$979610288, -24(%rbp)   # imm = 0x3A63AAB0
	jne	.LBB284_13
.LBB284_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_12
.Lfunc_end284:
	.size	ZeroRef.243, .Lfunc_end284-ZeroRef.243
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.244 # -- Begin function writeCBPandLumaCoeff.244
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.244,@function
writeCBPandLumaCoeff.244:               # @writeCBPandLumaCoeff.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$533082899, -100(%rbp)  # imm = 0x1FC63313
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB285_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB285_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB285_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB285_7
.LBB285_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB285_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB285_10
.LBB285_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB285_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB285_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB285_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB285_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB285_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB285_18
.LBB285_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB285_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB285_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB285_18
.LBB285_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB285_22
.LBB285_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB285_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB285_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB285_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB285_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB285_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB285_26
.LBB285_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB285_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB285_29
.LBB285_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB285_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB285_30:                             # %if.end93
	jmp	.LBB285_31
.LBB285_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB285_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB285_42
.LBB285_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB285_36
.LBB285_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB285_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB285_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB285_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB285_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB285_41
.LBB285_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB285_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB285_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB285_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB285_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB285_43 Depth=1
	movl	$0, -20(%rbp)
.LBB285_45:                             # %for.cond141
                                        #   Parent Loop BB285_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB285_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB285_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB285_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB285_45
.LBB285_48:                             # %for.end
                                        #   in Loop: Header=BB285_43 Depth=1
	jmp	.LBB285_49
.LBB285_49:                             # %for.inc152
                                        #   in Loop: Header=BB285_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB285_43
.LBB285_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB285_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB285_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB285_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB285_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB285_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB285_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB285_55:                             # %if.end169
                                        #   in Loop: Header=BB285_52 Depth=1
	jmp	.LBB285_56
.LBB285_56:                             # %for.inc170
                                        #   in Loop: Header=BB285_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB285_52
.LBB285_57:                             # %for.end172
	jmp	.LBB285_101
.LBB285_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB285_70
.LBB285_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB285_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB285_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB285_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB285_63:                             # %land.end184
                                        #   in Loop: Header=BB285_61 Depth=1
	testb	$1, %al
	jne	.LBB285_64
	jmp	.LBB285_69
.LBB285_64:                             # %for.body186
                                        #   in Loop: Header=BB285_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB285_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB285_67
.LBB285_66:                             # %if.else196
                                        #   in Loop: Header=BB285_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB285_67:                             # %if.end198
                                        #   in Loop: Header=BB285_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB285_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB285_61
.LBB285_69:                             # %for.end218
	jmp	.LBB285_70
.LBB285_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB285_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB285_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_74 Depth 2
                                        #       Child Loop BB285_76 Depth 3
                                        #         Child Loop BB285_78 Depth 4
                                        #           Child Loop BB285_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB285_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB285_72 Depth=1
	movl	$0, -60(%rbp)
.LBB285_74:                             # %for.cond226
                                        #   Parent Loop BB285_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB285_76 Depth 3
                                        #         Child Loop BB285_78 Depth 4
                                        #           Child Loop BB285_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB285_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB285_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB285_76:                             # %for.cond229
                                        #   Parent Loop BB285_72 Depth=1
                                        #     Parent Loop BB285_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB285_78 Depth 4
                                        #           Child Loop BB285_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB285_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB285_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB285_78:                             # %for.cond233
                                        #   Parent Loop BB285_72 Depth=1
                                        #     Parent Loop BB285_74 Depth=2
                                        #       Parent Loop BB285_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB285_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB285_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB285_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB285_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB285_91
.LBB285_81:                             # %if.else247
                                        #   in Loop: Header=BB285_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB285_82:                             # %for.cond259
                                        #   Parent Loop BB285_72 Depth=1
                                        #     Parent Loop BB285_74 Depth=2
                                        #       Parent Loop BB285_76 Depth=3
                                        #         Parent Loop BB285_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB285_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB285_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB285_84:                             # %land.end263
                                        #   in Loop: Header=BB285_82 Depth=5
	testb	$1, %al
	jne	.LBB285_85
	jmp	.LBB285_90
.LBB285_85:                             # %for.body265
                                        #   in Loop: Header=BB285_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB285_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB285_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB285_88
.LBB285_87:                             # %if.else276
                                        #   in Loop: Header=BB285_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB285_88:                             # %if.end278
                                        #   in Loop: Header=BB285_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB285_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB285_82
.LBB285_90:                             # %for.end300
                                        #   in Loop: Header=BB285_78 Depth=4
	jmp	.LBB285_91
.LBB285_91:                             # %if.end301
                                        #   in Loop: Header=BB285_78 Depth=4
	jmp	.LBB285_92
.LBB285_92:                             # %for.inc302
                                        #   in Loop: Header=BB285_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB285_78
.LBB285_93:                             # %for.end304
                                        #   in Loop: Header=BB285_76 Depth=3
	jmp	.LBB285_94
.LBB285_94:                             # %for.inc305
                                        #   in Loop: Header=BB285_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB285_76
.LBB285_95:                             # %for.end307
                                        #   in Loop: Header=BB285_74 Depth=2
	jmp	.LBB285_96
.LBB285_96:                             # %for.inc308
                                        #   in Loop: Header=BB285_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB285_74
.LBB285_97:                             # %for.end310
                                        #   in Loop: Header=BB285_72 Depth=1
	jmp	.LBB285_98
.LBB285_98:                             # %for.inc311
                                        #   in Loop: Header=BB285_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB285_72
.LBB285_99:                             # %for.end313
	jmp	.LBB285_100
.LBB285_100:                            # %if.end314
	jmp	.LBB285_101
.LBB285_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$533082899, -100(%rbp)  # imm = 0x1FC63313
	jne	.LBB285_103
.LBB285_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_102
.Lfunc_end285:
	.size	writeCBPandLumaCoeff.244, .Lfunc_end285-writeCBPandLumaCoeff.244
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.245 # -- Begin function IntraChromaPrediction4x4.245
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.245,@function
IntraChromaPrediction4x4.245:           # @IntraChromaPrediction4x4.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$194491172, -28(%rbp)   # imm = 0xB97B324
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB286_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB286_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB286_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB286_3:                              # %for.cond1
                                        #   Parent Loop BB286_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB286_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB286_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB286_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB286_3
.LBB286_6:                              # %for.end
                                        #   in Loop: Header=BB286_1 Depth=1
	jmp	.LBB286_7
.LBB286_7:                              # %for.inc17
                                        #   in Loop: Header=BB286_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB286_1
.LBB286_8:                              # %for.end19
	cmpl	$194491172, -28(%rbp)   # imm = 0xB97B324
	jne	.LBB286_10
.LBB286_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_9
.Lfunc_end286:
	.size	IntraChromaPrediction4x4.245, .Lfunc_end286-IntraChromaPrediction4x4.245
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.246 # -- Begin function writeCBPandLumaCoeff.246
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.246,@function
writeCBPandLumaCoeff.246:               # @writeCBPandLumaCoeff.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1634616450, -108(%rbp) # imm = 0x616E4482
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB287_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB287_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB287_7
.LBB287_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB287_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB287_10
.LBB287_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB287_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB287_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB287_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB287_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB287_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB287_18
.LBB287_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB287_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB287_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB287_18
.LBB287_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB287_22
.LBB287_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB287_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB287_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB287_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB287_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB287_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB287_26
.LBB287_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB287_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB287_29
.LBB287_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB287_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB287_30:                             # %if.end93
	jmp	.LBB287_31
.LBB287_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB287_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB287_42
.LBB287_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB287_36
.LBB287_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB287_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB287_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB287_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB287_41
.LBB287_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB287_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB287_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB287_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB287_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB287_43 Depth=1
	movl	$0, -20(%rbp)
.LBB287_45:                             # %for.cond141
                                        #   Parent Loop BB287_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB287_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB287_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB287_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_45
.LBB287_48:                             # %for.end
                                        #   in Loop: Header=BB287_43 Depth=1
	jmp	.LBB287_49
.LBB287_49:                             # %for.inc152
                                        #   in Loop: Header=BB287_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB287_43
.LBB287_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB287_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB287_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB287_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB287_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB287_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB287_55:                             # %if.end169
                                        #   in Loop: Header=BB287_52 Depth=1
	jmp	.LBB287_56
.LBB287_56:                             # %for.inc170
                                        #   in Loop: Header=BB287_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_52
.LBB287_57:                             # %for.end172
	jmp	.LBB287_101
.LBB287_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB287_70
.LBB287_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB287_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB287_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB287_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB287_63:                             # %land.end184
                                        #   in Loop: Header=BB287_61 Depth=1
	testb	$1, %al
	jne	.LBB287_64
	jmp	.LBB287_69
.LBB287_64:                             # %for.body186
                                        #   in Loop: Header=BB287_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB287_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB287_67
.LBB287_66:                             # %if.else196
                                        #   in Loop: Header=BB287_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB287_67:                             # %if.end198
                                        #   in Loop: Header=BB287_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB287_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB287_61
.LBB287_69:                             # %for.end218
	jmp	.LBB287_70
.LBB287_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB287_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB287_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_74 Depth 2
                                        #       Child Loop BB287_76 Depth 3
                                        #         Child Loop BB287_78 Depth 4
                                        #           Child Loop BB287_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB287_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB287_72 Depth=1
	movl	$0, -60(%rbp)
.LBB287_74:                             # %for.cond226
                                        #   Parent Loop BB287_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB287_76 Depth 3
                                        #         Child Loop BB287_78 Depth 4
                                        #           Child Loop BB287_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB287_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB287_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB287_76:                             # %for.cond229
                                        #   Parent Loop BB287_72 Depth=1
                                        #     Parent Loop BB287_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB287_78 Depth 4
                                        #           Child Loop BB287_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB287_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB287_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB287_78:                             # %for.cond233
                                        #   Parent Loop BB287_72 Depth=1
                                        #     Parent Loop BB287_74 Depth=2
                                        #       Parent Loop BB287_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB287_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB287_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB287_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB287_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB287_91
.LBB287_81:                             # %if.else247
                                        #   in Loop: Header=BB287_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB287_82:                             # %for.cond259
                                        #   Parent Loop BB287_72 Depth=1
                                        #     Parent Loop BB287_74 Depth=2
                                        #       Parent Loop BB287_76 Depth=3
                                        #         Parent Loop BB287_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB287_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB287_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB287_84:                             # %land.end263
                                        #   in Loop: Header=BB287_82 Depth=5
	testb	$1, %al
	jne	.LBB287_85
	jmp	.LBB287_90
.LBB287_85:                             # %for.body265
                                        #   in Loop: Header=BB287_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB287_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB287_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB287_88
.LBB287_87:                             # %if.else276
                                        #   in Loop: Header=BB287_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB287_88:                             # %if.end278
                                        #   in Loop: Header=BB287_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB287_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB287_82
.LBB287_90:                             # %for.end300
                                        #   in Loop: Header=BB287_78 Depth=4
	jmp	.LBB287_91
.LBB287_91:                             # %if.end301
                                        #   in Loop: Header=BB287_78 Depth=4
	jmp	.LBB287_92
.LBB287_92:                             # %for.inc302
                                        #   in Loop: Header=BB287_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB287_78
.LBB287_93:                             # %for.end304
                                        #   in Loop: Header=BB287_76 Depth=3
	jmp	.LBB287_94
.LBB287_94:                             # %for.inc305
                                        #   in Loop: Header=BB287_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB287_76
.LBB287_95:                             # %for.end307
                                        #   in Loop: Header=BB287_74 Depth=2
	jmp	.LBB287_96
.LBB287_96:                             # %for.inc308
                                        #   in Loop: Header=BB287_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB287_74
.LBB287_97:                             # %for.end310
                                        #   in Loop: Header=BB287_72 Depth=1
	jmp	.LBB287_98
.LBB287_98:                             # %for.inc311
                                        #   in Loop: Header=BB287_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB287_72
.LBB287_99:                             # %for.end313
	jmp	.LBB287_100
.LBB287_100:                            # %if.end314
	jmp	.LBB287_101
.LBB287_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1634616450, -108(%rbp) # imm = 0x616E4482
	jne	.LBB287_103
.LBB287_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_102
.Lfunc_end287:
	.size	writeCBPandLumaCoeff.246, .Lfunc_end287-writeCBPandLumaCoeff.246
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.247 # -- Begin function OneComponentLumaPrediction4x4.247
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.247,@function
OneComponentLumaPrediction4x4.247:      # @OneComponentLumaPrediction4x4.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$685831580, -84(%rbp)   # imm = 0x28E0F59C
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$685831580, -84(%rbp)   # imm = 0x28E0F59C
	jne	.LBB288_2
.LBB288_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_1
.Lfunc_end288:
	.size	OneComponentLumaPrediction4x4.247, .Lfunc_end288-OneComponentLumaPrediction4x4.247
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.248 # -- Begin function LumaResidualCoding8x8.248
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.248,@function
LumaResidualCoding8x8.248:              # @LumaResidualCoding8x8.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1619939355, -128(%rbp) # imm = 0x608E501B
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB289_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB289_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB289_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB289_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB289_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB289_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_8 Depth 2
                                        #       Child Loop BB289_11 Depth 3
                                        #         Child Loop BB289_13 Depth 4
                                        #       Child Loop BB289_19 Depth 3
                                        #         Child Loop BB289_21 Depth 4
                                        #       Child Loop BB289_29 Depth 3
                                        #         Child Loop BB289_31 Depth 4
                                        #       Child Loop BB289_40 Depth 3
                                        #         Child Loop BB289_42 Depth 4
                                        #       Child Loop BB289_57 Depth 3
                                        #         Child Loop BB289_59 Depth 4
                                        #       Child Loop BB289_67 Depth 3
                                        #         Child Loop BB289_69 Depth 4
                                        #       Child Loop BB289_84 Depth 3
                                        #         Child Loop BB289_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB289_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB289_8:                              # %for.cond9
                                        #   Parent Loop BB289_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_11 Depth 3
                                        #         Child Loop BB289_13 Depth 4
                                        #       Child Loop BB289_19 Depth 3
                                        #         Child Loop BB289_21 Depth 4
                                        #       Child Loop BB289_29 Depth 3
                                        #         Child Loop BB289_31 Depth 4
                                        #       Child Loop BB289_40 Depth 3
                                        #         Child Loop BB289_42 Depth 4
                                        #       Child Loop BB289_57 Depth 3
                                        #         Child Loop BB289_59 Depth 4
                                        #       Child Loop BB289_67 Depth 3
                                        #         Child Loop BB289_69 Depth 4
                                        #       Child Loop BB289_84 Depth 3
                                        #         Child Loop BB289_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB289_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB289_11:                             # %for.cond16
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB289_11 Depth=3
	movl	$0, -16(%rbp)
.LBB289_13:                             # %for.cond20
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB289_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB289_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_13
.LBB289_16:                             # %for.end
                                        #   in Loop: Header=BB289_11 Depth=3
	jmp	.LBB289_17
.LBB289_17:                             # %for.inc37
                                        #   in Loop: Header=BB289_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_11
.LBB289_18:                             # %for.end39
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB289_19:                             # %for.cond41
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB289_19 Depth=3
	movl	$0, -16(%rbp)
.LBB289_21:                             # %for.cond45
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB289_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB289_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_21
.LBB289_24:                             # %for.end65
                                        #   in Loop: Header=BB289_19 Depth=3
	jmp	.LBB289_25
.LBB289_25:                             # %for.inc66
                                        #   in Loop: Header=BB289_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_19
.LBB289_26:                             # %for.end68
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_27
.LBB289_27:                             # %if.end69
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB289_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	$0, -12(%rbp)
.LBB289_29:                             # %for.cond74
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB289_29 Depth=3
	movl	$0, -16(%rbp)
.LBB289_31:                             # %for.cond78
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB289_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB289_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_31
.LBB289_34:                             # %for.end98
                                        #   in Loop: Header=BB289_29 Depth=3
	jmp	.LBB289_35
.LBB289_35:                             # %for.inc99
                                        #   in Loop: Header=BB289_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_29
.LBB289_36:                             # %for.end101
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_37
.LBB289_37:                             # %if.end102
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB289_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB289_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	$0, -12(%rbp)
.LBB289_40:                             # %for.cond108
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB289_40 Depth=3
	movl	$0, -16(%rbp)
.LBB289_42:                             # %for.cond112
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB289_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB289_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_42
.LBB289_45:                             # %for.end137
                                        #   in Loop: Header=BB289_40 Depth=3
	jmp	.LBB289_46
.LBB289_46:                             # %for.inc138
                                        #   in Loop: Header=BB289_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_40
.LBB289_47:                             # %for.end140
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB289_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB289_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB289_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB289_52
.LBB289_51:                             # %if.else
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB289_52:                             # %if.end151
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB289_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB289_54:                             # %if.end157
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_55
.LBB289_55:                             # %if.end158
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_65
.LBB289_56:                             # %if.else159
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	$0, -12(%rbp)
.LBB289_57:                             # %for.cond160
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB289_57 Depth=3
	movl	$0, -16(%rbp)
.LBB289_59:                             # %for.cond164
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB289_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB289_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_59
.LBB289_62:                             # %for.end193
                                        #   in Loop: Header=BB289_57 Depth=3
	jmp	.LBB289_63
.LBB289_63:                             # %for.inc194
                                        #   in Loop: Header=BB289_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_57
.LBB289_64:                             # %for.end196
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_65
.LBB289_65:                             # %if.end197
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_95
.LBB289_66:                             # %if.else198
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	$0, -12(%rbp)
.LBB289_67:                             # %for.cond199
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB289_67 Depth=3
	movl	$0, -16(%rbp)
.LBB289_69:                             # %for.cond203
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB289_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -80(%rbp)
	jne	.LBB289_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB289_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB289_73
.LBB289_72:                             # %if.else300
                                        #   in Loop: Header=BB289_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB289_73:                             # %if.end314
                                        #   in Loop: Header=BB289_69 Depth=4
	jmp	.LBB289_74
.LBB289_74:                             # %for.inc315
                                        #   in Loop: Header=BB289_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_69
.LBB289_75:                             # %for.end317
                                        #   in Loop: Header=BB289_67 Depth=3
	jmp	.LBB289_76
.LBB289_76:                             # %for.inc318
                                        #   in Loop: Header=BB289_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_67
.LBB289_77:                             # %for.end320
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB289_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB289_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB289_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB289_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB289_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB289_83
.LBB289_82:                             # %if.else334
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB289_83:                             # %if.end336
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	$0, -12(%rbp)
.LBB289_84:                             # %for.cond337
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB289_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB289_84 Depth=3
	movl	$0, -16(%rbp)
.LBB289_86:                             # %for.cond341
                                        #   Parent Loop BB289_6 Depth=1
                                        #     Parent Loop BB289_8 Depth=2
                                        #       Parent Loop BB289_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB289_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB289_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_86
.LBB289_89:                             # %for.end358
                                        #   in Loop: Header=BB289_84 Depth=3
	jmp	.LBB289_90
.LBB289_90:                             # %for.inc359
                                        #   in Loop: Header=BB289_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_84
.LBB289_91:                             # %for.end361
                                        #   in Loop: Header=BB289_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB289_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB289_93:                             # %if.end368
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_94
.LBB289_94:                             # %if.end369
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_95
.LBB289_95:                             # %if.end370
                                        #   in Loop: Header=BB289_8 Depth=2
	jmp	.LBB289_96
.LBB289_96:                             # %for.inc371
                                        #   in Loop: Header=BB289_8 Depth=2
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB289_8
.LBB289_97:                             # %for.end374
                                        #   in Loop: Header=BB289_6 Depth=1
	jmp	.LBB289_98
.LBB289_98:                             # %for.inc375
                                        #   in Loop: Header=BB289_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB289_6
.LBB289_99:                             # %for.end378
	cmpl	$0, -80(%rbp)
	je	.LBB289_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB289_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB289_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB289_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB289_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB289_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB289_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB289_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB289_106 Depth=1
	movl	$0, -16(%rbp)
.LBB289_108:                            # %for.cond400
                                        #   Parent Loop BB289_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB289_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB289_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB289_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_108
.LBB289_111:                            # %for.end417
                                        #   in Loop: Header=BB289_106 Depth=1
	jmp	.LBB289_112
.LBB289_112:                            # %for.inc418
                                        #   in Loop: Header=BB289_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_106
.LBB289_113:                            # %for.end420
	jmp	.LBB289_114
.LBB289_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB289_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB289_116:                            # %if.end431
	jmp	.LBB289_117
.LBB289_117:                            # %if.end432
	jmp	.LBB289_118
.LBB289_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB289_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB289_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB289_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB289_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB289_145
.LBB289_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB289_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB289_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB289_126:                            # %for.cond462
                                        #   Parent Loop BB289_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB289_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB289_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB289_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB289_130
.LBB289_129:                            # %if.else481
                                        #   in Loop: Header=BB289_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB289_130:                            # %if.end486
                                        #   in Loop: Header=BB289_126 Depth=2
	jmp	.LBB289_131
.LBB289_131:                            # %for.inc487
                                        #   in Loop: Header=BB289_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_126
.LBB289_132:                            # %for.end489
                                        #   in Loop: Header=BB289_124 Depth=1
	jmp	.LBB289_133
.LBB289_133:                            # %for.inc490
                                        #   in Loop: Header=BB289_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_124
.LBB289_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB289_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB289_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB289_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB289_138:                            # %for.cond502
                                        #   Parent Loop BB289_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB289_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB289_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB289_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_138
.LBB289_141:                            # %for.end509
                                        #   in Loop: Header=BB289_136 Depth=1
	jmp	.LBB289_142
.LBB289_142:                            # %for.inc510
                                        #   in Loop: Header=BB289_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_136
.LBB289_143:                            # %for.end512
	jmp	.LBB289_144
.LBB289_144:                            # %if.end513
	jmp	.LBB289_145
.LBB289_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1619939355, -128(%rbp) # imm = 0x608E501B
	jne	.LBB289_147
.LBB289_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_146
.Lfunc_end289:
	.size	LumaResidualCoding8x8.248, .Lfunc_end289-LumaResidualCoding8x8.248
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.249       # -- Begin function slice_too_big.249
	.p2align	4, 0x90
	.type	slice_too_big.249,@function
slice_too_big.249:                      # @slice_too_big.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1796411708, -56(%rbp)  # imm = 0x6B13113C
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB290_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB290_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB290_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB290_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB290_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB290_5:                              # %if.end
                                        #   in Loop: Header=BB290_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB290_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB290_7:                              # %if.end8
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB290_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB290_21
.LBB290_9:                              # %if.end11
                                        #   in Loop: Header=BB290_2 Depth=1
	jmp	.LBB290_10
.LBB290_10:                             # %for.inc
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_2
.LBB290_11:                             # %for.end
	jmp	.LBB290_12
.LBB290_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB290_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB290_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB290_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB290_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB290_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB290_21
.LBB290_17:                             # %if.end27
                                        #   in Loop: Header=BB290_14 Depth=1
	jmp	.LBB290_18
.LBB290_18:                             # %for.inc28
                                        #   in Loop: Header=BB290_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_14
.LBB290_19:                             # %for.end30
	jmp	.LBB290_20
.LBB290_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB290_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1796411708, -56(%rbp)  # imm = 0x6B13113C
	jne	.LBB290_23
.LBB290_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_22
.Lfunc_end290:
	.size	slice_too_big.249, .Lfunc_end290-slice_too_big.249
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.250        # -- Begin function writeMBLayer.250
	.p2align	4, 0x90
	.type	writeMBLayer.250,@function
writeMBLayer.250:                       # @writeMBLayer.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1160163281, -96(%rbp)  # imm = 0x4526AFD1
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB291_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB291_3
.LBB291_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB291_3
.LBB291_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB291_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB291_9
.LBB291_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB291_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB291_8
.LBB291_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB291_8
.LBB291_8:                              # %cond.end14
.LBB291_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB291_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB291_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB291_24
.LBB291_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB291_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB291_17
	jmp	.LBB291_18
.LBB291_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB291_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB291_18
	jmp	.LBB291_17
.LBB291_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB291_17
	jmp	.LBB291_18
.LBB291_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB291_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB291_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB291_23
.LBB291_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB291_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB291_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB291_23:                             # %if.end50
	jmp	.LBB291_24
.LBB291_24:                             # %if.end51
	jmp	.LBB291_25
.LBB291_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB291_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB291_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB291_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB291_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB291_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB291_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB291_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB291_35
.LBB291_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB291_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB291_38
.LBB291_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB291_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB291_39:                             # %if.end96
	jmp	.LBB291_40
.LBB291_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB291_43
.LBB291_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB291_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB291_89
.LBB291_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB291_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB291_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB291_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB291_49
.LBB291_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB291_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB291_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB291_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB291_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB291_55
.LBB291_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB291_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB291_58
.LBB291_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB291_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB291_59:                             # %if.end198
	jmp	.LBB291_60
.LBB291_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB291_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB291_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB291_64
.LBB291_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB291_64:                             # %if.end226
	jmp	.LBB291_88
.LBB291_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB291_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB291_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB291_76
.LBB291_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB291_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB291_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB291_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB291_72:                             # %if.end281
	jmp	.LBB291_73
.LBB291_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB291_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB291_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB291_87
.LBB291_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB291_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB291_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB291_77 Depth=1
	movl	$0, -44(%rbp)
.LBB291_79:                             # %for.cond310
                                        #   Parent Loop BB291_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB291_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB291_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB291_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB291_79
.LBB291_82:                             # %for.end
                                        #   in Loop: Header=BB291_77 Depth=1
	jmp	.LBB291_83
.LBB291_83:                             # %for.inc322
                                        #   in Loop: Header=BB291_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB291_77
.LBB291_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB291_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB291_86:                             # %if.end345
	jmp	.LBB291_87
.LBB291_87:                             # %if.end346
	jmp	.LBB291_88
.LBB291_88:                             # %if.end347
	jmp	.LBB291_89
.LBB291_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB291_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB291_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB291_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB291_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB291_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB291_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB291_98
.LBB291_97:                             # %if.else380
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB291_98:                             # %if.end382
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB291_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB291_101
.LBB291_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB291_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB291_101:                            # %lor.end415
                                        #   in Loop: Header=BB291_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB291_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB291_94
.LBB291_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB291_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB291_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB291_114
.LBB291_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB291_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB291_110
.LBB291_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB291_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB291_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB291_113
.LBB291_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB291_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB291_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB291_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB291_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_120
.LBB291_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB291_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB291_119:                            # %if.end483
	jmp	.LBB291_120
.LBB291_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB291_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB291_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB291_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB291_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB291_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB291_129
.LBB291_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB291_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB291_128:                            # %if.end516
	jmp	.LBB291_129
.LBB291_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1160163281, -96(%rbp)  # imm = 0x4526AFD1
	jne	.LBB291_131
.LBB291_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_130
.Lfunc_end291:
	.size	writeMBLayer.250, .Lfunc_end291-writeMBLayer.250
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.251  # -- Begin function LumaResidualCoding.251
	.p2align	4, 0x90
	.type	LumaResidualCoding.251,@function
LumaResidualCoding.251:                 # @LumaResidualCoding.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1921347208, -44(%rbp)  # imm = 0x72856E88
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB292_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB292_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_1
.LBB292_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB292_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB292_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB292_33
.LBB292_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB292_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB292_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB292_8 Depth=1
	movl	$0, -8(%rbp)
.LBB292_10:                             # %for.cond13
                                        #   Parent Loop BB292_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB292_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB292_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB292_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB292_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB292_14
.LBB292_13:                             # %if.else
                                        #   in Loop: Header=BB292_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB292_14:                             # %if.end
                                        #   in Loop: Header=BB292_10 Depth=2
	jmp	.LBB292_15
.LBB292_15:                             # %for.inc31
                                        #   in Loop: Header=BB292_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB292_10
.LBB292_16:                             # %for.end33
                                        #   in Loop: Header=BB292_8 Depth=1
	jmp	.LBB292_17
.LBB292_17:                             # %for.inc34
                                        #   in Loop: Header=BB292_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_8
.LBB292_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB292_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB292_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_22 Depth 2
                                        #       Child Loop BB292_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB292_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB292_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB292_22:                             # %for.cond45
                                        #   Parent Loop BB292_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB292_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB292_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB292_22 Depth=2
	movl	$0, -8(%rbp)
.LBB292_24:                             # %for.cond48
                                        #   Parent Loop BB292_20 Depth=1
                                        #     Parent Loop BB292_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB292_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB292_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB292_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB292_24
.LBB292_27:                             # %for.end55
                                        #   in Loop: Header=BB292_22 Depth=2
	jmp	.LBB292_28
.LBB292_28:                             # %for.inc56
                                        #   in Loop: Header=BB292_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_22
.LBB292_29:                             # %for.end58
                                        #   in Loop: Header=BB292_20 Depth=1
	jmp	.LBB292_30
.LBB292_30:                             # %for.inc59
                                        #   in Loop: Header=BB292_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_20
.LBB292_31:                             # %for.end61
	jmp	.LBB292_32
.LBB292_32:                             # %if.end62
	jmp	.LBB292_33
.LBB292_33:                             # %if.end63
	cmpl	$1921347208, -44(%rbp)  # imm = 0x72856E88
	jne	.LBB292_35
.LBB292_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_34
.Lfunc_end292:
	.size	LumaResidualCoding.251, .Lfunc_end292-LumaResidualCoding.251
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.252             # -- Begin function ZeroRef.252
	.p2align	4, 0x90
	.type	ZeroRef.252,@function
ZeroRef.252:                            # @ZeroRef.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1297714685, -24(%rbp)  # imm = 0x4D598DFD
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB293_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB293_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB293_1 Depth=1
	movl	$0, -12(%rbp)
.LBB293_3:                              # %for.cond1
                                        #   Parent Loop BB293_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB293_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB293_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB293_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB293_11
.LBB293_6:                              # %if.end
                                        #   in Loop: Header=BB293_3 Depth=2
	jmp	.LBB293_7
.LBB293_7:                              # %for.inc
                                        #   in Loop: Header=BB293_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_3
.LBB293_8:                              # %for.end
                                        #   in Loop: Header=BB293_1 Depth=1
	jmp	.LBB293_9
.LBB293_9:                              # %for.inc10
                                        #   in Loop: Header=BB293_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB293_1
.LBB293_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB293_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1297714685, -24(%rbp)  # imm = 0x4D598DFD
	jne	.LBB293_13
.LBB293_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_12
.Lfunc_end293:
	.size	ZeroRef.252, .Lfunc_end293-ZeroRef.252
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.253 # -- Begin function IntraChromaPrediction4x4.253
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.253,@function
IntraChromaPrediction4x4.253:           # @IntraChromaPrediction4x4.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$718871721, -24(%rbp)   # imm = 0x2AD91CA9
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB294_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB294_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB294_3:                              # %for.cond1
                                        #   Parent Loop BB294_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB294_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB294_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB294_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_3
.LBB294_6:                              # %for.end
                                        #   in Loop: Header=BB294_1 Depth=1
	jmp	.LBB294_7
.LBB294_7:                              # %for.inc17
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_1
.LBB294_8:                              # %for.end19
	cmpl	$718871721, -24(%rbp)   # imm = 0x2AD91CA9
	jne	.LBB294_10
.LBB294_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_9
.Lfunc_end294:
	.size	IntraChromaPrediction4x4.253, .Lfunc_end294-IntraChromaPrediction4x4.253
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.254             # -- Begin function ZeroRef.254
	.p2align	4, 0x90
	.type	ZeroRef.254,@function
ZeroRef.254:                            # @ZeroRef.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$881514886, -24(%rbp)   # imm = 0x348AD986
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB295_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB295_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB295_1 Depth=1
	movl	$0, -12(%rbp)
.LBB295_3:                              # %for.cond1
                                        #   Parent Loop BB295_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB295_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB295_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB295_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB295_11
.LBB295_6:                              # %if.end
                                        #   in Loop: Header=BB295_3 Depth=2
	jmp	.LBB295_7
.LBB295_7:                              # %for.inc
                                        #   in Loop: Header=BB295_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_3
.LBB295_8:                              # %for.end
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_9
.LBB295_9:                              # %for.inc10
                                        #   in Loop: Header=BB295_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB295_1
.LBB295_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB295_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$881514886, -24(%rbp)   # imm = 0x348AD986
	jne	.LBB295_13
.LBB295_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_12
.Lfunc_end295:
	.size	ZeroRef.254, .Lfunc_end295-ZeroRef.254
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.255 # -- Begin function ChromaResidualCoding.255
	.p2align	4, 0x90
	.type	ChromaResidualCoding.255,@function
ChromaResidualCoding.255:               # @ChromaResidualCoding.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$679553682, -76(%rbp)   # imm = 0x28812A92
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB296_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB296_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB296_3:                              # %lor.end
.LBB296_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB296_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_7 Depth 2
                                        #       Child Loop BB296_9 Depth 3
                                        #     Child Loop BB296_16 Depth 2
                                        #       Child Loop BB296_18 Depth 3
                                        #     Child Loop BB296_33 Depth 2
                                        #       Child Loop BB296_35 Depth 3
                                        #     Child Loop BB296_43 Depth 2
                                        #       Child Loop BB296_45 Depth 3
                                        #     Child Loop BB296_58 Depth 2
                                        #       Child Loop BB296_60 Depth 3
                                        #     Child Loop BB296_87 Depth 2
                                        #       Child Loop BB296_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB296_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB296_7:                              # %for.cond5
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB296_7 Depth=2
	movl	$0, -24(%rbp)
.LBB296_9:                              # %for.cond8
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB296_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB296_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB296_9
.LBB296_12:                             # %for.end
                                        #   in Loop: Header=BB296_7 Depth=2
	jmp	.LBB296_13
.LBB296_13:                             # %for.inc18
                                        #   in Loop: Header=BB296_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB296_7
.LBB296_14:                             # %for.end20
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB296_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -8(%rbp)
.LBB296_16:                             # %for.cond21
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB296_16 Depth=2
	movl	$0, -4(%rbp)
.LBB296_18:                             # %for.cond26
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB296_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB296_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB296_25
.LBB296_21:                             # %if.else
                                        #   in Loop: Header=BB296_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB296_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB296_24
.LBB296_23:                             # %if.else52
                                        #   in Loop: Header=BB296_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB296_24:                             # %if.end
                                        #   in Loop: Header=BB296_18 Depth=3
	jmp	.LBB296_25
.LBB296_25:                             # %if.end57
                                        #   in Loop: Header=BB296_18 Depth=3
	jmp	.LBB296_26
.LBB296_26:                             # %for.inc58
                                        #   in Loop: Header=BB296_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_18
.LBB296_27:                             # %for.end59
                                        #   in Loop: Header=BB296_16 Depth=2
	jmp	.LBB296_28
.LBB296_28:                             # %for.inc60
                                        #   in Loop: Header=BB296_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_16
.LBB296_29:                             # %for.end62
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_74
.LBB296_30:                             # %if.else63
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB296_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -8(%rbp)
.LBB296_33:                             # %for.cond69
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB296_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB296_33 Depth=2
	movl	$0, -4(%rbp)
.LBB296_35:                             # %for.cond73
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB296_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB296_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB296_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_35
.LBB296_38:                             # %for.end83
                                        #   in Loop: Header=BB296_33 Depth=2
	jmp	.LBB296_39
.LBB296_39:                             # %for.inc84
                                        #   in Loop: Header=BB296_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_33
.LBB296_40:                             # %for.end86
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_73
.LBB296_41:                             # %if.else87
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB296_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -8(%rbp)
.LBB296_43:                             # %for.cond90
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB296_43 Depth=2
	movl	$0, -4(%rbp)
.LBB296_45:                             # %for.cond95
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB296_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB296_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB296_52
.LBB296_48:                             # %if.else119
                                        #   in Loop: Header=BB296_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB296_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB296_51
.LBB296_50:                             # %if.else127
                                        #   in Loop: Header=BB296_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB296_51:                             # %if.end132
                                        #   in Loop: Header=BB296_45 Depth=3
	jmp	.LBB296_52
.LBB296_52:                             # %if.end133
                                        #   in Loop: Header=BB296_45 Depth=3
	jmp	.LBB296_53
.LBB296_53:                             # %for.inc134
                                        #   in Loop: Header=BB296_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_45
.LBB296_54:                             # %for.end136
                                        #   in Loop: Header=BB296_43 Depth=2
	jmp	.LBB296_55
.LBB296_55:                             # %for.inc137
                                        #   in Loop: Header=BB296_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_43
.LBB296_56:                             # %for.end139
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_72
.LBB296_57:                             # %if.else140
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -8(%rbp)
.LBB296_58:                             # %for.cond141
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB296_58 Depth=2
	movl	$0, -4(%rbp)
.LBB296_60:                             # %for.cond146
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB296_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB296_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB296_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB296_67
.LBB296_63:                             # %if.else175
                                        #   in Loop: Header=BB296_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB296_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB296_66
.LBB296_65:                             # %if.else188
                                        #   in Loop: Header=BB296_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB296_66:                             # %if.end198
                                        #   in Loop: Header=BB296_60 Depth=3
	jmp	.LBB296_67
.LBB296_67:                             # %if.end199
                                        #   in Loop: Header=BB296_60 Depth=3
	jmp	.LBB296_68
.LBB296_68:                             # %for.inc200
                                        #   in Loop: Header=BB296_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_60
.LBB296_69:                             # %for.end202
                                        #   in Loop: Header=BB296_58 Depth=2
	jmp	.LBB296_70
.LBB296_70:                             # %for.inc203
                                        #   in Loop: Header=BB296_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_58
.LBB296_71:                             # %for.end205
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_72
.LBB296_72:                             # %if.end206
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_73
.LBB296_73:                             # %if.end207
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_74
.LBB296_74:                             # %if.end208
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB296_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB296_100
.LBB296_77:                             # %if.else215
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB296_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB296_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB296_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB296_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB296_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB296_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB296_84
.LBB296_83:                             # %if.then247
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB296_85
.LBB296_84:                             # %if.else249
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB296_85:                             # %if.end251
                                        #   in Loop: Header=BB296_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB296_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	$0, -8(%rbp)
.LBB296_87:                             # %for.cond255
                                        #   Parent Loop BB296_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB296_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB296_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB296_87 Depth=2
	movl	$0, -4(%rbp)
.LBB296_89:                             # %for.cond260
                                        #   Parent Loop BB296_5 Depth=1
                                        #     Parent Loop BB296_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB296_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB296_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB296_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB296_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB296_93
.LBB296_92:                             # %if.else277
                                        #   in Loop: Header=BB296_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB296_93:                             # %if.end287
                                        #   in Loop: Header=BB296_89 Depth=3
	jmp	.LBB296_94
.LBB296_94:                             # %for.inc288
                                        #   in Loop: Header=BB296_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_89
.LBB296_95:                             # %for.end290
                                        #   in Loop: Header=BB296_87 Depth=2
	jmp	.LBB296_96
.LBB296_96:                             # %for.inc291
                                        #   in Loop: Header=BB296_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_87
.LBB296_97:                             # %for.end293
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_98
.LBB296_98:                             # %if.end294
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_99
.LBB296_99:                             # %if.end295
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_100
.LBB296_100:                            # %if.end296
                                        #   in Loop: Header=BB296_5 Depth=1
	jmp	.LBB296_101
.LBB296_101:                            # %for.inc297
                                        #   in Loop: Header=BB296_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB296_5
.LBB296_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB296_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB296_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB296_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB296_104 Depth=1
	movl	$0, -4(%rbp)
.LBB296_106:                            # %for.cond312
                                        #   Parent Loop BB296_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB296_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB296_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_110
.LBB296_109:                            # %cond.false
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB296_110:                            # %cond.end
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB296_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB296_116
.LBB296_112:                            # %cond.false358
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB296_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_115
.LBB296_114:                            # %cond.false367
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB296_115:                            # %cond.end373
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_116:                            # %cond.end375
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB296_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB296_119
.LBB296_118:                            # %cond.false394
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB296_119:                            # %cond.end400
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB296_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB296_125
.LBB296_121:                            # %cond.false406
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB296_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_124
.LBB296_123:                            # %cond.false415
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB296_124:                            # %cond.end421
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_125:                            # %cond.end423
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB296_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB296_128
.LBB296_127:                            # %cond.false443
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB296_128:                            # %cond.end449
                                        #   in Loop: Header=BB296_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB296_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB296_134
.LBB296_130:                            # %cond.false455
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB296_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB296_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB296_133
.LBB296_132:                            # %cond.false464
                                        #   in Loop: Header=BB296_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB296_133:                            # %cond.end470
                                        #   in Loop: Header=BB296_106 Depth=2
.LBB296_134:                            # %cond.end472
                                        #   in Loop: Header=BB296_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB296_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_106
.LBB296_136:                            # %for.end487
                                        #   in Loop: Header=BB296_104 Depth=1
	jmp	.LBB296_137
.LBB296_137:                            # %for.inc488
                                        #   in Loop: Header=BB296_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB296_104
.LBB296_138:                            # %for.end490
	jmp	.LBB296_139
.LBB296_139:                            # %if.end491
	cmpl	$679553682, -76(%rbp)   # imm = 0x28812A92
	jne	.LBB296_141
.LBB296_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_140
.Lfunc_end296:
	.size	ChromaResidualCoding.255, .Lfunc_end296-ChromaResidualCoding.255
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.256 # -- Begin function OneComponentLumaPrediction4x4.256
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.256,@function
OneComponentLumaPrediction4x4.256:      # @OneComponentLumaPrediction4x4.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2084722448, -88(%rbp)  # imm = 0x7C425710
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$2084722448, -88(%rbp)  # imm = 0x7C425710
	jne	.LBB297_2
.LBB297_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_1
.Lfunc_end297:
	.size	OneComponentLumaPrediction4x4.256, .Lfunc_end297-OneComponentLumaPrediction4x4.256
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.257       # -- Begin function slice_too_big.257
	.p2align	4, 0x90
	.type	slice_too_big.257,@function
slice_too_big.257:                      # @slice_too_big.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2095449018, -52(%rbp)  # imm = 0x7CE603BA
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB298_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB298_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB298_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB298_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB298_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB298_5:                              # %if.end
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB298_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB298_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB298_7:                              # %if.end8
                                        #   in Loop: Header=BB298_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB298_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB298_21
.LBB298_9:                              # %if.end11
                                        #   in Loop: Header=BB298_2 Depth=1
	jmp	.LBB298_10
.LBB298_10:                             # %for.inc
                                        #   in Loop: Header=BB298_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_2
.LBB298_11:                             # %for.end
	jmp	.LBB298_12
.LBB298_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB298_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB298_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB298_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB298_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB298_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB298_21
.LBB298_17:                             # %if.end27
                                        #   in Loop: Header=BB298_14 Depth=1
	jmp	.LBB298_18
.LBB298_18:                             # %for.inc28
                                        #   in Loop: Header=BB298_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_14
.LBB298_19:                             # %for.end30
	jmp	.LBB298_20
.LBB298_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB298_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2095449018, -52(%rbp)  # imm = 0x7CE603BA
	jne	.LBB298_23
.LBB298_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_22
.Lfunc_end298:
	.size	slice_too_big.257, .Lfunc_end298-slice_too_big.257
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.258      # -- Begin function find_sad_16x16.258
	.p2align	4, 0x90
	.type	find_sad_16x16.258,@function
find_sad_16x16.258:                     # @find_sad_16x16.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$226283096, -80(%rbp)   # imm = 0xD7CCE58
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB299_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB299_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_1
.LBB299_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB299_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB299_20
.LBB299_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB299_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB299_9
.LBB299_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB299_9
.LBB299_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB299_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB299_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB299_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB299_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB299_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB299_14
.LBB299_13:                             # %cond.false23
                                        #   in Loop: Header=BB299_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB299_14
.LBB299_14:                             # %cond.end24
                                        #   in Loop: Header=BB299_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB299_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_10
.LBB299_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB299_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB299_19
.LBB299_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB299_19
.LBB299_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB299_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB299_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB299_42 Depth 2
                                        #       Child Loop BB299_44 Depth 3
                                        #     Child Loop BB299_50 Depth 2
                                        #       Child Loop BB299_52 Depth 3
                                        #         Child Loop BB299_54 Depth 4
                                        #         Child Loop BB299_58 Depth 4
                                        #           Child Loop BB299_60 Depth 5
                                        #     Child Loop BB299_72 Depth 2
                                        #       Child Loop BB299_74 Depth 3
                                        #     Child Loop BB299_80 Depth 2
                                        #     Child Loop BB299_84 Depth 2
                                        #       Child Loop BB299_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB299_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB299_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB299_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB299_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB299_32
.LBB299_24:                             # %if.then46
                                        #   in Loop: Header=BB299_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB299_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB299_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB299_28
.LBB299_27:                             # %if.then51
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_95
.LBB299_28:                             # %if.end52
                                        #   in Loop: Header=BB299_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB299_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB299_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_95
.LBB299_31:                             # %if.end57
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_32
.LBB299_32:                             # %if.end58
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB299_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB299_40
.LBB299_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB299_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB299_40
.LBB299_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB299_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB299_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB299_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB299_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB299_41
.LBB299_40:                             # %if.then74
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_94
.LBB299_41:                             # %if.else75
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	$0, -16(%rbp)
.LBB299_42:                             # %for.cond76
                                        #   Parent Loop BB299_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB299_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB299_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB299_42 Depth=2
	movl	$0, -12(%rbp)
.LBB299_44:                             # %for.cond79
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB299_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB299_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB299_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_44
.LBB299_47:                             # %for.end115
                                        #   in Loop: Header=BB299_42 Depth=2
	jmp	.LBB299_48
.LBB299_48:                             # %for.inc116
                                        #   in Loop: Header=BB299_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_42
.LBB299_49:                             # %for.end118
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB299_50:                             # %for.cond119
                                        #   Parent Loop BB299_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB299_52 Depth 3
                                        #         Child Loop BB299_54 Depth 4
                                        #         Child Loop BB299_58 Depth 4
                                        #           Child Loop BB299_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB299_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB299_50 Depth=2
	movl	$0, -20(%rbp)
.LBB299_52:                             # %for.cond123
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB299_54 Depth 4
                                        #         Child Loop BB299_58 Depth 4
                                        #           Child Loop BB299_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB299_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB299_52 Depth=3
	movl	$0, -16(%rbp)
.LBB299_54:                             # %for.cond127
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_50 Depth=2
                                        #       Parent Loop BB299_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB299_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB299_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB299_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_54
.LBB299_57:                             # %for.end237
                                        #   in Loop: Header=BB299_52 Depth=3
	movl	$0, -12(%rbp)
.LBB299_58:                             # %for.cond238
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_50 Depth=2
                                        #       Parent Loop BB299_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB299_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB299_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB299_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB299_60:                             # %for.cond346
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_50 Depth=2
                                        #       Parent Loop BB299_52 Depth=3
                                        #         Parent Loop BB299_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB299_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB299_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB299_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB299_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB299_63:                             # %if.end363
                                        #   in Loop: Header=BB299_60 Depth=5
	jmp	.LBB299_64
.LBB299_64:                             # %for.inc364
                                        #   in Loop: Header=BB299_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_60
.LBB299_65:                             # %for.end366
                                        #   in Loop: Header=BB299_58 Depth=4
	jmp	.LBB299_66
.LBB299_66:                             # %for.inc367
                                        #   in Loop: Header=BB299_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_58
.LBB299_67:                             # %for.end369
                                        #   in Loop: Header=BB299_52 Depth=3
	jmp	.LBB299_68
.LBB299_68:                             # %for.inc370
                                        #   in Loop: Header=BB299_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB299_52
.LBB299_69:                             # %for.end372
                                        #   in Loop: Header=BB299_50 Depth=2
	jmp	.LBB299_70
.LBB299_70:                             # %for.inc373
                                        #   in Loop: Header=BB299_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB299_50
.LBB299_71:                             # %for.end375
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	$0, -16(%rbp)
.LBB299_72:                             # %for.cond376
                                        #   Parent Loop BB299_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB299_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB299_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB299_72 Depth=2
	movl	$0, -12(%rbp)
.LBB299_74:                             # %for.cond380
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB299_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB299_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB299_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_74
.LBB299_77:                             # %for.end397
                                        #   in Loop: Header=BB299_72 Depth=2
	jmp	.LBB299_78
.LBB299_78:                             # %for.inc398
                                        #   in Loop: Header=BB299_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_72
.LBB299_79:                             # %for.end400
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	$0, -16(%rbp)
.LBB299_80:                             # %for.cond401
                                        #   Parent Loop BB299_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB299_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB299_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB299_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_80
.LBB299_83:                             # %for.end463
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	$0, -12(%rbp)
.LBB299_84:                             # %for.cond464
                                        #   Parent Loop BB299_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB299_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB299_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB299_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB299_86:                             # %for.cond524
                                        #   Parent Loop BB299_21 Depth=1
                                        #     Parent Loop BB299_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB299_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB299_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB299_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_86
.LBB299_89:                             # %for.end536
                                        #   in Loop: Header=BB299_84 Depth=2
	jmp	.LBB299_90
.LBB299_90:                             # %for.inc537
                                        #   in Loop: Header=BB299_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB299_84
.LBB299_91:                             # %for.end539
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB299_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB299_93:                             # %if.end543
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_94
.LBB299_94:                             # %if.end544
                                        #   in Loop: Header=BB299_21 Depth=1
	jmp	.LBB299_95
.LBB299_95:                             # %for.inc545
                                        #   in Loop: Header=BB299_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB299_21
.LBB299_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$226283096, -80(%rbp)   # imm = 0xD7CCE58
	jne	.LBB299_98
.LBB299_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_97
.Lfunc_end299:
	.size	find_sad_16x16.258, .Lfunc_end299-find_sad_16x16.258
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.259 # -- Begin function ChromaResidualCoding.259
	.p2align	4, 0x90
	.type	ChromaResidualCoding.259,@function
ChromaResidualCoding.259:               # @ChromaResidualCoding.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1136006476, -72(%rbp)  # imm = 0x43B6154C
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB300_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB300_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB300_3:                              # %lor.end
.LBB300_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB300_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_7 Depth 2
                                        #       Child Loop BB300_9 Depth 3
                                        #     Child Loop BB300_16 Depth 2
                                        #       Child Loop BB300_18 Depth 3
                                        #     Child Loop BB300_33 Depth 2
                                        #       Child Loop BB300_35 Depth 3
                                        #     Child Loop BB300_43 Depth 2
                                        #       Child Loop BB300_45 Depth 3
                                        #     Child Loop BB300_58 Depth 2
                                        #       Child Loop BB300_60 Depth 3
                                        #     Child Loop BB300_87 Depth 2
                                        #       Child Loop BB300_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB300_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB300_7:                              # %for.cond5
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB300_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB300_7 Depth=2
	movl	$0, -16(%rbp)
.LBB300_9:                              # %for.cond8
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB300_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB300_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB300_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB300_9
.LBB300_12:                             # %for.end
                                        #   in Loop: Header=BB300_7 Depth=2
	jmp	.LBB300_13
.LBB300_13:                             # %for.inc18
                                        #   in Loop: Header=BB300_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB300_7
.LBB300_14:                             # %for.end20
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB300_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -4(%rbp)
.LBB300_16:                             # %for.cond21
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB300_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB300_16 Depth=2
	movl	$0, -8(%rbp)
.LBB300_18:                             # %for.cond26
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB300_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB300_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB300_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB300_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB300_25
.LBB300_21:                             # %if.else
                                        #   in Loop: Header=BB300_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB300_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB300_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB300_24
.LBB300_23:                             # %if.else52
                                        #   in Loop: Header=BB300_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB300_24:                             # %if.end
                                        #   in Loop: Header=BB300_18 Depth=3
	jmp	.LBB300_25
.LBB300_25:                             # %if.end57
                                        #   in Loop: Header=BB300_18 Depth=3
	jmp	.LBB300_26
.LBB300_26:                             # %for.inc58
                                        #   in Loop: Header=BB300_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_18
.LBB300_27:                             # %for.end59
                                        #   in Loop: Header=BB300_16 Depth=2
	jmp	.LBB300_28
.LBB300_28:                             # %for.inc60
                                        #   in Loop: Header=BB300_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_16
.LBB300_29:                             # %for.end62
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_74
.LBB300_30:                             # %if.else63
                                        #   in Loop: Header=BB300_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB300_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB300_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -4(%rbp)
.LBB300_33:                             # %for.cond69
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB300_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB300_33 Depth=2
	movl	$0, -8(%rbp)
.LBB300_35:                             # %for.cond73
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB300_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB300_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB300_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_35
.LBB300_38:                             # %for.end83
                                        #   in Loop: Header=BB300_33 Depth=2
	jmp	.LBB300_39
.LBB300_39:                             # %for.inc84
                                        #   in Loop: Header=BB300_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_33
.LBB300_40:                             # %for.end86
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_73
.LBB300_41:                             # %if.else87
                                        #   in Loop: Header=BB300_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB300_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -4(%rbp)
.LBB300_43:                             # %for.cond90
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB300_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB300_43 Depth=2
	movl	$0, -8(%rbp)
.LBB300_45:                             # %for.cond95
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB300_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB300_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB300_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB300_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB300_52
.LBB300_48:                             # %if.else119
                                        #   in Loop: Header=BB300_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB300_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB300_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB300_51
.LBB300_50:                             # %if.else127
                                        #   in Loop: Header=BB300_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB300_51:                             # %if.end132
                                        #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_52
.LBB300_52:                             # %if.end133
                                        #   in Loop: Header=BB300_45 Depth=3
	jmp	.LBB300_53
.LBB300_53:                             # %for.inc134
                                        #   in Loop: Header=BB300_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_45
.LBB300_54:                             # %for.end136
                                        #   in Loop: Header=BB300_43 Depth=2
	jmp	.LBB300_55
.LBB300_55:                             # %for.inc137
                                        #   in Loop: Header=BB300_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_43
.LBB300_56:                             # %for.end139
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_72
.LBB300_57:                             # %if.else140
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -4(%rbp)
.LBB300_58:                             # %for.cond141
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB300_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB300_58 Depth=2
	movl	$0, -8(%rbp)
.LBB300_60:                             # %for.cond146
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB300_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB300_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB300_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB300_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB300_67
.LBB300_63:                             # %if.else175
                                        #   in Loop: Header=BB300_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB300_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB300_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB300_66
.LBB300_65:                             # %if.else188
                                        #   in Loop: Header=BB300_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB300_66:                             # %if.end198
                                        #   in Loop: Header=BB300_60 Depth=3
	jmp	.LBB300_67
.LBB300_67:                             # %if.end199
                                        #   in Loop: Header=BB300_60 Depth=3
	jmp	.LBB300_68
.LBB300_68:                             # %for.inc200
                                        #   in Loop: Header=BB300_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_60
.LBB300_69:                             # %for.end202
                                        #   in Loop: Header=BB300_58 Depth=2
	jmp	.LBB300_70
.LBB300_70:                             # %for.inc203
                                        #   in Loop: Header=BB300_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_58
.LBB300_71:                             # %for.end205
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_72
.LBB300_72:                             # %if.end206
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_73
.LBB300_73:                             # %if.end207
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_74
.LBB300_74:                             # %if.end208
                                        #   in Loop: Header=BB300_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB300_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB300_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB300_100
.LBB300_77:                             # %if.else215
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB300_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB300_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB300_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB300_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB300_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB300_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB300_84
.LBB300_83:                             # %if.then247
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB300_85
.LBB300_84:                             # %if.else249
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB300_85:                             # %if.end251
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB300_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	$0, -4(%rbp)
.LBB300_87:                             # %for.cond255
                                        #   Parent Loop BB300_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB300_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB300_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB300_87 Depth=2
	movl	$0, -8(%rbp)
.LBB300_89:                             # %for.cond260
                                        #   Parent Loop BB300_5 Depth=1
                                        #     Parent Loop BB300_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB300_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB300_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB300_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB300_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB300_93
.LBB300_92:                             # %if.else277
                                        #   in Loop: Header=BB300_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB300_93:                             # %if.end287
                                        #   in Loop: Header=BB300_89 Depth=3
	jmp	.LBB300_94
.LBB300_94:                             # %for.inc288
                                        #   in Loop: Header=BB300_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_89
.LBB300_95:                             # %for.end290
                                        #   in Loop: Header=BB300_87 Depth=2
	jmp	.LBB300_96
.LBB300_96:                             # %for.inc291
                                        #   in Loop: Header=BB300_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_87
.LBB300_97:                             # %for.end293
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_98
.LBB300_98:                             # %if.end294
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_99
.LBB300_99:                             # %if.end295
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_100
.LBB300_100:                            # %if.end296
                                        #   in Loop: Header=BB300_5 Depth=1
	jmp	.LBB300_101
.LBB300_101:                            # %for.inc297
                                        #   in Loop: Header=BB300_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB300_5
.LBB300_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB300_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB300_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB300_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB300_104 Depth=1
	movl	$0, -8(%rbp)
.LBB300_106:                            # %for.cond312
                                        #   Parent Loop BB300_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB300_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB300_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB300_110
.LBB300_109:                            # %cond.false
                                        #   in Loop: Header=BB300_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB300_110:                            # %cond.end
                                        #   in Loop: Header=BB300_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB300_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB300_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB300_116
.LBB300_112:                            # %cond.false358
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB300_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB300_115
.LBB300_114:                            # %cond.false367
                                        #   in Loop: Header=BB300_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB300_115:                            # %cond.end373
                                        #   in Loop: Header=BB300_106 Depth=2
.LBB300_116:                            # %cond.end375
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB300_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB300_119
.LBB300_118:                            # %cond.false394
                                        #   in Loop: Header=BB300_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB300_119:                            # %cond.end400
                                        #   in Loop: Header=BB300_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB300_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB300_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB300_125
.LBB300_121:                            # %cond.false406
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB300_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB300_124
.LBB300_123:                            # %cond.false415
                                        #   in Loop: Header=BB300_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB300_124:                            # %cond.end421
                                        #   in Loop: Header=BB300_106 Depth=2
.LBB300_125:                            # %cond.end423
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB300_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB300_128
.LBB300_127:                            # %cond.false443
                                        #   in Loop: Header=BB300_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB300_128:                            # %cond.end449
                                        #   in Loop: Header=BB300_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB300_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB300_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB300_134
.LBB300_130:                            # %cond.false455
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB300_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB300_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB300_133
.LBB300_132:                            # %cond.false464
                                        #   in Loop: Header=BB300_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB300_133:                            # %cond.end470
                                        #   in Loop: Header=BB300_106 Depth=2
.LBB300_134:                            # %cond.end472
                                        #   in Loop: Header=BB300_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB300_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_106
.LBB300_136:                            # %for.end487
                                        #   in Loop: Header=BB300_104 Depth=1
	jmp	.LBB300_137
.LBB300_137:                            # %for.inc488
                                        #   in Loop: Header=BB300_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_104
.LBB300_138:                            # %for.end490
	jmp	.LBB300_139
.LBB300_139:                            # %if.end491
	cmpl	$1136006476, -72(%rbp)  # imm = 0x43B6154C
	jne	.LBB300_141
.LBB300_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_140
.Lfunc_end300:
	.size	ChromaResidualCoding.259, .Lfunc_end300-ChromaResidualCoding.259
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.260 # -- Begin function write_one_macroblock.260
	.p2align	4, 0x90
	.type	write_one_macroblock.260,@function
write_one_macroblock.260:               # @write_one_macroblock.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1099801037, -32(%rbp)  # imm = 0x418DA1CD
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB301_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB301_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB301_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB301_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB301_6
.LBB301_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB301_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB301_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB301_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB301_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB301_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB301_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB301_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB301_22
.LBB301_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB301_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB301_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB301_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB301_14 Depth=1
	movl	$0, -20(%rbp)
.LBB301_16:                             # %for.cond24
                                        #   Parent Loop BB301_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB301_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB301_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB301_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB301_16
.LBB301_19:                             # %for.end
                                        #   in Loop: Header=BB301_14 Depth=1
	jmp	.LBB301_20
.LBB301_20:                             # %for.inc35
                                        #   in Loop: Header=BB301_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB301_14
.LBB301_21:                             # %for.end37
	jmp	.LBB301_22
.LBB301_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB301_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB301_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB301_30
.LBB301_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB301_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB301_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB301_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB301_29:                             # %if.end59
	jmp	.LBB301_30
.LBB301_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB301_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB301_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1099801037, -32(%rbp)  # imm = 0x418DA1CD
	jne	.LBB301_34
.LBB301_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_33
.Lfunc_end301:
	.size	write_one_macroblock.260, .Lfunc_end301-write_one_macroblock.260
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.261    # -- Begin function writeChromaCoeff.261
	.p2align	4, 0x90
	.type	writeChromaCoeff.261,@function
writeChromaCoeff.261:                   # @writeChromaCoeff.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$644185600, -84(%rbp)   # imm = 0x26657E00
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB302_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB302_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB302_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB302_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB302_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB302_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB302_21
.LBB302_5:                              # %if.else
                                        #   in Loop: Header=BB302_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB302_6:                              # %for.cond18
                                        #   Parent Loop BB302_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB302_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB302_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB302_8:                              # %land.end
                                        #   in Loop: Header=BB302_6 Depth=2
	testb	$1, %al
	jne	.LBB302_9
	jmp	.LBB302_20
.LBB302_9:                              # %for.body21
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB302_12
.LBB302_11:                             # %if.else29
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB302_12:                             # %if.end
                                        #   in Loop: Header=BB302_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB302_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB302_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB302_15:                             # %lor.end
                                        #   in Loop: Header=BB302_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB302_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB302_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB302_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB302_18:                             # %lor.end45
                                        #   in Loop: Header=BB302_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB302_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB302_6
.LBB302_20:                             # %for.end
                                        #   in Loop: Header=BB302_2 Depth=1
	jmp	.LBB302_21
.LBB302_21:                             # %if.end58
                                        #   in Loop: Header=BB302_2 Depth=1
	jmp	.LBB302_22
.LBB302_22:                             # %for.inc59
                                        #   in Loop: Header=BB302_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB302_2
.LBB302_23:                             # %for.end61
	jmp	.LBB302_24
.LBB302_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB302_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB302_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB302_28 Depth 2
                                        #       Child Loop BB302_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB302_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB302_26 Depth=1
	movl	$0, -32(%rbp)
.LBB302_28:                             # %for.cond69
                                        #   Parent Loop BB302_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB302_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB302_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB302_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB302_47
.LBB302_31:                             # %if.else84
                                        #   in Loop: Header=BB302_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB302_32:                             # %for.cond115
                                        #   Parent Loop BB302_26 Depth=1
                                        #     Parent Loop BB302_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB302_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB302_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB302_34:                             # %land.end121
                                        #   in Loop: Header=BB302_32 Depth=3
	testb	$1, %al
	jne	.LBB302_35
	jmp	.LBB302_46
.LBB302_35:                             # %for.body122
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB302_38
.LBB302_37:                             # %if.else134
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB302_38:                             # %if.end136
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB302_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB302_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB302_41:                             # %lor.end149
                                        #   in Loop: Header=BB302_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB302_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB302_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB302_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB302_44:                             # %lor.end164
                                        #   in Loop: Header=BB302_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB302_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB302_32
.LBB302_46:                             # %for.end189
                                        #   in Loop: Header=BB302_28 Depth=2
	jmp	.LBB302_47
.LBB302_47:                             # %if.end190
                                        #   in Loop: Header=BB302_28 Depth=2
	jmp	.LBB302_48
.LBB302_48:                             # %for.inc191
                                        #   in Loop: Header=BB302_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB302_28
.LBB302_49:                             # %for.end193
                                        #   in Loop: Header=BB302_26 Depth=1
	jmp	.LBB302_50
.LBB302_50:                             # %for.inc194
                                        #   in Loop: Header=BB302_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB302_26
.LBB302_51:                             # %for.end196
	jmp	.LBB302_52
.LBB302_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$644185600, -84(%rbp)   # imm = 0x26657E00
	jne	.LBB302_54
.LBB302_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_53
.Lfunc_end302:
	.size	writeChromaCoeff.261, .Lfunc_end302-writeChromaCoeff.261
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.262  # -- Begin function predict_nnz_chroma.262
	.p2align	4, 0x90
	.type	predict_nnz_chroma.262,@function
predict_nnz_chroma.262:                 # @predict_nnz_chroma.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1740384441, -64(%rbp)  # imm = 0x67BC28B9
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB303_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB303_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB303_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB303_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB303_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB303_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB303_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB303_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB303_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB303_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB303_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_13:                             # %if.end57
	jmp	.LBB303_27
.LBB303_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB303_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB303_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB303_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB303_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB303_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB303_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB303_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB303_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB303_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB303_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_26:                             # %if.end124
	jmp	.LBB303_27
.LBB303_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB303_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB303_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1740384441, -64(%rbp)  # imm = 0x67BC28B9
	jne	.LBB303_31
.LBB303_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_30
.Lfunc_end303:
	.size	predict_nnz_chroma.262, .Lfunc_end303-predict_nnz_chroma.262
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.263 # -- Begin function ChromaPrediction4x4.263
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.263,@function
ChromaPrediction4x4.263:                # @ChromaPrediction4x4.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1870487756, -68(%rbp)  # imm = 0x6F7D60CC
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB304_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB304_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB304_6
.LBB304_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB304_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB304_5:                              # %land.end
.LBB304_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB304_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB304_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB304_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB304_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB304_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB304_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB304_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB304_15
.LBB304_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB304_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB304_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB304_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB304_87
.LBB304_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB304_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB304_21
.LBB304_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB304_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB304_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB304_24
.LBB304_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB304_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB304_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB304_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB304_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_29:                             # %for.cond52
                                        #   Parent Loop BB304_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB304_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB304_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_29
.LBB304_32:                             # %for.end
                                        #   in Loop: Header=BB304_27 Depth=1
	jmp	.LBB304_33
.LBB304_33:                             # %for.inc99
                                        #   in Loop: Header=BB304_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_27
.LBB304_34:                             # %for.end101
	jmp	.LBB304_55
.LBB304_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB304_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB304_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_39:                             # %for.cond109
                                        #   Parent Loop BB304_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB304_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB304_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_39
.LBB304_42:                             # %for.end139
                                        #   in Loop: Header=BB304_37 Depth=1
	jmp	.LBB304_43
.LBB304_43:                             # %for.inc140
                                        #   in Loop: Header=BB304_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_37
.LBB304_44:                             # %for.end142
	jmp	.LBB304_54
.LBB304_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB304_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_48:                             # %for.cond148
                                        #   Parent Loop BB304_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB304_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB304_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_48
.LBB304_51:                             # %for.end178
                                        #   in Loop: Header=BB304_46 Depth=1
	jmp	.LBB304_52
.LBB304_52:                             # %for.inc179
                                        #   in Loop: Header=BB304_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_46
.LBB304_53:                             # %for.end181
	jmp	.LBB304_54
.LBB304_54:                             # %if.end182
	jmp	.LBB304_55
.LBB304_55:                             # %if.end183
	jmp	.LBB304_87
.LBB304_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB304_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB304_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_60:                             # %for.cond192
                                        #   Parent Loop BB304_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB304_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB304_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_60
.LBB304_63:                             # %for.end208
                                        #   in Loop: Header=BB304_58 Depth=1
	jmp	.LBB304_64
.LBB304_64:                             # %for.inc209
                                        #   in Loop: Header=BB304_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_58
.LBB304_65:                             # %for.end211
	jmp	.LBB304_86
.LBB304_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB304_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB304_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_70:                             # %for.cond220
                                        #   Parent Loop BB304_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB304_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB304_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_70
.LBB304_73:                             # %for.end233
                                        #   in Loop: Header=BB304_68 Depth=1
	jmp	.LBB304_74
.LBB304_74:                             # %for.inc234
                                        #   in Loop: Header=BB304_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_68
.LBB304_75:                             # %for.end236
	jmp	.LBB304_85
.LBB304_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB304_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_79:                             # %for.cond242
                                        #   Parent Loop BB304_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB304_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB304_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_79
.LBB304_82:                             # %for.end255
                                        #   in Loop: Header=BB304_77 Depth=1
	jmp	.LBB304_83
.LBB304_83:                             # %for.inc256
                                        #   in Loop: Header=BB304_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_77
.LBB304_84:                             # %for.end258
	jmp	.LBB304_85
.LBB304_85:                             # %if.end259
	jmp	.LBB304_86
.LBB304_86:                             # %if.end260
	jmp	.LBB304_87
.LBB304_87:                             # %if.end261
	cmpl	$1870487756, -68(%rbp)  # imm = 0x6F7D60CC
	jne	.LBB304_89
.LBB304_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_88
.Lfunc_end304:
	.size	ChromaPrediction4x4.263, .Lfunc_end304-ChromaPrediction4x4.263
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.264 # -- Begin function ChromaResidualCoding.264
	.p2align	4, 0x90
	.type	ChromaResidualCoding.264,@function
ChromaResidualCoding.264:               # @ChromaResidualCoding.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$359533901, -72(%rbp)   # imm = 0x156E0D4D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB305_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB305_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB305_3:                              # %lor.end
.LBB305_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB305_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_7 Depth 2
                                        #       Child Loop BB305_9 Depth 3
                                        #     Child Loop BB305_16 Depth 2
                                        #       Child Loop BB305_18 Depth 3
                                        #     Child Loop BB305_33 Depth 2
                                        #       Child Loop BB305_35 Depth 3
                                        #     Child Loop BB305_43 Depth 2
                                        #       Child Loop BB305_45 Depth 3
                                        #     Child Loop BB305_58 Depth 2
                                        #       Child Loop BB305_60 Depth 3
                                        #     Child Loop BB305_87 Depth 2
                                        #       Child Loop BB305_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB305_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB305_7:                              # %for.cond5
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB305_7 Depth=2
	movl	$0, -16(%rbp)
.LBB305_9:                              # %for.cond8
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB305_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB305_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB305_9
.LBB305_12:                             # %for.end
                                        #   in Loop: Header=BB305_7 Depth=2
	jmp	.LBB305_13
.LBB305_13:                             # %for.inc18
                                        #   in Loop: Header=BB305_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB305_7
.LBB305_14:                             # %for.end20
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB305_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -4(%rbp)
.LBB305_16:                             # %for.cond21
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB305_16 Depth=2
	movl	$0, -8(%rbp)
.LBB305_18:                             # %for.cond26
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB305_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB305_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB305_25
.LBB305_21:                             # %if.else
                                        #   in Loop: Header=BB305_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB305_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB305_24
.LBB305_23:                             # %if.else52
                                        #   in Loop: Header=BB305_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB305_24:                             # %if.end
                                        #   in Loop: Header=BB305_18 Depth=3
	jmp	.LBB305_25
.LBB305_25:                             # %if.end57
                                        #   in Loop: Header=BB305_18 Depth=3
	jmp	.LBB305_26
.LBB305_26:                             # %for.inc58
                                        #   in Loop: Header=BB305_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_18
.LBB305_27:                             # %for.end59
                                        #   in Loop: Header=BB305_16 Depth=2
	jmp	.LBB305_28
.LBB305_28:                             # %for.inc60
                                        #   in Loop: Header=BB305_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_16
.LBB305_29:                             # %for.end62
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_74
.LBB305_30:                             # %if.else63
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB305_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -4(%rbp)
.LBB305_33:                             # %for.cond69
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB305_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB305_33 Depth=2
	movl	$0, -8(%rbp)
.LBB305_35:                             # %for.cond73
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB305_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB305_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB305_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_35
.LBB305_38:                             # %for.end83
                                        #   in Loop: Header=BB305_33 Depth=2
	jmp	.LBB305_39
.LBB305_39:                             # %for.inc84
                                        #   in Loop: Header=BB305_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_33
.LBB305_40:                             # %for.end86
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_73
.LBB305_41:                             # %if.else87
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB305_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -4(%rbp)
.LBB305_43:                             # %for.cond90
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB305_43 Depth=2
	movl	$0, -8(%rbp)
.LBB305_45:                             # %for.cond95
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB305_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB305_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB305_52
.LBB305_48:                             # %if.else119
                                        #   in Loop: Header=BB305_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB305_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB305_51
.LBB305_50:                             # %if.else127
                                        #   in Loop: Header=BB305_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB305_51:                             # %if.end132
                                        #   in Loop: Header=BB305_45 Depth=3
	jmp	.LBB305_52
.LBB305_52:                             # %if.end133
                                        #   in Loop: Header=BB305_45 Depth=3
	jmp	.LBB305_53
.LBB305_53:                             # %for.inc134
                                        #   in Loop: Header=BB305_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_45
.LBB305_54:                             # %for.end136
                                        #   in Loop: Header=BB305_43 Depth=2
	jmp	.LBB305_55
.LBB305_55:                             # %for.inc137
                                        #   in Loop: Header=BB305_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_43
.LBB305_56:                             # %for.end139
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_72
.LBB305_57:                             # %if.else140
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -4(%rbp)
.LBB305_58:                             # %for.cond141
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB305_58 Depth=2
	movl	$0, -8(%rbp)
.LBB305_60:                             # %for.cond146
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB305_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB305_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB305_67
.LBB305_63:                             # %if.else175
                                        #   in Loop: Header=BB305_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB305_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB305_66
.LBB305_65:                             # %if.else188
                                        #   in Loop: Header=BB305_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB305_66:                             # %if.end198
                                        #   in Loop: Header=BB305_60 Depth=3
	jmp	.LBB305_67
.LBB305_67:                             # %if.end199
                                        #   in Loop: Header=BB305_60 Depth=3
	jmp	.LBB305_68
.LBB305_68:                             # %for.inc200
                                        #   in Loop: Header=BB305_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_60
.LBB305_69:                             # %for.end202
                                        #   in Loop: Header=BB305_58 Depth=2
	jmp	.LBB305_70
.LBB305_70:                             # %for.inc203
                                        #   in Loop: Header=BB305_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_58
.LBB305_71:                             # %for.end205
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_72
.LBB305_72:                             # %if.end206
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_73
.LBB305_73:                             # %if.end207
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_74
.LBB305_74:                             # %if.end208
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB305_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB305_100
.LBB305_77:                             # %if.else215
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB305_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB305_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB305_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB305_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB305_84
.LBB305_83:                             # %if.then247
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB305_85
.LBB305_84:                             # %if.else249
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_85:                             # %if.end251
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB305_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -4(%rbp)
.LBB305_87:                             # %for.cond255
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB305_87 Depth=2
	movl	$0, -8(%rbp)
.LBB305_89:                             # %for.cond260
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB305_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB305_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB305_93
.LBB305_92:                             # %if.else277
                                        #   in Loop: Header=BB305_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB305_93:                             # %if.end287
                                        #   in Loop: Header=BB305_89 Depth=3
	jmp	.LBB305_94
.LBB305_94:                             # %for.inc288
                                        #   in Loop: Header=BB305_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_89
.LBB305_95:                             # %for.end290
                                        #   in Loop: Header=BB305_87 Depth=2
	jmp	.LBB305_96
.LBB305_96:                             # %for.inc291
                                        #   in Loop: Header=BB305_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_87
.LBB305_97:                             # %for.end293
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_98
.LBB305_98:                             # %if.end294
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_99
.LBB305_99:                             # %if.end295
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_100
.LBB305_100:                            # %if.end296
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_101
.LBB305_101:                            # %for.inc297
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_5
.LBB305_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB305_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB305_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB305_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB305_104 Depth=1
	movl	$0, -8(%rbp)
.LBB305_106:                            # %for.cond312
                                        #   Parent Loop BB305_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB305_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB305_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_110
.LBB305_109:                            # %cond.false
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB305_110:                            # %cond.end
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB305_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB305_116
.LBB305_112:                            # %cond.false358
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB305_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_115
.LBB305_114:                            # %cond.false367
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB305_115:                            # %cond.end373
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_116:                            # %cond.end375
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB305_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB305_119
.LBB305_118:                            # %cond.false394
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB305_119:                            # %cond.end400
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB305_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB305_125
.LBB305_121:                            # %cond.false406
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB305_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_124
.LBB305_123:                            # %cond.false415
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB305_124:                            # %cond.end421
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_125:                            # %cond.end423
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB305_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB305_128
.LBB305_127:                            # %cond.false443
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB305_128:                            # %cond.end449
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB305_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB305_134
.LBB305_130:                            # %cond.false455
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB305_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_133
.LBB305_132:                            # %cond.false464
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB305_133:                            # %cond.end470
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_134:                            # %cond.end472
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_106
.LBB305_136:                            # %for.end487
                                        #   in Loop: Header=BB305_104 Depth=1
	jmp	.LBB305_137
.LBB305_137:                            # %for.inc488
                                        #   in Loop: Header=BB305_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_104
.LBB305_138:                            # %for.end490
	jmp	.LBB305_139
.LBB305_139:                            # %if.end491
	cmpl	$359533901, -72(%rbp)   # imm = 0x156E0D4D
	jne	.LBB305_141
.LBB305_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_140
.Lfunc_end305:
	.size	ChromaResidualCoding.264, .Lfunc_end305-ChromaResidualCoding.264
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.265 # -- Begin function LumaResidualCoding8x8.265
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.265,@function
LumaResidualCoding8x8.265:              # @LumaResidualCoding8x8.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1100452700, -120(%rbp) # imm = 0x4197935C
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -80(%rbp)
	jne	.LBB306_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB306_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB306_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB306_5:                              # %if.end
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB306_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_8 Depth 2
                                        #       Child Loop BB306_11 Depth 3
                                        #         Child Loop BB306_13 Depth 4
                                        #       Child Loop BB306_19 Depth 3
                                        #         Child Loop BB306_21 Depth 4
                                        #       Child Loop BB306_29 Depth 3
                                        #         Child Loop BB306_31 Depth 4
                                        #       Child Loop BB306_40 Depth 3
                                        #         Child Loop BB306_42 Depth 4
                                        #       Child Loop BB306_57 Depth 3
                                        #         Child Loop BB306_59 Depth 4
                                        #       Child Loop BB306_67 Depth 3
                                        #         Child Loop BB306_69 Depth 4
                                        #       Child Loop BB306_84 Depth 3
                                        #         Child Loop BB306_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB306_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB306_8:                              # %for.cond9
                                        #   Parent Loop BB306_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB306_11 Depth 3
                                        #         Child Loop BB306_13 Depth 4
                                        #       Child Loop BB306_19 Depth 3
                                        #         Child Loop BB306_21 Depth 4
                                        #       Child Loop BB306_29 Depth 3
                                        #         Child Loop BB306_31 Depth 4
                                        #       Child Loop BB306_40 Depth 3
                                        #         Child Loop BB306_42 Depth 4
                                        #       Child Loop BB306_57 Depth 3
                                        #         Child Loop BB306_59 Depth 4
                                        #       Child Loop BB306_67 Depth 3
                                        #         Child Loop BB306_69 Depth 4
                                        #       Child Loop BB306_84 Depth 3
                                        #         Child Loop BB306_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB306_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB306_11:                             # %for.cond16
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB306_11 Depth=3
	movl	$0, -12(%rbp)
.LBB306_13:                             # %for.cond20
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB306_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB306_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_13
.LBB306_16:                             # %for.end
                                        #   in Loop: Header=BB306_11 Depth=3
	jmp	.LBB306_17
.LBB306_17:                             # %for.inc37
                                        #   in Loop: Header=BB306_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_11
.LBB306_18:                             # %for.end39
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB306_19:                             # %for.cond41
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB306_19 Depth=3
	movl	$0, -12(%rbp)
.LBB306_21:                             # %for.cond45
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB306_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB306_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_21
.LBB306_24:                             # %for.end65
                                        #   in Loop: Header=BB306_19 Depth=3
	jmp	.LBB306_25
.LBB306_25:                             # %for.inc66
                                        #   in Loop: Header=BB306_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_19
.LBB306_26:                             # %for.end68
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_27
.LBB306_27:                             # %if.end69
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB306_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	$0, -16(%rbp)
.LBB306_29:                             # %for.cond74
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB306_29 Depth=3
	movl	$0, -12(%rbp)
.LBB306_31:                             # %for.cond78
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB306_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB306_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_31
.LBB306_34:                             # %for.end98
                                        #   in Loop: Header=BB306_29 Depth=3
	jmp	.LBB306_35
.LBB306_35:                             # %for.inc99
                                        #   in Loop: Header=BB306_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_29
.LBB306_36:                             # %for.end101
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_37
.LBB306_37:                             # %if.end102
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB306_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB306_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	$0, -16(%rbp)
.LBB306_40:                             # %for.cond108
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB306_40 Depth=3
	movl	$0, -12(%rbp)
.LBB306_42:                             # %for.cond112
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB306_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB306_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_42
.LBB306_45:                             # %for.end137
                                        #   in Loop: Header=BB306_40 Depth=3
	jmp	.LBB306_46
.LBB306_46:                             # %for.inc138
                                        #   in Loop: Header=BB306_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_40
.LBB306_47:                             # %for.end140
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB306_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB306_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB306_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB306_52
.LBB306_51:                             # %if.else
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB306_52:                             # %if.end151
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB306_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB306_54:                             # %if.end157
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_55
.LBB306_55:                             # %if.end158
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_65
.LBB306_56:                             # %if.else159
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	$0, -16(%rbp)
.LBB306_57:                             # %for.cond160
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB306_57 Depth=3
	movl	$0, -12(%rbp)
.LBB306_59:                             # %for.cond164
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB306_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB306_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_59
.LBB306_62:                             # %for.end193
                                        #   in Loop: Header=BB306_57 Depth=3
	jmp	.LBB306_63
.LBB306_63:                             # %for.inc194
                                        #   in Loop: Header=BB306_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_57
.LBB306_64:                             # %for.end196
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_65
.LBB306_65:                             # %if.end197
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_95
.LBB306_66:                             # %if.else198
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	$0, -16(%rbp)
.LBB306_67:                             # %for.cond199
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB306_67 Depth=3
	movl	$0, -12(%rbp)
.LBB306_69:                             # %for.cond203
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB306_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB306_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB306_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB306_73
.LBB306_72:                             # %if.else300
                                        #   in Loop: Header=BB306_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB306_73:                             # %if.end314
                                        #   in Loop: Header=BB306_69 Depth=4
	jmp	.LBB306_74
.LBB306_74:                             # %for.inc315
                                        #   in Loop: Header=BB306_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_69
.LBB306_75:                             # %for.end317
                                        #   in Loop: Header=BB306_67 Depth=3
	jmp	.LBB306_76
.LBB306_76:                             # %for.inc318
                                        #   in Loop: Header=BB306_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_67
.LBB306_77:                             # %for.end320
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB306_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB306_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB306_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB306_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB306_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB306_83
.LBB306_82:                             # %if.else334
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB306_83:                             # %if.end336
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	$0, -16(%rbp)
.LBB306_84:                             # %for.cond337
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB306_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB306_84 Depth=3
	movl	$0, -12(%rbp)
.LBB306_86:                             # %for.cond341
                                        #   Parent Loop BB306_6 Depth=1
                                        #     Parent Loop BB306_8 Depth=2
                                        #       Parent Loop BB306_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB306_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB306_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB306_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_86
.LBB306_89:                             # %for.end358
                                        #   in Loop: Header=BB306_84 Depth=3
	jmp	.LBB306_90
.LBB306_90:                             # %for.inc359
                                        #   in Loop: Header=BB306_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_84
.LBB306_91:                             # %for.end361
                                        #   in Loop: Header=BB306_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB306_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB306_93:                             # %if.end368
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_94
.LBB306_94:                             # %if.end369
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_95
.LBB306_95:                             # %if.end370
                                        #   in Loop: Header=BB306_8 Depth=2
	jmp	.LBB306_96
.LBB306_96:                             # %for.inc371
                                        #   in Loop: Header=BB306_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB306_8
.LBB306_97:                             # %for.end374
                                        #   in Loop: Header=BB306_6 Depth=1
	jmp	.LBB306_98
.LBB306_98:                             # %for.inc375
                                        #   in Loop: Header=BB306_6 Depth=1
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB306_6
.LBB306_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB306_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB306_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -84(%rbp)
	jne	.LBB306_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB306_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB306_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB306_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB306_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB306_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB306_106 Depth=1
	movl	$0, -12(%rbp)
.LBB306_108:                            # %for.cond400
                                        #   Parent Loop BB306_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB306_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB306_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB306_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_108
.LBB306_111:                            # %for.end417
                                        #   in Loop: Header=BB306_106 Depth=1
	jmp	.LBB306_112
.LBB306_112:                            # %for.inc418
                                        #   in Loop: Header=BB306_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_106
.LBB306_113:                            # %for.end420
	jmp	.LBB306_114
.LBB306_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB306_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB306_116:                            # %if.end431
	jmp	.LBB306_117
.LBB306_117:                            # %if.end432
	jmp	.LBB306_118
.LBB306_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB306_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -84(%rbp)
	jne	.LBB306_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB306_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB306_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB306_145
.LBB306_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB306_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB306_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB306_126:                            # %for.cond462
                                        #   Parent Loop BB306_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB306_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB306_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB306_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB306_130
.LBB306_129:                            # %if.else481
                                        #   in Loop: Header=BB306_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB306_130:                            # %if.end486
                                        #   in Loop: Header=BB306_126 Depth=2
	jmp	.LBB306_131
.LBB306_131:                            # %for.inc487
                                        #   in Loop: Header=BB306_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_126
.LBB306_132:                            # %for.end489
                                        #   in Loop: Header=BB306_124 Depth=1
	jmp	.LBB306_133
.LBB306_133:                            # %for.inc490
                                        #   in Loop: Header=BB306_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_124
.LBB306_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB306_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB306_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB306_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB306_138:                            # %for.cond502
                                        #   Parent Loop BB306_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB306_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB306_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_138
.LBB306_141:                            # %for.end509
                                        #   in Loop: Header=BB306_136 Depth=1
	jmp	.LBB306_142
.LBB306_142:                            # %for.inc510
                                        #   in Loop: Header=BB306_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_136
.LBB306_143:                            # %for.end512
	jmp	.LBB306_144
.LBB306_144:                            # %if.end513
	jmp	.LBB306_145
.LBB306_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1100452700, -120(%rbp) # imm = 0x4197935C
	jne	.LBB306_147
.LBB306_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_146
.Lfunc_end306:
	.size	LumaResidualCoding8x8.265, .Lfunc_end306-LumaResidualCoding8x8.265
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.266 # -- Begin function write_one_macroblock.266
	.p2align	4, 0x90
	.type	write_one_macroblock.266,@function
write_one_macroblock.266:               # @write_one_macroblock.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$97627833, -28(%rbp)    # imm = 0x5D1AEB9
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB307_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB307_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB307_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB307_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB307_6
.LBB307_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB307_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB307_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB307_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB307_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB307_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB307_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB307_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB307_22
.LBB307_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB307_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB307_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB307_14 Depth=1
	movl	$0, -24(%rbp)
.LBB307_16:                             # %for.cond24
                                        #   Parent Loop BB307_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB307_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB307_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB307_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB307_16
.LBB307_19:                             # %for.end
                                        #   in Loop: Header=BB307_14 Depth=1
	jmp	.LBB307_20
.LBB307_20:                             # %for.inc35
                                        #   in Loop: Header=BB307_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB307_14
.LBB307_21:                             # %for.end37
	jmp	.LBB307_22
.LBB307_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB307_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB307_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB307_30
.LBB307_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB307_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB307_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB307_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB307_29:                             # %if.end59
	jmp	.LBB307_30
.LBB307_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB307_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB307_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$97627833, -28(%rbp)    # imm = 0x5D1AEB9
	jne	.LBB307_34
.LBB307_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_33
.Lfunc_end307:
	.size	write_one_macroblock.266, .Lfunc_end307-write_one_macroblock.266
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.267 # -- Begin function ChromaResidualCoding.267
	.p2align	4, 0x90
	.type	ChromaResidualCoding.267,@function
ChromaResidualCoding.267:               # @ChromaResidualCoding.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1734913890, -76(%rbp)  # imm = 0x6768AF62
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB308_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB308_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB308_3:                              # %lor.end
.LBB308_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB308_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB308_7 Depth 2
                                        #       Child Loop BB308_9 Depth 3
                                        #     Child Loop BB308_16 Depth 2
                                        #       Child Loop BB308_18 Depth 3
                                        #     Child Loop BB308_33 Depth 2
                                        #       Child Loop BB308_35 Depth 3
                                        #     Child Loop BB308_43 Depth 2
                                        #       Child Loop BB308_45 Depth 3
                                        #     Child Loop BB308_58 Depth 2
                                        #       Child Loop BB308_60 Depth 3
                                        #     Child Loop BB308_87 Depth 2
                                        #       Child Loop BB308_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB308_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB308_7:                              # %for.cond5
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB308_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB308_7 Depth=2
	movl	$0, -20(%rbp)
.LBB308_9:                              # %for.cond8
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB308_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB308_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB308_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB308_9
.LBB308_12:                             # %for.end
                                        #   in Loop: Header=BB308_7 Depth=2
	jmp	.LBB308_13
.LBB308_13:                             # %for.inc18
                                        #   in Loop: Header=BB308_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_7
.LBB308_14:                             # %for.end20
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB308_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -8(%rbp)
.LBB308_16:                             # %for.cond21
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB308_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB308_16 Depth=2
	movl	$0, -4(%rbp)
.LBB308_18:                             # %for.cond26
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB308_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB308_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB308_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB308_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB308_25
.LBB308_21:                             # %if.else
                                        #   in Loop: Header=BB308_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB308_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB308_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB308_24
.LBB308_23:                             # %if.else52
                                        #   in Loop: Header=BB308_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB308_24:                             # %if.end
                                        #   in Loop: Header=BB308_18 Depth=3
	jmp	.LBB308_25
.LBB308_25:                             # %if.end57
                                        #   in Loop: Header=BB308_18 Depth=3
	jmp	.LBB308_26
.LBB308_26:                             # %for.inc58
                                        #   in Loop: Header=BB308_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_18
.LBB308_27:                             # %for.end59
                                        #   in Loop: Header=BB308_16 Depth=2
	jmp	.LBB308_28
.LBB308_28:                             # %for.inc60
                                        #   in Loop: Header=BB308_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_16
.LBB308_29:                             # %for.end62
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_74
.LBB308_30:                             # %if.else63
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB308_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB308_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -8(%rbp)
.LBB308_33:                             # %for.cond69
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB308_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB308_33 Depth=2
	movl	$0, -4(%rbp)
.LBB308_35:                             # %for.cond73
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB308_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB308_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB308_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_35
.LBB308_38:                             # %for.end83
                                        #   in Loop: Header=BB308_33 Depth=2
	jmp	.LBB308_39
.LBB308_39:                             # %for.inc84
                                        #   in Loop: Header=BB308_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_33
.LBB308_40:                             # %for.end86
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_73
.LBB308_41:                             # %if.else87
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB308_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -8(%rbp)
.LBB308_43:                             # %for.cond90
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB308_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB308_43 Depth=2
	movl	$0, -4(%rbp)
.LBB308_45:                             # %for.cond95
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB308_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB308_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB308_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB308_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB308_52
.LBB308_48:                             # %if.else119
                                        #   in Loop: Header=BB308_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB308_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB308_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB308_51
.LBB308_50:                             # %if.else127
                                        #   in Loop: Header=BB308_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB308_51:                             # %if.end132
                                        #   in Loop: Header=BB308_45 Depth=3
	jmp	.LBB308_52
.LBB308_52:                             # %if.end133
                                        #   in Loop: Header=BB308_45 Depth=3
	jmp	.LBB308_53
.LBB308_53:                             # %for.inc134
                                        #   in Loop: Header=BB308_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_45
.LBB308_54:                             # %for.end136
                                        #   in Loop: Header=BB308_43 Depth=2
	jmp	.LBB308_55
.LBB308_55:                             # %for.inc137
                                        #   in Loop: Header=BB308_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_43
.LBB308_56:                             # %for.end139
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_72
.LBB308_57:                             # %if.else140
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -8(%rbp)
.LBB308_58:                             # %for.cond141
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB308_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB308_58 Depth=2
	movl	$0, -4(%rbp)
.LBB308_60:                             # %for.cond146
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB308_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB308_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB308_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB308_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB308_67
.LBB308_63:                             # %if.else175
                                        #   in Loop: Header=BB308_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB308_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB308_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB308_66
.LBB308_65:                             # %if.else188
                                        #   in Loop: Header=BB308_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB308_66:                             # %if.end198
                                        #   in Loop: Header=BB308_60 Depth=3
	jmp	.LBB308_67
.LBB308_67:                             # %if.end199
                                        #   in Loop: Header=BB308_60 Depth=3
	jmp	.LBB308_68
.LBB308_68:                             # %for.inc200
                                        #   in Loop: Header=BB308_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_60
.LBB308_69:                             # %for.end202
                                        #   in Loop: Header=BB308_58 Depth=2
	jmp	.LBB308_70
.LBB308_70:                             # %for.inc203
                                        #   in Loop: Header=BB308_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_58
.LBB308_71:                             # %for.end205
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_72
.LBB308_72:                             # %if.end206
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_73
.LBB308_73:                             # %if.end207
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_74
.LBB308_74:                             # %if.end208
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB308_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB308_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB308_100
.LBB308_77:                             # %if.else215
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB308_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB308_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB308_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB308_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB308_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB308_84
.LBB308_83:                             # %if.then247
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB308_85
.LBB308_84:                             # %if.else249
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB308_85:                             # %if.end251
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB308_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	$0, -8(%rbp)
.LBB308_87:                             # %for.cond255
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB308_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB308_87 Depth=2
	movl	$0, -4(%rbp)
.LBB308_89:                             # %for.cond260
                                        #   Parent Loop BB308_5 Depth=1
                                        #     Parent Loop BB308_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB308_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB308_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB308_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB308_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB308_93
.LBB308_92:                             # %if.else277
                                        #   in Loop: Header=BB308_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB308_93:                             # %if.end287
                                        #   in Loop: Header=BB308_89 Depth=3
	jmp	.LBB308_94
.LBB308_94:                             # %for.inc288
                                        #   in Loop: Header=BB308_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_89
.LBB308_95:                             # %for.end290
                                        #   in Loop: Header=BB308_87 Depth=2
	jmp	.LBB308_96
.LBB308_96:                             # %for.inc291
                                        #   in Loop: Header=BB308_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_87
.LBB308_97:                             # %for.end293
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_98
.LBB308_98:                             # %if.end294
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_99
.LBB308_99:                             # %if.end295
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_100
.LBB308_100:                            # %if.end296
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_101
.LBB308_101:                            # %for.inc297
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_5
.LBB308_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB308_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB308_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB308_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB308_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB308_104 Depth=1
	movl	$0, -4(%rbp)
.LBB308_106:                            # %for.cond312
                                        #   Parent Loop BB308_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB308_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB308_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB308_110
.LBB308_109:                            # %cond.false
                                        #   in Loop: Header=BB308_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB308_110:                            # %cond.end
                                        #   in Loop: Header=BB308_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB308_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB308_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB308_116
.LBB308_112:                            # %cond.false358
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB308_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB308_115
.LBB308_114:                            # %cond.false367
                                        #   in Loop: Header=BB308_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB308_115:                            # %cond.end373
                                        #   in Loop: Header=BB308_106 Depth=2
.LBB308_116:                            # %cond.end375
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB308_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB308_119
.LBB308_118:                            # %cond.false394
                                        #   in Loop: Header=BB308_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB308_119:                            # %cond.end400
                                        #   in Loop: Header=BB308_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB308_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB308_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB308_125
.LBB308_121:                            # %cond.false406
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB308_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB308_124
.LBB308_123:                            # %cond.false415
                                        #   in Loop: Header=BB308_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB308_124:                            # %cond.end421
                                        #   in Loop: Header=BB308_106 Depth=2
.LBB308_125:                            # %cond.end423
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB308_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB308_128
.LBB308_127:                            # %cond.false443
                                        #   in Loop: Header=BB308_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB308_128:                            # %cond.end449
                                        #   in Loop: Header=BB308_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB308_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB308_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB308_134
.LBB308_130:                            # %cond.false455
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB308_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB308_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB308_133
.LBB308_132:                            # %cond.false464
                                        #   in Loop: Header=BB308_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB308_133:                            # %cond.end470
                                        #   in Loop: Header=BB308_106 Depth=2
.LBB308_134:                            # %cond.end472
                                        #   in Loop: Header=BB308_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB308_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_106
.LBB308_136:                            # %for.end487
                                        #   in Loop: Header=BB308_104 Depth=1
	jmp	.LBB308_137
.LBB308_137:                            # %for.inc488
                                        #   in Loop: Header=BB308_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB308_104
.LBB308_138:                            # %for.end490
	jmp	.LBB308_139
.LBB308_139:                            # %if.end491
	cmpl	$1734913890, -76(%rbp)  # imm = 0x6768AF62
	jne	.LBB308_141
.LBB308_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_140
.Lfunc_end308:
	.size	ChromaResidualCoding.267, .Lfunc_end308-ChromaResidualCoding.267
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.268        # -- Begin function writeMBLayer.268
	.p2align	4, 0x90
	.type	writeMBLayer.268,@function
writeMBLayer.268:                       # @writeMBLayer.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$80977504, -100(%rbp)   # imm = 0x4D39E60
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB309_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB309_3
.LBB309_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB309_3
.LBB309_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB309_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB309_9
.LBB309_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB309_8
.LBB309_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB309_8
.LBB309_8:                              # %cond.end14
.LBB309_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB309_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB309_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB309_24
.LBB309_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB309_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB309_17
	jmp	.LBB309_18
.LBB309_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB309_18
	jmp	.LBB309_17
.LBB309_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB309_17
	jmp	.LBB309_18
.LBB309_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB309_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB309_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB309_23
.LBB309_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB309_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB309_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB309_23:                             # %if.end50
	jmp	.LBB309_24
.LBB309_24:                             # %if.end51
	jmp	.LBB309_25
.LBB309_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB309_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB309_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB309_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB309_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB309_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB309_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB309_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB309_35
.LBB309_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB309_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB309_38
.LBB309_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB309_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB309_39:                             # %if.end96
	jmp	.LBB309_40
.LBB309_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB309_43
.LBB309_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB309_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB309_89
.LBB309_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB309_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB309_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB309_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB309_49
.LBB309_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB309_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB309_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB309_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB309_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB309_55
.LBB309_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB309_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB309_58
.LBB309_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB309_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB309_59:                             # %if.end198
	jmp	.LBB309_60
.LBB309_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB309_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB309_64
.LBB309_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB309_64:                             # %if.end226
	jmp	.LBB309_88
.LBB309_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB309_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB309_76
.LBB309_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB309_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB309_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB309_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB309_72:                             # %if.end281
	jmp	.LBB309_73
.LBB309_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB309_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB309_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB309_87
.LBB309_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB309_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB309_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB309_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB309_77 Depth=1
	movl	$0, -44(%rbp)
.LBB309_79:                             # %for.cond310
                                        #   Parent Loop BB309_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB309_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB309_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB309_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB309_79
.LBB309_82:                             # %for.end
                                        #   in Loop: Header=BB309_77 Depth=1
	jmp	.LBB309_83
.LBB309_83:                             # %for.inc322
                                        #   in Loop: Header=BB309_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB309_77
.LBB309_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB309_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB309_86:                             # %if.end345
	jmp	.LBB309_87
.LBB309_87:                             # %if.end346
	jmp	.LBB309_88
.LBB309_88:                             # %if.end347
	jmp	.LBB309_89
.LBB309_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB309_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB309_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB309_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB309_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB309_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB309_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB309_98
.LBB309_97:                             # %if.else380
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB309_98:                             # %if.end382
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB309_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB309_101
.LBB309_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB309_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB309_101:                            # %lor.end415
                                        #   in Loop: Header=BB309_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB309_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB309_94
.LBB309_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB309_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB309_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB309_114
.LBB309_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB309_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB309_110
.LBB309_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB309_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB309_113
.LBB309_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB309_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB309_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB309_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB309_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB309_120
.LBB309_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB309_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB309_119:                            # %if.end483
	jmp	.LBB309_120
.LBB309_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB309_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB309_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB309_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB309_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB309_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB309_129
.LBB309_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB309_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB309_128:                            # %if.end516
	jmp	.LBB309_129
.LBB309_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$80977504, -100(%rbp)   # imm = 0x4D39E60
	jne	.LBB309_131
.LBB309_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_130
.Lfunc_end309:
	.size	writeMBLayer.268, .Lfunc_end309-writeMBLayer.268
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.269 # -- Begin function IntraChromaPrediction.269
	.p2align	4, 0x90
	.type	IntraChromaPrediction.269,@function
IntraChromaPrediction.269:              # @IntraChromaPrediction.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1353705907, -164(%rbp) # imm = 0x50AFE9B3
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB310_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB310_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB310_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_1
.LBB310_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB310_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB310_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB310_8
.LBB310_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB310_8
.LBB310_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB310_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB310_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB310_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB310_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB310_13
.LBB310_12:                             # %cond.false32
                                        #   in Loop: Header=BB310_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB310_13
.LBB310_13:                             # %cond.end33
                                        #   in Loop: Header=BB310_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB310_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_9
.LBB310_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB310_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB310_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB310_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB310_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB310_20
.LBB310_19:                             # %cond.false57
                                        #   in Loop: Header=BB310_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB310_20
.LBB310_20:                             # %cond.end58
                                        #   in Loop: Header=BB310_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB310_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_16
.LBB310_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB310_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB310_25
.LBB310_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB310_25
.LBB310_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB310_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB310_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB310_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB310_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB310_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB310_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB310_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB310_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB310_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB310_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_37 Depth 2
                                        #       Child Loop BB310_39 Depth 3
                                        #         Child Loop BB310_104 Depth 4
                                        #         Child Loop BB310_110 Depth 4
                                        #         Child Loop BB310_85 Depth 4
                                        #         Child Loop BB310_91 Depth 4
                                        #         Child Loop BB310_66 Depth 4
                                        #         Child Loop BB310_72 Depth 4
                                        #         Child Loop BB310_44 Depth 4
                                        #         Child Loop BB310_50 Depth 4
                                        #         Child Loop BB310_125 Depth 4
                                        #           Child Loop BB310_127 Depth 5
                                        #     Child Loop BB310_138 Depth 2
                                        #     Child Loop BB310_142 Depth 2
                                        #       Child Loop BB310_144 Depth 3
                                        #     Child Loop BB310_153 Depth 2
                                        #     Child Loop BB310_157 Depth 2
                                        #       Child Loop BB310_159 Depth 3
                                        #     Child Loop BB310_170 Depth 2
                                        #     Child Loop BB310_174 Depth 2
                                        #     Child Loop BB310_178 Depth 2
                                        #       Child Loop BB310_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB310_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB310_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB310_37:                             # %for.cond95
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB310_39 Depth 3
                                        #         Child Loop BB310_104 Depth 4
                                        #         Child Loop BB310_110 Depth 4
                                        #         Child Loop BB310_85 Depth 4
                                        #         Child Loop BB310_91 Depth 4
                                        #         Child Loop BB310_66 Depth 4
                                        #         Child Loop BB310_72 Depth 4
                                        #         Child Loop BB310_44 Depth 4
                                        #         Child Loop BB310_50 Depth 4
                                        #         Child Loop BB310_125 Depth 4
                                        #           Child Loop BB310_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB310_37 Depth=2
	movl	$0, -84(%rbp)
.LBB310_39:                             # %for.cond99
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB310_104 Depth 4
                                        #         Child Loop BB310_110 Depth 4
                                        #         Child Loop BB310_85 Depth 4
                                        #         Child Loop BB310_91 Depth 4
                                        #         Child Loop BB310_66 Depth 4
                                        #         Child Loop BB310_72 Depth 4
                                        #         Child Loop BB310_44 Depth 4
                                        #         Child Loop BB310_50 Depth 4
                                        #         Child Loop BB310_125 Depth 4
                                        #           Child Loop BB310_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB310_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB310_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB310_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB310_39 Depth=3
	movq	.LJTI310_0(,%rax,8), %rax
	jmpq	*%rax
.LBB310_42:                             # %sw.bb
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_44:                             # %for.cond124
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB310_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB310_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_44
.LBB310_47:                             # %for.end138
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_48
.LBB310_48:                             # %if.end139
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB310_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_50:                             # %for.cond143
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB310_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB310_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_50
.LBB310_53:                             # %for.end162
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_54
.LBB310_54:                             # %if.end163
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB310_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_63
.LBB310_57:                             # %if.else
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_62
.LBB310_59:                             # %if.else174
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB310_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB310_61:                             # %if.end180
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_62
.LBB310_62:                             # %if.end181
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_63
.LBB310_63:                             # %if.end182
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_124
.LBB310_64:                             # %sw.bb183
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_66:                             # %for.cond186
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB310_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB310_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_66
.LBB310_69:                             # %for.end202
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_77
.LBB310_70:                             # %if.else203
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB310_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_72:                             # %for.cond207
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB310_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB310_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_72
.LBB310_75:                             # %for.end226
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_76
.LBB310_76:                             # %if.end227
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_77
.LBB310_77:                             # %if.end228
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_82
.LBB310_79:                             # %if.else233
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB310_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB310_81:                             # %if.end239
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_82
.LBB310_82:                             # %if.end240
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_124
.LBB310_83:                             # %sw.bb241
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB310_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_85:                             # %for.cond245
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB310_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB310_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_85
.LBB310_88:                             # %for.end264
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_96
.LBB310_89:                             # %if.else265
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_91:                             # %for.cond268
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB310_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB310_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_91
.LBB310_94:                             # %for.end284
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_95
.LBB310_95:                             # %if.end285
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_96
.LBB310_96:                             # %if.end286
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB310_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_101
.LBB310_98:                             # %if.else292
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB310_100:                            # %if.end297
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_101
.LBB310_101:                            # %if.end298
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_124
.LBB310_102:                            # %sw.bb299
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_104:                            # %for.cond302
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB310_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB310_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_104
.LBB310_107:                            # %for.end318
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_108
.LBB310_108:                            # %if.end319
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB310_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_110:                            # %for.cond323
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB310_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB310_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_110
.LBB310_113:                            # %for.end342
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_114
.LBB310_114:                            # %if.end343
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB310_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_123
.LBB310_117:                            # %if.else352
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB310_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB310_122
.LBB310_119:                            # %if.else357
                                        #   in Loop: Header=BB310_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB310_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB310_121:                            # %if.end363
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_122
.LBB310_122:                            # %if.end364
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_123
.LBB310_123:                            # %if.end365
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_124
.LBB310_124:                            # %sw.epilog
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB310_125:                            # %for.cond366
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB310_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB310_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_127:                            # %for.cond371
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_37 Depth=2
                                        #       Parent Loop BB310_39 Depth=3
                                        #         Parent Loop BB310_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB310_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB310_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_127
.LBB310_130:                            # %for.end386
                                        #   in Loop: Header=BB310_125 Depth=4
	jmp	.LBB310_131
.LBB310_131:                            # %for.inc387
                                        #   in Loop: Header=BB310_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB310_125
.LBB310_132:                            # %for.end389
                                        #   in Loop: Header=BB310_39 Depth=3
	jmp	.LBB310_133
.LBB310_133:                            # %for.inc390
                                        #   in Loop: Header=BB310_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB310_39
.LBB310_134:                            # %for.end392
                                        #   in Loop: Header=BB310_37 Depth=2
	jmp	.LBB310_135
.LBB310_135:                            # %for.inc393
                                        #   in Loop: Header=BB310_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB310_37
.LBB310_136:                            # %for.end395
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB310_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	$0, -4(%rbp)
.LBB310_138:                            # %for.cond398
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB310_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB310_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB310_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_138
.LBB310_141:                            # %for.end414
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	$0, -4(%rbp)
.LBB310_142:                            # %for.cond415
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB310_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB310_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB310_142 Depth=2
	movl	$0, -8(%rbp)
.LBB310_144:                            # %for.cond419
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB310_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB310_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB310_144
.LBB310_147:                            # %for.end436
                                        #   in Loop: Header=BB310_142 Depth=2
	jmp	.LBB310_148
.LBB310_148:                            # %for.inc437
                                        #   in Loop: Header=BB310_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_142
.LBB310_149:                            # %for.end439
                                        #   in Loop: Header=BB310_35 Depth=1
	jmp	.LBB310_150
.LBB310_150:                            # %if.end440
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB310_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB310_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	$0, -4(%rbp)
.LBB310_153:                            # %for.cond447
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB310_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB310_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_153
.LBB310_156:                            # %for.end468
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	$0, -4(%rbp)
.LBB310_157:                            # %for.cond469
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB310_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB310_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB310_157 Depth=2
	movl	$0, -8(%rbp)
.LBB310_159:                            # %for.cond473
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB310_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB310_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB310_159
.LBB310_162:                            # %for.end490
                                        #   in Loop: Header=BB310_157 Depth=2
	jmp	.LBB310_163
.LBB310_163:                            # %for.inc491
                                        #   in Loop: Header=BB310_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_157
.LBB310_164:                            # %for.end493
                                        #   in Loop: Header=BB310_35 Depth=1
	jmp	.LBB310_165
.LBB310_165:                            # %if.end494
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB310_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB310_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB310_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB310_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB310_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB310_170:                            # %for.cond519
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB310_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB310_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB310_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_170
.LBB310_173:                            # %for.end540
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB310_174:                            # %for.cond556
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB310_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB310_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB310_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_174
.LBB310_177:                            # %for.end577
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB310_178:                            # %for.cond606
                                        #   Parent Loop BB310_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB310_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB310_178 Depth=2
	movl	$0, -4(%rbp)
.LBB310_180:                            # %for.cond610
                                        #   Parent Loop BB310_35 Depth=1
                                        #     Parent Loop BB310_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB310_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB310_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB310_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB310_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB310_184
.LBB310_183:                            # %cond.false630
                                        #   in Loop: Header=BB310_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB310_184:                            # %cond.end643
                                        #   in Loop: Header=BB310_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB310_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB310_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB310_190
.LBB310_186:                            # %cond.false648
                                        #   in Loop: Header=BB310_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB310_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB310_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB310_189
.LBB310_188:                            # %cond.false666
                                        #   in Loop: Header=BB310_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB310_189:                            # %cond.end679
                                        #   in Loop: Header=BB310_180 Depth=3
.LBB310_190:                            # %cond.end681
                                        #   in Loop: Header=BB310_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB310_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_180
.LBB310_192:                            # %for.end694
                                        #   in Loop: Header=BB310_178 Depth=2
	jmp	.LBB310_193
.LBB310_193:                            # %for.inc695
                                        #   in Loop: Header=BB310_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB310_178
.LBB310_194:                            # %for.end697
                                        #   in Loop: Header=BB310_35 Depth=1
	jmp	.LBB310_195
.LBB310_195:                            # %if.end698
                                        #   in Loop: Header=BB310_35 Depth=1
	jmp	.LBB310_196
.LBB310_196:                            # %for.inc699
                                        #   in Loop: Header=BB310_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB310_35
.LBB310_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB310_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB310_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB310_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB310_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB310_199
.LBB310_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB310_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_219 Depth 2
                                        #       Child Loop BB310_221 Depth 3
                                        #         Child Loop BB310_223 Depth 4
                                        #           Child Loop BB310_225 Depth 5
                                        #             Child Loop BB310_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB310_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB310_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB310_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB310_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB310_203 Depth=1
	jmp	.LBB310_241
.LBB310_207:                            # %if.end723
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB310_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB310_217
.LBB310_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB310_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB310_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB310_217
.LBB310_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB310_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB310_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB310_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB310_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB310_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB310_218
.LBB310_217:                            # %if.then749
                                        #   in Loop: Header=BB310_203 Depth=1
	jmp	.LBB310_241
.LBB310_218:                            # %if.end750
                                        #   in Loop: Header=BB310_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB310_219:                            # %for.cond751
                                        #   Parent Loop BB310_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB310_221 Depth 3
                                        #         Child Loop BB310_223 Depth 4
                                        #           Child Loop BB310_225 Depth 5
                                        #             Child Loop BB310_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB310_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB310_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB310_221:                            # %for.cond757
                                        #   Parent Loop BB310_203 Depth=1
                                        #     Parent Loop BB310_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB310_223 Depth 4
                                        #           Child Loop BB310_225 Depth 5
                                        #             Child Loop BB310_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB310_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB310_221 Depth=3
	movl	$0, -44(%rbp)
.LBB310_223:                            # %for.cond761
                                        #   Parent Loop BB310_203 Depth=1
                                        #     Parent Loop BB310_219 Depth=2
                                        #       Parent Loop BB310_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB310_225 Depth 5
                                        #             Child Loop BB310_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB310_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB310_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB310_225:                            # %for.cond765
                                        #   Parent Loop BB310_203 Depth=1
                                        #     Parent Loop BB310_219 Depth=2
                                        #       Parent Loop BB310_221 Depth=3
                                        #         Parent Loop BB310_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB310_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB310_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB310_227:                            # %for.cond770
                                        #   Parent Loop BB310_203 Depth=1
                                        #     Parent Loop BB310_219 Depth=2
                                        #       Parent Loop BB310_221 Depth=3
                                        #         Parent Loop BB310_223 Depth=4
                                        #           Parent Loop BB310_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB310_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB310_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB310_227
.LBB310_230:                            # %for.end803
                                        #   in Loop: Header=BB310_225 Depth=5
	jmp	.LBB310_231
.LBB310_231:                            # %for.inc804
                                        #   in Loop: Header=BB310_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB310_225
.LBB310_232:                            # %for.end806
                                        #   in Loop: Header=BB310_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB310_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB310_223
.LBB310_234:                            # %for.end810
                                        #   in Loop: Header=BB310_221 Depth=3
	jmp	.LBB310_235
.LBB310_235:                            # %for.inc811
                                        #   in Loop: Header=BB310_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB310_221
.LBB310_236:                            # %for.end813
                                        #   in Loop: Header=BB310_219 Depth=2
	jmp	.LBB310_237
.LBB310_237:                            # %for.inc814
                                        #   in Loop: Header=BB310_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB310_219
.LBB310_238:                            # %for.end816
                                        #   in Loop: Header=BB310_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB310_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB310_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB310_240:                            # %if.end820
                                        #   in Loop: Header=BB310_203 Depth=1
	jmp	.LBB310_241
.LBB310_241:                            # %for.inc821
                                        #   in Loop: Header=BB310_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB310_203
.LBB310_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB310_243:                            # %if.end824
	cmpl	$1353705907, -164(%rbp) # imm = 0x50AFE9B3
	jne	.LBB310_245
.LBB310_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_244
.Lfunc_end310:
	.size	IntraChromaPrediction.269, .Lfunc_end310-IntraChromaPrediction.269
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI310_0:
	.quad	.LBB310_42
	.quad	.LBB310_64
	.quad	.LBB310_83
	.quad	.LBB310_102
                                        # -- End function
	.text
	.globl	write_one_macroblock.270 # -- Begin function write_one_macroblock.270
	.p2align	4, 0x90
	.type	write_one_macroblock.270,@function
write_one_macroblock.270:               # @write_one_macroblock.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$189277464, -28(%rbp)   # imm = 0xB482518
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB311_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB311_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB311_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB311_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB311_6
.LBB311_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB311_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB311_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB311_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB311_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB311_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB311_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB311_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB311_22
.LBB311_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB311_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB311_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB311_14 Depth=1
	movl	$0, -24(%rbp)
.LBB311_16:                             # %for.cond24
                                        #   Parent Loop BB311_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB311_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB311_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB311_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB311_16
.LBB311_19:                             # %for.end
                                        #   in Loop: Header=BB311_14 Depth=1
	jmp	.LBB311_20
.LBB311_20:                             # %for.inc35
                                        #   in Loop: Header=BB311_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB311_14
.LBB311_21:                             # %for.end37
	jmp	.LBB311_22
.LBB311_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB311_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB311_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB311_30
.LBB311_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB311_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB311_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB311_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB311_29:                             # %if.end59
	jmp	.LBB311_30
.LBB311_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB311_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB311_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$189277464, -28(%rbp)   # imm = 0xB482518
	jne	.LBB311_34
.LBB311_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_33
.Lfunc_end311:
	.size	write_one_macroblock.270, .Lfunc_end311-write_one_macroblock.270
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.271 # -- Begin function terminate_macroblock.271
	.p2align	4, 0x90
	.type	terminate_macroblock.271,@function
terminate_macroblock.271:               # @terminate_macroblock.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1950979598, -108(%rbp) # imm = 0x7449960E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB312_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB312_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB312_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB312_5
.LBB312_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB312_8
.LBB312_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB312_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB312_7:                              # %if.end
	jmp	.LBB312_8
.LBB312_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB312_45
# %bb.9:                                # %if.end18
	movq	.LJTI312_0(,%rax,8), %rax
	jmpq	*%rax
.LBB312_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB312_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB312_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB312_46
.LBB312_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB312_46
.LBB312_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB312_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB312_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB312_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB312_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB312_22
.LBB312_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB312_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB312_21:                             # %if.end64
	jmp	.LBB312_22
.LBB312_22:                             # %if.end65
	jmp	.LBB312_23
.LBB312_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB312_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB312_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB312_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB312_27:                             # %if.end79
	jmp	.LBB312_28
.LBB312_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB312_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB312_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB312_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB312_32:                             # %if.end89
	jmp	.LBB312_33
.LBB312_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB312_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB312_35:                             # %if.end95
	jmp	.LBB312_46
.LBB312_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB312_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB312_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB312_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB312_40:                             # %if.end106
	jmp	.LBB312_41
.LBB312_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB312_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB312_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB312_44:                             # %if.end118
	jmp	.LBB312_46
.LBB312_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB312_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB312_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB312_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB312_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB312_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB312_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB312_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB312_51:                             # %if.end139
                                        #   in Loop: Header=BB312_48 Depth=1
	jmp	.LBB312_52
.LBB312_52:                             # %for.inc
                                        #   in Loop: Header=BB312_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB312_48
.LBB312_53:                             # %for.end
	jmp	.LBB312_54
.LBB312_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB312_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB312_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB312_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB312_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB312_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB312_60:                             # %if.end174
	jmp	.LBB312_62
.LBB312_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB312_62:                             # %if.end188
	jmp	.LBB312_63
.LBB312_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB312_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB312_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB312_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB312_67:                             # %if.end218
	cmpl	$1950979598, -108(%rbp) # imm = 0x7449960E
	jne	.LBB312_69
.LBB312_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_68
.Lfunc_end312:
	.size	terminate_macroblock.271, .Lfunc_end312-terminate_macroblock.271
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI312_0:
	.quad	.LBB312_10
	.quad	.LBB312_13
	.quad	.LBB312_14
	.quad	.LBB312_36
                                        # -- End function
	.text
	.globl	MBType2Value.272        # -- Begin function MBType2Value.272
	.p2align	4, 0x90
	.type	MBType2Value.272,@function
MBType2Value.272:                       # @MBType2Value.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$714901074, -36(%rbp)   # imm = 0x2A9C8652
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB313_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB313_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB313_4
.LBB313_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB313_26
.LBB313_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB313_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB313_26
.LBB313_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB313_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB313_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB313_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB313_26
.LBB313_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB313_26
.LBB313_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_26
.LBB313_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB313_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB313_26
.LBB313_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB313_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB313_17
.LBB313_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB313_26
.LBB313_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB313_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_26
.LBB313_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB313_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB313_26
.LBB313_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB313_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_26
.LBB313_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB313_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_26
.LBB313_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB313_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$714901074, -36(%rbp)   # imm = 0x2A9C8652
	jne	.LBB313_28
.LBB313_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_27
.Lfunc_end313:
	.size	MBType2Value.272, .Lfunc_end313-MBType2Value.272
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.273 # -- Begin function write_terminating_bit.273
	.p2align	4, 0x90
	.type	write_terminating_bit.273,@function
write_terminating_bit.273:              # @write_terminating_bit.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$215758011, -8(%rbp)    # imm = 0xCDC34BB
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$215758011, -8(%rbp)    # imm = 0xCDC34BB
	jne	.LBB314_2
.LBB314_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_1
.Lfunc_end314:
	.size	write_terminating_bit.273, .Lfunc_end314-write_terminating_bit.273
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.274 # -- Begin function ChromaResidualCoding.274
	.p2align	4, 0x90
	.type	ChromaResidualCoding.274,@function
ChromaResidualCoding.274:               # @ChromaResidualCoding.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1969002301, -68(%rbp)  # imm = 0x755C973D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB315_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB315_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB315_3:                              # %lor.end
.LBB315_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB315_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_7 Depth 2
                                        #       Child Loop BB315_9 Depth 3
                                        #     Child Loop BB315_16 Depth 2
                                        #       Child Loop BB315_18 Depth 3
                                        #     Child Loop BB315_33 Depth 2
                                        #       Child Loop BB315_35 Depth 3
                                        #     Child Loop BB315_43 Depth 2
                                        #       Child Loop BB315_45 Depth 3
                                        #     Child Loop BB315_58 Depth 2
                                        #       Child Loop BB315_60 Depth 3
                                        #     Child Loop BB315_87 Depth 2
                                        #       Child Loop BB315_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB315_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB315_7:                              # %for.cond5
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB315_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB315_7 Depth=2
	movl	$0, -20(%rbp)
.LBB315_9:                              # %for.cond8
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB315_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB315_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB315_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_9
.LBB315_12:                             # %for.end
                                        #   in Loop: Header=BB315_7 Depth=2
	jmp	.LBB315_13
.LBB315_13:                             # %for.inc18
                                        #   in Loop: Header=BB315_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB315_7
.LBB315_14:                             # %for.end20
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB315_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -4(%rbp)
.LBB315_16:                             # %for.cond21
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB315_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB315_16 Depth=2
	movl	$0, -8(%rbp)
.LBB315_18:                             # %for.cond26
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB315_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB315_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB315_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB315_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB315_25
.LBB315_21:                             # %if.else
                                        #   in Loop: Header=BB315_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB315_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB315_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB315_24
.LBB315_23:                             # %if.else52
                                        #   in Loop: Header=BB315_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB315_24:                             # %if.end
                                        #   in Loop: Header=BB315_18 Depth=3
	jmp	.LBB315_25
.LBB315_25:                             # %if.end57
                                        #   in Loop: Header=BB315_18 Depth=3
	jmp	.LBB315_26
.LBB315_26:                             # %for.inc58
                                        #   in Loop: Header=BB315_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_18
.LBB315_27:                             # %for.end59
                                        #   in Loop: Header=BB315_16 Depth=2
	jmp	.LBB315_28
.LBB315_28:                             # %for.inc60
                                        #   in Loop: Header=BB315_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_16
.LBB315_29:                             # %for.end62
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_74
.LBB315_30:                             # %if.else63
                                        #   in Loop: Header=BB315_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB315_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB315_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -4(%rbp)
.LBB315_33:                             # %for.cond69
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB315_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB315_33 Depth=2
	movl	$0, -8(%rbp)
.LBB315_35:                             # %for.cond73
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB315_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB315_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB315_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_35
.LBB315_38:                             # %for.end83
                                        #   in Loop: Header=BB315_33 Depth=2
	jmp	.LBB315_39
.LBB315_39:                             # %for.inc84
                                        #   in Loop: Header=BB315_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_33
.LBB315_40:                             # %for.end86
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_73
.LBB315_41:                             # %if.else87
                                        #   in Loop: Header=BB315_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB315_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -4(%rbp)
.LBB315_43:                             # %for.cond90
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB315_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB315_43 Depth=2
	movl	$0, -8(%rbp)
.LBB315_45:                             # %for.cond95
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB315_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB315_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB315_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB315_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB315_52
.LBB315_48:                             # %if.else119
                                        #   in Loop: Header=BB315_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB315_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB315_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB315_51
.LBB315_50:                             # %if.else127
                                        #   in Loop: Header=BB315_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB315_51:                             # %if.end132
                                        #   in Loop: Header=BB315_45 Depth=3
	jmp	.LBB315_52
.LBB315_52:                             # %if.end133
                                        #   in Loop: Header=BB315_45 Depth=3
	jmp	.LBB315_53
.LBB315_53:                             # %for.inc134
                                        #   in Loop: Header=BB315_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_45
.LBB315_54:                             # %for.end136
                                        #   in Loop: Header=BB315_43 Depth=2
	jmp	.LBB315_55
.LBB315_55:                             # %for.inc137
                                        #   in Loop: Header=BB315_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_43
.LBB315_56:                             # %for.end139
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_72
.LBB315_57:                             # %if.else140
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -4(%rbp)
.LBB315_58:                             # %for.cond141
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB315_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB315_58 Depth=2
	movl	$0, -8(%rbp)
.LBB315_60:                             # %for.cond146
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB315_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB315_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB315_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB315_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB315_67
.LBB315_63:                             # %if.else175
                                        #   in Loop: Header=BB315_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB315_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB315_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB315_66
.LBB315_65:                             # %if.else188
                                        #   in Loop: Header=BB315_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB315_66:                             # %if.end198
                                        #   in Loop: Header=BB315_60 Depth=3
	jmp	.LBB315_67
.LBB315_67:                             # %if.end199
                                        #   in Loop: Header=BB315_60 Depth=3
	jmp	.LBB315_68
.LBB315_68:                             # %for.inc200
                                        #   in Loop: Header=BB315_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_60
.LBB315_69:                             # %for.end202
                                        #   in Loop: Header=BB315_58 Depth=2
	jmp	.LBB315_70
.LBB315_70:                             # %for.inc203
                                        #   in Loop: Header=BB315_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_58
.LBB315_71:                             # %for.end205
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_72
.LBB315_72:                             # %if.end206
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_73
.LBB315_73:                             # %if.end207
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_74
.LBB315_74:                             # %if.end208
                                        #   in Loop: Header=BB315_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB315_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB315_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB315_100
.LBB315_77:                             # %if.else215
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB315_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB315_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB315_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB315_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB315_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB315_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB315_84
.LBB315_83:                             # %if.then247
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB315_85
.LBB315_84:                             # %if.else249
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB315_85:                             # %if.end251
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB315_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	$0, -4(%rbp)
.LBB315_87:                             # %for.cond255
                                        #   Parent Loop BB315_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB315_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB315_87 Depth=2
	movl	$0, -8(%rbp)
.LBB315_89:                             # %for.cond260
                                        #   Parent Loop BB315_5 Depth=1
                                        #     Parent Loop BB315_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB315_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB315_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB315_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB315_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB315_93
.LBB315_92:                             # %if.else277
                                        #   in Loop: Header=BB315_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB315_93:                             # %if.end287
                                        #   in Loop: Header=BB315_89 Depth=3
	jmp	.LBB315_94
.LBB315_94:                             # %for.inc288
                                        #   in Loop: Header=BB315_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_89
.LBB315_95:                             # %for.end290
                                        #   in Loop: Header=BB315_87 Depth=2
	jmp	.LBB315_96
.LBB315_96:                             # %for.inc291
                                        #   in Loop: Header=BB315_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_87
.LBB315_97:                             # %for.end293
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_98
.LBB315_98:                             # %if.end294
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_99
.LBB315_99:                             # %if.end295
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_100
.LBB315_100:                            # %if.end296
                                        #   in Loop: Header=BB315_5 Depth=1
	jmp	.LBB315_101
.LBB315_101:                            # %for.inc297
                                        #   in Loop: Header=BB315_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_5
.LBB315_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB315_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB315_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB315_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB315_104 Depth=1
	movl	$0, -8(%rbp)
.LBB315_106:                            # %for.cond312
                                        #   Parent Loop BB315_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB315_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB315_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB315_110
.LBB315_109:                            # %cond.false
                                        #   in Loop: Header=BB315_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB315_110:                            # %cond.end
                                        #   in Loop: Header=BB315_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB315_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB315_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB315_116
.LBB315_112:                            # %cond.false358
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB315_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB315_115
.LBB315_114:                            # %cond.false367
                                        #   in Loop: Header=BB315_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB315_115:                            # %cond.end373
                                        #   in Loop: Header=BB315_106 Depth=2
.LBB315_116:                            # %cond.end375
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB315_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB315_119
.LBB315_118:                            # %cond.false394
                                        #   in Loop: Header=BB315_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB315_119:                            # %cond.end400
                                        #   in Loop: Header=BB315_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB315_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB315_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB315_125
.LBB315_121:                            # %cond.false406
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB315_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB315_124
.LBB315_123:                            # %cond.false415
                                        #   in Loop: Header=BB315_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB315_124:                            # %cond.end421
                                        #   in Loop: Header=BB315_106 Depth=2
.LBB315_125:                            # %cond.end423
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB315_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB315_128
.LBB315_127:                            # %cond.false443
                                        #   in Loop: Header=BB315_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB315_128:                            # %cond.end449
                                        #   in Loop: Header=BB315_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB315_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB315_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB315_134
.LBB315_130:                            # %cond.false455
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB315_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB315_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB315_133
.LBB315_132:                            # %cond.false464
                                        #   in Loop: Header=BB315_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB315_133:                            # %cond.end470
                                        #   in Loop: Header=BB315_106 Depth=2
.LBB315_134:                            # %cond.end472
                                        #   in Loop: Header=BB315_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB315_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB315_106
.LBB315_136:                            # %for.end487
                                        #   in Loop: Header=BB315_104 Depth=1
	jmp	.LBB315_137
.LBB315_137:                            # %for.inc488
                                        #   in Loop: Header=BB315_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB315_104
.LBB315_138:                            # %for.end490
	jmp	.LBB315_139
.LBB315_139:                            # %if.end491
	cmpl	$1969002301, -68(%rbp)  # imm = 0x755C973D
	jne	.LBB315_141
.LBB315_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_140
.Lfunc_end315:
	.size	ChromaResidualCoding.274, .Lfunc_end315-ChromaResidualCoding.274
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.275 # -- Begin function SetModesAndRefframe.275
	.p2align	4, 0x90
	.type	SetModesAndRefframe.275,@function
SetModesAndRefframe.275:                # @SetModesAndRefframe.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1222249057, -60(%rbp)  # imm = 0x48DA0A61
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB316_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB316_12
.LBB316_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB316_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB316_11
.LBB316_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB316_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB316_10
.LBB316_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB316_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB316_9
.LBB316_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB316_9:                              # %if.end
	jmp	.LBB316_10
.LBB316_10:                             # %if.end86
	jmp	.LBB316_11
.LBB316_11:                             # %if.end87
	jmp	.LBB316_12
.LBB316_12:                             # %if.end88
	cmpl	$1222249057, -60(%rbp)  # imm = 0x48DA0A61
	jne	.LBB316_14
.LBB316_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_13
.Lfunc_end316:
	.size	SetModesAndRefframe.275, .Lfunc_end316-SetModesAndRefframe.275
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.276 # -- Begin function write_terminating_bit.276
	.p2align	4, 0x90
	.type	write_terminating_bit.276,@function
write_terminating_bit.276:              # @write_terminating_bit.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$670593041, -8(%rbp)    # imm = 0x27F87011
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$670593041, -8(%rbp)    # imm = 0x27F87011
	jne	.LBB317_2
.LBB317_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_1
.Lfunc_end317:
	.size	write_terminating_bit.276, .Lfunc_end317-write_terminating_bit.276
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.277        # -- Begin function MBType2Value.277
	.p2align	4, 0x90
	.type	MBType2Value.277,@function
MBType2Value.277:                       # @MBType2Value.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2129276367, -36(%rbp)  # imm = 0x7EEA2DCF
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB318_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB318_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB318_4
.LBB318_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB318_26
.LBB318_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB318_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB318_26
.LBB318_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB318_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB318_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB318_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB318_26
.LBB318_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB318_26
.LBB318_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_26
.LBB318_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB318_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB318_26
.LBB318_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB318_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB318_17
.LBB318_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB318_26
.LBB318_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB318_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_26
.LBB318_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB318_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB318_26
.LBB318_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB318_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_26
.LBB318_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB318_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_26
.LBB318_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB318_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$2129276367, -36(%rbp)  # imm = 0x7EEA2DCF
	jne	.LBB318_28
.LBB318_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_27
.Lfunc_end318:
	.size	MBType2Value.277, .Lfunc_end318-MBType2Value.277
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.278        # -- Begin function MBType2Value.278
	.p2align	4, 0x90
	.type	MBType2Value.278,@function
MBType2Value.278:                       # @MBType2Value.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1673588631, -36(%rbp)  # imm = 0x63C0EF97
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB319_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB319_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB319_4
.LBB319_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB319_26
.LBB319_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB319_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB319_26
.LBB319_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB319_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB319_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB319_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB319_26
.LBB319_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB319_26
.LBB319_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_26
.LBB319_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB319_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB319_26
.LBB319_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB319_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB319_17
.LBB319_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB319_26
.LBB319_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB319_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_26
.LBB319_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB319_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB319_26
.LBB319_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB319_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_26
.LBB319_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB319_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_26
.LBB319_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB319_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1673588631, -36(%rbp)  # imm = 0x63C0EF97
	jne	.LBB319_28
.LBB319_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_27
.Lfunc_end319:
	.size	MBType2Value.278, .Lfunc_end319-MBType2Value.278
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.279 # -- Begin function ChromaPrediction4x4.279
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.279,@function
ChromaPrediction4x4.279:                # @ChromaPrediction4x4.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1564715008, -72(%rbp)  # imm = 0x5D43A800
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB320_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB320_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB320_6
.LBB320_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB320_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB320_5:                              # %land.end
.LBB320_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB320_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB320_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB320_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB320_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB320_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB320_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB320_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB320_15
.LBB320_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB320_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB320_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB320_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB320_87
.LBB320_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB320_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB320_21
.LBB320_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB320_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB320_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB320_24
.LBB320_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB320_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB320_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB320_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB320_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_29:                             # %for.cond52
                                        #   Parent Loop BB320_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB320_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB320_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_29
.LBB320_32:                             # %for.end
                                        #   in Loop: Header=BB320_27 Depth=1
	jmp	.LBB320_33
.LBB320_33:                             # %for.inc99
                                        #   in Loop: Header=BB320_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_27
.LBB320_34:                             # %for.end101
	jmp	.LBB320_55
.LBB320_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB320_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB320_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_39:                             # %for.cond109
                                        #   Parent Loop BB320_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB320_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB320_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_39
.LBB320_42:                             # %for.end139
                                        #   in Loop: Header=BB320_37 Depth=1
	jmp	.LBB320_43
.LBB320_43:                             # %for.inc140
                                        #   in Loop: Header=BB320_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_37
.LBB320_44:                             # %for.end142
	jmp	.LBB320_54
.LBB320_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB320_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_48:                             # %for.cond148
                                        #   Parent Loop BB320_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB320_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB320_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_48
.LBB320_51:                             # %for.end178
                                        #   in Loop: Header=BB320_46 Depth=1
	jmp	.LBB320_52
.LBB320_52:                             # %for.inc179
                                        #   in Loop: Header=BB320_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_46
.LBB320_53:                             # %for.end181
	jmp	.LBB320_54
.LBB320_54:                             # %if.end182
	jmp	.LBB320_55
.LBB320_55:                             # %if.end183
	jmp	.LBB320_87
.LBB320_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB320_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB320_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_60:                             # %for.cond192
                                        #   Parent Loop BB320_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB320_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB320_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_60
.LBB320_63:                             # %for.end208
                                        #   in Loop: Header=BB320_58 Depth=1
	jmp	.LBB320_64
.LBB320_64:                             # %for.inc209
                                        #   in Loop: Header=BB320_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_58
.LBB320_65:                             # %for.end211
	jmp	.LBB320_86
.LBB320_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB320_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB320_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_70:                             # %for.cond220
                                        #   Parent Loop BB320_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB320_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB320_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_70
.LBB320_73:                             # %for.end233
                                        #   in Loop: Header=BB320_68 Depth=1
	jmp	.LBB320_74
.LBB320_74:                             # %for.inc234
                                        #   in Loop: Header=BB320_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_68
.LBB320_75:                             # %for.end236
	jmp	.LBB320_85
.LBB320_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB320_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_79:                             # %for.cond242
                                        #   Parent Loop BB320_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB320_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB320_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_79
.LBB320_82:                             # %for.end255
                                        #   in Loop: Header=BB320_77 Depth=1
	jmp	.LBB320_83
.LBB320_83:                             # %for.inc256
                                        #   in Loop: Header=BB320_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_77
.LBB320_84:                             # %for.end258
	jmp	.LBB320_85
.LBB320_85:                             # %if.end259
	jmp	.LBB320_86
.LBB320_86:                             # %if.end260
	jmp	.LBB320_87
.LBB320_87:                             # %if.end261
	cmpl	$1564715008, -72(%rbp)  # imm = 0x5D43A800
	jne	.LBB320_89
.LBB320_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_88
.Lfunc_end320:
	.size	ChromaPrediction4x4.279, .Lfunc_end320-ChromaPrediction4x4.279
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.280        # -- Begin function MBType2Value.280
	.p2align	4, 0x90
	.type	MBType2Value.280,@function
MBType2Value.280:                       # @MBType2Value.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$199080944, -36(%rbp)   # imm = 0xBDDBBF0
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB321_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB321_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB321_4
.LBB321_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB321_26
.LBB321_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB321_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB321_26
.LBB321_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB321_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB321_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB321_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB321_26
.LBB321_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB321_26
.LBB321_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_26
.LBB321_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB321_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB321_26
.LBB321_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB321_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB321_17
.LBB321_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB321_26
.LBB321_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB321_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_26
.LBB321_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB321_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB321_26
.LBB321_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB321_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_26
.LBB321_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB321_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_26
.LBB321_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB321_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$199080944, -36(%rbp)   # imm = 0xBDDBBF0
	jne	.LBB321_28
.LBB321_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_27
.Lfunc_end321:
	.size	MBType2Value.280, .Lfunc_end321-MBType2Value.280
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.281 # -- Begin function terminate_macroblock.281
	.p2align	4, 0x90
	.type	terminate_macroblock.281,@function
terminate_macroblock.281:               # @terminate_macroblock.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$780065286, -108(%rbp)  # imm = 0x2E7EDA06
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB322_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB322_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB322_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB322_5
.LBB322_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB322_8
.LBB322_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB322_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB322_7:                              # %if.end
	jmp	.LBB322_8
.LBB322_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB322_45
# %bb.9:                                # %if.end18
	movq	.LJTI322_0(,%rax,8), %rax
	jmpq	*%rax
.LBB322_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB322_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB322_46
.LBB322_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB322_46
.LBB322_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB322_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB322_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB322_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB322_22
.LBB322_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB322_21:                             # %if.end64
	jmp	.LBB322_22
.LBB322_22:                             # %if.end65
	jmp	.LBB322_23
.LBB322_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB322_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB322_27:                             # %if.end79
	jmp	.LBB322_28
.LBB322_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB322_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB322_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB322_32:                             # %if.end89
	jmp	.LBB322_33
.LBB322_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB322_35:                             # %if.end95
	jmp	.LBB322_46
.LBB322_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB322_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB322_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB322_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_40:                             # %if.end106
	jmp	.LBB322_41
.LBB322_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB322_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_44:                             # %if.end118
	jmp	.LBB322_46
.LBB322_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB322_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB322_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB322_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB322_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB322_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB322_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB322_51:                             # %if.end139
                                        #   in Loop: Header=BB322_48 Depth=1
	jmp	.LBB322_52
.LBB322_52:                             # %for.inc
                                        #   in Loop: Header=BB322_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB322_48
.LBB322_53:                             # %for.end
	jmp	.LBB322_54
.LBB322_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB322_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB322_60:                             # %if.end174
	jmp	.LBB322_62
.LBB322_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB322_62:                             # %if.end188
	jmp	.LBB322_63
.LBB322_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB322_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB322_67:                             # %if.end218
	cmpl	$780065286, -108(%rbp)  # imm = 0x2E7EDA06
	jne	.LBB322_69
.LBB322_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_68
.Lfunc_end322:
	.size	terminate_macroblock.281, .Lfunc_end322-terminate_macroblock.281
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI322_0:
	.quad	.LBB322_10
	.quad	.LBB322_13
	.quad	.LBB322_14
	.quad	.LBB322_36
                                        # -- End function
	.text
	.globl	terminate_macroblock.282 # -- Begin function terminate_macroblock.282
	.p2align	4, 0x90
	.type	terminate_macroblock.282,@function
terminate_macroblock.282:               # @terminate_macroblock.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1546557581, -108(%rbp) # imm = 0x5C2E988D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB323_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB323_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB323_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB323_5
.LBB323_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB323_8
.LBB323_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB323_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB323_7:                              # %if.end
	jmp	.LBB323_8
.LBB323_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB323_45
# %bb.9:                                # %if.end18
	movq	.LJTI323_0(,%rax,8), %rax
	jmpq	*%rax
.LBB323_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB323_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB323_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB323_46
.LBB323_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB323_46
.LBB323_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB323_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB323_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB323_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB323_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB323_22
.LBB323_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB323_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB323_21:                             # %if.end64
	jmp	.LBB323_22
.LBB323_22:                             # %if.end65
	jmp	.LBB323_23
.LBB323_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB323_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB323_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB323_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB323_27:                             # %if.end79
	jmp	.LBB323_28
.LBB323_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB323_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB323_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB323_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB323_32:                             # %if.end89
	jmp	.LBB323_33
.LBB323_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB323_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB323_35:                             # %if.end95
	jmp	.LBB323_46
.LBB323_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB323_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB323_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB323_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB323_40:                             # %if.end106
	jmp	.LBB323_41
.LBB323_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB323_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB323_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB323_44:                             # %if.end118
	jmp	.LBB323_46
.LBB323_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB323_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB323_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB323_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB323_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB323_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB323_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB323_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB323_51:                             # %if.end139
                                        #   in Loop: Header=BB323_48 Depth=1
	jmp	.LBB323_52
.LBB323_52:                             # %for.inc
                                        #   in Loop: Header=BB323_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB323_48
.LBB323_53:                             # %for.end
	jmp	.LBB323_54
.LBB323_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB323_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB323_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB323_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB323_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB323_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB323_60:                             # %if.end174
	jmp	.LBB323_62
.LBB323_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB323_62:                             # %if.end188
	jmp	.LBB323_63
.LBB323_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB323_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB323_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB323_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB323_67:                             # %if.end218
	cmpl	$1546557581, -108(%rbp) # imm = 0x5C2E988D
	jne	.LBB323_69
.LBB323_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_68
.Lfunc_end323:
	.size	terminate_macroblock.282, .Lfunc_end323-terminate_macroblock.282
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI323_0:
	.quad	.LBB323_10
	.quad	.LBB323_13
	.quad	.LBB323_14
	.quad	.LBB323_36
                                        # -- End function
	.text
	.globl	find_sad_16x16.283      # -- Begin function find_sad_16x16.283
	.p2align	4, 0x90
	.type	find_sad_16x16.283,@function
find_sad_16x16.283:                     # @find_sad_16x16.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$566695265, -80(%rbp)   # imm = 0x21C71561
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB324_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB324_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_1
.LBB324_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB324_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB324_20
.LBB324_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB324_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB324_9
.LBB324_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB324_9
.LBB324_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB324_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB324_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB324_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB324_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB324_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB324_14
.LBB324_13:                             # %cond.false23
                                        #   in Loop: Header=BB324_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB324_14
.LBB324_14:                             # %cond.end24
                                        #   in Loop: Header=BB324_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB324_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_10
.LBB324_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB324_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB324_19
.LBB324_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB324_19
.LBB324_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB324_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB324_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_42 Depth 2
                                        #       Child Loop BB324_44 Depth 3
                                        #     Child Loop BB324_50 Depth 2
                                        #       Child Loop BB324_52 Depth 3
                                        #         Child Loop BB324_54 Depth 4
                                        #         Child Loop BB324_58 Depth 4
                                        #           Child Loop BB324_60 Depth 5
                                        #     Child Loop BB324_72 Depth 2
                                        #       Child Loop BB324_74 Depth 3
                                        #     Child Loop BB324_80 Depth 2
                                        #     Child Loop BB324_84 Depth 2
                                        #       Child Loop BB324_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB324_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB324_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB324_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB324_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB324_32
.LBB324_24:                             # %if.then46
                                        #   in Loop: Header=BB324_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB324_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB324_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB324_28
.LBB324_27:                             # %if.then51
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_95
.LBB324_28:                             # %if.end52
                                        #   in Loop: Header=BB324_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB324_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB324_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_95
.LBB324_31:                             # %if.end57
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_32
.LBB324_32:                             # %if.end58
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB324_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB324_40
.LBB324_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB324_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB324_40
.LBB324_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB324_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB324_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB324_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB324_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB324_41
.LBB324_40:                             # %if.then74
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_94
.LBB324_41:                             # %if.else75
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	$0, -16(%rbp)
.LBB324_42:                             # %for.cond76
                                        #   Parent Loop BB324_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB324_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB324_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB324_42 Depth=2
	movl	$0, -12(%rbp)
.LBB324_44:                             # %for.cond79
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB324_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB324_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB324_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_44
.LBB324_47:                             # %for.end115
                                        #   in Loop: Header=BB324_42 Depth=2
	jmp	.LBB324_48
.LBB324_48:                             # %for.inc116
                                        #   in Loop: Header=BB324_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_42
.LBB324_49:                             # %for.end118
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB324_50:                             # %for.cond119
                                        #   Parent Loop BB324_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB324_52 Depth 3
                                        #         Child Loop BB324_54 Depth 4
                                        #         Child Loop BB324_58 Depth 4
                                        #           Child Loop BB324_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB324_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB324_50 Depth=2
	movl	$0, -24(%rbp)
.LBB324_52:                             # %for.cond123
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_54 Depth 4
                                        #         Child Loop BB324_58 Depth 4
                                        #           Child Loop BB324_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB324_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB324_52 Depth=3
	movl	$0, -16(%rbp)
.LBB324_54:                             # %for.cond127
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_50 Depth=2
                                        #       Parent Loop BB324_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB324_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB324_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_54
.LBB324_57:                             # %for.end237
                                        #   in Loop: Header=BB324_52 Depth=3
	movl	$0, -12(%rbp)
.LBB324_58:                             # %for.cond238
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_50 Depth=2
                                        #       Parent Loop BB324_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB324_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB324_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB324_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB324_60:                             # %for.cond346
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_50 Depth=2
                                        #       Parent Loop BB324_52 Depth=3
                                        #         Parent Loop BB324_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB324_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB324_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB324_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB324_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB324_63:                             # %if.end363
                                        #   in Loop: Header=BB324_60 Depth=5
	jmp	.LBB324_64
.LBB324_64:                             # %for.inc364
                                        #   in Loop: Header=BB324_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_60
.LBB324_65:                             # %for.end366
                                        #   in Loop: Header=BB324_58 Depth=4
	jmp	.LBB324_66
.LBB324_66:                             # %for.inc367
                                        #   in Loop: Header=BB324_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_58
.LBB324_67:                             # %for.end369
                                        #   in Loop: Header=BB324_52 Depth=3
	jmp	.LBB324_68
.LBB324_68:                             # %for.inc370
                                        #   in Loop: Header=BB324_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB324_52
.LBB324_69:                             # %for.end372
                                        #   in Loop: Header=BB324_50 Depth=2
	jmp	.LBB324_70
.LBB324_70:                             # %for.inc373
                                        #   in Loop: Header=BB324_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB324_50
.LBB324_71:                             # %for.end375
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	$0, -16(%rbp)
.LBB324_72:                             # %for.cond376
                                        #   Parent Loop BB324_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB324_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB324_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB324_72 Depth=2
	movl	$0, -12(%rbp)
.LBB324_74:                             # %for.cond380
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB324_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB324_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB324_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_74
.LBB324_77:                             # %for.end397
                                        #   in Loop: Header=BB324_72 Depth=2
	jmp	.LBB324_78
.LBB324_78:                             # %for.inc398
                                        #   in Loop: Header=BB324_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_72
.LBB324_79:                             # %for.end400
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	$0, -16(%rbp)
.LBB324_80:                             # %for.cond401
                                        #   Parent Loop BB324_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB324_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB324_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB324_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_80
.LBB324_83:                             # %for.end463
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	$0, -12(%rbp)
.LBB324_84:                             # %for.cond464
                                        #   Parent Loop BB324_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB324_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB324_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB324_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB324_86:                             # %for.cond524
                                        #   Parent Loop BB324_21 Depth=1
                                        #     Parent Loop BB324_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB324_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB324_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB324_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_86
.LBB324_89:                             # %for.end536
                                        #   in Loop: Header=BB324_84 Depth=2
	jmp	.LBB324_90
.LBB324_90:                             # %for.inc537
                                        #   in Loop: Header=BB324_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_84
.LBB324_91:                             # %for.end539
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB324_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB324_93:                             # %if.end543
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_94
.LBB324_94:                             # %if.end544
                                        #   in Loop: Header=BB324_21 Depth=1
	jmp	.LBB324_95
.LBB324_95:                             # %for.inc545
                                        #   in Loop: Header=BB324_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB324_21
.LBB324_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$566695265, -80(%rbp)   # imm = 0x21C71561
	jne	.LBB324_98
.LBB324_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_97
.Lfunc_end324:
	.size	find_sad_16x16.283, .Lfunc_end324-find_sad_16x16.283
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.284 # -- Begin function terminate_macroblock.284
	.p2align	4, 0x90
	.type	terminate_macroblock.284,@function
terminate_macroblock.284:               # @terminate_macroblock.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$610465102, -108(%rbp)  # imm = 0x2462F54E
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB325_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB325_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB325_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB325_5
.LBB325_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB325_8
.LBB325_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB325_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB325_7:                              # %if.end
	jmp	.LBB325_8
.LBB325_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB325_45
# %bb.9:                                # %if.end18
	movq	.LJTI325_0(,%rax,8), %rax
	jmpq	*%rax
.LBB325_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB325_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB325_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB325_46
.LBB325_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB325_46
.LBB325_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB325_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB325_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB325_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB325_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB325_22
.LBB325_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB325_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB325_21:                             # %if.end64
	jmp	.LBB325_22
.LBB325_22:                             # %if.end65
	jmp	.LBB325_23
.LBB325_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB325_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB325_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB325_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB325_27:                             # %if.end79
	jmp	.LBB325_28
.LBB325_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB325_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB325_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB325_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB325_32:                             # %if.end89
	jmp	.LBB325_33
.LBB325_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB325_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB325_35:                             # %if.end95
	jmp	.LBB325_46
.LBB325_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB325_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB325_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB325_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB325_40:                             # %if.end106
	jmp	.LBB325_41
.LBB325_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB325_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB325_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB325_44:                             # %if.end118
	jmp	.LBB325_46
.LBB325_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB325_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB325_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB325_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB325_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB325_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB325_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB325_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB325_51:                             # %if.end139
                                        #   in Loop: Header=BB325_48 Depth=1
	jmp	.LBB325_52
.LBB325_52:                             # %for.inc
                                        #   in Loop: Header=BB325_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB325_48
.LBB325_53:                             # %for.end
	jmp	.LBB325_54
.LBB325_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB325_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB325_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB325_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB325_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB325_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB325_60:                             # %if.end174
	jmp	.LBB325_62
.LBB325_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB325_62:                             # %if.end188
	jmp	.LBB325_63
.LBB325_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB325_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB325_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB325_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB325_67:                             # %if.end218
	cmpl	$610465102, -108(%rbp)  # imm = 0x2462F54E
	jne	.LBB325_69
.LBB325_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_68
.Lfunc_end325:
	.size	terminate_macroblock.284, .Lfunc_end325-terminate_macroblock.284
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI325_0:
	.quad	.LBB325_10
	.quad	.LBB325_13
	.quad	.LBB325_14
	.quad	.LBB325_36
                                        # -- End function
	.text
	.globl	terminate_macroblock.285 # -- Begin function terminate_macroblock.285
	.p2align	4, 0x90
	.type	terminate_macroblock.285,@function
terminate_macroblock.285:               # @terminate_macroblock.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2072264490, -108(%rbp) # imm = 0x7B843F2A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB326_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB326_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB326_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB326_5
.LBB326_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB326_8
.LBB326_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB326_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB326_7:                              # %if.end
	jmp	.LBB326_8
.LBB326_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB326_45
# %bb.9:                                # %if.end18
	movq	.LJTI326_0(,%rax,8), %rax
	jmpq	*%rax
.LBB326_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB326_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB326_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB326_46
.LBB326_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB326_46
.LBB326_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB326_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB326_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB326_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB326_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB326_22
.LBB326_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB326_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB326_21:                             # %if.end64
	jmp	.LBB326_22
.LBB326_22:                             # %if.end65
	jmp	.LBB326_23
.LBB326_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB326_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB326_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB326_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB326_27:                             # %if.end79
	jmp	.LBB326_28
.LBB326_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB326_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB326_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB326_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB326_32:                             # %if.end89
	jmp	.LBB326_33
.LBB326_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB326_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB326_35:                             # %if.end95
	jmp	.LBB326_46
.LBB326_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB326_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB326_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB326_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB326_40:                             # %if.end106
	jmp	.LBB326_41
.LBB326_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB326_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB326_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB326_44:                             # %if.end118
	jmp	.LBB326_46
.LBB326_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB326_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB326_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB326_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB326_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB326_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB326_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB326_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB326_51:                             # %if.end139
                                        #   in Loop: Header=BB326_48 Depth=1
	jmp	.LBB326_52
.LBB326_52:                             # %for.inc
                                        #   in Loop: Header=BB326_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB326_48
.LBB326_53:                             # %for.end
	jmp	.LBB326_54
.LBB326_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB326_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB326_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB326_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB326_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB326_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB326_60:                             # %if.end174
	jmp	.LBB326_62
.LBB326_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB326_62:                             # %if.end188
	jmp	.LBB326_63
.LBB326_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB326_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB326_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB326_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB326_67:                             # %if.end218
	cmpl	$2072264490, -108(%rbp) # imm = 0x7B843F2A
	jne	.LBB326_69
.LBB326_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_68
.Lfunc_end326:
	.size	terminate_macroblock.285, .Lfunc_end326-terminate_macroblock.285
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI326_0:
	.quad	.LBB326_10
	.quad	.LBB326_13
	.quad	.LBB326_14
	.quad	.LBB326_36
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.286 # -- Begin function IntraChromaPrediction.286
	.p2align	4, 0x90
	.type	IntraChromaPrediction.286,@function
IntraChromaPrediction.286:              # @IntraChromaPrediction.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$251125206, -164(%rbp)  # imm = 0xEF7DDD6
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB327_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_1
.LBB327_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB327_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB327_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB327_8
.LBB327_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB327_8
.LBB327_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB327_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB327_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB327_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB327_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB327_13
.LBB327_12:                             # %cond.false32
                                        #   in Loop: Header=BB327_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB327_13
.LBB327_13:                             # %cond.end33
                                        #   in Loop: Header=BB327_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB327_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_9
.LBB327_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB327_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB327_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB327_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB327_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB327_20
.LBB327_19:                             # %cond.false57
                                        #   in Loop: Header=BB327_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB327_20
.LBB327_20:                             # %cond.end58
                                        #   in Loop: Header=BB327_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB327_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_16
.LBB327_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB327_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB327_25
.LBB327_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB327_25
.LBB327_25:                             # %cond.end75
	movl	%eax, -104(%rbp)
.LBB327_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB327_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB327_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB327_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB327_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB327_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB327_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB327_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB327_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB327_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_37 Depth 2
                                        #       Child Loop BB327_39 Depth 3
                                        #         Child Loop BB327_104 Depth 4
                                        #         Child Loop BB327_110 Depth 4
                                        #         Child Loop BB327_85 Depth 4
                                        #         Child Loop BB327_91 Depth 4
                                        #         Child Loop BB327_66 Depth 4
                                        #         Child Loop BB327_72 Depth 4
                                        #         Child Loop BB327_44 Depth 4
                                        #         Child Loop BB327_50 Depth 4
                                        #         Child Loop BB327_125 Depth 4
                                        #           Child Loop BB327_127 Depth 5
                                        #     Child Loop BB327_138 Depth 2
                                        #     Child Loop BB327_142 Depth 2
                                        #       Child Loop BB327_144 Depth 3
                                        #     Child Loop BB327_153 Depth 2
                                        #     Child Loop BB327_157 Depth 2
                                        #       Child Loop BB327_159 Depth 3
                                        #     Child Loop BB327_170 Depth 2
                                        #     Child Loop BB327_174 Depth 2
                                        #     Child Loop BB327_178 Depth 2
                                        #       Child Loop BB327_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB327_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB327_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB327_37:                             # %for.cond95
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_39 Depth 3
                                        #         Child Loop BB327_104 Depth 4
                                        #         Child Loop BB327_110 Depth 4
                                        #         Child Loop BB327_85 Depth 4
                                        #         Child Loop BB327_91 Depth 4
                                        #         Child Loop BB327_66 Depth 4
                                        #         Child Loop BB327_72 Depth 4
                                        #         Child Loop BB327_44 Depth 4
                                        #         Child Loop BB327_50 Depth 4
                                        #         Child Loop BB327_125 Depth 4
                                        #           Child Loop BB327_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB327_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB327_37 Depth=2
	movl	$0, -84(%rbp)
.LBB327_39:                             # %for.cond99
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB327_104 Depth 4
                                        #         Child Loop BB327_110 Depth 4
                                        #         Child Loop BB327_85 Depth 4
                                        #         Child Loop BB327_91 Depth 4
                                        #         Child Loop BB327_66 Depth 4
                                        #         Child Loop BB327_72 Depth 4
                                        #         Child Loop BB327_44 Depth 4
                                        #         Child Loop BB327_50 Depth 4
                                        #         Child Loop BB327_125 Depth 4
                                        #           Child Loop BB327_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB327_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB327_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB327_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB327_39 Depth=3
	movq	.LJTI327_0(,%rax,8), %rax
	jmpq	*%rax
.LBB327_42:                             # %sw.bb
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_44:                             # %for.cond124
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB327_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB327_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_44
.LBB327_47:                             # %for.end138
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_48
.LBB327_48:                             # %if.end139
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB327_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_50:                             # %for.cond143
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB327_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB327_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_50
.LBB327_53:                             # %for.end162
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_54
.LBB327_54:                             # %if.end163
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB327_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_63
.LBB327_57:                             # %if.else
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_62
.LBB327_59:                             # %if.else174
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB327_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB327_61:                             # %if.end180
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_62
.LBB327_62:                             # %if.end181
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_63
.LBB327_63:                             # %if.end182
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_124
.LBB327_64:                             # %sw.bb183
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_66:                             # %for.cond186
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB327_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB327_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_66
.LBB327_69:                             # %for.end202
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_77
.LBB327_70:                             # %if.else203
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB327_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_72:                             # %for.cond207
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB327_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB327_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_72
.LBB327_75:                             # %for.end226
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_76
.LBB327_76:                             # %if.end227
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_77
.LBB327_77:                             # %if.end228
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_82
.LBB327_79:                             # %if.else233
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB327_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB327_81:                             # %if.end239
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_82
.LBB327_82:                             # %if.end240
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_124
.LBB327_83:                             # %sw.bb241
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB327_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_85:                             # %for.cond245
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB327_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB327_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_85
.LBB327_88:                             # %for.end264
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_96
.LBB327_89:                             # %if.else265
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_91:                             # %for.cond268
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB327_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB327_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_91
.LBB327_94:                             # %for.end284
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_95
.LBB327_95:                             # %if.end285
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_96
.LBB327_96:                             # %if.end286
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB327_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_101
.LBB327_98:                             # %if.else292
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB327_100:                            # %if.end297
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_101
.LBB327_101:                            # %if.end298
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_124
.LBB327_102:                            # %sw.bb299
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_104:                            # %for.cond302
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB327_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB327_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_104
.LBB327_107:                            # %for.end318
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_108
.LBB327_108:                            # %if.end319
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB327_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_110:                            # %for.cond323
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB327_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB327_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_110
.LBB327_113:                            # %for.end342
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_114
.LBB327_114:                            # %if.end343
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB327_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_123
.LBB327_117:                            # %if.else352
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB327_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_122
.LBB327_119:                            # %if.else357
                                        #   in Loop: Header=BB327_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB327_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB327_121:                            # %if.end363
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_122
.LBB327_122:                            # %if.end364
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_123
.LBB327_123:                            # %if.end365
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_124
.LBB327_124:                            # %sw.epilog
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_125:                            # %for.cond366
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB327_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB327_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_127:                            # %for.cond371
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_37 Depth=2
                                        #       Parent Loop BB327_39 Depth=3
                                        #         Parent Loop BB327_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB327_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB327_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_127
.LBB327_130:                            # %for.end386
                                        #   in Loop: Header=BB327_125 Depth=4
	jmp	.LBB327_131
.LBB327_131:                            # %for.inc387
                                        #   in Loop: Header=BB327_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_125
.LBB327_132:                            # %for.end389
                                        #   in Loop: Header=BB327_39 Depth=3
	jmp	.LBB327_133
.LBB327_133:                            # %for.inc390
                                        #   in Loop: Header=BB327_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB327_39
.LBB327_134:                            # %for.end392
                                        #   in Loop: Header=BB327_37 Depth=2
	jmp	.LBB327_135
.LBB327_135:                            # %for.inc393
                                        #   in Loop: Header=BB327_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB327_37
.LBB327_136:                            # %for.end395
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB327_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	$0, -4(%rbp)
.LBB327_138:                            # %for.cond398
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB327_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB327_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB327_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_138
.LBB327_141:                            # %for.end414
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	$0, -4(%rbp)
.LBB327_142:                            # %for.cond415
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB327_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB327_142 Depth=2
	movl	$0, -8(%rbp)
.LBB327_144:                            # %for.cond419
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB327_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB327_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_144
.LBB327_147:                            # %for.end436
                                        #   in Loop: Header=BB327_142 Depth=2
	jmp	.LBB327_148
.LBB327_148:                            # %for.inc437
                                        #   in Loop: Header=BB327_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_142
.LBB327_149:                            # %for.end439
                                        #   in Loop: Header=BB327_35 Depth=1
	jmp	.LBB327_150
.LBB327_150:                            # %if.end440
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB327_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB327_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	$0, -4(%rbp)
.LBB327_153:                            # %for.cond447
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB327_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB327_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_153
.LBB327_156:                            # %for.end468
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	$0, -4(%rbp)
.LBB327_157:                            # %for.cond469
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB327_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB327_157 Depth=2
	movl	$0, -8(%rbp)
.LBB327_159:                            # %for.cond473
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB327_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB327_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_159
.LBB327_162:                            # %for.end490
                                        #   in Loop: Header=BB327_157 Depth=2
	jmp	.LBB327_163
.LBB327_163:                            # %for.inc491
                                        #   in Loop: Header=BB327_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_157
.LBB327_164:                            # %for.end493
                                        #   in Loop: Header=BB327_35 Depth=1
	jmp	.LBB327_165
.LBB327_165:                            # %if.end494
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB327_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB327_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB327_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB327_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB327_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB327_170:                            # %for.cond519
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB327_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB327_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB327_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_170
.LBB327_173:                            # %for.end540
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB327_174:                            # %for.cond556
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB327_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB327_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB327_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_174
.LBB327_177:                            # %for.end577
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB327_178:                            # %for.cond606
                                        #   Parent Loop BB327_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB327_178 Depth=2
	movl	$0, -4(%rbp)
.LBB327_180:                            # %for.cond610
                                        #   Parent Loop BB327_35 Depth=1
                                        #     Parent Loop BB327_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB327_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB327_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB327_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB327_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB327_184
.LBB327_183:                            # %cond.false630
                                        #   in Loop: Header=BB327_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB327_184:                            # %cond.end643
                                        #   in Loop: Header=BB327_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB327_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB327_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB327_190
.LBB327_186:                            # %cond.false648
                                        #   in Loop: Header=BB327_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB327_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB327_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB327_189
.LBB327_188:                            # %cond.false666
                                        #   in Loop: Header=BB327_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB327_189:                            # %cond.end679
                                        #   in Loop: Header=BB327_180 Depth=3
.LBB327_190:                            # %cond.end681
                                        #   in Loop: Header=BB327_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB327_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_180
.LBB327_192:                            # %for.end694
                                        #   in Loop: Header=BB327_178 Depth=2
	jmp	.LBB327_193
.LBB327_193:                            # %for.inc695
                                        #   in Loop: Header=BB327_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_178
.LBB327_194:                            # %for.end697
                                        #   in Loop: Header=BB327_35 Depth=1
	jmp	.LBB327_195
.LBB327_195:                            # %if.end698
                                        #   in Loop: Header=BB327_35 Depth=1
	jmp	.LBB327_196
.LBB327_196:                            # %for.inc699
                                        #   in Loop: Header=BB327_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB327_35
.LBB327_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB327_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB327_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB327_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB327_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_199
.LBB327_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB327_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_219 Depth 2
                                        #       Child Loop BB327_221 Depth 3
                                        #         Child Loop BB327_223 Depth 4
                                        #           Child Loop BB327_225 Depth 5
                                        #             Child Loop BB327_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB327_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB327_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB327_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB327_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB327_203 Depth=1
	jmp	.LBB327_241
.LBB327_207:                            # %if.end723
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB327_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB327_217
.LBB327_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB327_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB327_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB327_217
.LBB327_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB327_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB327_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB327_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB327_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB327_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB327_218
.LBB327_217:                            # %if.then749
                                        #   in Loop: Header=BB327_203 Depth=1
	jmp	.LBB327_241
.LBB327_218:                            # %if.end750
                                        #   in Loop: Header=BB327_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB327_219:                            # %for.cond751
                                        #   Parent Loop BB327_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_221 Depth 3
                                        #         Child Loop BB327_223 Depth 4
                                        #           Child Loop BB327_225 Depth 5
                                        #             Child Loop BB327_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB327_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB327_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB327_221:                            # %for.cond757
                                        #   Parent Loop BB327_203 Depth=1
                                        #     Parent Loop BB327_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB327_223 Depth 4
                                        #           Child Loop BB327_225 Depth 5
                                        #             Child Loop BB327_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB327_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB327_221 Depth=3
	movl	$0, -48(%rbp)
.LBB327_223:                            # %for.cond761
                                        #   Parent Loop BB327_203 Depth=1
                                        #     Parent Loop BB327_219 Depth=2
                                        #       Parent Loop BB327_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB327_225 Depth 5
                                        #             Child Loop BB327_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB327_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB327_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_225:                            # %for.cond765
                                        #   Parent Loop BB327_203 Depth=1
                                        #     Parent Loop BB327_219 Depth=2
                                        #       Parent Loop BB327_221 Depth=3
                                        #         Parent Loop BB327_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB327_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB327_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_227:                            # %for.cond770
                                        #   Parent Loop BB327_203 Depth=1
                                        #     Parent Loop BB327_219 Depth=2
                                        #       Parent Loop BB327_221 Depth=3
                                        #         Parent Loop BB327_223 Depth=4
                                        #           Parent Loop BB327_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB327_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB327_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB327_227
.LBB327_230:                            # %for.end803
                                        #   in Loop: Header=BB327_225 Depth=5
	jmp	.LBB327_231
.LBB327_231:                            # %for.inc804
                                        #   in Loop: Header=BB327_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_225
.LBB327_232:                            # %for.end806
                                        #   in Loop: Header=BB327_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB327_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB327_223
.LBB327_234:                            # %for.end810
                                        #   in Loop: Header=BB327_221 Depth=3
	jmp	.LBB327_235
.LBB327_235:                            # %for.inc811
                                        #   in Loop: Header=BB327_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB327_221
.LBB327_236:                            # %for.end813
                                        #   in Loop: Header=BB327_219 Depth=2
	jmp	.LBB327_237
.LBB327_237:                            # %for.inc814
                                        #   in Loop: Header=BB327_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB327_219
.LBB327_238:                            # %for.end816
                                        #   in Loop: Header=BB327_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB327_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB327_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB327_240:                            # %if.end820
                                        #   in Loop: Header=BB327_203 Depth=1
	jmp	.LBB327_241
.LBB327_241:                            # %for.inc821
                                        #   in Loop: Header=BB327_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB327_203
.LBB327_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB327_243:                            # %if.end824
	cmpl	$251125206, -164(%rbp)  # imm = 0xEF7DDD6
	jne	.LBB327_245
.LBB327_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_244
.Lfunc_end327:
	.size	IntraChromaPrediction.286, .Lfunc_end327-IntraChromaPrediction.286
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI327_0:
	.quad	.LBB327_42
	.quad	.LBB327_64
	.quad	.LBB327_83
	.quad	.LBB327_102
                                        # -- End function
	.text
	.globl	writeChromaCoeff.287    # -- Begin function writeChromaCoeff.287
	.p2align	4, 0x90
	.type	writeChromaCoeff.287,@function
writeChromaCoeff.287:                   # @writeChromaCoeff.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1347154339, -84(%rbp)  # imm = 0x504BF1A3
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB328_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB328_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB328_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB328_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB328_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB328_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB328_21
.LBB328_5:                              # %if.else
                                        #   in Loop: Header=BB328_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB328_6:                              # %for.cond18
                                        #   Parent Loop BB328_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB328_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB328_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB328_8:                              # %land.end
                                        #   in Loop: Header=BB328_6 Depth=2
	testb	$1, %al
	jne	.LBB328_9
	jmp	.LBB328_20
.LBB328_9:                              # %for.body21
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB328_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB328_12
.LBB328_11:                             # %if.else29
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB328_12:                             # %if.end
                                        #   in Loop: Header=BB328_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB328_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB328_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB328_15:                             # %lor.end
                                        #   in Loop: Header=BB328_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB328_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB328_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB328_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB328_18:                             # %lor.end45
                                        #   in Loop: Header=BB328_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB328_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB328_6
.LBB328_20:                             # %for.end
                                        #   in Loop: Header=BB328_2 Depth=1
	jmp	.LBB328_21
.LBB328_21:                             # %if.end58
                                        #   in Loop: Header=BB328_2 Depth=1
	jmp	.LBB328_22
.LBB328_22:                             # %for.inc59
                                        #   in Loop: Header=BB328_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB328_2
.LBB328_23:                             # %for.end61
	jmp	.LBB328_24
.LBB328_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB328_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB328_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_28 Depth 2
                                        #       Child Loop BB328_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB328_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB328_26 Depth=1
	movl	$0, -28(%rbp)
.LBB328_28:                             # %for.cond69
                                        #   Parent Loop BB328_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB328_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB328_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB328_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB328_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB328_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB328_47
.LBB328_31:                             # %if.else84
                                        #   in Loop: Header=BB328_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB328_32:                             # %for.cond115
                                        #   Parent Loop BB328_26 Depth=1
                                        #     Parent Loop BB328_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB328_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB328_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB328_34:                             # %land.end121
                                        #   in Loop: Header=BB328_32 Depth=3
	testb	$1, %al
	jne	.LBB328_35
	jmp	.LBB328_46
.LBB328_35:                             # %for.body122
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB328_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB328_38
.LBB328_37:                             # %if.else134
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB328_38:                             # %if.end136
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB328_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB328_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB328_41:                             # %lor.end149
                                        #   in Loop: Header=BB328_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB328_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB328_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB328_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB328_44:                             # %lor.end164
                                        #   in Loop: Header=BB328_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB328_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB328_32
.LBB328_46:                             # %for.end189
                                        #   in Loop: Header=BB328_28 Depth=2
	jmp	.LBB328_47
.LBB328_47:                             # %if.end190
                                        #   in Loop: Header=BB328_28 Depth=2
	jmp	.LBB328_48
.LBB328_48:                             # %for.inc191
                                        #   in Loop: Header=BB328_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB328_28
.LBB328_49:                             # %for.end193
                                        #   in Loop: Header=BB328_26 Depth=1
	jmp	.LBB328_50
.LBB328_50:                             # %for.inc194
                                        #   in Loop: Header=BB328_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB328_26
.LBB328_51:                             # %for.end196
	jmp	.LBB328_52
.LBB328_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1347154339, -84(%rbp)  # imm = 0x504BF1A3
	jne	.LBB328_54
.LBB328_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_53
.Lfunc_end328:
	.size	writeChromaCoeff.287, .Lfunc_end328-writeChromaCoeff.287
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.288    # -- Begin function writeChromaCoeff.288
	.p2align	4, 0x90
	.type	writeChromaCoeff.288,@function
writeChromaCoeff.288:                   # @writeChromaCoeff.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$583988635, -80(%rbp)   # imm = 0x22CEF59B
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB329_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB329_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB329_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB329_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB329_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB329_21
.LBB329_5:                              # %if.else
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB329_6:                              # %for.cond18
                                        #   Parent Loop BB329_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB329_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB329_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB329_8:                              # %land.end
                                        #   in Loop: Header=BB329_6 Depth=2
	testb	$1, %al
	jne	.LBB329_9
	jmp	.LBB329_20
.LBB329_9:                              # %for.body21
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB329_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB329_12
.LBB329_11:                             # %if.else29
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB329_12:                             # %if.end
                                        #   in Loop: Header=BB329_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB329_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB329_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB329_15:                             # %lor.end
                                        #   in Loop: Header=BB329_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB329_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB329_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB329_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB329_18:                             # %lor.end45
                                        #   in Loop: Header=BB329_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB329_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB329_6
.LBB329_20:                             # %for.end
                                        #   in Loop: Header=BB329_2 Depth=1
	jmp	.LBB329_21
.LBB329_21:                             # %if.end58
                                        #   in Loop: Header=BB329_2 Depth=1
	jmp	.LBB329_22
.LBB329_22:                             # %for.inc59
                                        #   in Loop: Header=BB329_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB329_2
.LBB329_23:                             # %for.end61
	jmp	.LBB329_24
.LBB329_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB329_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB329_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_28 Depth 2
                                        #       Child Loop BB329_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB329_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB329_26 Depth=1
	movl	$0, -28(%rbp)
.LBB329_28:                             # %for.cond69
                                        #   Parent Loop BB329_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB329_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB329_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB329_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB329_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB329_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB329_47
.LBB329_31:                             # %if.else84
                                        #   in Loop: Header=BB329_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB329_32:                             # %for.cond115
                                        #   Parent Loop BB329_26 Depth=1
                                        #     Parent Loop BB329_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB329_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB329_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB329_34:                             # %land.end121
                                        #   in Loop: Header=BB329_32 Depth=3
	testb	$1, %al
	jne	.LBB329_35
	jmp	.LBB329_46
.LBB329_35:                             # %for.body122
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB329_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB329_38
.LBB329_37:                             # %if.else134
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB329_38:                             # %if.end136
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB329_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB329_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB329_41:                             # %lor.end149
                                        #   in Loop: Header=BB329_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB329_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB329_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB329_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB329_44:                             # %lor.end164
                                        #   in Loop: Header=BB329_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB329_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB329_32
.LBB329_46:                             # %for.end189
                                        #   in Loop: Header=BB329_28 Depth=2
	jmp	.LBB329_47
.LBB329_47:                             # %if.end190
                                        #   in Loop: Header=BB329_28 Depth=2
	jmp	.LBB329_48
.LBB329_48:                             # %for.inc191
                                        #   in Loop: Header=BB329_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB329_28
.LBB329_49:                             # %for.end193
                                        #   in Loop: Header=BB329_26 Depth=1
	jmp	.LBB329_50
.LBB329_50:                             # %for.inc194
                                        #   in Loop: Header=BB329_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB329_26
.LBB329_51:                             # %for.end196
	jmp	.LBB329_52
.LBB329_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$583988635, -80(%rbp)   # imm = 0x22CEF59B
	jne	.LBB329_54
.LBB329_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_53
.Lfunc_end329:
	.size	writeChromaCoeff.288, .Lfunc_end329-writeChromaCoeff.288
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
