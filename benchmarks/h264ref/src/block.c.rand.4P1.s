	.text
	.file	"block.c"
	.globl	intrapred_luma          # -- Begin function intrapred_luma
	.p2align	4, 0x90
	.type	intrapred_luma,@function
intrapred_luma:                         # @intrapred_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_intrapred_luma.4
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_intrapred_luma.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_intrapred_luma.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_intrapred_luma.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	intrapred_luma, .Lfunc_end0-intrapred_luma
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16    # -- Begin function intrapred_luma_16x16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16,@function
intrapred_luma_16x16:                   # @intrapred_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_intrapred_luma_16x16.7
	callq	intrapred_luma_16x16.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_intrapred_luma_16x16.13
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_intrapred_luma_16x16.16
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_intrapred_luma_16x16.23
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	intrapred_luma_16x16, .Lfunc_end1-intrapred_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16          # -- Begin function dct_luma_16x16
	.p2align	4, 0x90
	.type	dct_luma_16x16,@function
dct_luma_16x16:                         # @dct_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_dct_luma_16x16.11
	movl	%ebx, %edi
	callq	dct_luma_16x16.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_dct_luma_16x16.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_dct_luma_16x16.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_dct_luma_16x16.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	dct_luma_16x16, .Lfunc_end2-dct_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma                # -- Begin function dct_luma
	.p2align	4, 0x90
	.type	dct_luma,@function
dct_luma:                               # @dct_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_dct_luma.5
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.5
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_dct_luma.6
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.6
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_dct_luma.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.8
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_dct_luma.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.32
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	dct_luma, .Lfunc_end3-dct_luma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma              # -- Begin function dct_chroma
	.p2align	4, 0x90
	.type	dct_chroma,@function
dct_chroma:                             # @dct_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_dct_chroma.25
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_dct_chroma.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_dct_chroma.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_dct_chroma.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	dct_chroma, .Lfunc_end4-dct_chroma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4           # -- Begin function dct_chroma4x4
	.p2align	4, 0x90
	.type	dct_chroma4x4,@function
dct_chroma4x4:                          # @dct_chroma4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_dct_chroma4x4.3
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_dct_chroma4x4.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_dct_chroma4x4.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_dct_chroma4x4.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	dct_chroma4x4, .Lfunc_end5-dct_chroma4x4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC           # -- Begin function dct_chroma_DC
	.p2align	4, 0x90
	.type	dct_chroma_DC,@function
dct_chroma_DC:                          # @dct_chroma_DC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_dct_chroma_DC.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_dct_chroma_DC.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_dct_chroma_DC.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_dct_chroma_DC.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	dct_chroma_DC, .Lfunc_end6-dct_chroma_DC
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_sp             # -- Begin function dct_luma_sp
	.p2align	4, 0x90
	.type	dct_luma_sp,@function
dct_luma_sp:                            # @dct_luma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_dct_luma_sp.9
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_dct_luma_sp.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_dct_luma_sp.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_dct_luma_sp.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	dct_luma_sp, .Lfunc_end7-dct_luma_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_sp           # -- Begin function dct_chroma_sp
	.p2align	4, 0x90
	.type	dct_chroma_sp,@function
dct_chroma_sp:                          # @dct_chroma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_dct_chroma_sp.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_dct_chroma_sp.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_dct_chroma_sp.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_dct_chroma_sp.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	dct_chroma_sp, .Lfunc_end8-dct_chroma_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp            # -- Begin function copyblock_sp
	.p2align	4, 0x90
	.type	copyblock_sp,@function
copyblock_sp:                           # @copyblock_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_copyblock_sp.2
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_copyblock_sp.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_copyblock_sp.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_copyblock_sp.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	copyblock_sp, .Lfunc_end9-copyblock_sp
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.1
.LCPI10_0:
	.quad	4616189618054758400     # double 4
.LCPI10_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI10_2:
	.quad	4611686018427387904     # double 2
.LCPI10_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.1
	.p2align	4, 0x90
	.type	dct_chroma_sp.1,@function
dct_chroma_sp.1:                        # @dct_chroma_sp.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI10_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI10_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1507701245, -268(%rbp) # imm = 0x59DDB1FD
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI10_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI10_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB10_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB10_6
.LBB10_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB10_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB10_5
.LBB10_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB10_5:                               # %cond.end
.LBB10_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB10_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB10_12
.LBB10_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB10_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB10_11
.LBB10_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB10_11:                              # %cond.end41
.LBB10_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB10_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB10_15
.LBB10_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB10_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB10_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB10_18
.LBB10_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB10_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB10_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB10_21
.LBB10_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB10_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB10_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB10_24
.LBB10_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB10_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB10_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB10_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	$0, -16(%rbp)
.LBB10_27:                              # %for.cond97
                                        #   Parent Loop BB10_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB10_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB10_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_27
.LBB10_30:                              # %for.end
                                        #   in Loop: Header=BB10_25 Depth=1
	jmp	.LBB10_31
.LBB10_31:                              # %for.inc121
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_25
.LBB10_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB10_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_35 Depth 2
                                        #       Child Loop BB10_37 Depth 3
                                        #         Child Loop BB10_39 Depth 4
                                        #       Child Loop BB10_45 Depth 3
                                        #         Child Loop BB10_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB10_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	$0, -24(%rbp)
.LBB10_35:                              # %for.cond128
                                        #   Parent Loop BB10_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_37 Depth 3
                                        #         Child Loop BB10_39 Depth 4
                                        #       Child Loop BB10_45 Depth 3
                                        #         Child Loop BB10_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB10_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	$0, -12(%rbp)
.LBB10_37:                              # %for.cond132
                                        #   Parent Loop BB10_33 Depth=1
                                        #     Parent Loop BB10_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB10_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB10_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB10_39:                              # %for.cond137
                                        #   Parent Loop BB10_33 Depth=1
                                        #     Parent Loop BB10_35 Depth=2
                                        #       Parent Loop BB10_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB10_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB10_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB10_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_39
.LBB10_42:                              # %for.end174
                                        #   in Loop: Header=BB10_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB10_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_37
.LBB10_44:                              # %for.end214
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	$0, -16(%rbp)
.LBB10_45:                              # %for.cond215
                                        #   Parent Loop BB10_33 Depth=1
                                        #     Parent Loop BB10_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB10_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB10_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB10_47:                              # %for.cond220
                                        #   Parent Loop BB10_33 Depth=1
                                        #     Parent Loop BB10_35 Depth=2
                                        #       Parent Loop BB10_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB10_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB10_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB10_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_47
.LBB10_50:                              # %for.end257
                                        #   in Loop: Header=BB10_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB10_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_45
.LBB10_52:                              # %for.end298
                                        #   in Loop: Header=BB10_35 Depth=2
	jmp	.LBB10_53
.LBB10_53:                              # %for.inc299
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_35
.LBB10_54:                              # %for.end301
                                        #   in Loop: Header=BB10_33 Depth=1
	jmp	.LBB10_55
.LBB10_55:                              # %for.inc302
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_33
.LBB10_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB10_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_59 Depth 2
                                        #       Child Loop BB10_61 Depth 3
                                        #         Child Loop BB10_63 Depth 4
                                        #       Child Loop BB10_69 Depth 3
                                        #         Child Loop BB10_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB10_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	$0, -24(%rbp)
.LBB10_59:                              # %for.cond309
                                        #   Parent Loop BB10_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_61 Depth 3
                                        #         Child Loop BB10_63 Depth 4
                                        #       Child Loop BB10_69 Depth 3
                                        #         Child Loop BB10_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB10_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	$0, -12(%rbp)
.LBB10_61:                              # %for.cond313
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB10_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB10_63:                              # %for.cond318
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        #       Parent Loop BB10_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB10_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB10_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB10_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_63
.LBB10_66:                              # %for.end351
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_61
.LBB10_68:                              # %for.end387
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	$0, -16(%rbp)
.LBB10_69:                              # %for.cond388
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB10_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB10_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB10_71:                              # %for.cond393
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        #       Parent Loop BB10_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB10_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB10_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB10_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_71
.LBB10_74:                              # %for.end426
                                        #   in Loop: Header=BB10_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB10_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_69
.LBB10_76:                              # %for.end463
                                        #   in Loop: Header=BB10_59 Depth=2
	jmp	.LBB10_77
.LBB10_77:                              # %for.inc464
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_59
.LBB10_78:                              # %for.end466
                                        #   in Loop: Header=BB10_57 Depth=1
	jmp	.LBB10_79
.LBB10_79:                              # %for.inc467
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_57
.LBB10_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB10_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB10_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB10_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB10_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB10_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB10_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB10_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB10_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB10_90
	jp	.LBB10_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB10_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB10_89
.LBB10_88:                              # %cond.false691
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-44(%rbp), %eax
.LBB10_89:                              # %cond.end692
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB10_94
.LBB10_90:                              # %if.else
                                        #   in Loop: Header=BB10_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB10_93
.LBB10_92:                              # %if.else697
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_93:                              # %if.end
                                        #   in Loop: Header=BB10_81 Depth=1
	jmp	.LBB10_94
.LBB10_94:                              # %if.end698
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB10_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB10_97
.LBB10_96:                              # %cond.false702
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-100(%rbp), %eax
.LBB10_97:                              # %cond.end703
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB10_108
.LBB10_98:                              # %if.else705
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB10_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB10_107
.LBB10_100:                             # %if.else709
                                        #   in Loop: Header=BB10_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB10_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB10_103
.LBB10_102:                             # %cond.false713
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-44(%rbp), %eax
.LBB10_103:                             # %cond.end714
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB10_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB10_106
.LBB10_105:                             # %cond.false719
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-100(%rbp), %eax
.LBB10_106:                             # %cond.end720
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB10_107:                             # %if.end722
                                        #   in Loop: Header=BB10_81 Depth=1
	jmp	.LBB10_108
.LBB10_108:                             # %if.end723
                                        #   in Loop: Header=BB10_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB10_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB10_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB10_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB10_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB10_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB10_112:                             # %if.end734
                                        #   in Loop: Header=BB10_81 Depth=1
	jmp	.LBB10_113
.LBB10_113:                             # %if.end735
                                        #   in Loop: Header=BB10_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB10_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB10_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	$1, %eax
	jmp	.LBB10_117
.LBB10_116:                             # %cond.false745
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-208(%rbp), %eax
.LBB10_117:                             # %cond.end746
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB10_118:                             # %if.end763
                                        #   in Loop: Header=BB10_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB10_81
.LBB10_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB10_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_123 Depth 2
                                        #       Child Loop BB10_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB10_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB10_121 Depth=1
	movl	$0, -24(%rbp)
.LBB10_123:                             # %for.cond839
                                        #   Parent Loop BB10_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB10_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB10_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB10_125:                             # %for.cond860
                                        #   Parent Loop BB10_121 Depth=1
                                        #     Parent Loop BB10_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB10_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB10_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB10_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB10_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB10_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB10_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB10_130
.LBB10_129:                             # %if.then867
                                        #   in Loop: Header=BB10_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_131
.LBB10_130:                             # %if.else876
                                        #   in Loop: Header=BB10_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB10_131:                             # %if.end885
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB10_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB10_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB10_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB10_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB10_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB10_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB10_139
	jp	.LBB10_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB10_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB10_138
.LBB10_137:                             # %cond.false1047
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-44(%rbp), %eax
.LBB10_138:                             # %cond.end1048
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB10_143
.LBB10_139:                             # %if.else1050
                                        #   in Loop: Header=BB10_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB10_142
.LBB10_141:                             # %if.else1054
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_142:                             # %if.end1055
                                        #   in Loop: Header=BB10_125 Depth=3
	jmp	.LBB10_143
.LBB10_143:                             # %if.end1056
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB10_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB10_146
.LBB10_145:                             # %cond.false1060
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-100(%rbp), %eax
.LBB10_146:                             # %cond.end1061
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB10_157
.LBB10_147:                             # %if.else1063
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB10_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB10_156
.LBB10_149:                             # %if.else1067
                                        #   in Loop: Header=BB10_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB10_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB10_152
.LBB10_151:                             # %cond.false1071
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-44(%rbp), %eax
.LBB10_152:                             # %cond.end1072
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB10_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB10_155
.LBB10_154:                             # %cond.false1077
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-100(%rbp), %eax
.LBB10_155:                             # %cond.end1078
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB10_156:                             # %if.end1080
                                        #   in Loop: Header=BB10_125 Depth=3
	jmp	.LBB10_157
.LBB10_157:                             # %if.end1081
                                        #   in Loop: Header=BB10_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB10_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB10_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB10_161
.LBB10_160:                             # %if.else1099
                                        #   in Loop: Header=BB10_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB10_161:                             # %if.end1106
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB10_162:                             # %if.end1128
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB10_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB10_125
.LBB10_164:                             # %for.end1164
                                        #   in Loop: Header=BB10_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB10_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_123
.LBB10_166:                             # %for.end1169
                                        #   in Loop: Header=BB10_121 Depth=1
	jmp	.LBB10_167
.LBB10_167:                             # %for.inc1170
                                        #   in Loop: Header=BB10_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_121
.LBB10_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB10_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB10_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB10_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_173 Depth 2
                                        #       Child Loop BB10_175 Depth 3
                                        #         Child Loop BB10_177 Depth 4
                                        #         Child Loop BB10_181 Depth 4
                                        #       Child Loop BB10_187 Depth 3
                                        #         Child Loop BB10_189 Depth 4
                                        #         Child Loop BB10_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB10_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB10_171 Depth=1
	movl	$0, -24(%rbp)
.LBB10_173:                             # %for.cond1181
                                        #   Parent Loop BB10_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_175 Depth 3
                                        #         Child Loop BB10_177 Depth 4
                                        #         Child Loop BB10_181 Depth 4
                                        #       Child Loop BB10_187 Depth 3
                                        #         Child Loop BB10_189 Depth 4
                                        #         Child Loop BB10_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB10_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB10_173 Depth=2
	movl	$0, -12(%rbp)
.LBB10_175:                             # %for.cond1185
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_177 Depth 4
                                        #         Child Loop BB10_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB10_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB10_175 Depth=3
	movl	$0, -16(%rbp)
.LBB10_177:                             # %for.cond1189
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        #       Parent Loop BB10_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB10_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB10_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB10_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_177
.LBB10_180:                             # %for.end1204
                                        #   in Loop: Header=BB10_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB10_181:                             # %for.cond1223
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        #       Parent Loop BB10_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB10_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB10_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB10_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_181
.LBB10_184:                             # %for.end1254
                                        #   in Loop: Header=BB10_175 Depth=3
	jmp	.LBB10_185
.LBB10_185:                             # %for.inc1255
                                        #   in Loop: Header=BB10_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_175
.LBB10_186:                             # %for.end1257
                                        #   in Loop: Header=BB10_173 Depth=2
	movl	$0, -16(%rbp)
.LBB10_187:                             # %for.cond1258
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_189 Depth 4
                                        #         Child Loop BB10_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB10_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB10_187 Depth=3
	movl	$0, -12(%rbp)
.LBB10_189:                             # %for.cond1262
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        #       Parent Loop BB10_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB10_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB10_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB10_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_189
.LBB10_192:                             # %for.end1277
                                        #   in Loop: Header=BB10_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB10_193:                             # %for.cond1296
                                        #   Parent Loop BB10_171 Depth=1
                                        #     Parent Loop BB10_173 Depth=2
                                        #       Parent Loop BB10_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB10_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB10_197
.LBB10_196:                             # %cond.false1311
                                        #   in Loop: Header=BB10_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_197:                             # %cond.end1319
                                        #   in Loop: Header=BB10_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB10_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB10_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB10_203
.LBB10_199:                             # %cond.false1325
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB10_202
.LBB10_201:                             # %cond.false1336
                                        #   in Loop: Header=BB10_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_202:                             # %cond.end1344
                                        #   in Loop: Header=BB10_193 Depth=4
.LBB10_203:                             # %cond.end1346
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB10_206
.LBB10_205:                             # %cond.false1366
                                        #   in Loop: Header=BB10_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_206:                             # %cond.end1374
                                        #   in Loop: Header=BB10_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB10_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB10_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB10_212
.LBB10_208:                             # %cond.false1380
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB10_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB10_211
.LBB10_210:                             # %cond.false1391
                                        #   in Loop: Header=BB10_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_211:                             # %cond.end1399
                                        #   in Loop: Header=BB10_193 Depth=4
.LBB10_212:                             # %cond.end1401
                                        #   in Loop: Header=BB10_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB10_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_193
.LBB10_214:                             # %for.end1412
                                        #   in Loop: Header=BB10_187 Depth=3
	jmp	.LBB10_215
.LBB10_215:                             # %for.inc1413
                                        #   in Loop: Header=BB10_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_187
.LBB10_216:                             # %for.end1415
                                        #   in Loop: Header=BB10_173 Depth=2
	jmp	.LBB10_217
.LBB10_217:                             # %for.inc1416
                                        #   in Loop: Header=BB10_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_173
.LBB10_218:                             # %for.end1418
                                        #   in Loop: Header=BB10_171 Depth=1
	jmp	.LBB10_219
.LBB10_219:                             # %for.inc1419
                                        #   in Loop: Header=BB10_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_171
.LBB10_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB10_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB10_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB10_221 Depth=1
	movl	$0, -16(%rbp)
.LBB10_223:                             # %for.cond1426
                                        #   Parent Loop BB10_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB10_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB10_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB10_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_223
.LBB10_226:                             # %for.end1446
                                        #   in Loop: Header=BB10_221 Depth=1
	jmp	.LBB10_227
.LBB10_227:                             # %for.inc1447
                                        #   in Loop: Header=BB10_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_221
.LBB10_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$1507701245, -268(%rbp) # imm = 0x59DDB1FD
	jne	.LBB10_230
.LBB10_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_229
.Lfunc_end10:
	.size	dct_chroma_sp.1, .Lfunc_end10-dct_chroma_sp.1
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.2          # -- Begin function copyblock_sp.2
	.p2align	4, 0x90
	.type	copyblock_sp.2,@function
copyblock_sp.2:                         # @copyblock_sp.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$64116491, -92(%rbp)    # imm = 0x3D2570B
	movl	%edi, -76(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -84(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB11_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	$0, -8(%rbp)
.LBB11_3:                               # %for.cond4
                                        #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB11_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_3
.LBB11_6:                               # %for.end
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_7
.LBB11_7:                               # %for.inc17
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_1
.LBB11_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB11_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB11_9 Depth=1
	movl	$0, -8(%rbp)
.LBB11_11:                              # %for.cond24
                                        #   Parent Loop BB11_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB11_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB11_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB11_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_11
.LBB11_14:                              # %for.end53
                                        #   in Loop: Header=BB11_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB11_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_9
.LBB11_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB11_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	$0, -4(%rbp)
.LBB11_19:                              # %for.cond86
                                        #   Parent Loop BB11_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB11_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB11_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB11_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_19
.LBB11_22:                              # %for.end115
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_17
.LBB11_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB11_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	$0, -8(%rbp)
.LBB11_27:                              # %for.cond149
                                        #   Parent Loop BB11_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_27
.LBB11_30:                              # %for.end184
                                        #   in Loop: Header=BB11_25 Depth=1
	jmp	.LBB11_31
.LBB11_31:                              # %for.inc185
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_25
.LBB11_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB11_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_35 Depth 2
                                        #     Child Loop BB11_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB11_33 Depth=1
	movl	$0, -8(%rbp)
.LBB11_35:                              # %for.cond192
                                        #   Parent Loop BB11_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB11_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB11_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_35
.LBB11_38:                              # %for.end205
                                        #   in Loop: Header=BB11_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB11_39:                              # %for.cond224
                                        #   Parent Loop BB11_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB11_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB11_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB11_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_39
.LBB11_42:                              # %for.end251
                                        #   in Loop: Header=BB11_33 Depth=1
	jmp	.LBB11_43
.LBB11_43:                              # %for.inc252
                                        #   in Loop: Header=BB11_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_33
.LBB11_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB11_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_47 Depth 2
                                        #     Child Loop BB11_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB11_45 Depth=1
	movl	$0, -4(%rbp)
.LBB11_47:                              # %for.cond259
                                        #   Parent Loop BB11_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB11_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB11_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_47
.LBB11_50:                              # %for.end272
                                        #   in Loop: Header=BB11_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB11_51:                              # %for.cond291
                                        #   Parent Loop BB11_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB11_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB11_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB11_55
.LBB11_54:                              # %cond.false
                                        #   in Loop: Header=BB11_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB11_55:                              # %cond.end
                                        #   in Loop: Header=BB11_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB11_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB11_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_61
.LBB11_57:                              # %cond.false316
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB11_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_60
.LBB11_59:                              # %cond.false327
                                        #   in Loop: Header=BB11_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB11_60:                              # %cond.end335
                                        #   in Loop: Header=BB11_51 Depth=2
.LBB11_61:                              # %cond.end337
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB11_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB11_64
.LBB11_63:                              # %cond.false355
                                        #   in Loop: Header=BB11_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB11_64:                              # %cond.end363
                                        #   in Loop: Header=BB11_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB11_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB11_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_70
.LBB11_66:                              # %cond.false369
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB11_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB11_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_69
.LBB11_68:                              # %cond.false380
                                        #   in Loop: Header=BB11_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB11_69:                              # %cond.end388
                                        #   in Loop: Header=BB11_51 Depth=2
.LBB11_70:                              # %cond.end390
                                        #   in Loop: Header=BB11_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB11_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_51
.LBB11_72:                              # %for.end399
                                        #   in Loop: Header=BB11_45 Depth=1
	jmp	.LBB11_73
.LBB11_73:                              # %for.inc400
                                        #   in Loop: Header=BB11_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_45
.LBB11_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB11_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB11_75 Depth=1
	movl	$0, -8(%rbp)
.LBB11_77:                              # %for.cond407
                                        #   Parent Loop BB11_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB11_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB11_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_77
.LBB11_80:                              # %for.end427
                                        #   in Loop: Header=BB11_75 Depth=1
	jmp	.LBB11_81
.LBB11_81:                              # %for.inc428
                                        #   in Loop: Header=BB11_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_75
.LBB11_82:                              # %for.end430
	cmpl	$64116491, -92(%rbp)    # imm = 0x3D2570B
	jne	.LBB11_84
.LBB11_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_83
.Lfunc_end11:
	.size	copyblock_sp.2, .Lfunc_end11-copyblock_sp.2
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.3         # -- Begin function dct_chroma4x4.3
	.p2align	4, 0x90
	.type	dct_chroma4x4.3,@function
dct_chroma4x4.3:                        # @dct_chroma4x4.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$264279780, -148(%rbp)  # imm = 0xFC096E4
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB12_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB12_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB12_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB12_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB12_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB12_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB12_8
.LBB12_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB12_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB12_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB12_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB12_10 Depth=1
	movl	$0, -12(%rbp)
.LBB12_12:                              # %for.cond31
                                        #   Parent Loop BB12_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB12_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB12_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_12
.LBB12_15:                              # %for.end
                                        #   in Loop: Header=BB12_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB12_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_10
.LBB12_17:                              # %for.end92
	jmp	.LBB12_18
.LBB12_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB12_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB12_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB12_20 Depth=1
	movl	$0, -16(%rbp)
.LBB12_22:                              # %for.cond99
                                        #   Parent Loop BB12_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_22
.LBB12_25:                              # %for.end132
                                        #   in Loop: Header=BB12_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB12_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_20
.LBB12_27:                              # %for.end165
	jmp	.LBB12_28
.LBB12_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB12_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB12_34
.LBB12_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB12_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_33
.LBB12_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB12_33:                              # %if.end213
	jmp	.LBB12_34
.LBB12_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB12_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB12_46
.LBB12_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB12_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB12_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB12_40
.LBB12_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB12_40:                              # %if.end290
	jmp	.LBB12_45
.LBB12_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB12_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB12_44
.LBB12_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB12_44:                              # %if.end328
	jmp	.LBB12_45
.LBB12_45:                              # %if.end329
	jmp	.LBB12_46
.LBB12_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB12_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB12_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB12_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB12_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB12_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB12_54
.LBB12_50:                              # %if.else352
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB12_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB12_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_53
.LBB12_52:                              # %if.else381
                                        #   in Loop: Header=BB12_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB12_53:                              # %if.end407
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_54
.LBB12_54:                              # %if.end408
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB12_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB12_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB12_58
.LBB12_57:                              # %if.then415
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	$1, -132(%rbp)
.LBB12_58:                              # %if.end416
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB12_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB12_70
.LBB12_60:                              # %if.else436
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB12_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB12_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB12_64
.LBB12_63:                              # %if.else457
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB12_64:                              # %if.end472
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_69
.LBB12_65:                              # %if.else473
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB12_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB12_68
.LBB12_67:                              # %if.else488
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB12_68:                              # %if.end500
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_69
.LBB12_69:                              # %if.end501
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_70
.LBB12_70:                              # %if.end502
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_71
.LBB12_71:                              # %if.end503
                                        #   in Loop: Header=BB12_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB12_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_73:                              # %if.end511
                                        #   in Loop: Header=BB12_47 Depth=1
	jmp	.LBB12_74
.LBB12_74:                              # %for.inc512
                                        #   in Loop: Header=BB12_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_47
.LBB12_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB12_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB12_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_79 Depth 2
                                        #     Child Loop BB12_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB12_77 Depth=1
	movl	$0, -12(%rbp)
.LBB12_79:                              # %for.cond523
                                        #   Parent Loop BB12_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB12_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB12_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_79
.LBB12_82:                              # %for.end536
                                        #   in Loop: Header=BB12_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB12_83:                              # %for.cond555
                                        #   Parent Loop BB12_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB12_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB12_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_83
.LBB12_86:                              # %for.end582
                                        #   in Loop: Header=BB12_77 Depth=1
	jmp	.LBB12_87
.LBB12_87:                              # %for.inc583
                                        #   in Loop: Header=BB12_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_77
.LBB12_88:                              # %for.end585
	jmp	.LBB12_89
.LBB12_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB12_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB12_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_93 Depth 2
                                        #     Child Loop BB12_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB12_91 Depth=1
	movl	$0, -16(%rbp)
.LBB12_93:                              # %for.cond593
                                        #   Parent Loop BB12_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB12_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB12_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_93
.LBB12_96:                              # %for.end606
                                        #   in Loop: Header=BB12_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB12_97:                              # %for.cond625
                                        #   Parent Loop BB12_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB12_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB12_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_97
.LBB12_100:                             # %for.end656
                                        #   in Loop: Header=BB12_91 Depth=1
	jmp	.LBB12_101
.LBB12_101:                             # %for.inc657
                                        #   in Loop: Header=BB12_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_91
.LBB12_102:                             # %for.end659
	jmp	.LBB12_103
.LBB12_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$264279780, -148(%rbp)  # imm = 0xFC096E4
	jne	.LBB12_105
.LBB12_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_104
.Lfunc_end12:
	.size	dct_chroma4x4.3, .Lfunc_end12-dct_chroma4x4.3
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.4        # -- Begin function intrapred_luma.4
	.p2align	4, 0x90
	.type	intrapred_luma.4,@function
intrapred_luma.4:                       # @intrapred_luma.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1611933792, -172(%rbp) # imm = 0x60142860
	movl	%edi, -116(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB13_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB13_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB13_10
.LBB13_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB13_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB13_9:                               # %lor.end
.LBB13_10:                              # %land.end
	xorb	$-1, %al
.LBB13_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB13_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB13_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB13_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB13_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB13_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB13_17
.LBB13_16:                              # %cond.false
                                        #   in Loop: Header=BB13_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB13_17
.LBB13_17:                              # %cond.end
                                        #   in Loop: Header=BB13_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB13_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_13
.LBB13_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB13_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB13_22
.LBB13_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB13_22
.LBB13_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB13_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB13_25
.LBB13_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB13_25
.LBB13_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB13_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB13_28
.LBB13_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB13_28
.LBB13_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB13_30
.LBB13_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB13_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-200(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB13_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB13_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB13_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB13_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB13_36
.LBB13_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB13_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB13_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB13_39
.LBB13_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB13_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB13_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_42
.LBB13_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB13_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB13_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB13_45
.LBB13_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB13_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB13_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB13_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB13_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_46
.LBB13_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB13_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB13_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB13_61
.LBB13_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB13_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB13_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB13_60
.LBB13_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB13_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB13_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB13_59
.LBB13_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB13_59:                              # %if.end284
	jmp	.LBB13_60
.LBB13_60:                              # %if.end285
	jmp	.LBB13_61
.LBB13_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB13_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB13_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB13_62 Depth=1
	movl	$0, -4(%rbp)
.LBB13_64:                              # %for.cond291
                                        #   Parent Loop BB13_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB13_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB13_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_64
.LBB13_67:                              # %for.end304
                                        #   in Loop: Header=BB13_62 Depth=1
	jmp	.LBB13_68
.LBB13_68:                              # %for.inc305
                                        #   in Loop: Header=BB13_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB13_62
.LBB13_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB13_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB13_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB13_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_70
.LBB13_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB13_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB13_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB13_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB13_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB13_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB13_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB13_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB13_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB13_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB13_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB13_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB13_85:                              # %if.end1174
	cmpl	$1611933792, -172(%rbp) # imm = 0x60142860
	jne	.LBB13_87
.LBB13_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_86
.Lfunc_end13:
	.size	intrapred_luma.4, .Lfunc_end13-intrapred_luma.4
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.5              # -- Begin function dct_luma.5
	.p2align	4, 0x90
	.type	dct_luma.5,@function
dct_luma.5:                             # @dct_luma.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1918305067, -148(%rbp) # imm = 0x7257032B
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB14_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB14_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB14_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB14_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_5:                               # %land.end32
                                        #   in Loop: Header=BB14_3 Depth=1
	testb	$1, %al
	jne	.LBB14_6
	jmp	.LBB14_12
.LBB14_6:                               # %for.body
                                        #   in Loop: Header=BB14_3 Depth=1
	movl	$0, -16(%rbp)
.LBB14_7:                               # %for.cond34
                                        #   Parent Loop BB14_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_7
.LBB14_10:                              # %for.end
                                        #   in Loop: Header=BB14_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB14_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_3
.LBB14_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB14_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB14_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_15:                              # %land.end101
                                        #   in Loop: Header=BB14_13 Depth=1
	testb	$1, %al
	jne	.LBB14_16
	jmp	.LBB14_22
.LBB14_16:                              # %for.body103
                                        #   in Loop: Header=BB14_13 Depth=1
	movl	$0, -12(%rbp)
.LBB14_17:                              # %for.cond104
                                        #   Parent Loop BB14_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB14_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB14_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_17
.LBB14_20:                              # %for.end136
                                        #   in Loop: Header=BB14_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB14_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_13
.LBB14_22:                              # %for.end169
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB14_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB14_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_28
.LBB14_27:                              # %if.then
                                        #   in Loop: Header=BB14_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_29
.LBB14_28:                              # %if.else
                                        #   in Loop: Header=BB14_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_29:                              # %if.end
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB14_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB14_35
.LBB14_31:                              # %if.else199
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB14_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_34
.LBB14_33:                              # %if.else223
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB14_34:                              # %if.end245
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_35
.LBB14_35:                              # %if.end246
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB14_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	$1, -132(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB14_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB14_39
.LBB14_38:                              # %if.then254
                                        #   in Loop: Header=BB14_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB14_40
.LBB14_39:                              # %if.else256
                                        #   in Loop: Header=BB14_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB14_40:                              # %if.end263
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB14_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB14_52
.LBB14_42:                              # %if.else283
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB14_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB14_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB14_46
.LBB14_45:                              # %if.else301
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB14_46:                              # %if.end314
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_51
.LBB14_47:                              # %if.else315
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB14_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB14_50
.LBB14_49:                              # %if.else328
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB14_50:                              # %if.end338
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_51
.LBB14_51:                              # %if.end339
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_52
.LBB14_52:                              # %if.end340
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_53
.LBB14_53:                              # %if.end341
                                        #   in Loop: Header=BB14_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB14_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_55:                              # %if.end349
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_56
.LBB14_56:                              # %for.inc350
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB14_23
.LBB14_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB14_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_62 Depth 2
                                        #     Child Loop BB14_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB14_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_60:                              # %land.end361
                                        #   in Loop: Header=BB14_58 Depth=1
	testb	$1, %al
	jne	.LBB14_61
	jmp	.LBB14_71
.LBB14_61:                              # %for.body363
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	$0, -16(%rbp)
.LBB14_62:                              # %for.cond364
                                        #   Parent Loop BB14_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB14_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB14_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_62
.LBB14_65:                              # %for.end377
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB14_66:                              # %for.cond396
                                        #   Parent Loop BB14_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB14_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB14_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_66
.LBB14_69:                              # %for.end423
                                        #   in Loop: Header=BB14_58 Depth=1
	jmp	.LBB14_70
.LBB14_70:                              # %for.inc424
                                        #   in Loop: Header=BB14_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_58
.LBB14_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB14_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_76 Depth 2
                                        #     Child Loop BB14_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB14_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_74:                              # %land.end433
                                        #   in Loop: Header=BB14_72 Depth=1
	testb	$1, %al
	jne	.LBB14_75
	jmp	.LBB14_109
.LBB14_75:                              # %for.body435
                                        #   in Loop: Header=BB14_72 Depth=1
	movl	$0, -12(%rbp)
.LBB14_76:                              # %for.cond436
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB14_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB14_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_76
.LBB14_79:                              # %for.end449
                                        #   in Loop: Header=BB14_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB14_80:                              # %for.cond468
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB14_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB14_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB14_85
.LBB14_84:                              # %cond.false
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB14_85:                              # %cond.end
                                        #   in Loop: Header=BB14_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB14_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB14_91
.LBB14_87:                              # %cond.false518
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB14_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_90
.LBB14_89:                              # %cond.false540
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB14_90:                              # %cond.end559
                                        #   in Loop: Header=BB14_80 Depth=2
.LBB14_91:                              # %cond.end561
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB14_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB14_94
.LBB14_93:                              # %cond.false592
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB14_94:                              # %cond.end611
                                        #   in Loop: Header=BB14_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB14_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB14_100
.LBB14_96:                              # %cond.false618
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB14_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB14_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_99
.LBB14_98:                              # %cond.false640
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB14_99:                              # %cond.end659
                                        #   in Loop: Header=BB14_80 Depth=2
.LBB14_100:                             # %cond.end661
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB14_105
.LBB14_101:                             # %if.else669
                                        #   in Loop: Header=BB14_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB14_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB14_104
.LBB14_103:                             # %if.else692
                                        #   in Loop: Header=BB14_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_104:                             # %if.end717
                                        #   in Loop: Header=BB14_80 Depth=2
	jmp	.LBB14_105
.LBB14_105:                             # %if.end718
                                        #   in Loop: Header=BB14_80 Depth=2
	jmp	.LBB14_106
.LBB14_106:                             # %for.inc719
                                        #   in Loop: Header=BB14_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_80
.LBB14_107:                             # %for.end721
                                        #   in Loop: Header=BB14_72 Depth=1
	jmp	.LBB14_108
.LBB14_108:                             # %for.inc722
                                        #   in Loop: Header=BB14_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_72
.LBB14_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB14_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB14_111 Depth=1
	movl	$0, -16(%rbp)
.LBB14_113:                             # %for.cond732
                                        #   Parent Loop BB14_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB14_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB14_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB14_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB14_117
.LBB14_116:                             # %if.else761
                                        #   in Loop: Header=BB14_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB14_117:                             # %if.end779
                                        #   in Loop: Header=BB14_113 Depth=2
	jmp	.LBB14_118
.LBB14_118:                             # %for.inc780
                                        #   in Loop: Header=BB14_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_113
.LBB14_119:                             # %for.end782
                                        #   in Loop: Header=BB14_111 Depth=1
	jmp	.LBB14_120
.LBB14_120:                             # %for.inc783
                                        #   in Loop: Header=BB14_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_111
.LBB14_121:                             # %for.end785
	jmp	.LBB14_122
.LBB14_122:                             # %if.end786
	movl	-132(%rbp), %ebx
	cmpl	$1918305067, -148(%rbp) # imm = 0x7257032B
	jne	.LBB14_124
.LBB14_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_123
.Lfunc_end14:
	.size	dct_luma.5, .Lfunc_end14-dct_luma.5
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.6              # -- Begin function dct_luma.6
	.p2align	4, 0x90
	.type	dct_luma.6,@function
dct_luma.6:                             # @dct_luma.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$484855476, -148(%rbp)  # imm = 0x1CE64EB4
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB15_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB15_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB15_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_5:                               # %land.end32
                                        #   in Loop: Header=BB15_3 Depth=1
	testb	$1, %al
	jne	.LBB15_6
	jmp	.LBB15_12
.LBB15_6:                               # %for.body
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	$0, -16(%rbp)
.LBB15_7:                               # %for.cond34
                                        #   Parent Loop BB15_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_7
.LBB15_10:                              # %for.end
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_3
.LBB15_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB15_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB15_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_15:                              # %land.end101
                                        #   in Loop: Header=BB15_13 Depth=1
	testb	$1, %al
	jne	.LBB15_16
	jmp	.LBB15_22
.LBB15_16:                              # %for.body103
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	$0, -12(%rbp)
.LBB15_17:                              # %for.cond104
                                        #   Parent Loop BB15_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB15_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB15_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_17
.LBB15_20:                              # %for.end136
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_13
.LBB15_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -88(%rbp)
.LBB15_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB15_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_28
.LBB15_27:                              # %if.then
                                        #   in Loop: Header=BB15_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_29
.LBB15_28:                              # %if.else
                                        #   in Loop: Header=BB15_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_29:                              # %if.end
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB15_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB15_35
.LBB15_31:                              # %if.else199
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_34
.LBB15_33:                              # %if.else223
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB15_34:                              # %if.end245
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_35
.LBB15_35:                              # %if.end246
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB15_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB15_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB15_39
.LBB15_38:                              # %if.then254
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB15_40
.LBB15_39:                              # %if.else256
                                        #   in Loop: Header=BB15_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB15_40:                              # %if.end263
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB15_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB15_52
.LBB15_42:                              # %if.else283
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB15_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB15_46
.LBB15_45:                              # %if.else301
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB15_46:                              # %if.end314
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_51
.LBB15_47:                              # %if.else315
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB15_50
.LBB15_49:                              # %if.else328
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB15_50:                              # %if.end338
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_51
.LBB15_51:                              # %if.end339
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_52
.LBB15_52:                              # %if.end340
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_53
.LBB15_53:                              # %if.end341
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB15_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_55:                              # %if.end349
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_56
.LBB15_56:                              # %for.inc350
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB15_23
.LBB15_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB15_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_62 Depth 2
                                        #     Child Loop BB15_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB15_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_60:                              # %land.end361
                                        #   in Loop: Header=BB15_58 Depth=1
	testb	$1, %al
	jne	.LBB15_61
	jmp	.LBB15_71
.LBB15_61:                              # %for.body363
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	$0, -16(%rbp)
.LBB15_62:                              # %for.cond364
                                        #   Parent Loop BB15_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB15_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB15_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_62
.LBB15_65:                              # %for.end377
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB15_66:                              # %for.cond396
                                        #   Parent Loop BB15_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB15_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB15_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_66
.LBB15_69:                              # %for.end423
                                        #   in Loop: Header=BB15_58 Depth=1
	jmp	.LBB15_70
.LBB15_70:                              # %for.inc424
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_58
.LBB15_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB15_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_76 Depth 2
                                        #     Child Loop BB15_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB15_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_74:                              # %land.end433
                                        #   in Loop: Header=BB15_72 Depth=1
	testb	$1, %al
	jne	.LBB15_75
	jmp	.LBB15_109
.LBB15_75:                              # %for.body435
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	$0, -12(%rbp)
.LBB15_76:                              # %for.cond436
                                        #   Parent Loop BB15_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB15_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB15_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_76
.LBB15_79:                              # %for.end449
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB15_80:                              # %for.cond468
                                        #   Parent Loop BB15_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB15_85
.LBB15_84:                              # %cond.false
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_85:                              # %cond.end
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB15_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB15_91
.LBB15_87:                              # %cond.false518
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB15_90
.LBB15_89:                              # %cond.false540
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_90:                              # %cond.end559
                                        #   in Loop: Header=BB15_80 Depth=2
.LBB15_91:                              # %cond.end561
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB15_94
.LBB15_93:                              # %cond.false592
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_94:                              # %cond.end611
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB15_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB15_100
.LBB15_96:                              # %cond.false618
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB15_99
.LBB15_98:                              # %cond.false640
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_99:                              # %cond.end659
                                        #   in Loop: Header=BB15_80 Depth=2
.LBB15_100:                             # %cond.end661
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_105
.LBB15_101:                             # %if.else669
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB15_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_104
.LBB15_103:                             # %if.else692
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_104:                             # %if.end717
                                        #   in Loop: Header=BB15_80 Depth=2
	jmp	.LBB15_105
.LBB15_105:                             # %if.end718
                                        #   in Loop: Header=BB15_80 Depth=2
	jmp	.LBB15_106
.LBB15_106:                             # %for.inc719
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_80
.LBB15_107:                             # %for.end721
                                        #   in Loop: Header=BB15_72 Depth=1
	jmp	.LBB15_108
.LBB15_108:                             # %for.inc722
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_72
.LBB15_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB15_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB15_111 Depth=1
	movl	$0, -16(%rbp)
.LBB15_113:                             # %for.cond732
                                        #   Parent Loop BB15_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB15_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB15_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB15_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB15_117
.LBB15_116:                             # %if.else761
                                        #   in Loop: Header=BB15_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB15_117:                             # %if.end779
                                        #   in Loop: Header=BB15_113 Depth=2
	jmp	.LBB15_118
.LBB15_118:                             # %for.inc780
                                        #   in Loop: Header=BB15_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_113
.LBB15_119:                             # %for.end782
                                        #   in Loop: Header=BB15_111 Depth=1
	jmp	.LBB15_120
.LBB15_120:                             # %for.inc783
                                        #   in Loop: Header=BB15_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_111
.LBB15_121:                             # %for.end785
	jmp	.LBB15_122
.LBB15_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$484855476, -148(%rbp)  # imm = 0x1CE64EB4
	jne	.LBB15_124
.LBB15_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_123
.Lfunc_end15:
	.size	dct_luma.6, .Lfunc_end15-dct_luma.6
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.7  # -- Begin function intrapred_luma_16x16.7
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.7,@function
intrapred_luma_16x16.7:                 # @intrapred_luma_16x16.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1918016192, -92(%rbp)  # imm = 0x72529AC0
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB16_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB16_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB16_20
.LBB16_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB16_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB16_9
.LBB16_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB16_9
.LBB16_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB16_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB16_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB16_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB16_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB16_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB16_14
.LBB16_13:                              # %cond.false23
                                        #   in Loop: Header=BB16_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB16_14
.LBB16_14:                              # %cond.end24
                                        #   in Loop: Header=BB16_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB16_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_10
.LBB16_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB16_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB16_19
.LBB16_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB16_19
.LBB16_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB16_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB16_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB16_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB16_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB16_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB16_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB16_24:                              # %if.end51
                                        #   in Loop: Header=BB16_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB16_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB16_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB16_26:                              # %if.end68
                                        #   in Loop: Header=BB16_21 Depth=1
	jmp	.LBB16_27
.LBB16_27:                              # %for.inc69
                                        #   in Loop: Header=BB16_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_21
.LBB16_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB16_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB16_31
# %bb.30:                               # %if.then74
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB16_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB16_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB16_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB16_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB16_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB16_37
# %bb.36:                               # %if.then88
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB16_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB16_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB16_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB16_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB16_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB16_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB16_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB16_44:                              # %if.end114
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB16_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB16_46:                              # %if.end133
                                        #   in Loop: Header=BB16_41 Depth=1
	jmp	.LBB16_47
.LBB16_47:                              # %for.inc134
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_41
.LBB16_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB16_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB16_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB16_49 Depth=1
	movl	$0, -4(%rbp)
.LBB16_51:                              # %for.cond141
                                        #   Parent Loop BB16_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB16_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB16_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB16_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_51
.LBB16_54:                              # %for.end173
                                        #   in Loop: Header=BB16_49 Depth=1
	jmp	.LBB16_55
.LBB16_55:                              # %for.inc174
                                        #   in Loop: Header=BB16_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_49
.LBB16_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB16_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB16_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB16_60
.LBB16_59:                              # %if.then181
	jmp	.LBB16_85
.LBB16_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB16_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB16_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB16_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB16_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB16_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB16_65
.LBB16_64:                              # %if.else210
                                        #   in Loop: Header=BB16_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB16_65:                              # %if.end232
                                        #   in Loop: Header=BB16_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB16_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_61
.LBB16_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB16_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB16_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB16_68 Depth=1
	movl	$0, -4(%rbp)
.LBB16_70:                              # %for.cond293
                                        #   Parent Loop BB16_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB16_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB16_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB16_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB16_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_74
.LBB16_73:                              # %cond.false309
                                        #   in Loop: Header=BB16_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB16_74:                              # %cond.end318
                                        #   in Loop: Header=BB16_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB16_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB16_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_80
.LBB16_76:                              # %cond.false323
                                        #   in Loop: Header=BB16_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB16_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB16_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_79
.LBB16_78:                              # %cond.false337
                                        #   in Loop: Header=BB16_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB16_79:                              # %cond.end346
                                        #   in Loop: Header=BB16_70 Depth=2
.LBB16_80:                              # %cond.end348
                                        #   in Loop: Header=BB16_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB16_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_70
.LBB16_82:                              # %for.end359
                                        #   in Loop: Header=BB16_68 Depth=1
	jmp	.LBB16_83
.LBB16_83:                              # %for.inc360
                                        #   in Loop: Header=BB16_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_68
.LBB16_84:                              # %for.end362.loopexit
	jmp	.LBB16_85
.LBB16_85:                              # %for.end362
	cmpl	$1918016192, -92(%rbp)  # imm = 0x72529AC0
	jne	.LBB16_87
.LBB16_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_86
.Lfunc_end16:
	.size	intrapred_luma_16x16.7, .Lfunc_end16-intrapred_luma_16x16.7
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.8              # -- Begin function dct_luma.8
	.p2align	4, 0x90
	.type	dct_luma.8,@function
dct_luma.8:                             # @dct_luma.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1833293605, -148(%rbp) # imm = 0x6D45D725
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB17_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB17_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB17_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB17_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB17_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_5:                               # %land.end32
                                        #   in Loop: Header=BB17_3 Depth=1
	testb	$1, %al
	jne	.LBB17_6
	jmp	.LBB17_12
.LBB17_6:                               # %for.body
                                        #   in Loop: Header=BB17_3 Depth=1
	movl	$0, -16(%rbp)
.LBB17_7:                               # %for.cond34
                                        #   Parent Loop BB17_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB17_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB17_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_7
.LBB17_10:                              # %for.end
                                        #   in Loop: Header=BB17_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB17_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_3
.LBB17_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB17_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB17_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB17_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_15:                              # %land.end101
                                        #   in Loop: Header=BB17_13 Depth=1
	testb	$1, %al
	jne	.LBB17_16
	jmp	.LBB17_22
.LBB17_16:                              # %for.body103
                                        #   in Loop: Header=BB17_13 Depth=1
	movl	$0, -12(%rbp)
.LBB17_17:                              # %for.cond104
                                        #   Parent Loop BB17_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB17_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB17_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_17
.LBB17_20:                              # %for.end136
                                        #   in Loop: Header=BB17_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB17_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_13
.LBB17_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB17_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB17_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB17_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB17_28
.LBB17_27:                              # %if.then
                                        #   in Loop: Header=BB17_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_29
.LBB17_28:                              # %if.else
                                        #   in Loop: Header=BB17_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB17_29:                              # %if.end
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB17_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB17_35
.LBB17_31:                              # %if.else199
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB17_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_34
.LBB17_33:                              # %if.else223
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB17_34:                              # %if.end245
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_35
.LBB17_35:                              # %if.end246
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB17_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB17_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB17_39
.LBB17_38:                              # %if.then254
                                        #   in Loop: Header=BB17_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB17_40
.LBB17_39:                              # %if.else256
                                        #   in Loop: Header=BB17_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB17_40:                              # %if.end263
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB17_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB17_52
.LBB17_42:                              # %if.else283
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB17_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB17_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB17_46
.LBB17_45:                              # %if.else301
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB17_46:                              # %if.end314
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_51
.LBB17_47:                              # %if.else315
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB17_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB17_50
.LBB17_49:                              # %if.else328
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB17_50:                              # %if.end338
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_51
.LBB17_51:                              # %if.end339
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_52
.LBB17_52:                              # %if.end340
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_53
.LBB17_53:                              # %if.end341
                                        #   in Loop: Header=BB17_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB17_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_55:                              # %if.end349
                                        #   in Loop: Header=BB17_23 Depth=1
	jmp	.LBB17_56
.LBB17_56:                              # %for.inc350
                                        #   in Loop: Header=BB17_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB17_23
.LBB17_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB17_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_62 Depth 2
                                        #     Child Loop BB17_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB17_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB17_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_60:                              # %land.end361
                                        #   in Loop: Header=BB17_58 Depth=1
	testb	$1, %al
	jne	.LBB17_61
	jmp	.LBB17_71
.LBB17_61:                              # %for.body363
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	$0, -16(%rbp)
.LBB17_62:                              # %for.cond364
                                        #   Parent Loop BB17_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB17_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB17_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_62
.LBB17_65:                              # %for.end377
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB17_66:                              # %for.cond396
                                        #   Parent Loop BB17_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB17_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB17_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB17_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_66
.LBB17_69:                              # %for.end423
                                        #   in Loop: Header=BB17_58 Depth=1
	jmp	.LBB17_70
.LBB17_70:                              # %for.inc424
                                        #   in Loop: Header=BB17_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_58
.LBB17_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB17_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_76 Depth 2
                                        #     Child Loop BB17_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB17_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB17_74:                              # %land.end433
                                        #   in Loop: Header=BB17_72 Depth=1
	testb	$1, %al
	jne	.LBB17_75
	jmp	.LBB17_109
.LBB17_75:                              # %for.body435
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	$0, -12(%rbp)
.LBB17_76:                              # %for.cond436
                                        #   Parent Loop BB17_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB17_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB17_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_76
.LBB17_79:                              # %for.end449
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB17_80:                              # %for.cond468
                                        #   Parent Loop BB17_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB17_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB17_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB17_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB17_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_85
.LBB17_84:                              # %cond.false
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB17_85:                              # %cond.end
                                        #   in Loop: Header=BB17_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB17_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB17_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB17_91
.LBB17_87:                              # %cond.false518
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB17_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_90
.LBB17_89:                              # %cond.false540
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB17_90:                              # %cond.end559
                                        #   in Loop: Header=BB17_80 Depth=2
.LBB17_91:                              # %cond.end561
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB17_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_94
.LBB17_93:                              # %cond.false592
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB17_94:                              # %cond.end611
                                        #   in Loop: Header=BB17_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB17_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB17_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB17_100
.LBB17_96:                              # %cond.false618
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB17_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB17_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_99
.LBB17_98:                              # %cond.false640
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB17_99:                              # %cond.end659
                                        #   in Loop: Header=BB17_80 Depth=2
.LBB17_100:                             # %cond.end661
                                        #   in Loop: Header=BB17_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB17_105
.LBB17_101:                             # %if.else669
                                        #   in Loop: Header=BB17_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB17_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB17_104
.LBB17_103:                             # %if.else692
                                        #   in Loop: Header=BB17_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_104:                             # %if.end717
                                        #   in Loop: Header=BB17_80 Depth=2
	jmp	.LBB17_105
.LBB17_105:                             # %if.end718
                                        #   in Loop: Header=BB17_80 Depth=2
	jmp	.LBB17_106
.LBB17_106:                             # %for.inc719
                                        #   in Loop: Header=BB17_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_80
.LBB17_107:                             # %for.end721
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_108
.LBB17_108:                             # %for.inc722
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_72
.LBB17_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB17_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB17_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB17_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB17_111 Depth=1
	movl	$0, -16(%rbp)
.LBB17_113:                             # %for.cond732
                                        #   Parent Loop BB17_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB17_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB17_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB17_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB17_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB17_117
.LBB17_116:                             # %if.else761
                                        #   in Loop: Header=BB17_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB17_117:                             # %if.end779
                                        #   in Loop: Header=BB17_113 Depth=2
	jmp	.LBB17_118
.LBB17_118:                             # %for.inc780
                                        #   in Loop: Header=BB17_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_113
.LBB17_119:                             # %for.end782
                                        #   in Loop: Header=BB17_111 Depth=1
	jmp	.LBB17_120
.LBB17_120:                             # %for.inc783
                                        #   in Loop: Header=BB17_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_111
.LBB17_121:                             # %for.end785
	jmp	.LBB17_122
.LBB17_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$1833293605, -148(%rbp) # imm = 0x6D45D725
	jne	.LBB17_124
.LBB17_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_123
.Lfunc_end17:
	.size	dct_luma.8, .Lfunc_end17-dct_luma.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.9
.LCPI18_0:
	.quad	4616189618054758400     # double 4
.LCPI18_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI18_2:
	.quad	4611686018427387904     # double 2
.LCPI18_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.9
	.p2align	4, 0x90
	.type	dct_luma_sp.9,@function
dct_luma_sp.9:                          # @dct_luma_sp.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI18_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$206875276, -212(%rbp)  # imm = 0xC54AA8C
	movl	%edi, -128(%rbp)
	movl	%esi, -140(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-140(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -184(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -192(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI18_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -124(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -132(%rbp)
	movl	-200(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	$0, -12(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -16(%rbp)
.LBB18_3:                               # %for.cond38
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_3
.LBB18_6:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_7
.LBB18_7:                               # %for.inc66
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_1
.LBB18_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB18_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	$0, -16(%rbp)
.LBB18_11:                              # %for.cond73
                                        #   Parent Loop BB18_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB18_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_11
.LBB18_14:                              # %for.end106
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB18_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_9
.LBB18_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB18_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	$0, -12(%rbp)
.LBB18_19:                              # %for.cond144
                                        #   Parent Loop BB18_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_19
.LBB18_22:                              # %for.end177
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_17
.LBB18_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB18_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	$0, -16(%rbp)
.LBB18_27:                              # %for.cond215
                                        #   Parent Loop BB18_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_27
.LBB18_30:                              # %for.end244
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_25
.LBB18_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB18_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	$0, -12(%rbp)
.LBB18_35:                              # %for.cond278
                                        #   Parent Loop BB18_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB18_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB18_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_35
.LBB18_38:                              # %for.end307
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB18_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_33
.LBB18_40:                              # %for.end336
	movl	$0, -196(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -64(%rbp)
.LBB18_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB18_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB18_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB18_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB18_46
.LBB18_45:                              # %if.then
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_47
.LBB18_46:                              # %if.else
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB18_47:                              # %if.end
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -136(%rbp)
	movl	-136(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB18_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB18_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB18_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB18_55
	jp	.LBB18_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB18_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB18_54
.LBB18_53:                              # %cond.false
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-56(%rbp), %eax
.LBB18_54:                              # %cond.end
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB18_59
.LBB18_55:                              # %if.else500
                                        #   in Loop: Header=BB18_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB18_58
.LBB18_57:                              # %if.else504
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB18_58:                              # %if.end505
                                        #   in Loop: Header=BB18_41 Depth=1
	jmp	.LBB18_59
.LBB18_59:                              # %if.end506
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB18_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB18_62
.LBB18_61:                              # %cond.false510
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-136(%rbp), %eax
.LBB18_62:                              # %cond.end511
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB18_73
.LBB18_63:                              # %if.else513
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB18_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB18_72
.LBB18_65:                              # %if.else517
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB18_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB18_68
.LBB18_67:                              # %cond.false521
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-56(%rbp), %eax
.LBB18_68:                              # %cond.end522
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB18_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB18_71
.LBB18_70:                              # %cond.false527
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-136(%rbp), %eax
.LBB18_71:                              # %cond.end528
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB18_72:                              # %if.end530
                                        #   in Loop: Header=BB18_41 Depth=1
	jmp	.LBB18_73
.LBB18_73:                              # %if.end531
                                        #   in Loop: Header=BB18_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB18_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	$1, -196(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB18_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB18_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB18_77
.LBB18_76:                              # %if.else539
                                        #   in Loop: Header=BB18_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB18_77:                              # %if.end546
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB18_78:                              # %if.end568
                                        #   in Loop: Header=BB18_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-200(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB18_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB18_41
.LBB18_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB18_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_83 Depth 2
                                        #     Child Loop BB18_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	$0, -16(%rbp)
.LBB18_83:                              # %for.cond607
                                        #   Parent Loop BB18_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB18_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB18_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_83
.LBB18_86:                              # %for.end620
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB18_87:                              # %for.cond639
                                        #   Parent Loop BB18_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB18_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB18_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_87
.LBB18_90:                              # %for.end666
                                        #   in Loop: Header=BB18_81 Depth=1
	jmp	.LBB18_91
.LBB18_91:                              # %for.inc667
                                        #   in Loop: Header=BB18_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_81
.LBB18_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB18_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_95 Depth 2
                                        #     Child Loop BB18_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	$0, -12(%rbp)
.LBB18_95:                              # %for.cond674
                                        #   Parent Loop BB18_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB18_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB18_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_95
.LBB18_98:                              # %for.end687
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB18_99:                              # %for.cond706
                                        #   Parent Loop BB18_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_103
.LBB18_102:                             # %cond.false721
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_103:                             # %cond.end729
                                        #   in Loop: Header=BB18_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_109
.LBB18_105:                             # %cond.false735
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_108
.LBB18_107:                             # %cond.false746
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_108:                             # %cond.end754
                                        #   in Loop: Header=BB18_99 Depth=2
.LBB18_109:                             # %cond.end756
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB18_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_112
.LBB18_111:                             # %cond.false774
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB18_112:                             # %cond.end782
                                        #   in Loop: Header=BB18_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB18_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_118
.LBB18_114:                             # %cond.false788
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB18_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_117
.LBB18_116:                             # %cond.false799
                                        #   in Loop: Header=BB18_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_117:                             # %cond.end807
                                        #   in Loop: Header=BB18_99 Depth=2
.LBB18_118:                             # %cond.end809
                                        #   in Loop: Header=BB18_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB18_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_99
.LBB18_120:                             # %for.end818
                                        #   in Loop: Header=BB18_93 Depth=1
	jmp	.LBB18_121
.LBB18_121:                             # %for.inc819
                                        #   in Loop: Header=BB18_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_93
.LBB18_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB18_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB18_123 Depth=1
	movl	$0, -16(%rbp)
.LBB18_125:                             # %for.cond826
                                        #   Parent Loop BB18_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB18_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB18_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_125
.LBB18_128:                             # %for.end846
                                        #   in Loop: Header=BB18_123 Depth=1
	jmp	.LBB18_129
.LBB18_129:                             # %for.inc847
                                        #   in Loop: Header=BB18_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_123
.LBB18_130:                             # %for.end849
	movl	-196(%rbp), %ebx
	cmpl	$206875276, -212(%rbp)  # imm = 0xC54AA8C
	jne	.LBB18_132
.LBB18_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_131
.Lfunc_end18:
	.size	dct_luma_sp.9, .Lfunc_end18-dct_luma_sp.9
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.10         # -- Begin function copyblock_sp.10
	.p2align	4, 0x90
	.type	copyblock_sp.10,@function
copyblock_sp.10:                        # @copyblock_sp.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$688160863, -88(%rbp)   # imm = 0x2904805F
	movl	%edi, -84(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_3:                               # %for.cond4
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc17
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB19_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	$0, -8(%rbp)
.LBB19_11:                              # %for.cond24
                                        #   Parent Loop BB19_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB19_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB19_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_11
.LBB19_14:                              # %for.end53
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_9
.LBB19_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB19_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	$0, -4(%rbp)
.LBB19_19:                              # %for.cond86
                                        #   Parent Loop BB19_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB19_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_19
.LBB19_22:                              # %for.end115
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_17
.LBB19_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB19_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$0, -8(%rbp)
.LBB19_27:                              # %for.cond149
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_27
.LBB19_30:                              # %for.end184
                                        #   in Loop: Header=BB19_25 Depth=1
	jmp	.LBB19_31
.LBB19_31:                              # %for.inc185
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_25
.LBB19_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB19_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_35 Depth 2
                                        #     Child Loop BB19_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	$0, -8(%rbp)
.LBB19_35:                              # %for.cond192
                                        #   Parent Loop BB19_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB19_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB19_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_35
.LBB19_38:                              # %for.end205
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB19_39:                              # %for.cond224
                                        #   Parent Loop BB19_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_39
.LBB19_42:                              # %for.end251
                                        #   in Loop: Header=BB19_33 Depth=1
	jmp	.LBB19_43
.LBB19_43:                              # %for.inc252
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_33
.LBB19_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB19_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_47 Depth 2
                                        #     Child Loop BB19_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	$0, -4(%rbp)
.LBB19_47:                              # %for.cond259
                                        #   Parent Loop BB19_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB19_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB19_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_47
.LBB19_50:                              # %for.end272
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB19_51:                              # %for.cond291
                                        #   Parent Loop BB19_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB19_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB19_55
.LBB19_54:                              # %cond.false
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB19_55:                              # %cond.end
                                        #   in Loop: Header=BB19_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB19_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_61
.LBB19_57:                              # %cond.false316
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB19_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_60
.LBB19_59:                              # %cond.false327
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB19_60:                              # %cond.end335
                                        #   in Loop: Header=BB19_51 Depth=2
.LBB19_61:                              # %cond.end337
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB19_64
.LBB19_63:                              # %cond.false355
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB19_64:                              # %cond.end363
                                        #   in Loop: Header=BB19_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB19_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_70
.LBB19_66:                              # %cond.false369
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB19_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_69
.LBB19_68:                              # %cond.false380
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB19_69:                              # %cond.end388
                                        #   in Loop: Header=BB19_51 Depth=2
.LBB19_70:                              # %cond.end390
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB19_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_51
.LBB19_72:                              # %for.end399
                                        #   in Loop: Header=BB19_45 Depth=1
	jmp	.LBB19_73
.LBB19_73:                              # %for.inc400
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_45
.LBB19_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB19_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB19_75 Depth=1
	movl	$0, -8(%rbp)
.LBB19_77:                              # %for.cond407
                                        #   Parent Loop BB19_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB19_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB19_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_77
.LBB19_80:                              # %for.end427
                                        #   in Loop: Header=BB19_75 Depth=1
	jmp	.LBB19_81
.LBB19_81:                              # %for.inc428
                                        #   in Loop: Header=BB19_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_75
.LBB19_82:                              # %for.end430
	cmpl	$688160863, -88(%rbp)   # imm = 0x2904805F
	jne	.LBB19_84
.LBB19_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_83
.Lfunc_end19:
	.size	copyblock_sp.10, .Lfunc_end19-copyblock_sp.10
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.11       # -- Begin function dct_luma_16x16.11
	.p2align	4, 0x90
	.type	dct_luma_16x16.11,@function
dct_luma_16x16.11:                      # @dct_luma_16x16.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1878899694, -132(%rbp) # imm = 0x6FFDBBEE
	movl	%edi, -104(%rbp)
	movl	$0, -116(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB20_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB20_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB20_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	$0, -16(%rbp)
.LBB20_5:                               # %for.cond16
                                        #   Parent Loop BB20_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_9
.LBB20_8:                               # %if.else
                                        #   in Loop: Header=BB20_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_9:                               # %if.end
                                        #   in Loop: Header=BB20_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB20_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_5
.LBB20_11:                              # %for.end
                                        #   in Loop: Header=BB20_3 Depth=1
	jmp	.LBB20_12
.LBB20_12:                              # %for.inc61
                                        #   in Loop: Header=BB20_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_3
.LBB20_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB20_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_18 Depth 2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB20_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB20_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_16:                              # %land.end69
                                        #   in Loop: Header=BB20_14 Depth=1
	testb	$1, %al
	jne	.LBB20_17
	jmp	.LBB20_39
.LBB20_17:                              # %for.body71
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	$0, -20(%rbp)
.LBB20_18:                              # %for.cond72
                                        #   Parent Loop BB20_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_20 Depth 3
                                        #         Child Loop BB20_22 Depth 4
                                        #       Child Loop BB20_28 Depth 3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB20_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -12(%rbp)
.LBB20_20:                              # %for.cond76
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	$0, -16(%rbp)
.LBB20_22:                              # %for.cond80
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB20_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_22
.LBB20_25:                              # %for.end125
                                        #   in Loop: Header=BB20_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB20_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_20
.LBB20_27:                              # %for.end169
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	$0, -16(%rbp)
.LBB20_28:                              # %for.cond170
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	$0, -12(%rbp)
.LBB20_30:                              # %for.cond174
                                        #   Parent Loop BB20_14 Depth=1
                                        #     Parent Loop BB20_18 Depth=2
                                        #       Parent Loop BB20_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB20_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_30
.LBB20_33:                              # %for.end219
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB20_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_28
.LBB20_35:                              # %for.end264
                                        #   in Loop: Header=BB20_18 Depth=2
	jmp	.LBB20_36
.LBB20_36:                              # %for.inc265
                                        #   in Loop: Header=BB20_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_18
.LBB20_37:                              # %for.end267
                                        #   in Loop: Header=BB20_14 Depth=1
	jmp	.LBB20_38
.LBB20_38:                              # %for.inc268
                                        #   in Loop: Header=BB20_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_14
.LBB20_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB20_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	$0, -16(%rbp)
.LBB20_42:                              # %for.cond275
                                        #   Parent Loop BB20_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB20_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB20_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_42
.LBB20_45:                              # %for.end291
                                        #   in Loop: Header=BB20_40 Depth=1
	jmp	.LBB20_46
.LBB20_46:                              # %for.inc292
                                        #   in Loop: Header=BB20_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_40
.LBB20_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB20_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB20_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_50:                              # %land.end301
                                        #   in Loop: Header=BB20_48 Depth=1
	testb	$1, %al
	jne	.LBB20_51
	jmp	.LBB20_57
.LBB20_51:                              # %for.body303
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	$0, -16(%rbp)
.LBB20_52:                              # %for.cond304
                                        #   Parent Loop BB20_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB20_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_52
.LBB20_55:                              # %for.end333
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB20_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_48
.LBB20_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB20_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB20_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_60:                              # %land.end367
                                        #   in Loop: Header=BB20_58 Depth=1
	testb	$1, %al
	jne	.LBB20_61
	jmp	.LBB20_67
.LBB20_61:                              # %for.body369
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	$0, -12(%rbp)
.LBB20_62:                              # %for.cond370
                                        #   Parent Loop BB20_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB20_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_62
.LBB20_65:                              # %for.end399
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB20_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_58
.LBB20_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB20_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB20_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB20_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_73
.LBB20_72:                              # %if.then437
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_74
.LBB20_73:                              # %if.else446
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_74:                              # %if.end455
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_77
.LBB20_76:                              # %if.else463
                                        #   in Loop: Header=BB20_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_77:                              # %if.end481
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB20_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB20_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB20_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB20_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB20_81:                              # %if.end492
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_82
.LBB20_82:                              # %if.end493
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB20_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_84:                              # %if.end507
                                        #   in Loop: Header=BB20_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB20_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_86:                              # %if.end519
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_87
.LBB20_87:                              # %for.inc520
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB20_68
.LBB20_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_93 Depth 2
                                        #     Child Loop BB20_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB20_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_91:                              # %land.end531
                                        #   in Loop: Header=BB20_89 Depth=1
	testb	$1, %al
	jne	.LBB20_92
	jmp	.LBB20_102
.LBB20_92:                              # %for.body533
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	$0, -16(%rbp)
.LBB20_93:                              # %for.cond534
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB20_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB20_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB20_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_93
.LBB20_96:                              # %for.end546
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_97:                              # %for.cond563
                                        #   Parent Loop BB20_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB20_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB20_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_97
.LBB20_100:                             # %for.end588
                                        #   in Loop: Header=BB20_89 Depth=1
	jmp	.LBB20_101
.LBB20_101:                             # %for.inc589
                                        #   in Loop: Header=BB20_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_89
.LBB20_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB20_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_107 Depth 2
                                        #     Child Loop BB20_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB20_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_105:                             # %land.end598
                                        #   in Loop: Header=BB20_103 Depth=1
	testb	$1, %al
	jne	.LBB20_106
	jmp	.LBB20_119
.LBB20_106:                             # %for.body600
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	$0, -12(%rbp)
.LBB20_107:                             # %for.cond601
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB20_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB20_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB20_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_107
.LBB20_110:                             # %for.end613
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_111:                             # %for.cond630
                                        #   Parent Loop BB20_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB20_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB20_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB20_115
.LBB20_114:                             # %if.else680
                                        #   in Loop: Header=BB20_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB20_115:                             # %if.end717
                                        #   in Loop: Header=BB20_111 Depth=2
	jmp	.LBB20_116
.LBB20_116:                             # %for.inc718
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_111
.LBB20_117:                             # %for.end720
                                        #   in Loop: Header=BB20_103 Depth=1
	jmp	.LBB20_118
.LBB20_118:                             # %for.inc721
                                        #   in Loop: Header=BB20_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_103
.LBB20_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB20_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_122 Depth 2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB20_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	$0, -20(%rbp)
.LBB20_122:                             # %for.cond728
                                        #   Parent Loop BB20_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_124 Depth 3
                                        #       Child Loop BB20_143 Depth 3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
                                        #       Child Loop BB20_157 Depth 3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB20_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB20_124:                             # %for.cond751
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB20_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB20_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB20_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB20_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB20_129
.LBB20_128:                             # %if.then762
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_130
.LBB20_129:                             # %if.else771
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB20_130:                             # %if.end780
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB20_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB20_133
.LBB20_132:                             # %if.else793
                                        #   in Loop: Header=BB20_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB20_133:                             # %if.end818
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB20_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	$15, -116(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB20_135:                             # %if.end836
                                        #   in Loop: Header=BB20_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB20_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB20_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB20_139
.LBB20_138:                             # %if.else871
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB20_139:                             # %if.end889
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_140
.LBB20_140:                             # %if.end890
                                        #   in Loop: Header=BB20_124 Depth=3
	jmp	.LBB20_141
.LBB20_141:                             # %for.inc891
                                        #   in Loop: Header=BB20_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB20_124
.LBB20_142:                             # %for.end893
                                        #   in Loop: Header=BB20_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB20_143:                             # %for.cond896
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_147 Depth 4
                                        #         Child Loop BB20_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB20_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB20_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_145:                             # %land.end902
                                        #   in Loop: Header=BB20_143 Depth=3
	testb	$1, %al
	jne	.LBB20_146
	jmp	.LBB20_156
.LBB20_146:                             # %for.body904
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	$0, -16(%rbp)
.LBB20_147:                             # %for.cond905
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB20_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB20_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB20_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_147
.LBB20_150:                             # %for.end921
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB20_151:                             # %for.cond940
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB20_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB20_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_151
.LBB20_154:                             # %for.end973
                                        #   in Loop: Header=BB20_143 Depth=3
	jmp	.LBB20_155
.LBB20_155:                             # %for.inc974
                                        #   in Loop: Header=BB20_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_143
.LBB20_156:                             # %for.end976
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	$0, -16(%rbp)
.LBB20_157:                             # %for.cond977
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_161 Depth 4
                                        #         Child Loop BB20_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB20_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB20_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB20_159:                             # %land.end983
                                        #   in Loop: Header=BB20_157 Depth=3
	testb	$1, %al
	jne	.LBB20_160
	jmp	.LBB20_170
.LBB20_160:                             # %for.body985
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	$0, -12(%rbp)
.LBB20_161:                             # %for.cond986
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB20_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB20_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB20_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_161
.LBB20_164:                             # %for.end1002
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB20_165:                             # %for.cond1021
                                        #   Parent Loop BB20_120 Depth=1
                                        #     Parent Loop BB20_122 Depth=2
                                        #       Parent Loop BB20_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB20_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB20_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_165
.LBB20_168:                             # %for.end1054
                                        #   in Loop: Header=BB20_157 Depth=3
	jmp	.LBB20_169
.LBB20_169:                             # %for.inc1055
                                        #   in Loop: Header=BB20_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_157
.LBB20_170:                             # %for.end1057
                                        #   in Loop: Header=BB20_122 Depth=2
	jmp	.LBB20_171
.LBB20_171:                             # %for.inc1058
                                        #   in Loop: Header=BB20_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_122
.LBB20_172:                             # %for.end1060
                                        #   in Loop: Header=BB20_120 Depth=1
	jmp	.LBB20_173
.LBB20_173:                             # %for.inc1061
                                        #   in Loop: Header=BB20_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_120
.LBB20_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB20_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	$0, -16(%rbp)
.LBB20_178:                             # %for.cond1071
                                        #   Parent Loop BB20_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB20_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_178
.LBB20_181:                             # %for.end1093
                                        #   in Loop: Header=BB20_176 Depth=1
	jmp	.LBB20_182
.LBB20_182:                             # %for.inc1094
                                        #   in Loop: Header=BB20_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_176
.LBB20_183:                             # %for.end1096
	jmp	.LBB20_196
.LBB20_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB20_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	$0, -16(%rbp)
.LBB20_187:                             # %for.cond1102
                                        #   Parent Loop BB20_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB20_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB20_191
.LBB20_190:                             # %if.else1125
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB20_191:                             # %if.end1145
                                        #   in Loop: Header=BB20_187 Depth=2
	jmp	.LBB20_192
.LBB20_192:                             # %for.inc1146
                                        #   in Loop: Header=BB20_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_187
.LBB20_193:                             # %for.end1148
                                        #   in Loop: Header=BB20_185 Depth=1
	jmp	.LBB20_194
.LBB20_194:                             # %for.inc1149
                                        #   in Loop: Header=BB20_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_185
.LBB20_195:                             # %for.end1151
	jmp	.LBB20_196
.LBB20_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB20_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB20_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB20_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	$0, -16(%rbp)
.LBB20_200:                             # %for.cond1160
                                        #   Parent Loop BB20_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB20_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB20_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB20_213
.LBB20_203:                             # %if.else1186
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB20_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB20_206
.LBB20_205:                             # %cond.false
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB20_206:                             # %cond.end
                                        #   in Loop: Header=BB20_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB20_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB20_212
.LBB20_208:                             # %cond.false1229
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB20_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB20_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_211
.LBB20_210:                             # %cond.false1250
                                        #   in Loop: Header=BB20_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB20_211:                             # %cond.end1268
                                        #   in Loop: Header=BB20_200 Depth=2
.LBB20_212:                             # %cond.end1270
                                        #   in Loop: Header=BB20_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB20_213:                             # %if.end1282
                                        #   in Loop: Header=BB20_200 Depth=2
	jmp	.LBB20_214
.LBB20_214:                             # %for.inc1283
                                        #   in Loop: Header=BB20_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_200
.LBB20_215:                             # %for.end1285
                                        #   in Loop: Header=BB20_198 Depth=1
	jmp	.LBB20_216
.LBB20_216:                             # %for.inc1286
                                        #   in Loop: Header=BB20_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_198
.LBB20_217:                             # %for.end1288
	jmp	.LBB20_218
.LBB20_218:                             # %if.end1289
	movl	-116(%rbp), %ebx
	cmpl	$1878899694, -132(%rbp) # imm = 0x6FFDBBEE
	jne	.LBB20_220
.LBB20_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_219
.Lfunc_end20:
	.size	dct_luma_16x16.11, .Lfunc_end20-dct_luma_16x16.11
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.12       # -- Begin function dct_luma_16x16.12
	.p2align	4, 0x90
	.type	dct_luma_16x16.12,@function
dct_luma_16x16.12:                      # @dct_luma_16x16.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1448626201, -132(%rbp) # imm = 0x56584819
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB21_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB21_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB21_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB21_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB21_3 Depth=1
	movl	$0, -16(%rbp)
.LBB21_5:                               # %for.cond16
                                        #   Parent Loop BB21_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB21_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB21_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB21_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB21_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB21_9
.LBB21_8:                               # %if.else
                                        #   in Loop: Header=BB21_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB21_9:                               # %if.end
                                        #   in Loop: Header=BB21_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB21_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_5
.LBB21_11:                              # %for.end
                                        #   in Loop: Header=BB21_3 Depth=1
	jmp	.LBB21_12
.LBB21_12:                              # %for.inc61
                                        #   in Loop: Header=BB21_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_3
.LBB21_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB21_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_18 Depth 2
                                        #       Child Loop BB21_20 Depth 3
                                        #         Child Loop BB21_22 Depth 4
                                        #       Child Loop BB21_28 Depth 3
                                        #         Child Loop BB21_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB21_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB21_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_16:                              # %land.end69
                                        #   in Loop: Header=BB21_14 Depth=1
	testb	$1, %al
	jne	.LBB21_17
	jmp	.LBB21_39
.LBB21_17:                              # %for.body71
                                        #   in Loop: Header=BB21_14 Depth=1
	movl	$0, -24(%rbp)
.LBB21_18:                              # %for.cond72
                                        #   Parent Loop BB21_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_20 Depth 3
                                        #         Child Loop BB21_22 Depth 4
                                        #       Child Loop BB21_28 Depth 3
                                        #         Child Loop BB21_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB21_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB21_18 Depth=2
	movl	$0, -12(%rbp)
.LBB21_20:                              # %for.cond76
                                        #   Parent Loop BB21_14 Depth=1
                                        #     Parent Loop BB21_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB21_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB21_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB21_20 Depth=3
	movl	$0, -16(%rbp)
.LBB21_22:                              # %for.cond80
                                        #   Parent Loop BB21_14 Depth=1
                                        #     Parent Loop BB21_18 Depth=2
                                        #       Parent Loop BB21_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB21_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB21_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB21_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_22
.LBB21_25:                              # %for.end125
                                        #   in Loop: Header=BB21_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB21_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_20
.LBB21_27:                              # %for.end169
                                        #   in Loop: Header=BB21_18 Depth=2
	movl	$0, -16(%rbp)
.LBB21_28:                              # %for.cond170
                                        #   Parent Loop BB21_14 Depth=1
                                        #     Parent Loop BB21_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB21_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB21_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB21_28 Depth=3
	movl	$0, -12(%rbp)
.LBB21_30:                              # %for.cond174
                                        #   Parent Loop BB21_14 Depth=1
                                        #     Parent Loop BB21_18 Depth=2
                                        #       Parent Loop BB21_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB21_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB21_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB21_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_30
.LBB21_33:                              # %for.end219
                                        #   in Loop: Header=BB21_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB21_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_28
.LBB21_35:                              # %for.end264
                                        #   in Loop: Header=BB21_18 Depth=2
	jmp	.LBB21_36
.LBB21_36:                              # %for.inc265
                                        #   in Loop: Header=BB21_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_18
.LBB21_37:                              # %for.end267
                                        #   in Loop: Header=BB21_14 Depth=1
	jmp	.LBB21_38
.LBB21_38:                              # %for.inc268
                                        #   in Loop: Header=BB21_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_14
.LBB21_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB21_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB21_40 Depth=1
	movl	$0, -16(%rbp)
.LBB21_42:                              # %for.cond275
                                        #   Parent Loop BB21_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB21_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB21_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_42
.LBB21_45:                              # %for.end291
                                        #   in Loop: Header=BB21_40 Depth=1
	jmp	.LBB21_46
.LBB21_46:                              # %for.inc292
                                        #   in Loop: Header=BB21_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_40
.LBB21_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB21_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB21_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB21_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_50:                              # %land.end301
                                        #   in Loop: Header=BB21_48 Depth=1
	testb	$1, %al
	jne	.LBB21_51
	jmp	.LBB21_57
.LBB21_51:                              # %for.body303
                                        #   in Loop: Header=BB21_48 Depth=1
	movl	$0, -16(%rbp)
.LBB21_52:                              # %for.cond304
                                        #   Parent Loop BB21_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB21_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB21_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_52
.LBB21_55:                              # %for.end333
                                        #   in Loop: Header=BB21_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB21_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_48
.LBB21_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB21_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB21_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB21_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_60:                              # %land.end367
                                        #   in Loop: Header=BB21_58 Depth=1
	testb	$1, %al
	jne	.LBB21_61
	jmp	.LBB21_67
.LBB21_61:                              # %for.body369
                                        #   in Loop: Header=BB21_58 Depth=1
	movl	$0, -12(%rbp)
.LBB21_62:                              # %for.cond370
                                        #   Parent Loop BB21_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB21_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB21_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_62
.LBB21_65:                              # %for.end399
                                        #   in Loop: Header=BB21_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB21_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_58
.LBB21_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB21_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB21_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB21_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB21_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB21_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB21_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB21_73
.LBB21_72:                              # %if.then437
                                        #   in Loop: Header=BB21_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_74
.LBB21_73:                              # %if.else446
                                        #   in Loop: Header=BB21_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB21_74:                              # %if.end455
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB21_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB21_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB21_77
.LBB21_76:                              # %if.else463
                                        #   in Loop: Header=BB21_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB21_77:                              # %if.end481
                                        #   in Loop: Header=BB21_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB21_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB21_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB21_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB21_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB21_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB21_81:                              # %if.end492
                                        #   in Loop: Header=BB21_68 Depth=1
	jmp	.LBB21_82
.LBB21_82:                              # %if.end493
                                        #   in Loop: Header=BB21_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB21_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB21_84:                              # %if.end507
                                        #   in Loop: Header=BB21_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB21_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB21_86:                              # %if.end519
                                        #   in Loop: Header=BB21_68 Depth=1
	jmp	.LBB21_87
.LBB21_87:                              # %for.inc520
                                        #   in Loop: Header=BB21_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB21_68
.LBB21_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB21_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_93 Depth 2
                                        #     Child Loop BB21_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB21_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB21_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_91:                              # %land.end531
                                        #   in Loop: Header=BB21_89 Depth=1
	testb	$1, %al
	jne	.LBB21_92
	jmp	.LBB21_102
.LBB21_92:                              # %for.body533
                                        #   in Loop: Header=BB21_89 Depth=1
	movl	$0, -16(%rbp)
.LBB21_93:                              # %for.cond534
                                        #   Parent Loop BB21_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB21_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_93
.LBB21_96:                              # %for.end546
                                        #   in Loop: Header=BB21_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB21_97:                              # %for.cond563
                                        #   Parent Loop BB21_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB21_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB21_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_97
.LBB21_100:                             # %for.end588
                                        #   in Loop: Header=BB21_89 Depth=1
	jmp	.LBB21_101
.LBB21_101:                             # %for.inc589
                                        #   in Loop: Header=BB21_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_89
.LBB21_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB21_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_107 Depth 2
                                        #     Child Loop BB21_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB21_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB21_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_105:                             # %land.end598
                                        #   in Loop: Header=BB21_103 Depth=1
	testb	$1, %al
	jne	.LBB21_106
	jmp	.LBB21_119
.LBB21_106:                             # %for.body600
                                        #   in Loop: Header=BB21_103 Depth=1
	movl	$0, -12(%rbp)
.LBB21_107:                             # %for.cond601
                                        #   Parent Loop BB21_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB21_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB21_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_107
.LBB21_110:                             # %for.end613
                                        #   in Loop: Header=BB21_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB21_111:                             # %for.cond630
                                        #   Parent Loop BB21_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB21_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB21_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB21_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB21_115
.LBB21_114:                             # %if.else680
                                        #   in Loop: Header=BB21_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB21_115:                             # %if.end717
                                        #   in Loop: Header=BB21_111 Depth=2
	jmp	.LBB21_116
.LBB21_116:                             # %for.inc718
                                        #   in Loop: Header=BB21_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_111
.LBB21_117:                             # %for.end720
                                        #   in Loop: Header=BB21_103 Depth=1
	jmp	.LBB21_118
.LBB21_118:                             # %for.inc721
                                        #   in Loop: Header=BB21_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_103
.LBB21_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB21_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_122 Depth 2
                                        #       Child Loop BB21_124 Depth 3
                                        #       Child Loop BB21_143 Depth 3
                                        #         Child Loop BB21_147 Depth 4
                                        #         Child Loop BB21_151 Depth 4
                                        #       Child Loop BB21_157 Depth 3
                                        #         Child Loop BB21_161 Depth 4
                                        #         Child Loop BB21_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB21_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB21_120 Depth=1
	movl	$0, -24(%rbp)
.LBB21_122:                             # %for.cond728
                                        #   Parent Loop BB21_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_124 Depth 3
                                        #       Child Loop BB21_143 Depth 3
                                        #         Child Loop BB21_147 Depth 4
                                        #         Child Loop BB21_151 Depth 4
                                        #       Child Loop BB21_157 Depth 3
                                        #         Child Loop BB21_161 Depth 4
                                        #         Child Loop BB21_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB21_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB21_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB21_124:                             # %for.cond751
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB21_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB21_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB21_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB21_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB21_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB21_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB21_129
.LBB21_128:                             # %if.then762
                                        #   in Loop: Header=BB21_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_130
.LBB21_129:                             # %if.else771
                                        #   in Loop: Header=BB21_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB21_130:                             # %if.end780
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB21_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB21_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB21_133
.LBB21_132:                             # %if.else793
                                        #   in Loop: Header=BB21_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB21_133:                             # %if.end818
                                        #   in Loop: Header=BB21_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB21_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB21_135:                             # %if.end836
                                        #   in Loop: Header=BB21_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB21_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB21_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB21_139
.LBB21_138:                             # %if.else871
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB21_139:                             # %if.end889
                                        #   in Loop: Header=BB21_124 Depth=3
	jmp	.LBB21_140
.LBB21_140:                             # %if.end890
                                        #   in Loop: Header=BB21_124 Depth=3
	jmp	.LBB21_141
.LBB21_141:                             # %for.inc891
                                        #   in Loop: Header=BB21_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB21_124
.LBB21_142:                             # %for.end893
                                        #   in Loop: Header=BB21_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB21_143:                             # %for.cond896
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB21_147 Depth 4
                                        #         Child Loop BB21_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB21_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB21_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_145:                             # %land.end902
                                        #   in Loop: Header=BB21_143 Depth=3
	testb	$1, %al
	jne	.LBB21_146
	jmp	.LBB21_156
.LBB21_146:                             # %for.body904
                                        #   in Loop: Header=BB21_143 Depth=3
	movl	$0, -16(%rbp)
.LBB21_147:                             # %for.cond905
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        #       Parent Loop BB21_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB21_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB21_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB21_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_147
.LBB21_150:                             # %for.end921
                                        #   in Loop: Header=BB21_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB21_151:                             # %for.cond940
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        #       Parent Loop BB21_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB21_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB21_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB21_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_151
.LBB21_154:                             # %for.end973
                                        #   in Loop: Header=BB21_143 Depth=3
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc974
                                        #   in Loop: Header=BB21_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_143
.LBB21_156:                             # %for.end976
                                        #   in Loop: Header=BB21_122 Depth=2
	movl	$0, -16(%rbp)
.LBB21_157:                             # %for.cond977
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB21_161 Depth 4
                                        #         Child Loop BB21_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB21_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB21_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB21_159:                             # %land.end983
                                        #   in Loop: Header=BB21_157 Depth=3
	testb	$1, %al
	jne	.LBB21_160
	jmp	.LBB21_170
.LBB21_160:                             # %for.body985
                                        #   in Loop: Header=BB21_157 Depth=3
	movl	$0, -12(%rbp)
.LBB21_161:                             # %for.cond986
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        #       Parent Loop BB21_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB21_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB21_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB21_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_161
.LBB21_164:                             # %for.end1002
                                        #   in Loop: Header=BB21_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB21_165:                             # %for.cond1021
                                        #   Parent Loop BB21_120 Depth=1
                                        #     Parent Loop BB21_122 Depth=2
                                        #       Parent Loop BB21_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB21_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB21_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB21_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_165
.LBB21_168:                             # %for.end1054
                                        #   in Loop: Header=BB21_157 Depth=3
	jmp	.LBB21_169
.LBB21_169:                             # %for.inc1055
                                        #   in Loop: Header=BB21_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_157
.LBB21_170:                             # %for.end1057
                                        #   in Loop: Header=BB21_122 Depth=2
	jmp	.LBB21_171
.LBB21_171:                             # %for.inc1058
                                        #   in Loop: Header=BB21_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_122
.LBB21_172:                             # %for.end1060
                                        #   in Loop: Header=BB21_120 Depth=1
	jmp	.LBB21_173
.LBB21_173:                             # %for.inc1061
                                        #   in Loop: Header=BB21_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_120
.LBB21_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB21_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB21_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB21_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB21_176 Depth=1
	movl	$0, -16(%rbp)
.LBB21_178:                             # %for.cond1071
                                        #   Parent Loop BB21_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB21_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB21_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB21_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_178
.LBB21_181:                             # %for.end1093
                                        #   in Loop: Header=BB21_176 Depth=1
	jmp	.LBB21_182
.LBB21_182:                             # %for.inc1094
                                        #   in Loop: Header=BB21_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_176
.LBB21_183:                             # %for.end1096
	jmp	.LBB21_196
.LBB21_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB21_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB21_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB21_185 Depth=1
	movl	$0, -16(%rbp)
.LBB21_187:                             # %for.cond1102
                                        #   Parent Loop BB21_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB21_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB21_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB21_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB21_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB21_191
.LBB21_190:                             # %if.else1125
                                        #   in Loop: Header=BB21_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB21_191:                             # %if.end1145
                                        #   in Loop: Header=BB21_187 Depth=2
	jmp	.LBB21_192
.LBB21_192:                             # %for.inc1146
                                        #   in Loop: Header=BB21_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_187
.LBB21_193:                             # %for.end1148
                                        #   in Loop: Header=BB21_185 Depth=1
	jmp	.LBB21_194
.LBB21_194:                             # %for.inc1149
                                        #   in Loop: Header=BB21_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_185
.LBB21_195:                             # %for.end1151
	jmp	.LBB21_196
.LBB21_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB21_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB21_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB21_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB21_198 Depth=1
	movl	$0, -16(%rbp)
.LBB21_200:                             # %for.cond1160
                                        #   Parent Loop BB21_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB21_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB21_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB21_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB21_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB21_213
.LBB21_203:                             # %if.else1186
                                        #   in Loop: Header=BB21_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB21_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB21_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB21_206
.LBB21_205:                             # %cond.false
                                        #   in Loop: Header=BB21_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB21_206:                             # %cond.end
                                        #   in Loop: Header=BB21_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB21_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB21_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB21_212
.LBB21_208:                             # %cond.false1229
                                        #   in Loop: Header=BB21_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB21_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB21_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_211
.LBB21_210:                             # %cond.false1250
                                        #   in Loop: Header=BB21_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB21_211:                             # %cond.end1268
                                        #   in Loop: Header=BB21_200 Depth=2
.LBB21_212:                             # %cond.end1270
                                        #   in Loop: Header=BB21_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB21_213:                             # %if.end1282
                                        #   in Loop: Header=BB21_200 Depth=2
	jmp	.LBB21_214
.LBB21_214:                             # %for.inc1283
                                        #   in Loop: Header=BB21_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_200
.LBB21_215:                             # %for.end1285
                                        #   in Loop: Header=BB21_198 Depth=1
	jmp	.LBB21_216
.LBB21_216:                             # %for.inc1286
                                        #   in Loop: Header=BB21_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_198
.LBB21_217:                             # %for.end1288
	jmp	.LBB21_218
.LBB21_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$1448626201, -132(%rbp) # imm = 0x56584819
	jne	.LBB21_220
.LBB21_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_219
.Lfunc_end21:
	.size	dct_luma_16x16.12, .Lfunc_end21-dct_luma_16x16.12
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.13 # -- Begin function intrapred_luma_16x16.13
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.13,@function
intrapred_luma_16x16.13:                # @intrapred_luma_16x16.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$275549315, -92(%rbp)   # imm = 0x106C8C83
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB22_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_1
.LBB22_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB22_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB22_20
.LBB22_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB22_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB22_9
.LBB22_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB22_9
.LBB22_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB22_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB22_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB22_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB22_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB22_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB22_14
.LBB22_13:                              # %cond.false23
                                        #   in Loop: Header=BB22_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_14
.LBB22_14:                              # %cond.end24
                                        #   in Loop: Header=BB22_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB22_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_10
.LBB22_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB22_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB22_19
.LBB22_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB22_19
.LBB22_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB22_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB22_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB22_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB22_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB22_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB22_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB22_24:                              # %if.end51
                                        #   in Loop: Header=BB22_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB22_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB22_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB22_26:                              # %if.end68
                                        #   in Loop: Header=BB22_21 Depth=1
	jmp	.LBB22_27
.LBB22_27:                              # %for.inc69
                                        #   in Loop: Header=BB22_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_21
.LBB22_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB22_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB22_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB22_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB22_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB22_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB22_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB22_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB22_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB22_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB22_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB22_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB22_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB22_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB22_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB22_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB22_44:                              # %if.end114
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB22_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB22_46:                              # %if.end133
                                        #   in Loop: Header=BB22_41 Depth=1
	jmp	.LBB22_47
.LBB22_47:                              # %for.inc134
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_41
.LBB22_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB22_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB22_49 Depth=1
	movl	$0, -4(%rbp)
.LBB22_51:                              # %for.cond141
                                        #   Parent Loop BB22_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB22_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB22_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_51
.LBB22_54:                              # %for.end173
                                        #   in Loop: Header=BB22_49 Depth=1
	jmp	.LBB22_55
.LBB22_55:                              # %for.inc174
                                        #   in Loop: Header=BB22_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_49
.LBB22_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB22_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB22_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB22_60
.LBB22_59:                              # %if.then181
	jmp	.LBB22_85
.LBB22_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB22_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB22_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB22_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB22_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB22_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB22_65
.LBB22_64:                              # %if.else210
                                        #   in Loop: Header=BB22_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB22_65:                              # %if.end232
                                        #   in Loop: Header=BB22_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB22_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_61
.LBB22_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB22_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB22_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	$0, -4(%rbp)
.LBB22_70:                              # %for.cond293
                                        #   Parent Loop BB22_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB22_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB22_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB22_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_74
.LBB22_73:                              # %cond.false309
                                        #   in Loop: Header=BB22_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_74:                              # %cond.end318
                                        #   in Loop: Header=BB22_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB22_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_80
.LBB22_76:                              # %cond.false323
                                        #   in Loop: Header=BB22_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB22_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_79
.LBB22_78:                              # %cond.false337
                                        #   in Loop: Header=BB22_70 Depth=2
	movl	-52(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_79:                              # %cond.end346
                                        #   in Loop: Header=BB22_70 Depth=2
.LBB22_80:                              # %cond.end348
                                        #   in Loop: Header=BB22_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB22_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_70
.LBB22_82:                              # %for.end359
                                        #   in Loop: Header=BB22_68 Depth=1
	jmp	.LBB22_83
.LBB22_83:                              # %for.inc360
                                        #   in Loop: Header=BB22_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_68
.LBB22_84:                              # %for.end362.loopexit
	jmp	.LBB22_85
.LBB22_85:                              # %for.end362
	cmpl	$275549315, -92(%rbp)   # imm = 0x106C8C83
	jne	.LBB22_87
.LBB22_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_86
.Lfunc_end22:
	.size	intrapred_luma_16x16.13, .Lfunc_end22-intrapred_luma_16x16.13
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.14       # -- Begin function dct_luma_16x16.14
	.p2align	4, 0x90
	.type	dct_luma_16x16.14,@function
dct_luma_16x16.14:                      # @dct_luma_16x16.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$109002729, -132(%rbp)  # imm = 0x67F3FE9
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB23_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB23_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB23_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB23_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB23_3 Depth=1
	movl	$0, -16(%rbp)
.LBB23_5:                               # %for.cond16
                                        #   Parent Loop BB23_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB23_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB23_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB23_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB23_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB23_9
.LBB23_8:                               # %if.else
                                        #   in Loop: Header=BB23_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB23_9:                               # %if.end
                                        #   in Loop: Header=BB23_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB23_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_5
.LBB23_11:                              # %for.end
                                        #   in Loop: Header=BB23_3 Depth=1
	jmp	.LBB23_12
.LBB23_12:                              # %for.inc61
                                        #   in Loop: Header=BB23_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_3
.LBB23_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB23_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_18 Depth 2
                                        #       Child Loop BB23_20 Depth 3
                                        #         Child Loop BB23_22 Depth 4
                                        #       Child Loop BB23_28 Depth 3
                                        #         Child Loop BB23_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB23_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB23_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_16:                              # %land.end69
                                        #   in Loop: Header=BB23_14 Depth=1
	testb	$1, %al
	jne	.LBB23_17
	jmp	.LBB23_39
.LBB23_17:                              # %for.body71
                                        #   in Loop: Header=BB23_14 Depth=1
	movl	$0, -24(%rbp)
.LBB23_18:                              # %for.cond72
                                        #   Parent Loop BB23_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_20 Depth 3
                                        #         Child Loop BB23_22 Depth 4
                                        #       Child Loop BB23_28 Depth 3
                                        #         Child Loop BB23_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB23_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB23_18 Depth=2
	movl	$0, -12(%rbp)
.LBB23_20:                              # %for.cond76
                                        #   Parent Loop BB23_14 Depth=1
                                        #     Parent Loop BB23_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB23_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB23_20 Depth=3
	movl	$0, -16(%rbp)
.LBB23_22:                              # %for.cond80
                                        #   Parent Loop BB23_14 Depth=1
                                        #     Parent Loop BB23_18 Depth=2
                                        #       Parent Loop BB23_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB23_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB23_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB23_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_22
.LBB23_25:                              # %for.end125
                                        #   in Loop: Header=BB23_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB23_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_20
.LBB23_27:                              # %for.end169
                                        #   in Loop: Header=BB23_18 Depth=2
	movl	$0, -16(%rbp)
.LBB23_28:                              # %for.cond170
                                        #   Parent Loop BB23_14 Depth=1
                                        #     Parent Loop BB23_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB23_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB23_28 Depth=3
	movl	$0, -12(%rbp)
.LBB23_30:                              # %for.cond174
                                        #   Parent Loop BB23_14 Depth=1
                                        #     Parent Loop BB23_18 Depth=2
                                        #       Parent Loop BB23_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB23_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB23_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB23_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_30
.LBB23_33:                              # %for.end219
                                        #   in Loop: Header=BB23_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB23_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_28
.LBB23_35:                              # %for.end264
                                        #   in Loop: Header=BB23_18 Depth=2
	jmp	.LBB23_36
.LBB23_36:                              # %for.inc265
                                        #   in Loop: Header=BB23_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_18
.LBB23_37:                              # %for.end267
                                        #   in Loop: Header=BB23_14 Depth=1
	jmp	.LBB23_38
.LBB23_38:                              # %for.inc268
                                        #   in Loop: Header=BB23_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_14
.LBB23_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB23_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB23_40 Depth=1
	movl	$0, -16(%rbp)
.LBB23_42:                              # %for.cond275
                                        #   Parent Loop BB23_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB23_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB23_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_42
.LBB23_45:                              # %for.end291
                                        #   in Loop: Header=BB23_40 Depth=1
	jmp	.LBB23_46
.LBB23_46:                              # %for.inc292
                                        #   in Loop: Header=BB23_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_40
.LBB23_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB23_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB23_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB23_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_50:                              # %land.end301
                                        #   in Loop: Header=BB23_48 Depth=1
	testb	$1, %al
	jne	.LBB23_51
	jmp	.LBB23_57
.LBB23_51:                              # %for.body303
                                        #   in Loop: Header=BB23_48 Depth=1
	movl	$0, -16(%rbp)
.LBB23_52:                              # %for.cond304
                                        #   Parent Loop BB23_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB23_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB23_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_52
.LBB23_55:                              # %for.end333
                                        #   in Loop: Header=BB23_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB23_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_48
.LBB23_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB23_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB23_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB23_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_60:                              # %land.end367
                                        #   in Loop: Header=BB23_58 Depth=1
	testb	$1, %al
	jne	.LBB23_61
	jmp	.LBB23_67
.LBB23_61:                              # %for.body369
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	$0, -12(%rbp)
.LBB23_62:                              # %for.cond370
                                        #   Parent Loop BB23_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB23_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB23_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_62
.LBB23_65:                              # %for.end399
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB23_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_58
.LBB23_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB23_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB23_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB23_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB23_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB23_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB23_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB23_73
.LBB23_72:                              # %if.then437
                                        #   in Loop: Header=BB23_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_74
.LBB23_73:                              # %if.else446
                                        #   in Loop: Header=BB23_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB23_74:                              # %if.end455
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB23_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB23_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB23_77
.LBB23_76:                              # %if.else463
                                        #   in Loop: Header=BB23_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB23_77:                              # %if.end481
                                        #   in Loop: Header=BB23_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB23_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB23_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB23_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB23_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB23_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB23_81:                              # %if.end492
                                        #   in Loop: Header=BB23_68 Depth=1
	jmp	.LBB23_82
.LBB23_82:                              # %if.end493
                                        #   in Loop: Header=BB23_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB23_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB23_84:                              # %if.end507
                                        #   in Loop: Header=BB23_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB23_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB23_86:                              # %if.end519
                                        #   in Loop: Header=BB23_68 Depth=1
	jmp	.LBB23_87
.LBB23_87:                              # %for.inc520
                                        #   in Loop: Header=BB23_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB23_68
.LBB23_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB23_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_93 Depth 2
                                        #     Child Loop BB23_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB23_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB23_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_91:                              # %land.end531
                                        #   in Loop: Header=BB23_89 Depth=1
	testb	$1, %al
	jne	.LBB23_92
	jmp	.LBB23_102
.LBB23_92:                              # %for.body533
                                        #   in Loop: Header=BB23_89 Depth=1
	movl	$0, -16(%rbp)
.LBB23_93:                              # %for.cond534
                                        #   Parent Loop BB23_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB23_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB23_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB23_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_93
.LBB23_96:                              # %for.end546
                                        #   in Loop: Header=BB23_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB23_97:                              # %for.cond563
                                        #   Parent Loop BB23_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB23_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB23_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB23_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_97
.LBB23_100:                             # %for.end588
                                        #   in Loop: Header=BB23_89 Depth=1
	jmp	.LBB23_101
.LBB23_101:                             # %for.inc589
                                        #   in Loop: Header=BB23_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_89
.LBB23_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB23_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_107 Depth 2
                                        #     Child Loop BB23_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB23_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB23_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_105:                             # %land.end598
                                        #   in Loop: Header=BB23_103 Depth=1
	testb	$1, %al
	jne	.LBB23_106
	jmp	.LBB23_119
.LBB23_106:                             # %for.body600
                                        #   in Loop: Header=BB23_103 Depth=1
	movl	$0, -12(%rbp)
.LBB23_107:                             # %for.cond601
                                        #   Parent Loop BB23_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB23_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB23_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB23_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_107
.LBB23_110:                             # %for.end613
                                        #   in Loop: Header=BB23_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB23_111:                             # %for.cond630
                                        #   Parent Loop BB23_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB23_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB23_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB23_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB23_115
.LBB23_114:                             # %if.else680
                                        #   in Loop: Header=BB23_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB23_115:                             # %if.end717
                                        #   in Loop: Header=BB23_111 Depth=2
	jmp	.LBB23_116
.LBB23_116:                             # %for.inc718
                                        #   in Loop: Header=BB23_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_111
.LBB23_117:                             # %for.end720
                                        #   in Loop: Header=BB23_103 Depth=1
	jmp	.LBB23_118
.LBB23_118:                             # %for.inc721
                                        #   in Loop: Header=BB23_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_103
.LBB23_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB23_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_122 Depth 2
                                        #       Child Loop BB23_124 Depth 3
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_147 Depth 4
                                        #         Child Loop BB23_151 Depth 4
                                        #       Child Loop BB23_157 Depth 3
                                        #         Child Loop BB23_161 Depth 4
                                        #         Child Loop BB23_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB23_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	$0, -24(%rbp)
.LBB23_122:                             # %for.cond728
                                        #   Parent Loop BB23_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_124 Depth 3
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_147 Depth 4
                                        #         Child Loop BB23_151 Depth 4
                                        #       Child Loop BB23_157 Depth 3
                                        #         Child Loop BB23_161 Depth 4
                                        #         Child Loop BB23_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB23_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB23_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB23_124:                             # %for.cond751
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB23_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB23_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB23_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB23_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB23_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB23_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB23_129
.LBB23_128:                             # %if.then762
                                        #   in Loop: Header=BB23_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_130
.LBB23_129:                             # %if.else771
                                        #   in Loop: Header=BB23_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB23_130:                             # %if.end780
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB23_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB23_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB23_133
.LBB23_132:                             # %if.else793
                                        #   in Loop: Header=BB23_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB23_133:                             # %if.end818
                                        #   in Loop: Header=BB23_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB23_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB23_135:                             # %if.end836
                                        #   in Loop: Header=BB23_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB23_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB23_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB23_139
.LBB23_138:                             # %if.else871
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB23_139:                             # %if.end889
                                        #   in Loop: Header=BB23_124 Depth=3
	jmp	.LBB23_140
.LBB23_140:                             # %if.end890
                                        #   in Loop: Header=BB23_124 Depth=3
	jmp	.LBB23_141
.LBB23_141:                             # %for.inc891
                                        #   in Loop: Header=BB23_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB23_124
.LBB23_142:                             # %for.end893
                                        #   in Loop: Header=BB23_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB23_143:                             # %for.cond896
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_147 Depth 4
                                        #         Child Loop BB23_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB23_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB23_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_145:                             # %land.end902
                                        #   in Loop: Header=BB23_143 Depth=3
	testb	$1, %al
	jne	.LBB23_146
	jmp	.LBB23_156
.LBB23_146:                             # %for.body904
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	$0, -16(%rbp)
.LBB23_147:                             # %for.cond905
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        #       Parent Loop BB23_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB23_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB23_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB23_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_147
.LBB23_150:                             # %for.end921
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB23_151:                             # %for.cond940
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        #       Parent Loop BB23_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB23_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB23_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB23_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_151
.LBB23_154:                             # %for.end973
                                        #   in Loop: Header=BB23_143 Depth=3
	jmp	.LBB23_155
.LBB23_155:                             # %for.inc974
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_143
.LBB23_156:                             # %for.end976
                                        #   in Loop: Header=BB23_122 Depth=2
	movl	$0, -16(%rbp)
.LBB23_157:                             # %for.cond977
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_161 Depth 4
                                        #         Child Loop BB23_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB23_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB23_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB23_159:                             # %land.end983
                                        #   in Loop: Header=BB23_157 Depth=3
	testb	$1, %al
	jne	.LBB23_160
	jmp	.LBB23_170
.LBB23_160:                             # %for.body985
                                        #   in Loop: Header=BB23_157 Depth=3
	movl	$0, -12(%rbp)
.LBB23_161:                             # %for.cond986
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        #       Parent Loop BB23_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB23_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB23_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB23_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_161
.LBB23_164:                             # %for.end1002
                                        #   in Loop: Header=BB23_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB23_165:                             # %for.cond1021
                                        #   Parent Loop BB23_120 Depth=1
                                        #     Parent Loop BB23_122 Depth=2
                                        #       Parent Loop BB23_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB23_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB23_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB23_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_165
.LBB23_168:                             # %for.end1054
                                        #   in Loop: Header=BB23_157 Depth=3
	jmp	.LBB23_169
.LBB23_169:                             # %for.inc1055
                                        #   in Loop: Header=BB23_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_157
.LBB23_170:                             # %for.end1057
                                        #   in Loop: Header=BB23_122 Depth=2
	jmp	.LBB23_171
.LBB23_171:                             # %for.inc1058
                                        #   in Loop: Header=BB23_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_122
.LBB23_172:                             # %for.end1060
                                        #   in Loop: Header=BB23_120 Depth=1
	jmp	.LBB23_173
.LBB23_173:                             # %for.inc1061
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_120
.LBB23_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB23_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB23_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB23_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB23_176 Depth=1
	movl	$0, -16(%rbp)
.LBB23_178:                             # %for.cond1071
                                        #   Parent Loop BB23_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB23_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB23_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB23_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_178
.LBB23_181:                             # %for.end1093
                                        #   in Loop: Header=BB23_176 Depth=1
	jmp	.LBB23_182
.LBB23_182:                             # %for.inc1094
                                        #   in Loop: Header=BB23_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_176
.LBB23_183:                             # %for.end1096
	jmp	.LBB23_196
.LBB23_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB23_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB23_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB23_185 Depth=1
	movl	$0, -16(%rbp)
.LBB23_187:                             # %for.cond1102
                                        #   Parent Loop BB23_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB23_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB23_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB23_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB23_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB23_191
.LBB23_190:                             # %if.else1125
                                        #   in Loop: Header=BB23_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB23_191:                             # %if.end1145
                                        #   in Loop: Header=BB23_187 Depth=2
	jmp	.LBB23_192
.LBB23_192:                             # %for.inc1146
                                        #   in Loop: Header=BB23_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_187
.LBB23_193:                             # %for.end1148
                                        #   in Loop: Header=BB23_185 Depth=1
	jmp	.LBB23_194
.LBB23_194:                             # %for.inc1149
                                        #   in Loop: Header=BB23_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_185
.LBB23_195:                             # %for.end1151
	jmp	.LBB23_196
.LBB23_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB23_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB23_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB23_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB23_198 Depth=1
	movl	$0, -16(%rbp)
.LBB23_200:                             # %for.cond1160
                                        #   Parent Loop BB23_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB23_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB23_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB23_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB23_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB23_213
.LBB23_203:                             # %if.else1186
                                        #   in Loop: Header=BB23_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB23_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB23_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB23_206
.LBB23_205:                             # %cond.false
                                        #   in Loop: Header=BB23_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB23_206:                             # %cond.end
                                        #   in Loop: Header=BB23_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB23_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB23_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB23_212
.LBB23_208:                             # %cond.false1229
                                        #   in Loop: Header=BB23_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB23_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB23_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB23_211
.LBB23_210:                             # %cond.false1250
                                        #   in Loop: Header=BB23_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB23_211:                             # %cond.end1268
                                        #   in Loop: Header=BB23_200 Depth=2
.LBB23_212:                             # %cond.end1270
                                        #   in Loop: Header=BB23_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB23_213:                             # %if.end1282
                                        #   in Loop: Header=BB23_200 Depth=2
	jmp	.LBB23_214
.LBB23_214:                             # %for.inc1283
                                        #   in Loop: Header=BB23_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_200
.LBB23_215:                             # %for.end1285
                                        #   in Loop: Header=BB23_198 Depth=1
	jmp	.LBB23_216
.LBB23_216:                             # %for.inc1286
                                        #   in Loop: Header=BB23_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_198
.LBB23_217:                             # %for.end1288
	jmp	.LBB23_218
.LBB23_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$109002729, -132(%rbp)  # imm = 0x67F3FE9
	jne	.LBB23_220
.LBB23_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_219
.Lfunc_end23:
	.size	dct_luma_16x16.14, .Lfunc_end23-dct_luma_16x16.14
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.15        # -- Begin function dct_chroma4x4.15
	.p2align	4, 0x90
	.type	dct_chroma4x4.15,@function
dct_chroma4x4.15:                       # @dct_chroma4x4.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1868392998, -148(%rbp) # imm = 0x6F5D6A26
	movl	%edi, -24(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB24_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB24_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB24_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB24_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB24_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB24_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB24_8
.LBB24_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB24_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB24_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB24_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB24_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB24_10 Depth=1
	movl	$0, -16(%rbp)
.LBB24_12:                              # %for.cond31
                                        #   Parent Loop BB24_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB24_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB24_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB24_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_12
.LBB24_15:                              # %for.end
                                        #   in Loop: Header=BB24_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB24_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_10
.LBB24_17:                              # %for.end92
	jmp	.LBB24_18
.LBB24_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB24_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB24_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB24_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	$0, -12(%rbp)
.LBB24_22:                              # %for.cond99
                                        #   Parent Loop BB24_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB24_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_22
.LBB24_25:                              # %for.end132
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_20
.LBB24_27:                              # %for.end165
	jmp	.LBB24_28
.LBB24_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB24_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB24_34
.LBB24_30:                              # %if.else
	cmpl	$1, -76(%rbp)
	jne	.LBB24_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_33
.LBB24_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB24_33:                              # %if.end213
	jmp	.LBB24_34
.LBB24_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB24_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB24_46
.LBB24_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB24_41
# %bb.37:                               # %if.then248
	cmpl	$1, -76(%rbp)
	jne	.LBB24_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB24_40
.LBB24_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB24_40:                              # %if.end290
	jmp	.LBB24_45
.LBB24_41:                              # %if.else291
	cmpl	$1, -76(%rbp)
	jne	.LBB24_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB24_44
.LBB24_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB24_44:                              # %if.end328
	jmp	.LBB24_45
.LBB24_45:                              # %if.end329
	jmp	.LBB24_46
.LBB24_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB24_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB24_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB24_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB24_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB24_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB24_54
.LBB24_50:                              # %if.else352
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB24_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB24_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_53
.LBB24_52:                              # %if.else381
                                        #   in Loop: Header=BB24_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB24_53:                              # %if.end407
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_54
.LBB24_54:                              # %if.end408
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB24_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB24_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB24_58
.LBB24_57:                              # %if.then415
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	$1, -132(%rbp)
.LBB24_58:                              # %if.end416
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB24_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB24_70
.LBB24_60:                              # %if.else436
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB24_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB24_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB24_64
.LBB24_63:                              # %if.else457
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB24_64:                              # %if.end472
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_69
.LBB24_65:                              # %if.else473
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB24_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB24_68
.LBB24_67:                              # %if.else488
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB24_68:                              # %if.end500
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_69
.LBB24_69:                              # %if.end501
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_70
.LBB24_70:                              # %if.end502
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_71
.LBB24_71:                              # %if.end503
                                        #   in Loop: Header=BB24_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB24_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB24_73:                              # %if.end511
                                        #   in Loop: Header=BB24_47 Depth=1
	jmp	.LBB24_74
.LBB24_74:                              # %for.inc512
                                        #   in Loop: Header=BB24_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB24_47
.LBB24_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB24_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB24_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_79 Depth 2
                                        #     Child Loop BB24_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB24_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB24_77 Depth=1
	movl	$0, -16(%rbp)
.LBB24_79:                              # %for.cond523
                                        #   Parent Loop BB24_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB24_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB24_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB24_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_79
.LBB24_82:                              # %for.end536
                                        #   in Loop: Header=BB24_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB24_83:                              # %for.cond555
                                        #   Parent Loop BB24_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB24_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB24_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB24_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_83
.LBB24_86:                              # %for.end582
                                        #   in Loop: Header=BB24_77 Depth=1
	jmp	.LBB24_87
.LBB24_87:                              # %for.inc583
                                        #   in Loop: Header=BB24_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_77
.LBB24_88:                              # %for.end585
	jmp	.LBB24_89
.LBB24_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB24_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB24_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_93 Depth 2
                                        #     Child Loop BB24_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB24_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB24_91 Depth=1
	movl	$0, -12(%rbp)
.LBB24_93:                              # %for.cond593
                                        #   Parent Loop BB24_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB24_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB24_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB24_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_93
.LBB24_96:                              # %for.end606
                                        #   in Loop: Header=BB24_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB24_97:                              # %for.cond625
                                        #   Parent Loop BB24_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB24_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB24_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB24_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_97
.LBB24_100:                             # %for.end656
                                        #   in Loop: Header=BB24_91 Depth=1
	jmp	.LBB24_101
.LBB24_101:                             # %for.inc657
                                        #   in Loop: Header=BB24_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_91
.LBB24_102:                             # %for.end659
	jmp	.LBB24_103
.LBB24_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1868392998, -148(%rbp) # imm = 0x6F5D6A26
	jne	.LBB24_105
.LBB24_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_104
.Lfunc_end24:
	.size	dct_chroma4x4.15, .Lfunc_end24-dct_chroma4x4.15
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.16 # -- Begin function intrapred_luma_16x16.16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.16,@function
intrapred_luma_16x16.16:                # @intrapred_luma_16x16.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1285242372, -92(%rbp)  # imm = 0x4C9B3E04
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB25_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB25_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB25_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_1
.LBB25_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB25_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB25_20
.LBB25_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB25_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB25_9
.LBB25_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB25_9
.LBB25_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB25_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB25_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB25_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB25_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB25_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB25_14
.LBB25_13:                              # %cond.false23
                                        #   in Loop: Header=BB25_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB25_14
.LBB25_14:                              # %cond.end24
                                        #   in Loop: Header=BB25_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB25_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_10
.LBB25_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB25_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB25_19
.LBB25_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB25_19
.LBB25_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB25_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB25_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB25_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB25_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB25_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB25_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB25_24:                              # %if.end51
                                        #   in Loop: Header=BB25_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB25_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB25_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB25_26:                              # %if.end68
                                        #   in Loop: Header=BB25_21 Depth=1
	jmp	.LBB25_27
.LBB25_27:                              # %for.inc69
                                        #   in Loop: Header=BB25_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_21
.LBB25_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB25_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB25_31
# %bb.30:                               # %if.then74
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB25_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB25_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB25_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB25_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB25_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB25_37
# %bb.36:                               # %if.then88
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB25_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB25_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB25_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB25_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB25_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB25_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB25_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB25_44:                              # %if.end114
                                        #   in Loop: Header=BB25_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB25_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB25_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB25_46:                              # %if.end133
                                        #   in Loop: Header=BB25_41 Depth=1
	jmp	.LBB25_47
.LBB25_47:                              # %for.inc134
                                        #   in Loop: Header=BB25_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_41
.LBB25_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB25_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB25_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB25_49 Depth=1
	movl	$0, -4(%rbp)
.LBB25_51:                              # %for.cond141
                                        #   Parent Loop BB25_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB25_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB25_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB25_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_51
.LBB25_54:                              # %for.end173
                                        #   in Loop: Header=BB25_49 Depth=1
	jmp	.LBB25_55
.LBB25_55:                              # %for.inc174
                                        #   in Loop: Header=BB25_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_49
.LBB25_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB25_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB25_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB25_60
.LBB25_59:                              # %if.then181
	jmp	.LBB25_85
.LBB25_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB25_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB25_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB25_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB25_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB25_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB25_65
.LBB25_64:                              # %if.else210
                                        #   in Loop: Header=BB25_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB25_65:                              # %if.end232
                                        #   in Loop: Header=BB25_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB25_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_61
.LBB25_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB25_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB25_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB25_68 Depth=1
	movl	$0, -4(%rbp)
.LBB25_70:                              # %for.cond293
                                        #   Parent Loop BB25_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB25_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB25_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB25_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_74
.LBB25_73:                              # %cond.false309
                                        #   in Loop: Header=BB25_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_74:                              # %cond.end318
                                        #   in Loop: Header=BB25_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB25_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB25_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB25_80
.LBB25_76:                              # %cond.false323
                                        #   in Loop: Header=BB25_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB25_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB25_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_79
.LBB25_78:                              # %cond.false337
                                        #   in Loop: Header=BB25_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB25_79:                              # %cond.end346
                                        #   in Loop: Header=BB25_70 Depth=2
.LBB25_80:                              # %cond.end348
                                        #   in Loop: Header=BB25_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB25_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_70
.LBB25_82:                              # %for.end359
                                        #   in Loop: Header=BB25_68 Depth=1
	jmp	.LBB25_83
.LBB25_83:                              # %for.inc360
                                        #   in Loop: Header=BB25_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_68
.LBB25_84:                              # %for.end362.loopexit
	jmp	.LBB25_85
.LBB25_85:                              # %for.end362
	cmpl	$1285242372, -92(%rbp)  # imm = 0x4C9B3E04
	jne	.LBB25_87
.LBB25_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_86
.Lfunc_end25:
	.size	intrapred_luma_16x16.16, .Lfunc_end25-intrapred_luma_16x16.16
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.17        # -- Begin function dct_chroma_DC.17
	.p2align	4, 0x90
	.type	dct_chroma_DC.17,@function
dct_chroma_DC.17:                       # @dct_chroma_DC.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$567675555, -44(%rbp)   # imm = 0x21D60AA3
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB26_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB26_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB26_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-28(%rbp), %eax
.LBB26_6:                               # %cond.end
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB26_7:                               # %if.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_1
.LBB26_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$567675555, -44(%rbp)   # imm = 0x21D60AA3
	jne	.LBB26_11
.LBB26_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_10
.Lfunc_end26:
	.size	dct_chroma_DC.17, .Lfunc_end26-dct_chroma_DC.17
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.18         # -- Begin function copyblock_sp.18
	.p2align	4, 0x90
	.type	copyblock_sp.18,@function
copyblock_sp.18:                        # @copyblock_sp.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$684191922, -92(%rbp)   # imm = 0x28C7F0B2
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_3:                               # %for.cond4
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_3
.LBB27_6:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_7
.LBB27_7:                               # %for.inc17
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB27_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB27_9 Depth=1
	movl	$0, -8(%rbp)
.LBB27_11:                              # %for.cond24
                                        #   Parent Loop BB27_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB27_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB27_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_11
.LBB27_14:                              # %for.end53
                                        #   in Loop: Header=BB27_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB27_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_9
.LBB27_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB27_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	$0, -4(%rbp)
.LBB27_19:                              # %for.cond86
                                        #   Parent Loop BB27_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB27_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_19
.LBB27_22:                              # %for.end115
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_17
.LBB27_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB27_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	$0, -8(%rbp)
.LBB27_27:                              # %for.cond149
                                        #   Parent Loop BB27_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_27
.LBB27_30:                              # %for.end184
                                        #   in Loop: Header=BB27_25 Depth=1
	jmp	.LBB27_31
.LBB27_31:                              # %for.inc185
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_25
.LBB27_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB27_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_35 Depth 2
                                        #     Child Loop BB27_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB27_33 Depth=1
	movl	$0, -8(%rbp)
.LBB27_35:                              # %for.cond192
                                        #   Parent Loop BB27_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB27_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB27_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_35
.LBB27_38:                              # %for.end205
                                        #   in Loop: Header=BB27_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB27_39:                              # %for.cond224
                                        #   Parent Loop BB27_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_39
.LBB27_42:                              # %for.end251
                                        #   in Loop: Header=BB27_33 Depth=1
	jmp	.LBB27_43
.LBB27_43:                              # %for.inc252
                                        #   in Loop: Header=BB27_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_33
.LBB27_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB27_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_47 Depth 2
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	$0, -4(%rbp)
.LBB27_47:                              # %for.cond259
                                        #   Parent Loop BB27_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB27_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB27_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_47
.LBB27_50:                              # %for.end272
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB27_51:                              # %for.cond291
                                        #   Parent Loop BB27_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB27_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB27_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB27_55
.LBB27_54:                              # %cond.false
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB27_55:                              # %cond.end
                                        #   in Loop: Header=BB27_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB27_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB27_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_61
.LBB27_57:                              # %cond.false316
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB27_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_60
.LBB27_59:                              # %cond.false327
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB27_60:                              # %cond.end335
                                        #   in Loop: Header=BB27_51 Depth=2
.LBB27_61:                              # %cond.end337
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB27_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB27_64
.LBB27_63:                              # %cond.false355
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB27_64:                              # %cond.end363
                                        #   in Loop: Header=BB27_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB27_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB27_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_70
.LBB27_66:                              # %cond.false369
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB27_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB27_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_69
.LBB27_68:                              # %cond.false380
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB27_69:                              # %cond.end388
                                        #   in Loop: Header=BB27_51 Depth=2
.LBB27_70:                              # %cond.end390
                                        #   in Loop: Header=BB27_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_51
.LBB27_72:                              # %for.end399
                                        #   in Loop: Header=BB27_45 Depth=1
	jmp	.LBB27_73
.LBB27_73:                              # %for.inc400
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_45
.LBB27_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB27_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB27_75 Depth=1
	movl	$0, -8(%rbp)
.LBB27_77:                              # %for.cond407
                                        #   Parent Loop BB27_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB27_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB27_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_77
.LBB27_80:                              # %for.end427
                                        #   in Loop: Header=BB27_75 Depth=1
	jmp	.LBB27_81
.LBB27_81:                              # %for.inc428
                                        #   in Loop: Header=BB27_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_75
.LBB27_82:                              # %for.end430
	cmpl	$684191922, -92(%rbp)   # imm = 0x28C7F0B2
	jne	.LBB27_84
.LBB27_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_83
.Lfunc_end27:
	.size	copyblock_sp.18, .Lfunc_end27-copyblock_sp.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.19
.LCPI28_0:
	.quad	4616189618054758400     # double 4
.LCPI28_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI28_2:
	.quad	4611686018427387904     # double 2
.LCPI28_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.19
	.p2align	4, 0x90
	.type	dct_chroma_sp.19,@function
dct_chroma_sp.19:                       # @dct_chroma_sp.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI28_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI28_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$556094575, -268(%rbp)  # imm = 0x2125546F
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI28_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB28_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB28_6
.LBB28_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB28_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB28_5
.LBB28_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB28_5:                               # %cond.end
.LBB28_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB28_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB28_12
.LBB28_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB28_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB28_11
.LBB28_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB28_11:                              # %cond.end41
.LBB28_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB28_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB28_15
.LBB28_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB28_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB28_18
.LBB28_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB28_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB28_21
.LBB28_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB28_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB28_24
.LBB28_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB28_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB28_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	$0, -16(%rbp)
.LBB28_27:                              # %for.cond97
                                        #   Parent Loop BB28_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB28_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB28_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_27
.LBB28_30:                              # %for.end
                                        #   in Loop: Header=BB28_25 Depth=1
	jmp	.LBB28_31
.LBB28_31:                              # %for.inc121
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_25
.LBB28_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB28_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_35 Depth 2
                                        #       Child Loop BB28_37 Depth 3
                                        #         Child Loop BB28_39 Depth 4
                                        #       Child Loop BB28_45 Depth 3
                                        #         Child Loop BB28_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB28_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB28_33 Depth=1
	movl	$0, -24(%rbp)
.LBB28_35:                              # %for.cond128
                                        #   Parent Loop BB28_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_37 Depth 3
                                        #         Child Loop BB28_39 Depth 4
                                        #       Child Loop BB28_45 Depth 3
                                        #         Child Loop BB28_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB28_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB28_35 Depth=2
	movl	$0, -12(%rbp)
.LBB28_37:                              # %for.cond132
                                        #   Parent Loop BB28_33 Depth=1
                                        #     Parent Loop BB28_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB28_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB28_39:                              # %for.cond137
                                        #   Parent Loop BB28_33 Depth=1
                                        #     Parent Loop BB28_35 Depth=2
                                        #       Parent Loop BB28_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB28_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB28_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_39
.LBB28_42:                              # %for.end174
                                        #   in Loop: Header=BB28_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB28_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_37
.LBB28_44:                              # %for.end214
                                        #   in Loop: Header=BB28_35 Depth=2
	movl	$0, -16(%rbp)
.LBB28_45:                              # %for.cond215
                                        #   Parent Loop BB28_33 Depth=1
                                        #     Parent Loop BB28_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB28_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB28_47:                              # %for.cond220
                                        #   Parent Loop BB28_33 Depth=1
                                        #     Parent Loop BB28_35 Depth=2
                                        #       Parent Loop BB28_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB28_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB28_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_47
.LBB28_50:                              # %for.end257
                                        #   in Loop: Header=BB28_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB28_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_45
.LBB28_52:                              # %for.end298
                                        #   in Loop: Header=BB28_35 Depth=2
	jmp	.LBB28_53
.LBB28_53:                              # %for.inc299
                                        #   in Loop: Header=BB28_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_35
.LBB28_54:                              # %for.end301
                                        #   in Loop: Header=BB28_33 Depth=1
	jmp	.LBB28_55
.LBB28_55:                              # %for.inc302
                                        #   in Loop: Header=BB28_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_33
.LBB28_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB28_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_59 Depth 2
                                        #       Child Loop BB28_61 Depth 3
                                        #         Child Loop BB28_63 Depth 4
                                        #       Child Loop BB28_69 Depth 3
                                        #         Child Loop BB28_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB28_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB28_57 Depth=1
	movl	$0, -24(%rbp)
.LBB28_59:                              # %for.cond309
                                        #   Parent Loop BB28_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_61 Depth 3
                                        #         Child Loop BB28_63 Depth 4
                                        #       Child Loop BB28_69 Depth 3
                                        #         Child Loop BB28_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB28_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB28_59 Depth=2
	movl	$0, -12(%rbp)
.LBB28_61:                              # %for.cond313
                                        #   Parent Loop BB28_57 Depth=1
                                        #     Parent Loop BB28_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB28_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB28_63:                              # %for.cond318
                                        #   Parent Loop BB28_57 Depth=1
                                        #     Parent Loop BB28_59 Depth=2
                                        #       Parent Loop BB28_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB28_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB28_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_63
.LBB28_66:                              # %for.end351
                                        #   in Loop: Header=BB28_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB28_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_61
.LBB28_68:                              # %for.end387
                                        #   in Loop: Header=BB28_59 Depth=2
	movl	$0, -16(%rbp)
.LBB28_69:                              # %for.cond388
                                        #   Parent Loop BB28_57 Depth=1
                                        #     Parent Loop BB28_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB28_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB28_71:                              # %for.cond393
                                        #   Parent Loop BB28_57 Depth=1
                                        #     Parent Loop BB28_59 Depth=2
                                        #       Parent Loop BB28_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB28_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB28_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_71
.LBB28_74:                              # %for.end426
                                        #   in Loop: Header=BB28_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB28_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_69
.LBB28_76:                              # %for.end463
                                        #   in Loop: Header=BB28_59 Depth=2
	jmp	.LBB28_77
.LBB28_77:                              # %for.inc464
                                        #   in Loop: Header=BB28_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_59
.LBB28_78:                              # %for.end466
                                        #   in Loop: Header=BB28_57 Depth=1
	jmp	.LBB28_79
.LBB28_79:                              # %for.inc467
                                        #   in Loop: Header=BB28_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_57
.LBB28_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB28_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB28_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB28_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB28_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB28_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB28_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB28_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB28_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB28_90
	jp	.LBB28_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB28_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB28_89
.LBB28_88:                              # %cond.false691
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-40(%rbp), %eax
.LBB28_89:                              # %cond.end692
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB28_94
.LBB28_90:                              # %if.else
                                        #   in Loop: Header=BB28_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB28_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_93
.LBB28_92:                              # %if.else697
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB28_93:                              # %if.end
                                        #   in Loop: Header=BB28_81 Depth=1
	jmp	.LBB28_94
.LBB28_94:                              # %if.end698
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB28_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB28_97
.LBB28_96:                              # %cond.false702
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-104(%rbp), %eax
.LBB28_97:                              # %cond.end703
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB28_108
.LBB28_98:                              # %if.else705
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB28_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB28_107
.LBB28_100:                             # %if.else709
                                        #   in Loop: Header=BB28_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB28_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB28_103
.LBB28_102:                             # %cond.false713
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-40(%rbp), %eax
.LBB28_103:                             # %cond.end714
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB28_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB28_106
.LBB28_105:                             # %cond.false719
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-104(%rbp), %eax
.LBB28_106:                             # %cond.end720
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB28_107:                             # %if.end722
                                        #   in Loop: Header=BB28_81 Depth=1
	jmp	.LBB28_108
.LBB28_108:                             # %if.end723
                                        #   in Loop: Header=BB28_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB28_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB28_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB28_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB28_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB28_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB28_112:                             # %if.end734
                                        #   in Loop: Header=BB28_81 Depth=1
	jmp	.LBB28_113
.LBB28_113:                             # %if.end735
                                        #   in Loop: Header=BB28_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB28_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB28_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	$1, %eax
	jmp	.LBB28_117
.LBB28_116:                             # %cond.false745
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-204(%rbp), %eax
.LBB28_117:                             # %cond.end746
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB28_118:                             # %if.end763
                                        #   in Loop: Header=BB28_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB28_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB28_81
.LBB28_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB28_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_123 Depth 2
                                        #       Child Loop BB28_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB28_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB28_121 Depth=1
	movl	$0, -24(%rbp)
.LBB28_123:                             # %for.cond839
                                        #   Parent Loop BB28_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB28_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB28_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB28_125:                             # %for.cond860
                                        #   Parent Loop BB28_121 Depth=1
                                        #     Parent Loop BB28_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB28_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB28_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB28_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB28_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB28_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB28_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB28_130
.LBB28_129:                             # %if.then867
                                        #   in Loop: Header=BB28_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_131
.LBB28_130:                             # %if.else876
                                        #   in Loop: Header=BB28_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB28_131:                             # %if.end885
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB28_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB28_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB28_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB28_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB28_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB28_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB28_139
	jp	.LBB28_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB28_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB28_138
.LBB28_137:                             # %cond.false1047
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-40(%rbp), %eax
.LBB28_138:                             # %cond.end1048
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB28_143
.LBB28_139:                             # %if.else1050
                                        #   in Loop: Header=BB28_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB28_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB28_142
.LBB28_141:                             # %if.else1054
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB28_142:                             # %if.end1055
                                        #   in Loop: Header=BB28_125 Depth=3
	jmp	.LBB28_143
.LBB28_143:                             # %if.end1056
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB28_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB28_146
.LBB28_145:                             # %cond.false1060
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-104(%rbp), %eax
.LBB28_146:                             # %cond.end1061
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB28_157
.LBB28_147:                             # %if.else1063
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB28_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB28_156
.LBB28_149:                             # %if.else1067
                                        #   in Loop: Header=BB28_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB28_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB28_152
.LBB28_151:                             # %cond.false1071
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-40(%rbp), %eax
.LBB28_152:                             # %cond.end1072
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB28_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB28_155
.LBB28_154:                             # %cond.false1077
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-104(%rbp), %eax
.LBB28_155:                             # %cond.end1078
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB28_156:                             # %if.end1080
                                        #   in Loop: Header=BB28_125 Depth=3
	jmp	.LBB28_157
.LBB28_157:                             # %if.end1081
                                        #   in Loop: Header=BB28_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB28_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB28_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB28_161
.LBB28_160:                             # %if.else1099
                                        #   in Loop: Header=BB28_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB28_161:                             # %if.end1106
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB28_162:                             # %if.end1128
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB28_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB28_125
.LBB28_164:                             # %for.end1164
                                        #   in Loop: Header=BB28_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB28_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_123
.LBB28_166:                             # %for.end1169
                                        #   in Loop: Header=BB28_121 Depth=1
	jmp	.LBB28_167
.LBB28_167:                             # %for.inc1170
                                        #   in Loop: Header=BB28_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_121
.LBB28_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB28_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB28_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB28_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_173 Depth 2
                                        #       Child Loop BB28_175 Depth 3
                                        #         Child Loop BB28_177 Depth 4
                                        #         Child Loop BB28_181 Depth 4
                                        #       Child Loop BB28_187 Depth 3
                                        #         Child Loop BB28_189 Depth 4
                                        #         Child Loop BB28_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB28_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB28_171 Depth=1
	movl	$0, -24(%rbp)
.LBB28_173:                             # %for.cond1181
                                        #   Parent Loop BB28_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_175 Depth 3
                                        #         Child Loop BB28_177 Depth 4
                                        #         Child Loop BB28_181 Depth 4
                                        #       Child Loop BB28_187 Depth 3
                                        #         Child Loop BB28_189 Depth 4
                                        #         Child Loop BB28_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB28_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB28_173 Depth=2
	movl	$0, -12(%rbp)
.LBB28_175:                             # %for.cond1185
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_177 Depth 4
                                        #         Child Loop BB28_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB28_175 Depth=3
	movl	$0, -16(%rbp)
.LBB28_177:                             # %for.cond1189
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        #       Parent Loop BB28_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB28_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB28_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_177
.LBB28_180:                             # %for.end1204
                                        #   in Loop: Header=BB28_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB28_181:                             # %for.cond1223
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        #       Parent Loop BB28_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB28_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB28_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB28_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_181
.LBB28_184:                             # %for.end1254
                                        #   in Loop: Header=BB28_175 Depth=3
	jmp	.LBB28_185
.LBB28_185:                             # %for.inc1255
                                        #   in Loop: Header=BB28_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_175
.LBB28_186:                             # %for.end1257
                                        #   in Loop: Header=BB28_173 Depth=2
	movl	$0, -16(%rbp)
.LBB28_187:                             # %for.cond1258
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_189 Depth 4
                                        #         Child Loop BB28_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB28_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB28_187 Depth=3
	movl	$0, -12(%rbp)
.LBB28_189:                             # %for.cond1262
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        #       Parent Loop BB28_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB28_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB28_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB28_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_189
.LBB28_192:                             # %for.end1277
                                        #   in Loop: Header=BB28_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB28_193:                             # %for.cond1296
                                        #   Parent Loop BB28_171 Depth=1
                                        #     Parent Loop BB28_173 Depth=2
                                        #       Parent Loop BB28_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB28_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB28_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB28_197
.LBB28_196:                             # %cond.false1311
                                        #   in Loop: Header=BB28_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB28_197:                             # %cond.end1319
                                        #   in Loop: Header=BB28_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB28_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB28_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB28_203
.LBB28_199:                             # %cond.false1325
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB28_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_202
.LBB28_201:                             # %cond.false1336
                                        #   in Loop: Header=BB28_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB28_202:                             # %cond.end1344
                                        #   in Loop: Header=BB28_193 Depth=4
.LBB28_203:                             # %cond.end1346
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB28_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB28_206
.LBB28_205:                             # %cond.false1366
                                        #   in Loop: Header=BB28_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB28_206:                             # %cond.end1374
                                        #   in Loop: Header=BB28_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB28_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB28_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB28_212
.LBB28_208:                             # %cond.false1380
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB28_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB28_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_211
.LBB28_210:                             # %cond.false1391
                                        #   in Loop: Header=BB28_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB28_211:                             # %cond.end1399
                                        #   in Loop: Header=BB28_193 Depth=4
.LBB28_212:                             # %cond.end1401
                                        #   in Loop: Header=BB28_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB28_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_193
.LBB28_214:                             # %for.end1412
                                        #   in Loop: Header=BB28_187 Depth=3
	jmp	.LBB28_215
.LBB28_215:                             # %for.inc1413
                                        #   in Loop: Header=BB28_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_187
.LBB28_216:                             # %for.end1415
                                        #   in Loop: Header=BB28_173 Depth=2
	jmp	.LBB28_217
.LBB28_217:                             # %for.inc1416
                                        #   in Loop: Header=BB28_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_173
.LBB28_218:                             # %for.end1418
                                        #   in Loop: Header=BB28_171 Depth=1
	jmp	.LBB28_219
.LBB28_219:                             # %for.inc1419
                                        #   in Loop: Header=BB28_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_171
.LBB28_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB28_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB28_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB28_221 Depth=1
	movl	$0, -16(%rbp)
.LBB28_223:                             # %for.cond1426
                                        #   Parent Loop BB28_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB28_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB28_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB28_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_223
.LBB28_226:                             # %for.end1446
                                        #   in Loop: Header=BB28_221 Depth=1
	jmp	.LBB28_227
.LBB28_227:                             # %for.inc1447
                                        #   in Loop: Header=BB28_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_221
.LBB28_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$556094575, -268(%rbp)  # imm = 0x2125546F
	jne	.LBB28_230
.LBB28_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_229
.Lfunc_end28:
	.size	dct_chroma_sp.19, .Lfunc_end28-dct_chroma_sp.19
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.20       # -- Begin function dct_luma_16x16.20
	.p2align	4, 0x90
	.type	dct_luma_16x16.20,@function
dct_luma_16x16.20:                      # @dct_luma_16x16.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1880904829, -132(%rbp) # imm = 0x701C547D
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB29_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB29_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB29_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB29_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	$0, -16(%rbp)
.LBB29_5:                               # %for.cond16
                                        #   Parent Loop BB29_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB29_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB29_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB29_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB29_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB29_9
.LBB29_8:                               # %if.else
                                        #   in Loop: Header=BB29_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB29_9:                               # %if.end
                                        #   in Loop: Header=BB29_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB29_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_5
.LBB29_11:                              # %for.end
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_12
.LBB29_12:                              # %for.inc61
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_3
.LBB29_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB29_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_18 Depth 2
                                        #       Child Loop BB29_20 Depth 3
                                        #         Child Loop BB29_22 Depth 4
                                        #       Child Loop BB29_28 Depth 3
                                        #         Child Loop BB29_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB29_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB29_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_16:                              # %land.end69
                                        #   in Loop: Header=BB29_14 Depth=1
	testb	$1, %al
	jne	.LBB29_17
	jmp	.LBB29_39
.LBB29_17:                              # %for.body71
                                        #   in Loop: Header=BB29_14 Depth=1
	movl	$0, -20(%rbp)
.LBB29_18:                              # %for.cond72
                                        #   Parent Loop BB29_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_20 Depth 3
                                        #         Child Loop BB29_22 Depth 4
                                        #       Child Loop BB29_28 Depth 3
                                        #         Child Loop BB29_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB29_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB29_18 Depth=2
	movl	$0, -12(%rbp)
.LBB29_20:                              # %for.cond76
                                        #   Parent Loop BB29_14 Depth=1
                                        #     Parent Loop BB29_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB29_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB29_20 Depth=3
	movl	$0, -16(%rbp)
.LBB29_22:                              # %for.cond80
                                        #   Parent Loop BB29_14 Depth=1
                                        #     Parent Loop BB29_18 Depth=2
                                        #       Parent Loop BB29_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB29_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB29_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB29_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_22
.LBB29_25:                              # %for.end125
                                        #   in Loop: Header=BB29_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB29_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_20
.LBB29_27:                              # %for.end169
                                        #   in Loop: Header=BB29_18 Depth=2
	movl	$0, -16(%rbp)
.LBB29_28:                              # %for.cond170
                                        #   Parent Loop BB29_14 Depth=1
                                        #     Parent Loop BB29_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB29_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB29_28 Depth=3
	movl	$0, -12(%rbp)
.LBB29_30:                              # %for.cond174
                                        #   Parent Loop BB29_14 Depth=1
                                        #     Parent Loop BB29_18 Depth=2
                                        #       Parent Loop BB29_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB29_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB29_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB29_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_30
.LBB29_33:                              # %for.end219
                                        #   in Loop: Header=BB29_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB29_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_28
.LBB29_35:                              # %for.end264
                                        #   in Loop: Header=BB29_18 Depth=2
	jmp	.LBB29_36
.LBB29_36:                              # %for.inc265
                                        #   in Loop: Header=BB29_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_18
.LBB29_37:                              # %for.end267
                                        #   in Loop: Header=BB29_14 Depth=1
	jmp	.LBB29_38
.LBB29_38:                              # %for.inc268
                                        #   in Loop: Header=BB29_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_14
.LBB29_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB29_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB29_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB29_40 Depth=1
	movl	$0, -16(%rbp)
.LBB29_42:                              # %for.cond275
                                        #   Parent Loop BB29_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB29_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB29_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB29_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_42
.LBB29_45:                              # %for.end291
                                        #   in Loop: Header=BB29_40 Depth=1
	jmp	.LBB29_46
.LBB29_46:                              # %for.inc292
                                        #   in Loop: Header=BB29_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_40
.LBB29_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB29_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB29_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB29_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_50:                              # %land.end301
                                        #   in Loop: Header=BB29_48 Depth=1
	testb	$1, %al
	jne	.LBB29_51
	jmp	.LBB29_57
.LBB29_51:                              # %for.body303
                                        #   in Loop: Header=BB29_48 Depth=1
	movl	$0, -16(%rbp)
.LBB29_52:                              # %for.cond304
                                        #   Parent Loop BB29_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB29_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB29_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB29_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_52
.LBB29_55:                              # %for.end333
                                        #   in Loop: Header=BB29_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB29_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_48
.LBB29_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB29_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB29_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB29_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_60:                              # %land.end367
                                        #   in Loop: Header=BB29_58 Depth=1
	testb	$1, %al
	jne	.LBB29_61
	jmp	.LBB29_67
.LBB29_61:                              # %for.body369
                                        #   in Loop: Header=BB29_58 Depth=1
	movl	$0, -12(%rbp)
.LBB29_62:                              # %for.cond370
                                        #   Parent Loop BB29_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB29_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB29_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB29_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_62
.LBB29_65:                              # %for.end399
                                        #   in Loop: Header=BB29_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB29_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_58
.LBB29_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB29_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB29_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB29_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB29_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB29_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB29_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB29_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB29_73
.LBB29_72:                              # %if.then437
                                        #   in Loop: Header=BB29_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_74
.LBB29_73:                              # %if.else446
                                        #   in Loop: Header=BB29_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB29_74:                              # %if.end455
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB29_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB29_77
.LBB29_76:                              # %if.else463
                                        #   in Loop: Header=BB29_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB29_77:                              # %if.end481
                                        #   in Loop: Header=BB29_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB29_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB29_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB29_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB29_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB29_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB29_81:                              # %if.end492
                                        #   in Loop: Header=BB29_68 Depth=1
	jmp	.LBB29_82
.LBB29_82:                              # %if.end493
                                        #   in Loop: Header=BB29_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB29_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB29_84:                              # %if.end507
                                        #   in Loop: Header=BB29_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB29_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB29_86:                              # %if.end519
                                        #   in Loop: Header=BB29_68 Depth=1
	jmp	.LBB29_87
.LBB29_87:                              # %for.inc520
                                        #   in Loop: Header=BB29_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB29_68
.LBB29_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB29_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_93 Depth 2
                                        #     Child Loop BB29_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB29_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB29_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_91:                              # %land.end531
                                        #   in Loop: Header=BB29_89 Depth=1
	testb	$1, %al
	jne	.LBB29_92
	jmp	.LBB29_102
.LBB29_92:                              # %for.body533
                                        #   in Loop: Header=BB29_89 Depth=1
	movl	$0, -16(%rbp)
.LBB29_93:                              # %for.cond534
                                        #   Parent Loop BB29_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB29_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB29_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB29_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_93
.LBB29_96:                              # %for.end546
                                        #   in Loop: Header=BB29_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB29_97:                              # %for.cond563
                                        #   Parent Loop BB29_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB29_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB29_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB29_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_97
.LBB29_100:                             # %for.end588
                                        #   in Loop: Header=BB29_89 Depth=1
	jmp	.LBB29_101
.LBB29_101:                             # %for.inc589
                                        #   in Loop: Header=BB29_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_89
.LBB29_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB29_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_107 Depth 2
                                        #     Child Loop BB29_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB29_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB29_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_105:                             # %land.end598
                                        #   in Loop: Header=BB29_103 Depth=1
	testb	$1, %al
	jne	.LBB29_106
	jmp	.LBB29_119
.LBB29_106:                             # %for.body600
                                        #   in Loop: Header=BB29_103 Depth=1
	movl	$0, -12(%rbp)
.LBB29_107:                             # %for.cond601
                                        #   Parent Loop BB29_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB29_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB29_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_107
.LBB29_110:                             # %for.end613
                                        #   in Loop: Header=BB29_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB29_111:                             # %for.cond630
                                        #   Parent Loop BB29_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB29_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB29_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB29_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB29_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB29_115
.LBB29_114:                             # %if.else680
                                        #   in Loop: Header=BB29_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB29_115:                             # %if.end717
                                        #   in Loop: Header=BB29_111 Depth=2
	jmp	.LBB29_116
.LBB29_116:                             # %for.inc718
                                        #   in Loop: Header=BB29_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_111
.LBB29_117:                             # %for.end720
                                        #   in Loop: Header=BB29_103 Depth=1
	jmp	.LBB29_118
.LBB29_118:                             # %for.inc721
                                        #   in Loop: Header=BB29_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_103
.LBB29_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB29_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_122 Depth 2
                                        #       Child Loop BB29_124 Depth 3
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_147 Depth 4
                                        #         Child Loop BB29_151 Depth 4
                                        #       Child Loop BB29_157 Depth 3
                                        #         Child Loop BB29_161 Depth 4
                                        #         Child Loop BB29_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB29_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	$0, -20(%rbp)
.LBB29_122:                             # %for.cond728
                                        #   Parent Loop BB29_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_124 Depth 3
                                        #       Child Loop BB29_143 Depth 3
                                        #         Child Loop BB29_147 Depth 4
                                        #         Child Loop BB29_151 Depth 4
                                        #       Child Loop BB29_157 Depth 3
                                        #         Child Loop BB29_161 Depth 4
                                        #         Child Loop BB29_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB29_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB29_124:                             # %for.cond751
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB29_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB29_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB29_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB29_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB29_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB29_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB29_129
.LBB29_128:                             # %if.then762
                                        #   in Loop: Header=BB29_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_130
.LBB29_129:                             # %if.else771
                                        #   in Loop: Header=BB29_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB29_130:                             # %if.end780
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB29_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB29_133
.LBB29_132:                             # %if.else793
                                        #   in Loop: Header=BB29_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB29_133:                             # %if.end818
                                        #   in Loop: Header=BB29_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB29_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB29_135:                             # %if.end836
                                        #   in Loop: Header=BB29_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB29_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB29_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB29_139
.LBB29_138:                             # %if.else871
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB29_139:                             # %if.end889
                                        #   in Loop: Header=BB29_124 Depth=3
	jmp	.LBB29_140
.LBB29_140:                             # %if.end890
                                        #   in Loop: Header=BB29_124 Depth=3
	jmp	.LBB29_141
.LBB29_141:                             # %for.inc891
                                        #   in Loop: Header=BB29_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB29_124
.LBB29_142:                             # %for.end893
                                        #   in Loop: Header=BB29_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB29_143:                             # %for.cond896
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_147 Depth 4
                                        #         Child Loop BB29_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB29_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB29_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_145:                             # %land.end902
                                        #   in Loop: Header=BB29_143 Depth=3
	testb	$1, %al
	jne	.LBB29_146
	jmp	.LBB29_156
.LBB29_146:                             # %for.body904
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	$0, -16(%rbp)
.LBB29_147:                             # %for.cond905
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        #       Parent Loop BB29_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB29_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB29_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB29_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_147
.LBB29_150:                             # %for.end921
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB29_151:                             # %for.cond940
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        #       Parent Loop BB29_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB29_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB29_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB29_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_151
.LBB29_154:                             # %for.end973
                                        #   in Loop: Header=BB29_143 Depth=3
	jmp	.LBB29_155
.LBB29_155:                             # %for.inc974
                                        #   in Loop: Header=BB29_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_143
.LBB29_156:                             # %for.end976
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	$0, -16(%rbp)
.LBB29_157:                             # %for.cond977
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_161 Depth 4
                                        #         Child Loop BB29_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB29_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB29_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB29_159:                             # %land.end983
                                        #   in Loop: Header=BB29_157 Depth=3
	testb	$1, %al
	jne	.LBB29_160
	jmp	.LBB29_170
.LBB29_160:                             # %for.body985
                                        #   in Loop: Header=BB29_157 Depth=3
	movl	$0, -12(%rbp)
.LBB29_161:                             # %for.cond986
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        #       Parent Loop BB29_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB29_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB29_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB29_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_161
.LBB29_164:                             # %for.end1002
                                        #   in Loop: Header=BB29_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB29_165:                             # %for.cond1021
                                        #   Parent Loop BB29_120 Depth=1
                                        #     Parent Loop BB29_122 Depth=2
                                        #       Parent Loop BB29_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB29_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB29_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB29_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_165
.LBB29_168:                             # %for.end1054
                                        #   in Loop: Header=BB29_157 Depth=3
	jmp	.LBB29_169
.LBB29_169:                             # %for.inc1055
                                        #   in Loop: Header=BB29_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_157
.LBB29_170:                             # %for.end1057
                                        #   in Loop: Header=BB29_122 Depth=2
	jmp	.LBB29_171
.LBB29_171:                             # %for.inc1058
                                        #   in Loop: Header=BB29_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_122
.LBB29_172:                             # %for.end1060
                                        #   in Loop: Header=BB29_120 Depth=1
	jmp	.LBB29_173
.LBB29_173:                             # %for.inc1061
                                        #   in Loop: Header=BB29_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_120
.LBB29_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB29_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB29_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB29_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB29_176 Depth=1
	movl	$0, -16(%rbp)
.LBB29_178:                             # %for.cond1071
                                        #   Parent Loop BB29_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB29_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB29_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB29_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_178
.LBB29_181:                             # %for.end1093
                                        #   in Loop: Header=BB29_176 Depth=1
	jmp	.LBB29_182
.LBB29_182:                             # %for.inc1094
                                        #   in Loop: Header=BB29_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_176
.LBB29_183:                             # %for.end1096
	jmp	.LBB29_196
.LBB29_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB29_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB29_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB29_185 Depth=1
	movl	$0, -16(%rbp)
.LBB29_187:                             # %for.cond1102
                                        #   Parent Loop BB29_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB29_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB29_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB29_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB29_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB29_191
.LBB29_190:                             # %if.else1125
                                        #   in Loop: Header=BB29_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB29_191:                             # %if.end1145
                                        #   in Loop: Header=BB29_187 Depth=2
	jmp	.LBB29_192
.LBB29_192:                             # %for.inc1146
                                        #   in Loop: Header=BB29_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_187
.LBB29_193:                             # %for.end1148
                                        #   in Loop: Header=BB29_185 Depth=1
	jmp	.LBB29_194
.LBB29_194:                             # %for.inc1149
                                        #   in Loop: Header=BB29_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_185
.LBB29_195:                             # %for.end1151
	jmp	.LBB29_196
.LBB29_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB29_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB29_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB29_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB29_198 Depth=1
	movl	$0, -16(%rbp)
.LBB29_200:                             # %for.cond1160
                                        #   Parent Loop BB29_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB29_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB29_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB29_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB29_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB29_213
.LBB29_203:                             # %if.else1186
                                        #   in Loop: Header=BB29_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB29_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB29_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB29_206
.LBB29_205:                             # %cond.false
                                        #   in Loop: Header=BB29_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB29_206:                             # %cond.end
                                        #   in Loop: Header=BB29_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB29_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB29_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB29_212
.LBB29_208:                             # %cond.false1229
                                        #   in Loop: Header=BB29_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB29_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB29_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB29_211
.LBB29_210:                             # %cond.false1250
                                        #   in Loop: Header=BB29_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB29_211:                             # %cond.end1268
                                        #   in Loop: Header=BB29_200 Depth=2
.LBB29_212:                             # %cond.end1270
                                        #   in Loop: Header=BB29_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB29_213:                             # %if.end1282
                                        #   in Loop: Header=BB29_200 Depth=2
	jmp	.LBB29_214
.LBB29_214:                             # %for.inc1283
                                        #   in Loop: Header=BB29_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_200
.LBB29_215:                             # %for.end1285
                                        #   in Loop: Header=BB29_198 Depth=1
	jmp	.LBB29_216
.LBB29_216:                             # %for.inc1286
                                        #   in Loop: Header=BB29_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_198
.LBB29_217:                             # %for.end1288
	jmp	.LBB29_218
.LBB29_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$1880904829, -132(%rbp) # imm = 0x701C547D
	jne	.LBB29_220
.LBB29_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_219
.Lfunc_end29:
	.size	dct_luma_16x16.20, .Lfunc_end29-dct_luma_16x16.20
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.21        # -- Begin function dct_chroma_DC.21
	.p2align	4, 0x90
	.type	dct_chroma_DC.21,@function
dct_chroma_DC.21:                       # @dct_chroma_DC.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1541092036, -44(%rbp)  # imm = 0x5BDB32C4
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB30_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB30_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB30_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$1, %eax
	jmp	.LBB30_6
.LBB30_5:                               # %cond.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-24(%rbp), %eax
.LBB30_6:                               # %cond.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -20(%rbp)
.LBB30_7:                               # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_1
.LBB30_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1541092036, -44(%rbp)  # imm = 0x5BDB32C4
	jne	.LBB30_11
.LBB30_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_10
.Lfunc_end30:
	.size	dct_chroma_DC.21, .Lfunc_end30-dct_chroma_DC.21
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.22        # -- Begin function dct_chroma_DC.22
	.p2align	4, 0x90
	.type	dct_chroma_DC.22,@function
dct_chroma_DC.22:                       # @dct_chroma_DC.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1264176267, -44(%rbp)  # imm = 0x4B59CC8B
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB31_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB31_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB31_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$1, %eax
	jmp	.LBB31_6
.LBB31_5:                               # %cond.false
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-24(%rbp), %eax
.LBB31_6:                               # %cond.end
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB31_7:                               # %if.end
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_8
.LBB31_8:                               # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_1
.LBB31_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1264176267, -44(%rbp)  # imm = 0x4B59CC8B
	jne	.LBB31_11
.LBB31_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_10
.Lfunc_end31:
	.size	dct_chroma_DC.22, .Lfunc_end31-dct_chroma_DC.22
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.23 # -- Begin function intrapred_luma_16x16.23
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.23,@function
intrapred_luma_16x16.23:                # @intrapred_luma_16x16.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$776722109, -92(%rbp)   # imm = 0x2E4BD6BD
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB32_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB32_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB32_20
.LBB32_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB32_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB32_9
.LBB32_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB32_9
.LBB32_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB32_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB32_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB32_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB32_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB32_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB32_14
.LBB32_13:                              # %cond.false23
                                        #   in Loop: Header=BB32_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB32_14
.LBB32_14:                              # %cond.end24
                                        #   in Loop: Header=BB32_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB32_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_10
.LBB32_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB32_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB32_19
.LBB32_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB32_19
.LBB32_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB32_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB32_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB32_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB32_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB32_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB32_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB32_24:                              # %if.end51
                                        #   in Loop: Header=BB32_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB32_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB32_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB32_26:                              # %if.end68
                                        #   in Loop: Header=BB32_21 Depth=1
	jmp	.LBB32_27
.LBB32_27:                              # %for.inc69
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_21
.LBB32_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB32_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB32_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB32_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB32_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB32_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB32_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB32_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB32_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB32_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB32_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB32_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB32_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB32_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB32_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB32_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB32_44:                              # %if.end114
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB32_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB32_46:                              # %if.end133
                                        #   in Loop: Header=BB32_41 Depth=1
	jmp	.LBB32_47
.LBB32_47:                              # %for.inc134
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_41
.LBB32_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB32_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	$0, -4(%rbp)
.LBB32_51:                              # %for.cond141
                                        #   Parent Loop BB32_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB32_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB32_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_51
.LBB32_54:                              # %for.end173
                                        #   in Loop: Header=BB32_49 Depth=1
	jmp	.LBB32_55
.LBB32_55:                              # %for.inc174
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_49
.LBB32_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB32_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB32_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB32_60
.LBB32_59:                              # %if.then181
	jmp	.LBB32_85
.LBB32_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB32_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB32_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB32_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB32_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB32_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_65
.LBB32_64:                              # %if.else210
                                        #   in Loop: Header=BB32_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB32_65:                              # %if.end232
                                        #   in Loop: Header=BB32_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB32_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_61
.LBB32_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB32_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	$0, -4(%rbp)
.LBB32_70:                              # %for.cond293
                                        #   Parent Loop BB32_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB32_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB32_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB32_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_74
.LBB32_73:                              # %cond.false309
                                        #   in Loop: Header=BB32_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB32_74:                              # %cond.end318
                                        #   in Loop: Header=BB32_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB32_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB32_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_80
.LBB32_76:                              # %cond.false323
                                        #   in Loop: Header=BB32_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB32_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB32_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_79
.LBB32_78:                              # %cond.false337
                                        #   in Loop: Header=BB32_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB32_79:                              # %cond.end346
                                        #   in Loop: Header=BB32_70 Depth=2
.LBB32_80:                              # %cond.end348
                                        #   in Loop: Header=BB32_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB32_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_70
.LBB32_82:                              # %for.end359
                                        #   in Loop: Header=BB32_68 Depth=1
	jmp	.LBB32_83
.LBB32_83:                              # %for.inc360
                                        #   in Loop: Header=BB32_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_68
.LBB32_84:                              # %for.end362.loopexit
	jmp	.LBB32_85
.LBB32_85:                              # %for.end362
	cmpl	$776722109, -92(%rbp)   # imm = 0x2E4BD6BD
	jne	.LBB32_87
.LBB32_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_86
.Lfunc_end32:
	.size	intrapred_luma_16x16.23, .Lfunc_end32-intrapred_luma_16x16.23
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.24        # -- Begin function dct_chroma_DC.24
	.p2align	4, 0x90
	.type	dct_chroma_DC.24,@function
dct_chroma_DC.24:                       # @dct_chroma_DC.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1223093212, -44(%rbp)  # imm = 0x48E6EBDC
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB33_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB33_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB33_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$1, %eax
	jmp	.LBB33_6
.LBB33_5:                               # %cond.false
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-20(%rbp), %eax
.LBB33_6:                               # %cond.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB33_7:                               # %if.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_8
.LBB33_8:                               # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_1
.LBB33_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1223093212, -44(%rbp)  # imm = 0x48E6EBDC
	jne	.LBB33_11
.LBB33_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_10
.Lfunc_end33:
	.size	dct_chroma_DC.24, .Lfunc_end33-dct_chroma_DC.24
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.25           # -- Begin function dct_chroma.25
	.p2align	4, 0x90
	.type	dct_chroma.25,@function
dct_chroma.25:                          # @dct_chroma.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1017784757, -380(%rbp) # imm = 0x3CAA29B5
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB34_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB34_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB34_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB34_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB34_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB34_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB34_11
.LBB34_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB34_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB34_10
.LBB34_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB34_10:                              # %cond.end
.LBB34_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB34_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB34_14
.LBB34_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB34_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB34_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB34_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB34_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
                                        #       Child Loop BB34_21 Depth 3
                                        #         Child Loop BB34_25 Depth 4
                                        #       Child Loop BB34_31 Depth 3
                                        #         Child Loop BB34_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -24(%rbp)
.LBB34_19:                              # %for.cond56
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_21 Depth 3
                                        #         Child Loop BB34_25 Depth 4
                                        #       Child Loop BB34_31 Depth 3
                                        #         Child Loop BB34_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$0, -12(%rbp)
.LBB34_21:                              # %for.cond60
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB34_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_23:                              # %land.end64
                                        #   in Loop: Header=BB34_21 Depth=3
	testb	$1, %al
	jne	.LBB34_24
	jmp	.LBB34_30
.LBB34_24:                              # %for.body66
                                        #   in Loop: Header=BB34_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB34_25:                              # %for.cond68
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        #       Parent Loop BB34_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB34_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB34_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB34_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_25
.LBB34_28:                              # %for.end
                                        #   in Loop: Header=BB34_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB34_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_21
.LBB34_30:                              # %for.end141
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$0, -16(%rbp)
.LBB34_31:                              # %for.cond142
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB34_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_33:                              # %land.end148
                                        #   in Loop: Header=BB34_31 Depth=3
	testb	$1, %al
	jne	.LBB34_34
	jmp	.LBB34_40
.LBB34_34:                              # %for.body150
                                        #   in Loop: Header=BB34_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB34_35:                              # %for.cond152
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        #       Parent Loop BB34_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB34_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB34_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_35
.LBB34_38:                              # %for.end189
                                        #   in Loop: Header=BB34_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB34_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_31
.LBB34_40:                              # %for.end230
                                        #   in Loop: Header=BB34_19 Depth=2
	jmp	.LBB34_41
.LBB34_41:                              # %for.inc231
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_19
.LBB34_42:                              # %for.end233
                                        #   in Loop: Header=BB34_17 Depth=1
	jmp	.LBB34_43
.LBB34_43:                              # %for.inc234
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_17
.LBB34_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB34_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB34_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB34_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB34_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB34_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_50
.LBB34_49:                              # %if.else
                                        #   in Loop: Header=BB34_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB34_50:                              # %if.end349
                                        #   in Loop: Header=BB34_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB34_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB34_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB34_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB34_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB34_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB34_54:                              # %if.end359
                                        #   in Loop: Header=BB34_46 Depth=1
	jmp	.LBB34_55
.LBB34_55:                              # %if.end360
                                        #   in Loop: Header=BB34_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB34_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB34_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	$1, %eax
	jmp	.LBB34_59
.LBB34_58:                              # %cond.false370
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	-132(%rbp), %eax
.LBB34_59:                              # %cond.end371
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB34_60:                              # %if.end384
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB34_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_46
.LBB34_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB34_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB34_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB34_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB34_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB34_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB34_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB34_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB34_68
.LBB34_67:                              # %if.else447
                                        #   in Loop: Header=BB34_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB34_68:                              # %if.end461
                                        #   in Loop: Header=BB34_63 Depth=1
	jmp	.LBB34_73
.LBB34_69:                              # %if.else462
                                        #   in Loop: Header=BB34_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB34_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB34_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB34_72
.LBB34_71:                              # %if.else479
                                        #   in Loop: Header=BB34_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB34_72:                              # %if.end493
                                        #   in Loop: Header=BB34_63 Depth=1
	jmp	.LBB34_73
.LBB34_73:                              # %if.end494
                                        #   in Loop: Header=BB34_63 Depth=1
	jmp	.LBB34_74
.LBB34_74:                              # %for.inc495
                                        #   in Loop: Header=BB34_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_63
.LBB34_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB34_213
.LBB34_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB34_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB34_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	$0, -16(%rbp)
.LBB34_80:                              # %for.cond523
                                        #   Parent Loop BB34_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_80
.LBB34_83:                              # %for.end541
                                        #   in Loop: Header=BB34_78 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc542
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_78
.LBB34_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB34_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	$0, -12(%rbp)
.LBB34_88:                              # %for.cond605
                                        #   Parent Loop BB34_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_88
.LBB34_91:                              # %for.end634
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_86
.LBB34_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB34_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB34_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB34_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB34_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB34_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_98
.LBB34_97:                              # %if.else700
                                        #   in Loop: Header=BB34_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB34_98:                              # %if.end723
                                        #   in Loop: Header=BB34_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB34_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB34_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	$1, %eax
	jmp	.LBB34_102
.LBB34_101:                             # %cond.false735
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	-132(%rbp), %eax
.LBB34_102:                             # %cond.end736
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB34_103:                             # %if.end748
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB34_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_94
.LBB34_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB34_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_108 Depth 2
                                        #     Child Loop BB34_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB34_106 Depth=1
	movl	$0, -12(%rbp)
.LBB34_108:                             # %for.cond823
                                        #   Parent Loop BB34_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB34_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB34_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_108
.LBB34_111:                             # %for.end835
                                        #   in Loop: Header=BB34_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_112:                             # %for.cond852
                                        #   Parent Loop BB34_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB34_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB34_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB34_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB34_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB34_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB34_117
.LBB34_116:                             # %if.else915
                                        #   in Loop: Header=BB34_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB34_117:                             # %if.end968
                                        #   in Loop: Header=BB34_112 Depth=2
	jmp	.LBB34_122
.LBB34_118:                             # %if.else969
                                        #   in Loop: Header=BB34_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB34_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB34_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB34_121
.LBB34_120:                             # %if.else1019
                                        #   in Loop: Header=BB34_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB34_121:                             # %if.end1066
                                        #   in Loop: Header=BB34_112 Depth=2
	jmp	.LBB34_122
.LBB34_122:                             # %if.end1067
                                        #   in Loop: Header=BB34_112 Depth=2
	jmp	.LBB34_123
.LBB34_123:                             # %for.inc1068
                                        #   in Loop: Header=BB34_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_112
.LBB34_124:                             # %for.end1070
                                        #   in Loop: Header=BB34_106 Depth=1
	jmp	.LBB34_125
.LBB34_125:                             # %for.inc1071
                                        #   in Loop: Header=BB34_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_106
.LBB34_126:                             # %for.end1073
	jmp	.LBB34_212
.LBB34_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB34_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB34_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB34_129 Depth=1
	movl	$0, -16(%rbp)
.LBB34_131:                             # %for.cond1083
                                        #   Parent Loop BB34_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB34_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB34_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_131
.LBB34_134:                             # %for.end1101
                                        #   in Loop: Header=BB34_129 Depth=1
	jmp	.LBB34_135
.LBB34_135:                             # %for.inc1102
                                        #   in Loop: Header=BB34_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_129
.LBB34_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB34_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB34_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_139:                             # %land.end1111
                                        #   in Loop: Header=BB34_137 Depth=1
	testb	$1, %al
	jne	.LBB34_140
	jmp	.LBB34_146
.LBB34_140:                             # %for.body1113
                                        #   in Loop: Header=BB34_137 Depth=1
	movl	$0, -16(%rbp)
.LBB34_141:                             # %for.cond1114
                                        #   Parent Loop BB34_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB34_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB34_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_141
.LBB34_144:                             # %for.end1143
                                        #   in Loop: Header=BB34_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB34_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_137
.LBB34_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB34_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB34_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_149:                             # %land.end1177
                                        #   in Loop: Header=BB34_147 Depth=1
	testb	$1, %al
	jne	.LBB34_150
	jmp	.LBB34_156
.LBB34_150:                             # %for.body1179
                                        #   in Loop: Header=BB34_147 Depth=1
	movl	$0, -12(%rbp)
.LBB34_151:                             # %for.cond1180
                                        #   Parent Loop BB34_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB34_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB34_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_151
.LBB34_154:                             # %for.end1209
                                        #   in Loop: Header=BB34_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB34_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_147
.LBB34_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB34_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB34_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB34_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB34_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB34_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB34_164
.LBB34_160:                             # %if.else1261
                                        #   in Loop: Header=BB34_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB34_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB34_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_163
.LBB34_162:                             # %if.else1287
                                        #   in Loop: Header=BB34_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB34_163:                             # %if.end1310
                                        #   in Loop: Header=BB34_157 Depth=1
	jmp	.LBB34_164
.LBB34_164:                             # %if.end1311
                                        #   in Loop: Header=BB34_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB34_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB34_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	$1, %eax
	jmp	.LBB34_168
.LBB34_167:                             # %cond.false1322
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	-132(%rbp), %eax
.LBB34_168:                             # %cond.end1323
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB34_169:                             # %if.end1335
                                        #   in Loop: Header=BB34_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB34_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB34_171:                             # %if.end1347
                                        #   in Loop: Header=BB34_157 Depth=1
	jmp	.LBB34_172
.LBB34_172:                             # %for.inc1348
                                        #   in Loop: Header=BB34_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_157
.LBB34_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB34_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_178 Depth 2
                                        #     Child Loop BB34_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB34_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_176:                             # %land.end1359
                                        #   in Loop: Header=BB34_174 Depth=1
	testb	$1, %al
	jne	.LBB34_177
	jmp	.LBB34_187
.LBB34_177:                             # %for.body1361
                                        #   in Loop: Header=BB34_174 Depth=1
	movl	$0, -16(%rbp)
.LBB34_178:                             # %for.cond1362
                                        #   Parent Loop BB34_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB34_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB34_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_178
.LBB34_181:                             # %for.end1374
                                        #   in Loop: Header=BB34_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB34_182:                             # %for.cond1391
                                        #   Parent Loop BB34_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB34_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB34_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_182
.LBB34_185:                             # %for.end1416
                                        #   in Loop: Header=BB34_174 Depth=1
	jmp	.LBB34_186
.LBB34_186:                             # %for.inc1417
                                        #   in Loop: Header=BB34_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_174
.LBB34_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB34_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_192 Depth 2
                                        #     Child Loop BB34_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB34_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_190:                             # %land.end1426
                                        #   in Loop: Header=BB34_188 Depth=1
	testb	$1, %al
	jne	.LBB34_191
	jmp	.LBB34_210
.LBB34_191:                             # %for.body1428
                                        #   in Loop: Header=BB34_188 Depth=1
	movl	$0, -12(%rbp)
.LBB34_192:                             # %for.cond1429
                                        #   Parent Loop BB34_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB34_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB34_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_192
.LBB34_195:                             # %for.end1441
                                        #   in Loop: Header=BB34_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_196:                             # %for.cond1458
                                        #   Parent Loop BB34_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB34_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB34_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB34_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB34_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB34_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB34_201
.LBB34_200:                             # %if.else1521
                                        #   in Loop: Header=BB34_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB34_201:                             # %if.end1574
                                        #   in Loop: Header=BB34_196 Depth=2
	jmp	.LBB34_206
.LBB34_202:                             # %if.else1575
                                        #   in Loop: Header=BB34_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB34_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB34_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB34_205
.LBB34_204:                             # %if.else1625
                                        #   in Loop: Header=BB34_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB34_205:                             # %if.end1672
                                        #   in Loop: Header=BB34_196 Depth=2
	jmp	.LBB34_206
.LBB34_206:                             # %if.end1673
                                        #   in Loop: Header=BB34_196 Depth=2
	jmp	.LBB34_207
.LBB34_207:                             # %for.inc1674
                                        #   in Loop: Header=BB34_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_196
.LBB34_208:                             # %for.end1676
                                        #   in Loop: Header=BB34_188 Depth=1
	jmp	.LBB34_209
.LBB34_209:                             # %for.inc1677
                                        #   in Loop: Header=BB34_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_188
.LBB34_210:                             # %for.end1679
	jmp	.LBB34_211
.LBB34_211:                             # %if.end1680
	jmp	.LBB34_212
.LBB34_212:                             # %if.end1681
	jmp	.LBB34_213
.LBB34_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB34_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_216 Depth 2
                                        #       Child Loop BB34_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB34_214 Depth=1
	movl	$0, -116(%rbp)
.LBB34_216:                             # %for.cond1689
                                        #   Parent Loop BB34_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB34_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB34_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB34_218:                             # %for.cond1722
                                        #   Parent Loop BB34_214 Depth=1
                                        #     Parent Loop BB34_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB34_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_223
.LBB34_222:                             # %if.then1731
                                        #   in Loop: Header=BB34_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_224
.LBB34_223:                             # %if.else1740
                                        #   in Loop: Header=BB34_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_224:                             # %if.end1749
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB34_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB34_230
.LBB34_226:                             # %if.else1761
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB34_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_229
.LBB34_228:                             # %if.else1792
                                        #   in Loop: Header=BB34_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB34_229:                             # %if.end1820
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_230
.LBB34_230:                             # %if.end1821
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB34_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB34_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB34_234
.LBB34_233:                             # %if.then1839
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB34_235
.LBB34_234:                             # %if.else1841
                                        #   in Loop: Header=BB34_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB34_235:                             # %if.end1848
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB34_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB34_247
.LBB34_237:                             # %if.else1872
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB34_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB34_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB34_241
.LBB34_240:                             # %if.else1893
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB34_241:                             # %if.end1908
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_246
.LBB34_242:                             # %if.else1909
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB34_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB34_245
.LBB34_244:                             # %if.else1924
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB34_245:                             # %if.end1936
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_246
.LBB34_246:                             # %if.end1937
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_247
.LBB34_247:                             # %if.end1938
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_248
.LBB34_248:                             # %if.end1939
                                        #   in Loop: Header=BB34_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB34_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB34_250:                             # %if.end1949
                                        #   in Loop: Header=BB34_218 Depth=3
	jmp	.LBB34_251
.LBB34_251:                             # %for.inc1950
                                        #   in Loop: Header=BB34_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_218
.LBB34_252:                             # %for.end1952
                                        #   in Loop: Header=BB34_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB34_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB34_216
.LBB34_254:                             # %for.end1957
                                        #   in Loop: Header=BB34_214 Depth=1
	jmp	.LBB34_255
.LBB34_255:                             # %for.inc1958
                                        #   in Loop: Header=BB34_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB34_214
.LBB34_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB34_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB34_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB34_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_261 Depth 2
                                        #       Child Loop BB34_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB34_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB34_259 Depth=1
	movl	$0, -116(%rbp)
.LBB34_261:                             # %for.cond1972
                                        #   Parent Loop BB34_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB34_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB34_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB34_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB34_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB34_264:                             # %if.end2016
                                        #   in Loop: Header=BB34_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB34_265:                             # %for.cond2018
                                        #   Parent Loop BB34_259 Depth=1
                                        #     Parent Loop BB34_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB34_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB34_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB34_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB34_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_270
.LBB34_269:                             # %if.then2030
                                        #   in Loop: Header=BB34_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_271
.LBB34_270:                             # %if.else2039
                                        #   in Loop: Header=BB34_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_271:                             # %if.end2048
                                        #   in Loop: Header=BB34_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB34_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB34_265
.LBB34_273:                             # %for.end2060
                                        #   in Loop: Header=BB34_261 Depth=2
	jmp	.LBB34_274
.LBB34_274:                             # %for.inc2061
                                        #   in Loop: Header=BB34_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB34_261
.LBB34_275:                             # %for.end2063
                                        #   in Loop: Header=BB34_259 Depth=1
	jmp	.LBB34_276
.LBB34_276:                             # %for.inc2064
                                        #   in Loop: Header=BB34_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB34_259
.LBB34_277:                             # %for.end2066
	jmp	.LBB34_278
.LBB34_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB34_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB34_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB34_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_285 Depth 2
                                        #       Child Loop BB34_287 Depth 3
                                        #         Child Loop BB34_289 Depth 4
                                        #         Child Loop BB34_293 Depth 4
                                        #       Child Loop BB34_299 Depth 3
                                        #         Child Loop BB34_303 Depth 4
                                        #         Child Loop BB34_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB34_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB34_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_283:                             # %land.end2079
                                        #   in Loop: Header=BB34_281 Depth=1
	testb	$1, %al
	jne	.LBB34_284
	jmp	.LBB34_340
.LBB34_284:                             # %for.body2081
                                        #   in Loop: Header=BB34_281 Depth=1
	movl	$0, -24(%rbp)
.LBB34_285:                             # %for.cond2082
                                        #   Parent Loop BB34_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_287 Depth 3
                                        #         Child Loop BB34_289 Depth 4
                                        #         Child Loop BB34_293 Depth 4
                                        #       Child Loop BB34_299 Depth 3
                                        #         Child Loop BB34_303 Depth 4
                                        #         Child Loop BB34_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB34_285 Depth=2
	movl	$0, -12(%rbp)
.LBB34_287:                             # %for.cond2087
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_289 Depth 4
                                        #         Child Loop BB34_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB34_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB34_287 Depth=3
	movl	$0, -16(%rbp)
.LBB34_289:                             # %for.cond2091
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        #       Parent Loop BB34_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB34_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB34_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB34_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_289
.LBB34_292:                             # %for.end2106
                                        #   in Loop: Header=BB34_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB34_293:                             # %for.cond2125
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        #       Parent Loop BB34_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB34_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB34_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB34_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_293
.LBB34_296:                             # %for.end2156
                                        #   in Loop: Header=BB34_287 Depth=3
	jmp	.LBB34_297
.LBB34_297:                             # %for.inc2157
                                        #   in Loop: Header=BB34_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_287
.LBB34_298:                             # %for.end2159
                                        #   in Loop: Header=BB34_285 Depth=2
	movl	$0, -16(%rbp)
.LBB34_299:                             # %for.cond2160
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_303 Depth 4
                                        #         Child Loop BB34_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB34_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_301:                             # %land.end2166
                                        #   in Loop: Header=BB34_299 Depth=3
	testb	$1, %al
	jne	.LBB34_302
	jmp	.LBB34_336
.LBB34_302:                             # %for.body2168
                                        #   in Loop: Header=BB34_299 Depth=3
	movl	$0, -12(%rbp)
.LBB34_303:                             # %for.cond2169
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        #       Parent Loop BB34_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB34_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB34_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB34_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_303
.LBB34_306:                             # %for.end2184
                                        #   in Loop: Header=BB34_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_307:                             # %for.cond2203
                                        #   Parent Loop BB34_281 Depth=1
                                        #     Parent Loop BB34_285 Depth=2
                                        #       Parent Loop BB34_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB34_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB34_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB34_312
.LBB34_311:                             # %cond.false2231
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB34_312:                             # %cond.end2250
                                        #   in Loop: Header=BB34_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB34_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB34_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB34_318
.LBB34_314:                             # %cond.false2257
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB34_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB34_317
.LBB34_316:                             # %cond.false2279
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB34_317:                             # %cond.end2298
                                        #   in Loop: Header=BB34_307 Depth=4
.LBB34_318:                             # %cond.end2300
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB34_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB34_321
.LBB34_320:                             # %cond.false2333
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB34_321:                             # %cond.end2352
                                        #   in Loop: Header=BB34_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB34_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB34_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB34_327
.LBB34_323:                             # %cond.false2359
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB34_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB34_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB34_326
.LBB34_325:                             # %cond.false2381
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB34_326:                             # %cond.end2400
                                        #   in Loop: Header=BB34_307 Depth=4
.LBB34_327:                             # %cond.end2402
                                        #   in Loop: Header=BB34_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_332
.LBB34_328:                             # %if.else2412
                                        #   in Loop: Header=BB34_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB34_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_331
.LBB34_330:                             # %if.else2439
                                        #   in Loop: Header=BB34_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB34_331:                             # %if.end2468
                                        #   in Loop: Header=BB34_307 Depth=4
	jmp	.LBB34_332
.LBB34_332:                             # %if.end2469
                                        #   in Loop: Header=BB34_307 Depth=4
	jmp	.LBB34_333
.LBB34_333:                             # %for.inc2470
                                        #   in Loop: Header=BB34_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_307
.LBB34_334:                             # %for.end2472
                                        #   in Loop: Header=BB34_299 Depth=3
	jmp	.LBB34_335
.LBB34_335:                             # %for.inc2473
                                        #   in Loop: Header=BB34_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_299
.LBB34_336:                             # %for.end2475
                                        #   in Loop: Header=BB34_285 Depth=2
	jmp	.LBB34_337
.LBB34_337:                             # %for.inc2476
                                        #   in Loop: Header=BB34_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_285
.LBB34_338:                             # %for.end2478
                                        #   in Loop: Header=BB34_281 Depth=1
	jmp	.LBB34_339
.LBB34_339:                             # %for.inc2479
                                        #   in Loop: Header=BB34_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_281
.LBB34_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB34_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB34_342 Depth=1
	movl	$0, -16(%rbp)
.LBB34_344:                             # %for.cond2490
                                        #   Parent Loop BB34_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB34_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB34_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB34_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB34_348
.LBB34_347:                             # %if.else2518
                                        #   in Loop: Header=BB34_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB34_348:                             # %if.end2536
                                        #   in Loop: Header=BB34_344 Depth=2
	jmp	.LBB34_349
.LBB34_349:                             # %for.inc2537
                                        #   in Loop: Header=BB34_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_344
.LBB34_350:                             # %for.end2539
                                        #   in Loop: Header=BB34_342 Depth=1
	jmp	.LBB34_351
.LBB34_351:                             # %for.inc2540
                                        #   in Loop: Header=BB34_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_342
.LBB34_352:                             # %for.end2542
	jmp	.LBB34_353
.LBB34_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1017784757, -380(%rbp) # imm = 0x3CAA29B5
	jne	.LBB34_355
.LBB34_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_354
.Lfunc_end34:
	.size	dct_chroma.25, .Lfunc_end34-dct_chroma.25
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.26         # -- Begin function copyblock_sp.26
	.p2align	4, 0x90
	.type	copyblock_sp.26,@function
copyblock_sp.26:                        # @copyblock_sp.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1669022924, -88(%rbp)  # imm = 0x637B44CC
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -84(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond4
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc17
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB35_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	$0, -8(%rbp)
.LBB35_11:                              # %for.cond24
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_11
.LBB35_14:                              # %for.end53
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_9
.LBB35_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB35_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -4(%rbp)
.LBB35_19:                              # %for.cond86
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_19
.LBB35_22:                              # %for.end115
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_17
.LBB35_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB35_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	$0, -8(%rbp)
.LBB35_27:                              # %for.cond149
                                        #   Parent Loop BB35_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_27
.LBB35_30:                              # %for.end184
                                        #   in Loop: Header=BB35_25 Depth=1
	jmp	.LBB35_31
.LBB35_31:                              # %for.inc185
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_25
.LBB35_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB35_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_35 Depth 2
                                        #     Child Loop BB35_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	$0, -8(%rbp)
.LBB35_35:                              # %for.cond192
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB35_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB35_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_35
.LBB35_38:                              # %for.end205
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB35_39:                              # %for.cond224
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_39
.LBB35_42:                              # %for.end251
                                        #   in Loop: Header=BB35_33 Depth=1
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc252
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_33
.LBB35_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB35_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_47 Depth 2
                                        #     Child Loop BB35_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	$0, -4(%rbp)
.LBB35_47:                              # %for.cond259
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_47
.LBB35_50:                              # %for.end272
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB35_51:                              # %for.cond291
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_55
.LBB35_54:                              # %cond.false
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_55:                              # %cond.end
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_61
.LBB35_57:                              # %cond.false316
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_60
.LBB35_59:                              # %cond.false327
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_60:                              # %cond.end335
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_61:                              # %cond.end337
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_64
.LBB35_63:                              # %cond.false355
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_64:                              # %cond.end363
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_70
.LBB35_66:                              # %cond.false369
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_69
.LBB35_68:                              # %cond.false380
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_69:                              # %cond.end388
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_70:                              # %cond.end390
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB35_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_51
.LBB35_72:                              # %for.end399
                                        #   in Loop: Header=BB35_45 Depth=1
	jmp	.LBB35_73
.LBB35_73:                              # %for.inc400
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_45
.LBB35_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	$0, -8(%rbp)
.LBB35_77:                              # %for.cond407
                                        #   Parent Loop BB35_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB35_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB35_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_77
.LBB35_80:                              # %for.end427
                                        #   in Loop: Header=BB35_75 Depth=1
	jmp	.LBB35_81
.LBB35_81:                              # %for.inc428
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_82:                              # %for.end430
	cmpl	$1669022924, -88(%rbp)  # imm = 0x637B44CC
	jne	.LBB35_84
.LBB35_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_83
.Lfunc_end35:
	.size	copyblock_sp.26, .Lfunc_end35-copyblock_sp.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.27
.LCPI36_0:
	.quad	4616189618054758400     # double 4
.LCPI36_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI36_2:
	.quad	4611686018427387904     # double 2
.LCPI36_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.27
	.p2align	4, 0x90
	.type	dct_chroma_sp.27,@function
dct_chroma_sp.27:                       # @dct_chroma_sp.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI36_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1714954661, -268(%rbp) # imm = 0x663821A5
	movl	%edi, -124(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI36_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB36_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB36_6
.LBB36_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB36_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB36_5
.LBB36_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB36_5:                               # %cond.end
.LBB36_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB36_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB36_12
.LBB36_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB36_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB36_11
.LBB36_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB36_11:                              # %cond.end41
.LBB36_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB36_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB36_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB36_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB36_21
.LBB36_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB36_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB36_24
.LBB36_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB36_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB36_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB36_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	$0, -16(%rbp)
.LBB36_27:                              # %for.cond97
                                        #   Parent Loop BB36_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB36_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB36_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_27
.LBB36_30:                              # %for.end
                                        #   in Loop: Header=BB36_25 Depth=1
	jmp	.LBB36_31
.LBB36_31:                              # %for.inc121
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_25
.LBB36_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB36_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_35 Depth 2
                                        #       Child Loop BB36_37 Depth 3
                                        #         Child Loop BB36_39 Depth 4
                                        #       Child Loop BB36_45 Depth 3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	$0, -24(%rbp)
.LBB36_35:                              # %for.cond128
                                        #   Parent Loop BB36_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_37 Depth 3
                                        #         Child Loop BB36_39 Depth 4
                                        #       Child Loop BB36_45 Depth 3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	$0, -12(%rbp)
.LBB36_37:                              # %for.cond132
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB36_39:                              # %for.cond137
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        #       Parent Loop BB36_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB36_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB36_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_39
.LBB36_42:                              # %for.end174
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB36_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_37
.LBB36_44:                              # %for.end214
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	$0, -16(%rbp)
.LBB36_45:                              # %for.cond215
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB36_47:                              # %for.cond220
                                        #   Parent Loop BB36_33 Depth=1
                                        #     Parent Loop BB36_35 Depth=2
                                        #       Parent Loop BB36_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB36_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB36_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_47
.LBB36_50:                              # %for.end257
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB36_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_45
.LBB36_52:                              # %for.end298
                                        #   in Loop: Header=BB36_35 Depth=2
	jmp	.LBB36_53
.LBB36_53:                              # %for.inc299
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_35
.LBB36_54:                              # %for.end301
                                        #   in Loop: Header=BB36_33 Depth=1
	jmp	.LBB36_55
.LBB36_55:                              # %for.inc302
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_33
.LBB36_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB36_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_59 Depth 2
                                        #       Child Loop BB36_61 Depth 3
                                        #         Child Loop BB36_63 Depth 4
                                        #       Child Loop BB36_69 Depth 3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB36_57 Depth=1
	movl	$0, -24(%rbp)
.LBB36_59:                              # %for.cond309
                                        #   Parent Loop BB36_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_61 Depth 3
                                        #         Child Loop BB36_63 Depth 4
                                        #       Child Loop BB36_69 Depth 3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	$0, -12(%rbp)
.LBB36_61:                              # %for.cond313
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB36_63:                              # %for.cond318
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        #       Parent Loop BB36_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB36_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB36_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_63
.LBB36_66:                              # %for.end351
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB36_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_61
.LBB36_68:                              # %for.end387
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	$0, -16(%rbp)
.LBB36_69:                              # %for.cond388
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB36_71:                              # %for.cond393
                                        #   Parent Loop BB36_57 Depth=1
                                        #     Parent Loop BB36_59 Depth=2
                                        #       Parent Loop BB36_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB36_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB36_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_71
.LBB36_74:                              # %for.end426
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB36_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_69
.LBB36_76:                              # %for.end463
                                        #   in Loop: Header=BB36_59 Depth=2
	jmp	.LBB36_77
.LBB36_77:                              # %for.inc464
                                        #   in Loop: Header=BB36_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_59
.LBB36_78:                              # %for.end466
                                        #   in Loop: Header=BB36_57 Depth=1
	jmp	.LBB36_79
.LBB36_79:                              # %for.inc467
                                        #   in Loop: Header=BB36_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_57
.LBB36_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB36_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB36_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB36_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB36_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB36_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB36_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB36_90
	jp	.LBB36_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB36_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB36_89
.LBB36_88:                              # %cond.false691
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-44(%rbp), %eax
.LBB36_89:                              # %cond.end692
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB36_94
.LBB36_90:                              # %if.else
                                        #   in Loop: Header=BB36_81 Depth=1
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_93
.LBB36_92:                              # %if.else697
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB36_93:                              # %if.end
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_94
.LBB36_94:                              # %if.end698
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB36_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB36_97
.LBB36_96:                              # %cond.false702
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-100(%rbp), %eax
.LBB36_97:                              # %cond.end703
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB36_108
.LBB36_98:                              # %if.else705
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB36_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB36_107
.LBB36_100:                             # %if.else709
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB36_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB36_103
.LBB36_102:                             # %cond.false713
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-44(%rbp), %eax
.LBB36_103:                             # %cond.end714
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB36_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB36_106
.LBB36_105:                             # %cond.false719
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-100(%rbp), %eax
.LBB36_106:                             # %cond.end720
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB36_107:                             # %if.end722
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_108
.LBB36_108:                             # %if.end723
                                        #   in Loop: Header=BB36_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB36_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB36_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB36_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB36_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB36_112:                             # %if.end734
                                        #   in Loop: Header=BB36_81 Depth=1
	jmp	.LBB36_113
.LBB36_113:                             # %if.end735
                                        #   in Loop: Header=BB36_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB36_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB36_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	$1, %eax
	jmp	.LBB36_117
.LBB36_116:                             # %cond.false745
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-204(%rbp), %eax
.LBB36_117:                             # %cond.end746
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB36_118:                             # %if.end763
                                        #   in Loop: Header=BB36_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB36_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_81
.LBB36_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB36_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_123 Depth 2
                                        #       Child Loop BB36_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB36_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB36_121 Depth=1
	movl	$0, -24(%rbp)
.LBB36_123:                             # %for.cond839
                                        #   Parent Loop BB36_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB36_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB36_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB36_125:                             # %for.cond860
                                        #   Parent Loop BB36_121 Depth=1
                                        #     Parent Loop BB36_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB36_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB36_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB36_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB36_130
.LBB36_129:                             # %if.then867
                                        #   in Loop: Header=BB36_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_131
.LBB36_130:                             # %if.else876
                                        #   in Loop: Header=BB36_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB36_131:                             # %if.end885
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB36_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB36_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB36_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB36_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB36_139
	jp	.LBB36_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB36_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB36_138
.LBB36_137:                             # %cond.false1047
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-44(%rbp), %eax
.LBB36_138:                             # %cond.end1048
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB36_143
.LBB36_139:                             # %if.else1050
                                        #   in Loop: Header=BB36_125 Depth=3
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_142
.LBB36_141:                             # %if.else1054
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB36_142:                             # %if.end1055
                                        #   in Loop: Header=BB36_125 Depth=3
	jmp	.LBB36_143
.LBB36_143:                             # %if.end1056
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB36_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB36_146
.LBB36_145:                             # %cond.false1060
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-100(%rbp), %eax
.LBB36_146:                             # %cond.end1061
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB36_157
.LBB36_147:                             # %if.else1063
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB36_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB36_156
.LBB36_149:                             # %if.else1067
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB36_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB36_152
.LBB36_151:                             # %cond.false1071
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-44(%rbp), %eax
.LBB36_152:                             # %cond.end1072
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB36_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB36_155
.LBB36_154:                             # %cond.false1077
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-100(%rbp), %eax
.LBB36_155:                             # %cond.end1078
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB36_156:                             # %if.end1080
                                        #   in Loop: Header=BB36_125 Depth=3
	jmp	.LBB36_157
.LBB36_157:                             # %if.end1081
                                        #   in Loop: Header=BB36_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB36_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB36_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB36_161
.LBB36_160:                             # %if.else1099
                                        #   in Loop: Header=BB36_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB36_161:                             # %if.end1106
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB36_162:                             # %if.end1128
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB36_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_125
.LBB36_164:                             # %for.end1164
                                        #   in Loop: Header=BB36_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB36_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_123
.LBB36_166:                             # %for.end1169
                                        #   in Loop: Header=BB36_121 Depth=1
	jmp	.LBB36_167
.LBB36_167:                             # %for.inc1170
                                        #   in Loop: Header=BB36_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_121
.LBB36_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB36_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB36_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB36_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_173 Depth 2
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
                                        #       Child Loop BB36_187 Depth 3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB36_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	$0, -24(%rbp)
.LBB36_173:                             # %for.cond1181
                                        #   Parent Loop BB36_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_175 Depth 3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
                                        #       Child Loop BB36_187 Depth 3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB36_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	$0, -12(%rbp)
.LBB36_175:                             # %for.cond1185
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_177 Depth 4
                                        #         Child Loop BB36_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	$0, -16(%rbp)
.LBB36_177:                             # %for.cond1189
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB36_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB36_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_177
.LBB36_180:                             # %for.end1204
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB36_181:                             # %for.cond1223
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB36_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB36_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_181
.LBB36_184:                             # %for.end1254
                                        #   in Loop: Header=BB36_175 Depth=3
	jmp	.LBB36_185
.LBB36_185:                             # %for.inc1255
                                        #   in Loop: Header=BB36_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_175
.LBB36_186:                             # %for.end1257
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	$0, -16(%rbp)
.LBB36_187:                             # %for.cond1258
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_189 Depth 4
                                        #         Child Loop BB36_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB36_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	$0, -12(%rbp)
.LBB36_189:                             # %for.cond1262
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB36_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB36_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB36_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_189
.LBB36_192:                             # %for.end1277
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB36_193:                             # %for.cond1296
                                        #   Parent Loop BB36_171 Depth=1
                                        #     Parent Loop BB36_173 Depth=2
                                        #       Parent Loop BB36_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB36_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_197
.LBB36_196:                             # %cond.false1311
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_197:                             # %cond.end1319
                                        #   in Loop: Header=BB36_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB36_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_203
.LBB36_199:                             # %cond.false1325
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_202
.LBB36_201:                             # %cond.false1336
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_202:                             # %cond.end1344
                                        #   in Loop: Header=BB36_193 Depth=4
.LBB36_203:                             # %cond.end1346
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB36_206
.LBB36_205:                             # %cond.false1366
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_206:                             # %cond.end1374
                                        #   in Loop: Header=BB36_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB36_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB36_212
.LBB36_208:                             # %cond.false1380
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB36_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB36_211
.LBB36_210:                             # %cond.false1391
                                        #   in Loop: Header=BB36_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_211:                             # %cond.end1399
                                        #   in Loop: Header=BB36_193 Depth=4
.LBB36_212:                             # %cond.end1401
                                        #   in Loop: Header=BB36_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB36_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_193
.LBB36_214:                             # %for.end1412
                                        #   in Loop: Header=BB36_187 Depth=3
	jmp	.LBB36_215
.LBB36_215:                             # %for.inc1413
                                        #   in Loop: Header=BB36_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_187
.LBB36_216:                             # %for.end1415
                                        #   in Loop: Header=BB36_173 Depth=2
	jmp	.LBB36_217
.LBB36_217:                             # %for.inc1416
                                        #   in Loop: Header=BB36_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_173
.LBB36_218:                             # %for.end1418
                                        #   in Loop: Header=BB36_171 Depth=1
	jmp	.LBB36_219
.LBB36_219:                             # %for.inc1419
                                        #   in Loop: Header=BB36_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_171
.LBB36_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB36_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB36_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB36_221 Depth=1
	movl	$0, -16(%rbp)
.LBB36_223:                             # %for.cond1426
                                        #   Parent Loop BB36_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB36_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB36_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB36_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_223
.LBB36_226:                             # %for.end1446
                                        #   in Loop: Header=BB36_221 Depth=1
	jmp	.LBB36_227
.LBB36_227:                             # %for.inc1447
                                        #   in Loop: Header=BB36_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_221
.LBB36_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1714954661, -268(%rbp) # imm = 0x663821A5
	jne	.LBB36_230
.LBB36_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_229
.Lfunc_end36:
	.size	dct_chroma_sp.27, .Lfunc_end36-dct_chroma_sp.27
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.28        # -- Begin function dct_chroma4x4.28
	.p2align	4, 0x90
	.type	dct_chroma4x4.28,@function
dct_chroma4x4.28:                       # @dct_chroma4x4.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$911118471, -148(%rbp)  # imm = 0x364E9087
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB37_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB37_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB37_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB37_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB37_8
.LBB37_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB37_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB37_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	$0, -16(%rbp)
.LBB37_12:                              # %for.cond31
                                        #   Parent Loop BB37_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_12
.LBB37_15:                              # %for.end
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_10
.LBB37_17:                              # %for.end92
	jmp	.LBB37_18
.LBB37_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB37_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB37_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	$0, -12(%rbp)
.LBB37_22:                              # %for.cond99
                                        #   Parent Loop BB37_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_22
.LBB37_25:                              # %for.end132
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_20
.LBB37_27:                              # %for.end165
	jmp	.LBB37_28
.LBB37_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_34
.LBB37_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB37_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_33
.LBB37_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_33:                              # %if.end213
	jmp	.LBB37_34
.LBB37_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB37_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_46
.LBB37_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB37_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB37_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_40
.LBB37_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_40:                              # %if.end290
	jmp	.LBB37_45
.LBB37_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB37_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_44
.LBB37_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_44:                              # %if.end328
	jmp	.LBB37_45
.LBB37_45:                              # %if.end329
	jmp	.LBB37_46
.LBB37_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB37_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB37_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB37_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_54
.LBB37_50:                              # %if.else352
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB37_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_53
.LBB37_52:                              # %if.else381
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_53:                              # %if.end407
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_54
.LBB37_54:                              # %if.end408
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB37_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB37_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB37_58
.LBB37_57:                              # %if.then415
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	$1, -132(%rbp)
.LBB37_58:                              # %if.end416
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB37_70
.LBB37_60:                              # %if.else436
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB37_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB37_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB37_64
.LBB37_63:                              # %if.else457
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB37_64:                              # %if.end472
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_65:                              # %if.else473
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB37_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB37_68
.LBB37_67:                              # %if.else488
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
.LBB37_68:                              # %if.end500
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_69:                              # %if.end501
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_70
.LBB37_70:                              # %if.end502
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %if.end503
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB37_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB37_73:                              # %if.end511
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_74
.LBB37_74:                              # %for.inc512
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB37_47
.LBB37_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB37_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_79 Depth 2
                                        #     Child Loop BB37_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	$0, -16(%rbp)
.LBB37_79:                              # %for.cond523
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB37_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB37_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_79
.LBB37_82:                              # %for.end536
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB37_83:                              # %for.cond555
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_83
.LBB37_86:                              # %for.end582
                                        #   in Loop: Header=BB37_77 Depth=1
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc583
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_77
.LBB37_88:                              # %for.end585
	jmp	.LBB37_89
.LBB37_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB37_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB37_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
                                        #     Child Loop BB37_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -12(%rbp)
.LBB37_93:                              # %for.cond593
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_93
.LBB37_96:                              # %for.end606
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB37_97:                              # %for.cond625
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_97
.LBB37_100:                             # %for.end656
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_101
.LBB37_101:                             # %for.inc657
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_91
.LBB37_102:                             # %for.end659
	jmp	.LBB37_103
.LBB37_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$911118471, -148(%rbp)  # imm = 0x364E9087
	jne	.LBB37_105
.LBB37_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_104
.Lfunc_end37:
	.size	dct_chroma4x4.28, .Lfunc_end37-dct_chroma4x4.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.29
.LCPI38_0:
	.quad	4616189618054758400     # double 4
.LCPI38_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI38_2:
	.quad	4611686018427387904     # double 2
.LCPI38_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.29
	.p2align	4, 0x90
	.type	dct_luma_sp.29,@function
dct_luma_sp.29:                         # @dct_luma_sp.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI38_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI38_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1351280186, -216(%rbp) # imm = 0x508AE63A
	movl	%edi, -136(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-136(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -192(%rbp)
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI38_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI38_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -124(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -140(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	$0, -12(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -16(%rbp)
.LBB38_3:                               # %for.cond38
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB38_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_3
.LBB38_6:                               # %for.end
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_7
.LBB38_7:                               # %for.inc66
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_1
.LBB38_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB38_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB38_9 Depth=1
	movl	$0, -16(%rbp)
.LBB38_11:                              # %for.cond73
                                        #   Parent Loop BB38_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB38_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB38_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_11
.LBB38_14:                              # %for.end106
                                        #   in Loop: Header=BB38_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB38_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_9
.LBB38_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB38_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	$0, -12(%rbp)
.LBB38_19:                              # %for.cond144
                                        #   Parent Loop BB38_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_19
.LBB38_22:                              # %for.end177
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_17
.LBB38_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB38_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB38_25 Depth=1
	movl	$0, -16(%rbp)
.LBB38_27:                              # %for.cond215
                                        #   Parent Loop BB38_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_27
.LBB38_30:                              # %for.end244
                                        #   in Loop: Header=BB38_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB38_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_25
.LBB38_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB38_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB38_33 Depth=1
	movl	$0, -12(%rbp)
.LBB38_35:                              # %for.cond278
                                        #   Parent Loop BB38_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB38_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB38_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_35
.LBB38_38:                              # %for.end307
                                        #   in Loop: Header=BB38_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB38_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_33
.LBB38_40:                              # %for.end336
	movl	$0, -184(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -68(%rbp)
.LBB38_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB38_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB38_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB38_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB38_46
.LBB38_45:                              # %if.then
                                        #   in Loop: Header=BB38_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_47
.LBB38_46:                              # %if.else
                                        #   in Loop: Header=BB38_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB38_47:                              # %if.end
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB38_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB38_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB38_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB38_55
	jp	.LBB38_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB38_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB38_54
.LBB38_53:                              # %cond.false
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-56(%rbp), %eax
.LBB38_54:                              # %cond.end
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB38_59
.LBB38_55:                              # %if.else500
                                        #   in Loop: Header=BB38_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB38_58
.LBB38_57:                              # %if.else504
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB38_58:                              # %if.end505
                                        #   in Loop: Header=BB38_41 Depth=1
	jmp	.LBB38_59
.LBB38_59:                              # %if.end506
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB38_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB38_62
.LBB38_61:                              # %cond.false510
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-120(%rbp), %eax
.LBB38_62:                              # %cond.end511
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB38_73
.LBB38_63:                              # %if.else513
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB38_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB38_72
.LBB38_65:                              # %if.else517
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB38_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB38_68
.LBB38_67:                              # %cond.false521
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-56(%rbp), %eax
.LBB38_68:                              # %cond.end522
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB38_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB38_71
.LBB38_70:                              # %cond.false527
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-120(%rbp), %eax
.LBB38_71:                              # %cond.end528
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB38_72:                              # %if.end530
                                        #   in Loop: Header=BB38_41 Depth=1
	jmp	.LBB38_73
.LBB38_73:                              # %if.end531
                                        #   in Loop: Header=BB38_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB38_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	$1, -184(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB38_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB38_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB38_77
.LBB38_76:                              # %if.else539
                                        #   in Loop: Header=BB38_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB38_77:                              # %if.end546
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB38_78:                              # %if.end568
                                        #   in Loop: Header=BB38_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB38_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB38_41
.LBB38_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB38_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_83 Depth 2
                                        #     Child Loop BB38_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB38_81 Depth=1
	movl	$0, -16(%rbp)
.LBB38_83:                              # %for.cond607
                                        #   Parent Loop BB38_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB38_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB38_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_83
.LBB38_86:                              # %for.end620
                                        #   in Loop: Header=BB38_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB38_87:                              # %for.cond639
                                        #   Parent Loop BB38_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB38_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB38_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_87
.LBB38_90:                              # %for.end666
                                        #   in Loop: Header=BB38_81 Depth=1
	jmp	.LBB38_91
.LBB38_91:                              # %for.inc667
                                        #   in Loop: Header=BB38_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_81
.LBB38_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB38_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_95 Depth 2
                                        #     Child Loop BB38_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB38_93 Depth=1
	movl	$0, -12(%rbp)
.LBB38_95:                              # %for.cond674
                                        #   Parent Loop BB38_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB38_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB38_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_95
.LBB38_98:                              # %for.end687
                                        #   in Loop: Header=BB38_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_99:                              # %for.cond706
                                        #   Parent Loop BB38_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB38_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB38_103
.LBB38_102:                             # %cond.false721
                                        #   in Loop: Header=BB38_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB38_103:                             # %cond.end729
                                        #   in Loop: Header=BB38_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB38_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB38_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_109
.LBB38_105:                             # %cond.false735
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB38_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_108
.LBB38_107:                             # %cond.false746
                                        #   in Loop: Header=BB38_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB38_108:                             # %cond.end754
                                        #   in Loop: Header=BB38_99 Depth=2
.LBB38_109:                             # %cond.end756
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB38_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB38_112
.LBB38_111:                             # %cond.false774
                                        #   in Loop: Header=BB38_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB38_112:                             # %cond.end782
                                        #   in Loop: Header=BB38_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB38_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB38_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_118
.LBB38_114:                             # %cond.false788
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB38_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB38_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB38_117
.LBB38_116:                             # %cond.false799
                                        #   in Loop: Header=BB38_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB38_117:                             # %cond.end807
                                        #   in Loop: Header=BB38_99 Depth=2
.LBB38_118:                             # %cond.end809
                                        #   in Loop: Header=BB38_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB38_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_99
.LBB38_120:                             # %for.end818
                                        #   in Loop: Header=BB38_93 Depth=1
	jmp	.LBB38_121
.LBB38_121:                             # %for.inc819
                                        #   in Loop: Header=BB38_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_93
.LBB38_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB38_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB38_123 Depth=1
	movl	$0, -16(%rbp)
.LBB38_125:                             # %for.cond826
                                        #   Parent Loop BB38_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB38_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB38_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_125
.LBB38_128:                             # %for.end846
                                        #   in Loop: Header=BB38_123 Depth=1
	jmp	.LBB38_129
.LBB38_129:                             # %for.inc847
                                        #   in Loop: Header=BB38_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_123
.LBB38_130:                             # %for.end849
	movl	-184(%rbp), %ebx
	cmpl	$1351280186, -216(%rbp) # imm = 0x508AE63A
	jne	.LBB38_132
.LBB38_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_131
.Lfunc_end38:
	.size	dct_luma_sp.29, .Lfunc_end38-dct_luma_sp.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.30
.LCPI39_0:
	.quad	4616189618054758400     # double 4
.LCPI39_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI39_2:
	.quad	4611686018427387904     # double 2
.LCPI39_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.30
	.p2align	4, 0x90
	.type	dct_luma_sp.30,@function
dct_luma_sp.30:                         # @dct_luma_sp.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI39_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$206029371, -212(%rbp)  # imm = 0xC47C23B
	movl	%edi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI39_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -140(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-196(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	$0, -12(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -16(%rbp)
.LBB39_3:                               # %for.cond38
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_3
.LBB39_6:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_7
.LBB39_7:                               # %for.inc66
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_1
.LBB39_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB39_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	$0, -16(%rbp)
.LBB39_11:                              # %for.cond73
                                        #   Parent Loop BB39_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB39_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB39_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_11
.LBB39_14:                              # %for.end106
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_9
.LBB39_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB39_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	$0, -12(%rbp)
.LBB39_19:                              # %for.cond144
                                        #   Parent Loop BB39_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_19
.LBB39_22:                              # %for.end177
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_17
.LBB39_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB39_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -16(%rbp)
.LBB39_27:                              # %for.cond215
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_27
.LBB39_30:                              # %for.end244
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_25
.LBB39_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB39_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	$0, -12(%rbp)
.LBB39_35:                              # %for.cond278
                                        #   Parent Loop BB39_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB39_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB39_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_35
.LBB39_38:                              # %for.end307
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_33
.LBB39_40:                              # %for.end336
	movl	$0, -200(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -68(%rbp)
.LBB39_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB39_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB39_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB39_46
.LBB39_45:                              # %if.then
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_47
.LBB39_46:                              # %if.else
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_47:                              # %if.end
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB39_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB39_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB39_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-176(%rbp), %xmm0
	jne	.LBB39_55
	jp	.LBB39_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB39_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB39_54
.LBB39_53:                              # %cond.false
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
.LBB39_54:                              # %cond.end
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB39_59
.LBB39_55:                              # %if.else500
                                        #   in Loop: Header=BB39_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-176(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB39_58
.LBB39_57:                              # %if.else504
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB39_58:                              # %if.end505
                                        #   in Loop: Header=BB39_41 Depth=1
	jmp	.LBB39_59
.LBB39_59:                              # %if.end506
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB39_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB39_62
.LBB39_61:                              # %cond.false510
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-120(%rbp), %eax
.LBB39_62:                              # %cond.end511
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -124(%rbp)
	jmp	.LBB39_73
.LBB39_63:                              # %if.else513
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB39_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB39_72
.LBB39_65:                              # %if.else517
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB39_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB39_68
.LBB39_67:                              # %cond.false521
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-56(%rbp), %eax
.LBB39_68:                              # %cond.end522
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB39_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB39_71
.LBB39_70:                              # %cond.false527
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-120(%rbp), %eax
.LBB39_71:                              # %cond.end528
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	%eax, -124(%rbp)
.LBB39_72:                              # %if.end530
                                        #   in Loop: Header=BB39_41 Depth=1
	jmp	.LBB39_73
.LBB39_73:                              # %if.end531
                                        #   in Loop: Header=BB39_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB39_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	$1, -200(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB39_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB39_77
.LBB39_76:                              # %if.else539
                                        #   in Loop: Header=BB39_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB39_77:                              # %if.end546
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB39_78:                              # %if.end568
                                        #   in Loop: Header=BB39_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-196(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB39_41
.LBB39_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB39_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_83 Depth 2
                                        #     Child Loop BB39_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	$0, -16(%rbp)
.LBB39_83:                              # %for.cond607
                                        #   Parent Loop BB39_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB39_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB39_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_83
.LBB39_86:                              # %for.end620
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_87:                              # %for.cond639
                                        #   Parent Loop BB39_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB39_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB39_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_87
.LBB39_90:                              # %for.end666
                                        #   in Loop: Header=BB39_81 Depth=1
	jmp	.LBB39_91
.LBB39_91:                              # %for.inc667
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_81
.LBB39_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB39_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_95 Depth 2
                                        #     Child Loop BB39_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	$0, -12(%rbp)
.LBB39_95:                              # %for.cond674
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB39_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB39_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_95
.LBB39_98:                              # %for.end687
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_99:                              # %for.cond706
                                        #   Parent Loop BB39_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB39_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB39_103
.LBB39_102:                             # %cond.false721
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB39_103:                             # %cond.end729
                                        #   in Loop: Header=BB39_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB39_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_109
.LBB39_105:                             # %cond.false735
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB39_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB39_108
.LBB39_107:                             # %cond.false746
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB39_108:                             # %cond.end754
                                        #   in Loop: Header=BB39_99 Depth=2
.LBB39_109:                             # %cond.end756
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB39_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB39_112
.LBB39_111:                             # %cond.false774
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB39_112:                             # %cond.end782
                                        #   in Loop: Header=BB39_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB39_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_118
.LBB39_114:                             # %cond.false788
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB39_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB39_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB39_117
.LBB39_116:                             # %cond.false799
                                        #   in Loop: Header=BB39_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB39_117:                             # %cond.end807
                                        #   in Loop: Header=BB39_99 Depth=2
.LBB39_118:                             # %cond.end809
                                        #   in Loop: Header=BB39_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB39_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_99
.LBB39_120:                             # %for.end818
                                        #   in Loop: Header=BB39_93 Depth=1
	jmp	.LBB39_121
.LBB39_121:                             # %for.inc819
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_93
.LBB39_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB39_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB39_123 Depth=1
	movl	$0, -16(%rbp)
.LBB39_125:                             # %for.cond826
                                        #   Parent Loop BB39_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB39_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB39_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_125
.LBB39_128:                             # %for.end846
                                        #   in Loop: Header=BB39_123 Depth=1
	jmp	.LBB39_129
.LBB39_129:                             # %for.inc847
                                        #   in Loop: Header=BB39_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_123
.LBB39_130:                             # %for.end849
	movl	-200(%rbp), %ebx
	cmpl	$206029371, -212(%rbp)  # imm = 0xC47C23B
	jne	.LBB39_132
.LBB39_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_131
.Lfunc_end39:
	.size	dct_luma_sp.30, .Lfunc_end39-dct_luma_sp.30
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.31       # -- Begin function intrapred_luma.31
	.p2align	4, 0x90
	.type	intrapred_luma.31,@function
intrapred_luma.31:                      # @intrapred_luma.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1827115015, -172(%rbp) # imm = 0x6CE79007
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -192(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB40_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB40_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB40_10
.LBB40_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB40_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB40_9:                               # %lor.end
.LBB40_10:                              # %land.end
	xorb	$-1, %al
.LBB40_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB40_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB40_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB40_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB40_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB40_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_17
.LBB40_16:                              # %cond.false
                                        #   in Loop: Header=BB40_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_17
.LBB40_17:                              # %cond.end
                                        #   in Loop: Header=BB40_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB40_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_13
.LBB40_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB40_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_22
.LBB40_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB40_22
.LBB40_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB40_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_25
.LBB40_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB40_25
.LBB40_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB40_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_28
.LBB40_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB40_28
.LBB40_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB40_30
.LBB40_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB40_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB40_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB40_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB40_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB40_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB40_36
.LBB40_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB40_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB40_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_39
.LBB40_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB40_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB40_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_42
.LBB40_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB40_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB40_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_45
.LBB40_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB40_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB40_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB40_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB40_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB40_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_46
.LBB40_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB40_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB40_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_61
.LBB40_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB40_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB40_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_60
.LBB40_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB40_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB40_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB40_59
.LBB40_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB40_59:                              # %if.end284
	jmp	.LBB40_60
.LBB40_60:                              # %if.end285
	jmp	.LBB40_61
.LBB40_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB40_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB40_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB40_62 Depth=1
	movl	$0, -4(%rbp)
.LBB40_64:                              # %for.cond291
                                        #   Parent Loop BB40_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB40_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB40_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_64
.LBB40_67:                              # %for.end304
                                        #   in Loop: Header=BB40_62 Depth=1
	jmp	.LBB40_68
.LBB40_68:                              # %for.inc305
                                        #   in Loop: Header=BB40_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_62
.LBB40_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB40_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB40_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB40_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_70
.LBB40_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB40_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB40_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB40_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB40_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB40_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB40_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB40_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB40_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB40_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB40_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB40_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB40_85:                              # %if.end1174
	cmpl	$1827115015, -172(%rbp) # imm = 0x6CE79007
	jne	.LBB40_87
.LBB40_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_86
.Lfunc_end40:
	.size	intrapred_luma.31, .Lfunc_end40-intrapred_luma.31
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.32             # -- Begin function dct_luma.32
	.p2align	4, 0x90
	.type	dct_luma.32,@function
dct_luma.32:                            # @dct_luma.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$678187287, -148(%rbp)  # imm = 0x286C5117
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -128(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-128(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB41_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB41_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB41_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB41_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_5:                               # %land.end32
                                        #   in Loop: Header=BB41_3 Depth=1
	testb	$1, %al
	jne	.LBB41_6
	jmp	.LBB41_12
.LBB41_6:                               # %for.body
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	$0, -16(%rbp)
.LBB41_7:                               # %for.cond34
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB41_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB41_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_7
.LBB41_10:                              # %for.end
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_3
.LBB41_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB41_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB41_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_15:                              # %land.end101
                                        #   in Loop: Header=BB41_13 Depth=1
	testb	$1, %al
	jne	.LBB41_16
	jmp	.LBB41_22
.LBB41_16:                              # %for.body103
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	$0, -12(%rbp)
.LBB41_17:                              # %for.cond104
                                        #   Parent Loop BB41_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB41_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB41_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_17
.LBB41_20:                              # %for.end136
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_13
.LBB41_22:                              # %for.end169
	movl	$0, -112(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB41_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB41_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_28
.LBB41_27:                              # %if.then
                                        #   in Loop: Header=BB41_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_29
.LBB41_28:                              # %if.else
                                        #   in Loop: Header=BB41_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_29:                              # %if.end
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB41_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB41_35
.LBB41_31:                              # %if.else199
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_34
.LBB41_33:                              # %if.else223
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB41_34:                              # %if.end245
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_35
.LBB41_35:                              # %if.end246
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB41_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	$1, -112(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB41_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB41_39
.LBB41_38:                              # %if.then254
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB41_40
.LBB41_39:                              # %if.else256
                                        #   in Loop: Header=BB41_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB41_40:                              # %if.end263
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB41_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_52
.LBB41_42:                              # %if.else283
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB41_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_46
.LBB41_45:                              # %if.else301
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB41_46:                              # %if.end314
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_51
.LBB41_47:                              # %if.else315
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_50
.LBB41_49:                              # %if.else328
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB41_50:                              # %if.end338
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_51
.LBB41_51:                              # %if.end339
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_52
.LBB41_52:                              # %if.end340
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_53
.LBB41_53:                              # %if.end341
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB41_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_55:                              # %if.end349
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_56
.LBB41_56:                              # %for.inc350
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB41_23
.LBB41_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB41_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_62 Depth 2
                                        #     Child Loop BB41_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB41_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_60:                              # %land.end361
                                        #   in Loop: Header=BB41_58 Depth=1
	testb	$1, %al
	jne	.LBB41_61
	jmp	.LBB41_71
.LBB41_61:                              # %for.body363
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	$0, -16(%rbp)
.LBB41_62:                              # %for.cond364
                                        #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB41_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB41_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_62
.LBB41_65:                              # %for.end377
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB41_66:                              # %for.cond396
                                        #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB41_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB41_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_66
.LBB41_69:                              # %for.end423
                                        #   in Loop: Header=BB41_58 Depth=1
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc424
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_58
.LBB41_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB41_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_76 Depth 2
                                        #     Child Loop BB41_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB41_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_74:                              # %land.end433
                                        #   in Loop: Header=BB41_72 Depth=1
	testb	$1, %al
	jne	.LBB41_75
	jmp	.LBB41_109
.LBB41_75:                              # %for.body435
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	$0, -12(%rbp)
.LBB41_76:                              # %for.cond436
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB41_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB41_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_76
.LBB41_79:                              # %for.end449
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB41_80:                              # %for.cond468
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB41_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_85
.LBB41_84:                              # %cond.false
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_85:                              # %cond.end
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB41_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB41_91
.LBB41_87:                              # %cond.false518
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_90
.LBB41_89:                              # %cond.false540
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_90:                              # %cond.end559
                                        #   in Loop: Header=BB41_80 Depth=2
.LBB41_91:                              # %cond.end561
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_94
.LBB41_93:                              # %cond.false592
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_94:                              # %cond.end611
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB41_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB41_100
.LBB41_96:                              # %cond.false618
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_99
.LBB41_98:                              # %cond.false640
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_99:                              # %cond.end659
                                        #   in Loop: Header=BB41_80 Depth=2
.LBB41_100:                             # %cond.end661
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_105
.LBB41_101:                             # %if.else669
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB41_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_104
.LBB41_103:                             # %if.else692
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_104:                             # %if.end717
                                        #   in Loop: Header=BB41_80 Depth=2
	jmp	.LBB41_105
.LBB41_105:                             # %if.end718
                                        #   in Loop: Header=BB41_80 Depth=2
	jmp	.LBB41_106
.LBB41_106:                             # %for.inc719
                                        #   in Loop: Header=BB41_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_80
.LBB41_107:                             # %for.end721
                                        #   in Loop: Header=BB41_72 Depth=1
	jmp	.LBB41_108
.LBB41_108:                             # %for.inc722
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_72
.LBB41_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB41_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB41_111 Depth=1
	movl	$0, -16(%rbp)
.LBB41_113:                             # %for.cond732
                                        #   Parent Loop BB41_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB41_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB41_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB41_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB41_117
.LBB41_116:                             # %if.else761
                                        #   in Loop: Header=BB41_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB41_117:                             # %if.end779
                                        #   in Loop: Header=BB41_113 Depth=2
	jmp	.LBB41_118
.LBB41_118:                             # %for.inc780
                                        #   in Loop: Header=BB41_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_113
.LBB41_119:                             # %for.end782
                                        #   in Loop: Header=BB41_111 Depth=1
	jmp	.LBB41_120
.LBB41_120:                             # %for.inc783
                                        #   in Loop: Header=BB41_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_111
.LBB41_121:                             # %for.end785
	jmp	.LBB41_122
.LBB41_122:                             # %if.end786
	movl	-112(%rbp), %ebx
	cmpl	$678187287, -148(%rbp)  # imm = 0x286C5117
	jne	.LBB41_124
.LBB41_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_123
.Lfunc_end41:
	.size	dct_luma.32, .Lfunc_end41-dct_luma.32
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.33        # -- Begin function dct_chroma4x4.33
	.p2align	4, 0x90
	.type	dct_chroma4x4.33,@function
dct_chroma4x4.33:                       # @dct_chroma4x4.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1409754461, -148(%rbp) # imm = 0x5407255D
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB42_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB42_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB42_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB42_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB42_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB42_7
# %bb.6:                                # %cond.true
	movl	-76(%rbp), %eax
	jmp	.LBB42_8
.LBB42_7:                               # %cond.false
	movl	-76(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_8:                               # %cond.end
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB42_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB42_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB42_10 Depth=1
	movl	$0, -12(%rbp)
.LBB42_12:                              # %for.cond31
                                        #   Parent Loop BB42_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB42_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB42_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_12
.LBB42_15:                              # %for.end
                                        #   in Loop: Header=BB42_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB42_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_10
.LBB42_17:                              # %for.end92
	jmp	.LBB42_18
.LBB42_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB42_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB42_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	$0, -16(%rbp)
.LBB42_22:                              # %for.cond99
                                        #   Parent Loop BB42_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_22
.LBB42_25:                              # %for.end132
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_20
.LBB42_27:                              # %for.end165
	jmp	.LBB42_28
.LBB42_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB42_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB42_34
.LBB42_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB42_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_33
.LBB42_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB42_33:                              # %if.end213
	jmp	.LBB42_34
.LBB42_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB42_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB42_46
.LBB42_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB42_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB42_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB42_40
.LBB42_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB42_40:                              # %if.end290
	jmp	.LBB42_45
.LBB42_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB42_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB42_44
.LBB42_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB42_44:                              # %if.end328
	jmp	.LBB42_45
.LBB42_45:                              # %if.end329
	jmp	.LBB42_46
.LBB42_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB42_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB42_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB42_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB42_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB42_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB42_54
.LBB42_50:                              # %if.else352
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB42_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB42_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_53
.LBB42_52:                              # %if.else381
                                        #   in Loop: Header=BB42_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB42_53:                              # %if.end407
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_54
.LBB42_54:                              # %if.end408
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB42_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB42_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB42_58
.LBB42_57:                              # %if.then415
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	$1, -132(%rbp)
.LBB42_58:                              # %if.end416
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB42_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB42_70
.LBB42_60:                              # %if.else436
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB42_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB42_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB42_64
.LBB42_63:                              # %if.else457
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB42_64:                              # %if.end472
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_69
.LBB42_65:                              # %if.else473
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB42_68
.LBB42_67:                              # %if.else488
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB42_68:                              # %if.end500
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_69
.LBB42_69:                              # %if.end501
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_70
.LBB42_70:                              # %if.end502
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_71
.LBB42_71:                              # %if.end503
                                        #   in Loop: Header=BB42_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB42_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB42_73:                              # %if.end511
                                        #   in Loop: Header=BB42_47 Depth=1
	jmp	.LBB42_74
.LBB42_74:                              # %for.inc512
                                        #   in Loop: Header=BB42_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB42_47
.LBB42_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB42_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB42_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_79 Depth 2
                                        #     Child Loop BB42_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB42_77 Depth=1
	movl	$0, -12(%rbp)
.LBB42_79:                              # %for.cond523
                                        #   Parent Loop BB42_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB42_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB42_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_79
.LBB42_82:                              # %for.end536
                                        #   in Loop: Header=BB42_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB42_83:                              # %for.cond555
                                        #   Parent Loop BB42_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB42_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB42_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_83
.LBB42_86:                              # %for.end582
                                        #   in Loop: Header=BB42_77 Depth=1
	jmp	.LBB42_87
.LBB42_87:                              # %for.inc583
                                        #   in Loop: Header=BB42_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_77
.LBB42_88:                              # %for.end585
	jmp	.LBB42_89
.LBB42_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB42_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB42_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_93 Depth 2
                                        #     Child Loop BB42_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB42_91 Depth=1
	movl	$0, -16(%rbp)
.LBB42_93:                              # %for.cond593
                                        #   Parent Loop BB42_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB42_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_93
.LBB42_96:                              # %for.end606
                                        #   in Loop: Header=BB42_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB42_97:                              # %for.cond625
                                        #   Parent Loop BB42_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB42_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB42_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_97
.LBB42_100:                             # %for.end656
                                        #   in Loop: Header=BB42_91 Depth=1
	jmp	.LBB42_101
.LBB42_101:                             # %for.inc657
                                        #   in Loop: Header=BB42_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_91
.LBB42_102:                             # %for.end659
	jmp	.LBB42_103
.LBB42_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1409754461, -148(%rbp) # imm = 0x5407255D
	jne	.LBB42_105
.LBB42_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_104
.Lfunc_end42:
	.size	dct_chroma4x4.33, .Lfunc_end42-dct_chroma4x4.33
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.34       # -- Begin function intrapred_luma.34
	.p2align	4, 0x90
	.type	intrapred_luma.34,@function
intrapred_luma.34:                      # @intrapred_luma.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$951524450, -172(%rbp)  # imm = 0x38B71C62
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_1
.LBB43_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB43_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB43_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB43_10
.LBB43_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB43_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB43_9:                               # %lor.end
.LBB43_10:                              # %land.end
	xorb	$-1, %al
.LBB43_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB43_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB43_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB43_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB43_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB43_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_17
.LBB43_16:                              # %cond.false
                                        #   in Loop: Header=BB43_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_17
.LBB43_17:                              # %cond.end
                                        #   in Loop: Header=BB43_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB43_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_13
.LBB43_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB43_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_22
.LBB43_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB43_22
.LBB43_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB43_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB43_25
.LBB43_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB43_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB43_28
.LBB43_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB43_28
.LBB43_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB43_30
.LBB43_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB43_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB43_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB43_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB43_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB43_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB43_36
.LBB43_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB43_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB43_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_39
.LBB43_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB43_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB43_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_42
.LBB43_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB43_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB43_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB43_45
.LBB43_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB43_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB43_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB43_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB43_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_46
.LBB43_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB43_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB43_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB43_61
.LBB43_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB43_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB43_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB43_60
.LBB43_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB43_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB43_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB43_59
.LBB43_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB43_59:                              # %if.end284
	jmp	.LBB43_60
.LBB43_60:                              # %if.end285
	jmp	.LBB43_61
.LBB43_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB43_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB43_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB43_62 Depth=1
	movl	$0, -4(%rbp)
.LBB43_64:                              # %for.cond291
                                        #   Parent Loop BB43_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB43_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB43_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_64
.LBB43_67:                              # %for.end304
                                        #   in Loop: Header=BB43_62 Depth=1
	jmp	.LBB43_68
.LBB43_68:                              # %for.inc305
                                        #   in Loop: Header=BB43_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB43_62
.LBB43_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB43_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB43_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB43_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_70
.LBB43_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB43_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB43_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB43_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB43_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB43_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB43_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB43_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB43_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB43_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB43_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB43_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB43_85:                              # %if.end1174
	cmpl	$951524450, -172(%rbp)  # imm = 0x38B71C62
	jne	.LBB43_87
.LBB43_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_86
.Lfunc_end43:
	.size	intrapred_luma.34, .Lfunc_end43-intrapred_luma.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.35
.LCPI44_0:
	.quad	4616189618054758400     # double 4
.LCPI44_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI44_2:
	.quad	4611686018427387904     # double 2
.LCPI44_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.35
	.p2align	4, 0x90
	.type	dct_chroma_sp.35,@function
dct_chroma_sp.35:                       # @dct_chroma_sp.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI44_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1170321121, -268(%rbp) # imm = 0x45C1AEE1
	movl	%edi, -120(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI44_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB44_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB44_6
.LBB44_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB44_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB44_5
.LBB44_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB44_5:                               # %cond.end
.LBB44_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB44_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB44_12
.LBB44_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB44_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB44_11
.LBB44_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB44_11:                              # %cond.end41
.LBB44_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB44_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB44_15
.LBB44_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB44_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB44_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB44_18
.LBB44_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB44_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -224(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB44_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB44_21
.LBB44_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB44_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB44_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB44_24
.LBB44_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB44_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB44_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB44_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	$0, -16(%rbp)
.LBB44_27:                              # %for.cond97
                                        #   Parent Loop BB44_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB44_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB44_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB44_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end
                                        #   in Loop: Header=BB44_25 Depth=1
	jmp	.LBB44_31
.LBB44_31:                              # %for.inc121
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB44_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_35 Depth 2
                                        #       Child Loop BB44_37 Depth 3
                                        #         Child Loop BB44_39 Depth 4
                                        #       Child Loop BB44_45 Depth 3
                                        #         Child Loop BB44_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB44_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	$0, -24(%rbp)
.LBB44_35:                              # %for.cond128
                                        #   Parent Loop BB44_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_37 Depth 3
                                        #         Child Loop BB44_39 Depth 4
                                        #       Child Loop BB44_45 Depth 3
                                        #         Child Loop BB44_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB44_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	$0, -12(%rbp)
.LBB44_37:                              # %for.cond132
                                        #   Parent Loop BB44_33 Depth=1
                                        #     Parent Loop BB44_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB44_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB44_39:                              # %for.cond137
                                        #   Parent Loop BB44_33 Depth=1
                                        #     Parent Loop BB44_35 Depth=2
                                        #       Parent Loop BB44_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB44_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB44_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB44_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_39
.LBB44_42:                              # %for.end174
                                        #   in Loop: Header=BB44_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB44_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_37
.LBB44_44:                              # %for.end214
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	$0, -16(%rbp)
.LBB44_45:                              # %for.cond215
                                        #   Parent Loop BB44_33 Depth=1
                                        #     Parent Loop BB44_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB44_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB44_47:                              # %for.cond220
                                        #   Parent Loop BB44_33 Depth=1
                                        #     Parent Loop BB44_35 Depth=2
                                        #       Parent Loop BB44_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB44_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB44_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB44_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_47
.LBB44_50:                              # %for.end257
                                        #   in Loop: Header=BB44_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB44_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_45
.LBB44_52:                              # %for.end298
                                        #   in Loop: Header=BB44_35 Depth=2
	jmp	.LBB44_53
.LBB44_53:                              # %for.inc299
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_35
.LBB44_54:                              # %for.end301
                                        #   in Loop: Header=BB44_33 Depth=1
	jmp	.LBB44_55
.LBB44_55:                              # %for.inc302
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_33
.LBB44_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB44_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_59 Depth 2
                                        #       Child Loop BB44_61 Depth 3
                                        #         Child Loop BB44_63 Depth 4
                                        #       Child Loop BB44_69 Depth 3
                                        #         Child Loop BB44_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB44_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB44_57 Depth=1
	movl	$0, -24(%rbp)
.LBB44_59:                              # %for.cond309
                                        #   Parent Loop BB44_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_61 Depth 3
                                        #         Child Loop BB44_63 Depth 4
                                        #       Child Loop BB44_69 Depth 3
                                        #         Child Loop BB44_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB44_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB44_59 Depth=2
	movl	$0, -12(%rbp)
.LBB44_61:                              # %for.cond313
                                        #   Parent Loop BB44_57 Depth=1
                                        #     Parent Loop BB44_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB44_63:                              # %for.cond318
                                        #   Parent Loop BB44_57 Depth=1
                                        #     Parent Loop BB44_59 Depth=2
                                        #       Parent Loop BB44_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB44_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB44_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB44_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_63
.LBB44_66:                              # %for.end351
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_61
.LBB44_68:                              # %for.end387
                                        #   in Loop: Header=BB44_59 Depth=2
	movl	$0, -16(%rbp)
.LBB44_69:                              # %for.cond388
                                        #   Parent Loop BB44_57 Depth=1
                                        #     Parent Loop BB44_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB44_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB44_71:                              # %for.cond393
                                        #   Parent Loop BB44_57 Depth=1
                                        #     Parent Loop BB44_59 Depth=2
                                        #       Parent Loop BB44_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB44_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB44_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB44_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_71
.LBB44_74:                              # %for.end426
                                        #   in Loop: Header=BB44_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB44_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_69
.LBB44_76:                              # %for.end463
                                        #   in Loop: Header=BB44_59 Depth=2
	jmp	.LBB44_77
.LBB44_77:                              # %for.inc464
                                        #   in Loop: Header=BB44_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_59
.LBB44_78:                              # %for.end466
                                        #   in Loop: Header=BB44_57 Depth=1
	jmp	.LBB44_79
.LBB44_79:                              # %for.inc467
                                        #   in Loop: Header=BB44_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_57
.LBB44_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB44_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB44_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB44_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB44_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB44_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB44_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB44_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB44_90
	jp	.LBB44_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB44_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB44_89
.LBB44_88:                              # %cond.false691
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-40(%rbp), %eax
.LBB44_89:                              # %cond.end692
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB44_94
.LBB44_90:                              # %if.else
                                        #   in Loop: Header=BB44_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB44_93
.LBB44_92:                              # %if.else697
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB44_93:                              # %if.end
                                        #   in Loop: Header=BB44_81 Depth=1
	jmp	.LBB44_94
.LBB44_94:                              # %if.end698
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB44_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB44_97
.LBB44_96:                              # %cond.false702
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-104(%rbp), %eax
.LBB44_97:                              # %cond.end703
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB44_108
.LBB44_98:                              # %if.else705
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB44_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB44_107
.LBB44_100:                             # %if.else709
                                        #   in Loop: Header=BB44_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB44_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB44_103
.LBB44_102:                             # %cond.false713
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-40(%rbp), %eax
.LBB44_103:                             # %cond.end714
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB44_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB44_106
.LBB44_105:                             # %cond.false719
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-104(%rbp), %eax
.LBB44_106:                             # %cond.end720
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB44_107:                             # %if.end722
                                        #   in Loop: Header=BB44_81 Depth=1
	jmp	.LBB44_108
.LBB44_108:                             # %if.end723
                                        #   in Loop: Header=BB44_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB44_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB44_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB44_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB44_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB44_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB44_112:                             # %if.end734
                                        #   in Loop: Header=BB44_81 Depth=1
	jmp	.LBB44_113
.LBB44_113:                             # %if.end735
                                        #   in Loop: Header=BB44_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB44_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB44_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	$1, %eax
	jmp	.LBB44_117
.LBB44_116:                             # %cond.false745
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-204(%rbp), %eax
.LBB44_117:                             # %cond.end746
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB44_118:                             # %if.end763
                                        #   in Loop: Header=BB44_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_81
.LBB44_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB44_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_123 Depth 2
                                        #       Child Loop BB44_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB44_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB44_121 Depth=1
	movl	$0, -24(%rbp)
.LBB44_123:                             # %for.cond839
                                        #   Parent Loop BB44_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB44_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB44_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB44_125:                             # %for.cond860
                                        #   Parent Loop BB44_121 Depth=1
                                        #     Parent Loop BB44_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB44_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB44_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB44_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB44_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB44_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB44_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB44_130
.LBB44_129:                             # %if.then867
                                        #   in Loop: Header=BB44_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_131
.LBB44_130:                             # %if.else876
                                        #   in Loop: Header=BB44_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB44_131:                             # %if.end885
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB44_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB44_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB44_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB44_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB44_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB44_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB44_139
	jp	.LBB44_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB44_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB44_138
.LBB44_137:                             # %cond.false1047
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-40(%rbp), %eax
.LBB44_138:                             # %cond.end1048
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB44_143
.LBB44_139:                             # %if.else1050
                                        #   in Loop: Header=BB44_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB44_142
.LBB44_141:                             # %if.else1054
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB44_142:                             # %if.end1055
                                        #   in Loop: Header=BB44_125 Depth=3
	jmp	.LBB44_143
.LBB44_143:                             # %if.end1056
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB44_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB44_146
.LBB44_145:                             # %cond.false1060
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-104(%rbp), %eax
.LBB44_146:                             # %cond.end1061
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB44_157
.LBB44_147:                             # %if.else1063
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB44_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB44_156
.LBB44_149:                             # %if.else1067
                                        #   in Loop: Header=BB44_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB44_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB44_152
.LBB44_151:                             # %cond.false1071
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-40(%rbp), %eax
.LBB44_152:                             # %cond.end1072
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB44_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB44_155
.LBB44_154:                             # %cond.false1077
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-104(%rbp), %eax
.LBB44_155:                             # %cond.end1078
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB44_156:                             # %if.end1080
                                        #   in Loop: Header=BB44_125 Depth=3
	jmp	.LBB44_157
.LBB44_157:                             # %if.end1081
                                        #   in Loop: Header=BB44_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB44_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-120(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB44_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB44_161
.LBB44_160:                             # %if.else1099
                                        #   in Loop: Header=BB44_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB44_161:                             # %if.end1106
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB44_162:                             # %if.end1128
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB44_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_125
.LBB44_164:                             # %for.end1164
                                        #   in Loop: Header=BB44_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB44_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_123
.LBB44_166:                             # %for.end1169
                                        #   in Loop: Header=BB44_121 Depth=1
	jmp	.LBB44_167
.LBB44_167:                             # %for.inc1170
                                        #   in Loop: Header=BB44_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_121
.LBB44_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB44_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB44_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB44_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_173 Depth 2
                                        #       Child Loop BB44_175 Depth 3
                                        #         Child Loop BB44_177 Depth 4
                                        #         Child Loop BB44_181 Depth 4
                                        #       Child Loop BB44_187 Depth 3
                                        #         Child Loop BB44_189 Depth 4
                                        #         Child Loop BB44_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB44_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB44_171 Depth=1
	movl	$0, -24(%rbp)
.LBB44_173:                             # %for.cond1181
                                        #   Parent Loop BB44_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_175 Depth 3
                                        #         Child Loop BB44_177 Depth 4
                                        #         Child Loop BB44_181 Depth 4
                                        #       Child Loop BB44_187 Depth 3
                                        #         Child Loop BB44_189 Depth 4
                                        #         Child Loop BB44_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB44_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB44_173 Depth=2
	movl	$0, -12(%rbp)
.LBB44_175:                             # %for.cond1185
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_177 Depth 4
                                        #         Child Loop BB44_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB44_175 Depth=3
	movl	$0, -16(%rbp)
.LBB44_177:                             # %for.cond1189
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        #       Parent Loop BB44_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB44_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB44_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_177
.LBB44_180:                             # %for.end1204
                                        #   in Loop: Header=BB44_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB44_181:                             # %for.cond1223
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        #       Parent Loop BB44_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB44_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB44_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB44_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_181
.LBB44_184:                             # %for.end1254
                                        #   in Loop: Header=BB44_175 Depth=3
	jmp	.LBB44_185
.LBB44_185:                             # %for.inc1255
                                        #   in Loop: Header=BB44_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_175
.LBB44_186:                             # %for.end1257
                                        #   in Loop: Header=BB44_173 Depth=2
	movl	$0, -16(%rbp)
.LBB44_187:                             # %for.cond1258
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_189 Depth 4
                                        #         Child Loop BB44_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB44_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB44_187 Depth=3
	movl	$0, -12(%rbp)
.LBB44_189:                             # %for.cond1262
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        #       Parent Loop BB44_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB44_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB44_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB44_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_189
.LBB44_192:                             # %for.end1277
                                        #   in Loop: Header=BB44_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB44_193:                             # %for.cond1296
                                        #   Parent Loop BB44_171 Depth=1
                                        #     Parent Loop BB44_173 Depth=2
                                        #       Parent Loop BB44_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB44_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB44_197
.LBB44_196:                             # %cond.false1311
                                        #   in Loop: Header=BB44_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_197:                             # %cond.end1319
                                        #   in Loop: Header=BB44_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB44_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB44_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_203
.LBB44_199:                             # %cond.false1325
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB44_202
.LBB44_201:                             # %cond.false1336
                                        #   in Loop: Header=BB44_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_202:                             # %cond.end1344
                                        #   in Loop: Header=BB44_193 Depth=4
.LBB44_203:                             # %cond.end1346
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB44_206
.LBB44_205:                             # %cond.false1366
                                        #   in Loop: Header=BB44_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_206:                             # %cond.end1374
                                        #   in Loop: Header=BB44_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB44_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB44_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB44_212
.LBB44_208:                             # %cond.false1380
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB44_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB44_211
.LBB44_210:                             # %cond.false1391
                                        #   in Loop: Header=BB44_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_211:                             # %cond.end1399
                                        #   in Loop: Header=BB44_193 Depth=4
.LBB44_212:                             # %cond.end1401
                                        #   in Loop: Header=BB44_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB44_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_193
.LBB44_214:                             # %for.end1412
                                        #   in Loop: Header=BB44_187 Depth=3
	jmp	.LBB44_215
.LBB44_215:                             # %for.inc1413
                                        #   in Loop: Header=BB44_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_187
.LBB44_216:                             # %for.end1415
                                        #   in Loop: Header=BB44_173 Depth=2
	jmp	.LBB44_217
.LBB44_217:                             # %for.inc1416
                                        #   in Loop: Header=BB44_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_173
.LBB44_218:                             # %for.end1418
                                        #   in Loop: Header=BB44_171 Depth=1
	jmp	.LBB44_219
.LBB44_219:                             # %for.inc1419
                                        #   in Loop: Header=BB44_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_171
.LBB44_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB44_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB44_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB44_221 Depth=1
	movl	$0, -16(%rbp)
.LBB44_223:                             # %for.cond1426
                                        #   Parent Loop BB44_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB44_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB44_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-120(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB44_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_223
.LBB44_226:                             # %for.end1446
                                        #   in Loop: Header=BB44_221 Depth=1
	jmp	.LBB44_227
.LBB44_227:                             # %for.inc1447
                                        #   in Loop: Header=BB44_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_221
.LBB44_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1170321121, -268(%rbp) # imm = 0x45C1AEE1
	jne	.LBB44_230
.LBB44_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_229
.Lfunc_end44:
	.size	dct_chroma_sp.35, .Lfunc_end44-dct_chroma_sp.35
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.36       # -- Begin function intrapred_luma.36
	.p2align	4, 0x90
	.type	intrapred_luma.36,@function
intrapred_luma.36:                      # @intrapred_luma.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$354596448, -172(%rbp)  # imm = 0x1522B660
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_1
.LBB45_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB45_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB45_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB45_10
.LBB45_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB45_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB45_9:                               # %lor.end
.LBB45_10:                              # %land.end
	xorb	$-1, %al
.LBB45_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB45_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB45_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB45_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB45_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB45_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_17
.LBB45_16:                              # %cond.false
                                        #   in Loop: Header=BB45_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB45_17
.LBB45_17:                              # %cond.end
                                        #   in Loop: Header=BB45_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB45_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_13
.LBB45_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB45_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_22
.LBB45_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB45_22
.LBB45_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB45_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_25
.LBB45_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB45_25
.LBB45_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB45_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_28
.LBB45_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB45_28
.LBB45_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB45_30
.LBB45_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB45_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB45_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB45_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB45_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB45_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB45_36
.LBB45_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB45_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB45_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_39
.LBB45_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB45_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB45_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_42
.LBB45_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB45_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB45_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB45_45
.LBB45_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB45_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB45_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB45_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB45_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_46
.LBB45_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB45_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB45_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_61
.LBB45_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB45_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB45_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_60
.LBB45_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB45_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB45_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_59
.LBB45_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB45_59:                              # %if.end284
	jmp	.LBB45_60
.LBB45_60:                              # %if.end285
	jmp	.LBB45_61
.LBB45_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB45_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB45_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB45_62 Depth=1
	movl	$0, -4(%rbp)
.LBB45_64:                              # %for.cond291
                                        #   Parent Loop BB45_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB45_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB45_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_64
.LBB45_67:                              # %for.end304
                                        #   in Loop: Header=BB45_62 Depth=1
	jmp	.LBB45_68
.LBB45_68:                              # %for.inc305
                                        #   in Loop: Header=BB45_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB45_62
.LBB45_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB45_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB45_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB45_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_70
.LBB45_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB45_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB45_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB45_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB45_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB45_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB45_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB45_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB45_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB45_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB45_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB45_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB45_85:                              # %if.end1174
	cmpl	$354596448, -172(%rbp)  # imm = 0x1522B660
	jne	.LBB45_87
.LBB45_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_86
.Lfunc_end45:
	.size	intrapred_luma.36, .Lfunc_end45-intrapred_luma.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.37
.LCPI46_0:
	.quad	4616189618054758400     # double 4
.LCPI46_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI46_2:
	.quad	4611686018427387904     # double 2
.LCPI46_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.37
	.p2align	4, 0x90
	.type	dct_luma_sp.37,@function
dct_luma_sp.37:                         # @dct_luma_sp.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI46_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$555909790, -216(%rbp)  # imm = 0x2122829E
	movl	%edi, -128(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -224(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -188(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -192(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -112(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-208(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	$0, -12(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -16(%rbp)
.LBB46_3:                               # %for.cond38
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_3
.LBB46_6:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_7
.LBB46_7:                               # %for.inc66
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_1
.LBB46_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB46_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	$0, -16(%rbp)
.LBB46_11:                              # %for.cond73
                                        #   Parent Loop BB46_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB46_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_11
.LBB46_14:                              # %for.end106
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_9
.LBB46_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB46_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB46_17 Depth=1
	movl	$0, -12(%rbp)
.LBB46_19:                              # %for.cond144
                                        #   Parent Loop BB46_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB46_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB46_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB46_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_19
.LBB46_22:                              # %for.end177
                                        #   in Loop: Header=BB46_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB46_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_17
.LBB46_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB46_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	$0, -16(%rbp)
.LBB46_27:                              # %for.cond215
                                        #   Parent Loop BB46_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB46_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_27
.LBB46_30:                              # %for.end244
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_25
.LBB46_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB46_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	$0, -12(%rbp)
.LBB46_35:                              # %for.cond278
                                        #   Parent Loop BB46_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB46_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_35
.LBB46_38:                              # %for.end307
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_33
.LBB46_40:                              # %for.end336
	movl	$0, -200(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -68(%rbp)
.LBB46_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB46_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB46_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB46_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB46_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB46_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB46_46
.LBB46_45:                              # %if.then
                                        #   in Loop: Header=BB46_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_47
.LBB46_46:                              # %if.else
                                        #   in Loop: Header=BB46_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB46_47:                              # %if.end
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -108(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB46_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB46_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB46_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB46_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB46_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB46_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-60(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB46_55
	jp	.LBB46_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB46_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB46_54
.LBB46_53:                              # %cond.false
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-60(%rbp), %eax
.LBB46_54:                              # %cond.end
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB46_59
.LBB46_55:                              # %if.else500
                                        #   in Loop: Header=BB46_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB46_58
.LBB46_57:                              # %if.else504
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB46_58:                              # %if.end505
                                        #   in Loop: Header=BB46_41 Depth=1
	jmp	.LBB46_59
.LBB46_59:                              # %if.end506
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB46_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB46_62
.LBB46_61:                              # %cond.false510
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-140(%rbp), %eax
.LBB46_62:                              # %cond.end511
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB46_73
.LBB46_63:                              # %if.else513
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB46_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB46_72
.LBB46_65:                              # %if.else517
                                        #   in Loop: Header=BB46_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB46_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB46_68
.LBB46_67:                              # %cond.false521
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-60(%rbp), %eax
.LBB46_68:                              # %cond.end522
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB46_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB46_71
.LBB46_70:                              # %cond.false527
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-140(%rbp), %eax
.LBB46_71:                              # %cond.end528
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB46_72:                              # %if.end530
                                        #   in Loop: Header=BB46_41 Depth=1
	jmp	.LBB46_73
.LBB46_73:                              # %if.end531
                                        #   in Loop: Header=BB46_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB46_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	$1, -200(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB46_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB46_41 Depth=1
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB46_77
.LBB46_76:                              # %if.else539
                                        #   in Loop: Header=BB46_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-224(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB46_77:                              # %if.end546
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -64(%rbp)
	movl	-56(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-112(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
.LBB46_78:                              # %if.end568
                                        #   in Loop: Header=BB46_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-204(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-108(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB46_41
.LBB46_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB46_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_83 Depth 2
                                        #     Child Loop BB46_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	$0, -16(%rbp)
.LBB46_83:                              # %for.cond607
                                        #   Parent Loop BB46_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB46_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB46_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_83
.LBB46_86:                              # %for.end620
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB46_87:                              # %for.cond639
                                        #   Parent Loop BB46_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB46_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB46_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB46_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_87
.LBB46_90:                              # %for.end666
                                        #   in Loop: Header=BB46_81 Depth=1
	jmp	.LBB46_91
.LBB46_91:                              # %for.inc667
                                        #   in Loop: Header=BB46_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_81
.LBB46_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB46_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_95 Depth 2
                                        #     Child Loop BB46_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB46_93 Depth=1
	movl	$0, -12(%rbp)
.LBB46_95:                              # %for.cond674
                                        #   Parent Loop BB46_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB46_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB46_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_95
.LBB46_98:                              # %for.end687
                                        #   in Loop: Header=BB46_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB46_99:                              # %for.cond706
                                        #   Parent Loop BB46_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB46_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB46_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB46_103
.LBB46_102:                             # %cond.false721
                                        #   in Loop: Header=BB46_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB46_103:                             # %cond.end729
                                        #   in Loop: Header=BB46_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB46_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_109
.LBB46_105:                             # %cond.false735
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB46_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_108
.LBB46_107:                             # %cond.false746
                                        #   in Loop: Header=BB46_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB46_108:                             # %cond.end754
                                        #   in Loop: Header=BB46_99 Depth=2
.LBB46_109:                             # %cond.end756
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB46_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB46_112
.LBB46_111:                             # %cond.false774
                                        #   in Loop: Header=BB46_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB46_112:                             # %cond.end782
                                        #   in Loop: Header=BB46_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB46_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_118
.LBB46_114:                             # %cond.false788
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB46_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB46_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_117
.LBB46_116:                             # %cond.false799
                                        #   in Loop: Header=BB46_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB46_117:                             # %cond.end807
                                        #   in Loop: Header=BB46_99 Depth=2
.LBB46_118:                             # %cond.end809
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB46_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_99
.LBB46_120:                             # %for.end818
                                        #   in Loop: Header=BB46_93 Depth=1
	jmp	.LBB46_121
.LBB46_121:                             # %for.inc819
                                        #   in Loop: Header=BB46_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_93
.LBB46_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB46_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB46_123 Depth=1
	movl	$0, -16(%rbp)
.LBB46_125:                             # %for.cond826
                                        #   Parent Loop BB46_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB46_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB46_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_125
.LBB46_128:                             # %for.end846
                                        #   in Loop: Header=BB46_123 Depth=1
	jmp	.LBB46_129
.LBB46_129:                             # %for.inc847
                                        #   in Loop: Header=BB46_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_123
.LBB46_130:                             # %for.end849
	movl	-200(%rbp), %ebx
	cmpl	$555909790, -216(%rbp)  # imm = 0x2122829E
	jne	.LBB46_132
.LBB46_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_131
.Lfunc_end46:
	.size	dct_luma_sp.37, .Lfunc_end46-dct_luma_sp.37
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.38           # -- Begin function dct_chroma.38
	.p2align	4, 0x90
	.type	dct_chroma.38,@function
dct_chroma.38:                          # @dct_chroma.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$766812761, -380(%rbp)  # imm = 0x2DB4A259
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB47_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB47_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB47_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB47_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB47_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB47_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB47_11
.LBB47_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB47_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB47_10
.LBB47_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB47_10:                              # %cond.end
.LBB47_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB47_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB47_14
.LBB47_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB47_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB47_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB47_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB47_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_19 Depth 2
                                        #       Child Loop BB47_21 Depth 3
                                        #         Child Loop BB47_25 Depth 4
                                        #       Child Loop BB47_31 Depth 3
                                        #         Child Loop BB47_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB47_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB47_17 Depth=1
	movl	$0, -24(%rbp)
.LBB47_19:                              # %for.cond56
                                        #   Parent Loop BB47_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_21 Depth 3
                                        #         Child Loop BB47_25 Depth 4
                                        #       Child Loop BB47_31 Depth 3
                                        #         Child Loop BB47_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB47_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB47_19 Depth=2
	movl	$0, -12(%rbp)
.LBB47_21:                              # %for.cond60
                                        #   Parent Loop BB47_17 Depth=1
                                        #     Parent Loop BB47_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB47_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB47_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_23:                              # %land.end64
                                        #   in Loop: Header=BB47_21 Depth=3
	testb	$1, %al
	jne	.LBB47_24
	jmp	.LBB47_30
.LBB47_24:                              # %for.body66
                                        #   in Loop: Header=BB47_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB47_25:                              # %for.cond68
                                        #   Parent Loop BB47_17 Depth=1
                                        #     Parent Loop BB47_19 Depth=2
                                        #       Parent Loop BB47_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB47_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB47_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB47_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_25
.LBB47_28:                              # %for.end
                                        #   in Loop: Header=BB47_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB47_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_21
.LBB47_30:                              # %for.end141
                                        #   in Loop: Header=BB47_19 Depth=2
	movl	$0, -16(%rbp)
.LBB47_31:                              # %for.cond142
                                        #   Parent Loop BB47_17 Depth=1
                                        #     Parent Loop BB47_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB47_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB47_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_33:                              # %land.end148
                                        #   in Loop: Header=BB47_31 Depth=3
	testb	$1, %al
	jne	.LBB47_34
	jmp	.LBB47_40
.LBB47_34:                              # %for.body150
                                        #   in Loop: Header=BB47_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB47_35:                              # %for.cond152
                                        #   Parent Loop BB47_17 Depth=1
                                        #     Parent Loop BB47_19 Depth=2
                                        #       Parent Loop BB47_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB47_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB47_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB47_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_35
.LBB47_38:                              # %for.end189
                                        #   in Loop: Header=BB47_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB47_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_31
.LBB47_40:                              # %for.end230
                                        #   in Loop: Header=BB47_19 Depth=2
	jmp	.LBB47_41
.LBB47_41:                              # %for.inc231
                                        #   in Loop: Header=BB47_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_19
.LBB47_42:                              # %for.end233
                                        #   in Loop: Header=BB47_17 Depth=1
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc234
                                        #   in Loop: Header=BB47_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_17
.LBB47_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB47_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB47_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB47_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB47_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB47_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB47_50
.LBB47_49:                              # %if.else
                                        #   in Loop: Header=BB47_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB47_50:                              # %if.end349
                                        #   in Loop: Header=BB47_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB47_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB47_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB47_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB47_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB47_54:                              # %if.end359
                                        #   in Loop: Header=BB47_46 Depth=1
	jmp	.LBB47_55
.LBB47_55:                              # %if.end360
                                        #   in Loop: Header=BB47_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB47_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB47_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	$1, %eax
	jmp	.LBB47_59
.LBB47_58:                              # %cond.false370
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-132(%rbp), %eax
.LBB47_59:                              # %cond.end371
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB47_60:                              # %if.end384
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB47_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_46
.LBB47_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB47_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB47_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB47_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB47_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB47_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB47_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB47_68
.LBB47_67:                              # %if.else447
                                        #   in Loop: Header=BB47_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB47_68:                              # %if.end461
                                        #   in Loop: Header=BB47_63 Depth=1
	jmp	.LBB47_73
.LBB47_69:                              # %if.else462
                                        #   in Loop: Header=BB47_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB47_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB47_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB47_72
.LBB47_71:                              # %if.else479
                                        #   in Loop: Header=BB47_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB47_72:                              # %if.end493
                                        #   in Loop: Header=BB47_63 Depth=1
	jmp	.LBB47_73
.LBB47_73:                              # %if.end494
                                        #   in Loop: Header=BB47_63 Depth=1
	jmp	.LBB47_74
.LBB47_74:                              # %for.inc495
                                        #   in Loop: Header=BB47_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_63
.LBB47_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB47_213
.LBB47_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB47_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB47_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB47_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB47_78 Depth=1
	movl	$0, -16(%rbp)
.LBB47_80:                              # %for.cond523
                                        #   Parent Loop BB47_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB47_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB47_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB47_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_80
.LBB47_83:                              # %for.end541
                                        #   in Loop: Header=BB47_78 Depth=1
	jmp	.LBB47_84
.LBB47_84:                              # %for.inc542
                                        #   in Loop: Header=BB47_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_78
.LBB47_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB47_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB47_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB47_86 Depth=1
	movl	$0, -12(%rbp)
.LBB47_88:                              # %for.cond605
                                        #   Parent Loop BB47_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB47_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB47_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB47_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_88
.LBB47_91:                              # %for.end634
                                        #   in Loop: Header=BB47_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB47_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_86
.LBB47_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB47_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB47_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB47_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB47_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB47_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB47_98
.LBB47_97:                              # %if.else700
                                        #   in Loop: Header=BB47_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB47_98:                              # %if.end723
                                        #   in Loop: Header=BB47_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB47_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB47_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	$1, %eax
	jmp	.LBB47_102
.LBB47_101:                             # %cond.false735
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	-132(%rbp), %eax
.LBB47_102:                             # %cond.end736
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB47_103:                             # %if.end748
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB47_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_94
.LBB47_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB47_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_108 Depth 2
                                        #     Child Loop BB47_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB47_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB47_106 Depth=1
	movl	$0, -12(%rbp)
.LBB47_108:                             # %for.cond823
                                        #   Parent Loop BB47_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB47_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB47_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB47_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_108
.LBB47_111:                             # %for.end835
                                        #   in Loop: Header=BB47_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB47_112:                             # %for.cond852
                                        #   Parent Loop BB47_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB47_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB47_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB47_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB47_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB47_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB47_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB47_117
.LBB47_116:                             # %if.else915
                                        #   in Loop: Header=BB47_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB47_117:                             # %if.end968
                                        #   in Loop: Header=BB47_112 Depth=2
	jmp	.LBB47_122
.LBB47_118:                             # %if.else969
                                        #   in Loop: Header=BB47_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB47_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB47_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB47_121
.LBB47_120:                             # %if.else1019
                                        #   in Loop: Header=BB47_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB47_121:                             # %if.end1066
                                        #   in Loop: Header=BB47_112 Depth=2
	jmp	.LBB47_122
.LBB47_122:                             # %if.end1067
                                        #   in Loop: Header=BB47_112 Depth=2
	jmp	.LBB47_123
.LBB47_123:                             # %for.inc1068
                                        #   in Loop: Header=BB47_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_112
.LBB47_124:                             # %for.end1070
                                        #   in Loop: Header=BB47_106 Depth=1
	jmp	.LBB47_125
.LBB47_125:                             # %for.inc1071
                                        #   in Loop: Header=BB47_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_106
.LBB47_126:                             # %for.end1073
	jmp	.LBB47_212
.LBB47_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB47_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB47_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB47_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB47_129 Depth=1
	movl	$0, -16(%rbp)
.LBB47_131:                             # %for.cond1083
                                        #   Parent Loop BB47_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB47_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB47_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB47_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_131
.LBB47_134:                             # %for.end1101
                                        #   in Loop: Header=BB47_129 Depth=1
	jmp	.LBB47_135
.LBB47_135:                             # %for.inc1102
                                        #   in Loop: Header=BB47_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_129
.LBB47_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB47_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB47_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB47_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_139:                             # %land.end1111
                                        #   in Loop: Header=BB47_137 Depth=1
	testb	$1, %al
	jne	.LBB47_140
	jmp	.LBB47_146
.LBB47_140:                             # %for.body1113
                                        #   in Loop: Header=BB47_137 Depth=1
	movl	$0, -16(%rbp)
.LBB47_141:                             # %for.cond1114
                                        #   Parent Loop BB47_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB47_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB47_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB47_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_141
.LBB47_144:                             # %for.end1143
                                        #   in Loop: Header=BB47_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB47_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_137
.LBB47_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB47_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB47_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB47_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_149:                             # %land.end1177
                                        #   in Loop: Header=BB47_147 Depth=1
	testb	$1, %al
	jne	.LBB47_150
	jmp	.LBB47_156
.LBB47_150:                             # %for.body1179
                                        #   in Loop: Header=BB47_147 Depth=1
	movl	$0, -12(%rbp)
.LBB47_151:                             # %for.cond1180
                                        #   Parent Loop BB47_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB47_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB47_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB47_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_151
.LBB47_154:                             # %for.end1209
                                        #   in Loop: Header=BB47_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB47_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_147
.LBB47_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB47_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB47_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB47_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB47_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB47_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB47_164
.LBB47_160:                             # %if.else1261
                                        #   in Loop: Header=BB47_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB47_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB47_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB47_163
.LBB47_162:                             # %if.else1287
                                        #   in Loop: Header=BB47_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB47_163:                             # %if.end1310
                                        #   in Loop: Header=BB47_157 Depth=1
	jmp	.LBB47_164
.LBB47_164:                             # %if.end1311
                                        #   in Loop: Header=BB47_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB47_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB47_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	$1, %eax
	jmp	.LBB47_168
.LBB47_167:                             # %cond.false1322
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-132(%rbp), %eax
.LBB47_168:                             # %cond.end1323
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB47_169:                             # %if.end1335
                                        #   in Loop: Header=BB47_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB47_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB47_171:                             # %if.end1347
                                        #   in Loop: Header=BB47_157 Depth=1
	jmp	.LBB47_172
.LBB47_172:                             # %for.inc1348
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_157
.LBB47_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB47_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_178 Depth 2
                                        #     Child Loop BB47_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB47_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB47_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_176:                             # %land.end1359
                                        #   in Loop: Header=BB47_174 Depth=1
	testb	$1, %al
	jne	.LBB47_177
	jmp	.LBB47_187
.LBB47_177:                             # %for.body1361
                                        #   in Loop: Header=BB47_174 Depth=1
	movl	$0, -16(%rbp)
.LBB47_178:                             # %for.cond1362
                                        #   Parent Loop BB47_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB47_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB47_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_178
.LBB47_181:                             # %for.end1374
                                        #   in Loop: Header=BB47_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB47_182:                             # %for.cond1391
                                        #   Parent Loop BB47_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB47_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB47_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB47_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_182
.LBB47_185:                             # %for.end1416
                                        #   in Loop: Header=BB47_174 Depth=1
	jmp	.LBB47_186
.LBB47_186:                             # %for.inc1417
                                        #   in Loop: Header=BB47_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_174
.LBB47_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB47_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_192 Depth 2
                                        #     Child Loop BB47_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB47_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB47_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_190:                             # %land.end1426
                                        #   in Loop: Header=BB47_188 Depth=1
	testb	$1, %al
	jne	.LBB47_191
	jmp	.LBB47_210
.LBB47_191:                             # %for.body1428
                                        #   in Loop: Header=BB47_188 Depth=1
	movl	$0, -12(%rbp)
.LBB47_192:                             # %for.cond1429
                                        #   Parent Loop BB47_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB47_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB47_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB47_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_192
.LBB47_195:                             # %for.end1441
                                        #   in Loop: Header=BB47_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB47_196:                             # %for.cond1458
                                        #   Parent Loop BB47_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB47_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB47_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB47_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB47_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB47_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB47_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB47_201
.LBB47_200:                             # %if.else1521
                                        #   in Loop: Header=BB47_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB47_201:                             # %if.end1574
                                        #   in Loop: Header=BB47_196 Depth=2
	jmp	.LBB47_206
.LBB47_202:                             # %if.else1575
                                        #   in Loop: Header=BB47_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB47_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB47_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB47_205
.LBB47_204:                             # %if.else1625
                                        #   in Loop: Header=BB47_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB47_205:                             # %if.end1672
                                        #   in Loop: Header=BB47_196 Depth=2
	jmp	.LBB47_206
.LBB47_206:                             # %if.end1673
                                        #   in Loop: Header=BB47_196 Depth=2
	jmp	.LBB47_207
.LBB47_207:                             # %for.inc1674
                                        #   in Loop: Header=BB47_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_196
.LBB47_208:                             # %for.end1676
                                        #   in Loop: Header=BB47_188 Depth=1
	jmp	.LBB47_209
.LBB47_209:                             # %for.inc1677
                                        #   in Loop: Header=BB47_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_188
.LBB47_210:                             # %for.end1679
	jmp	.LBB47_211
.LBB47_211:                             # %if.end1680
	jmp	.LBB47_212
.LBB47_212:                             # %if.end1681
	jmp	.LBB47_213
.LBB47_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB47_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_216 Depth 2
                                        #       Child Loop BB47_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB47_214 Depth=1
	movl	$0, -112(%rbp)
.LBB47_216:                             # %for.cond1689
                                        #   Parent Loop BB47_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB47_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB47_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB47_218:                             # %for.cond1722
                                        #   Parent Loop BB47_214 Depth=1
                                        #     Parent Loop BB47_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB47_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB47_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_223
.LBB47_222:                             # %if.then1731
                                        #   in Loop: Header=BB47_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_224
.LBB47_223:                             # %if.else1740
                                        #   in Loop: Header=BB47_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB47_224:                             # %if.end1749
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB47_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB47_230
.LBB47_226:                             # %if.else1761
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB47_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB47_229
.LBB47_228:                             # %if.else1792
                                        #   in Loop: Header=BB47_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB47_229:                             # %if.end1820
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_230
.LBB47_230:                             # %if.end1821
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB47_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB47_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB47_234
.LBB47_233:                             # %if.then1839
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB47_235
.LBB47_234:                             # %if.else1841
                                        #   in Loop: Header=BB47_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB47_235:                             # %if.end1848
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB47_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB47_247
.LBB47_237:                             # %if.else1872
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB47_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB47_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB47_241
.LBB47_240:                             # %if.else1893
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB47_241:                             # %if.end1908
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_246
.LBB47_242:                             # %if.else1909
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB47_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB47_245
.LBB47_244:                             # %if.else1924
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB47_245:                             # %if.end1936
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_246
.LBB47_246:                             # %if.end1937
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_247
.LBB47_247:                             # %if.end1938
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_248
.LBB47_248:                             # %if.end1939
                                        #   in Loop: Header=BB47_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB47_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB47_250:                             # %if.end1949
                                        #   in Loop: Header=BB47_218 Depth=3
	jmp	.LBB47_251
.LBB47_251:                             # %for.inc1950
                                        #   in Loop: Header=BB47_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_218
.LBB47_252:                             # %for.end1952
                                        #   in Loop: Header=BB47_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB47_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB47_216
.LBB47_254:                             # %for.end1957
                                        #   in Loop: Header=BB47_214 Depth=1
	jmp	.LBB47_255
.LBB47_255:                             # %for.inc1958
                                        #   in Loop: Header=BB47_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB47_214
.LBB47_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB47_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB47_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB47_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_261 Depth 2
                                        #       Child Loop BB47_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB47_259 Depth=1
	movl	$0, -112(%rbp)
.LBB47_261:                             # %for.cond1972
                                        #   Parent Loop BB47_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB47_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB47_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB47_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB47_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB47_264:                             # %if.end2016
                                        #   in Loop: Header=BB47_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB47_265:                             # %for.cond2018
                                        #   Parent Loop BB47_259 Depth=1
                                        #     Parent Loop BB47_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB47_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB47_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB47_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB47_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB47_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_270
.LBB47_269:                             # %if.then2030
                                        #   in Loop: Header=BB47_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_271
.LBB47_270:                             # %if.else2039
                                        #   in Loop: Header=BB47_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB47_271:                             # %if.end2048
                                        #   in Loop: Header=BB47_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB47_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_265
.LBB47_273:                             # %for.end2060
                                        #   in Loop: Header=BB47_261 Depth=2
	jmp	.LBB47_274
.LBB47_274:                             # %for.inc2061
                                        #   in Loop: Header=BB47_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB47_261
.LBB47_275:                             # %for.end2063
                                        #   in Loop: Header=BB47_259 Depth=1
	jmp	.LBB47_276
.LBB47_276:                             # %for.inc2064
                                        #   in Loop: Header=BB47_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB47_259
.LBB47_277:                             # %for.end2066
	jmp	.LBB47_278
.LBB47_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB47_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB47_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB47_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_285 Depth 2
                                        #       Child Loop BB47_287 Depth 3
                                        #         Child Loop BB47_289 Depth 4
                                        #         Child Loop BB47_293 Depth 4
                                        #       Child Loop BB47_299 Depth 3
                                        #         Child Loop BB47_303 Depth 4
                                        #         Child Loop BB47_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB47_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB47_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_283:                             # %land.end2079
                                        #   in Loop: Header=BB47_281 Depth=1
	testb	$1, %al
	jne	.LBB47_284
	jmp	.LBB47_340
.LBB47_284:                             # %for.body2081
                                        #   in Loop: Header=BB47_281 Depth=1
	movl	$0, -24(%rbp)
.LBB47_285:                             # %for.cond2082
                                        #   Parent Loop BB47_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_287 Depth 3
                                        #         Child Loop BB47_289 Depth 4
                                        #         Child Loop BB47_293 Depth 4
                                        #       Child Loop BB47_299 Depth 3
                                        #         Child Loop BB47_303 Depth 4
                                        #         Child Loop BB47_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB47_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB47_285 Depth=2
	movl	$0, -12(%rbp)
.LBB47_287:                             # %for.cond2087
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_289 Depth 4
                                        #         Child Loop BB47_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB47_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB47_287 Depth=3
	movl	$0, -16(%rbp)
.LBB47_289:                             # %for.cond2091
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        #       Parent Loop BB47_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB47_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB47_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB47_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_289
.LBB47_292:                             # %for.end2106
                                        #   in Loop: Header=BB47_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB47_293:                             # %for.cond2125
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        #       Parent Loop BB47_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB47_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB47_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB47_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_293
.LBB47_296:                             # %for.end2156
                                        #   in Loop: Header=BB47_287 Depth=3
	jmp	.LBB47_297
.LBB47_297:                             # %for.inc2157
                                        #   in Loop: Header=BB47_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_287
.LBB47_298:                             # %for.end2159
                                        #   in Loop: Header=BB47_285 Depth=2
	movl	$0, -16(%rbp)
.LBB47_299:                             # %for.cond2160
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_303 Depth 4
                                        #         Child Loop BB47_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB47_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB47_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_301:                             # %land.end2166
                                        #   in Loop: Header=BB47_299 Depth=3
	testb	$1, %al
	jne	.LBB47_302
	jmp	.LBB47_336
.LBB47_302:                             # %for.body2168
                                        #   in Loop: Header=BB47_299 Depth=3
	movl	$0, -12(%rbp)
.LBB47_303:                             # %for.cond2169
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        #       Parent Loop BB47_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB47_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB47_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB47_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_303
.LBB47_306:                             # %for.end2184
                                        #   in Loop: Header=BB47_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB47_307:                             # %for.cond2203
                                        #   Parent Loop BB47_281 Depth=1
                                        #     Parent Loop BB47_285 Depth=2
                                        #       Parent Loop BB47_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB47_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB47_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB47_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB47_312
.LBB47_311:                             # %cond.false2231
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB47_312:                             # %cond.end2250
                                        #   in Loop: Header=BB47_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB47_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB47_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB47_318
.LBB47_314:                             # %cond.false2257
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB47_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB47_317
.LBB47_316:                             # %cond.false2279
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB47_317:                             # %cond.end2298
                                        #   in Loop: Header=BB47_307 Depth=4
.LBB47_318:                             # %cond.end2300
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB47_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB47_321
.LBB47_320:                             # %cond.false2333
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB47_321:                             # %cond.end2352
                                        #   in Loop: Header=BB47_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB47_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB47_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB47_327
.LBB47_323:                             # %cond.false2359
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB47_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB47_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB47_326
.LBB47_325:                             # %cond.false2381
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB47_326:                             # %cond.end2400
                                        #   in Loop: Header=BB47_307 Depth=4
.LBB47_327:                             # %cond.end2402
                                        #   in Loop: Header=BB47_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB47_332
.LBB47_328:                             # %if.else2412
                                        #   in Loop: Header=BB47_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB47_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB47_331
.LBB47_330:                             # %if.else2439
                                        #   in Loop: Header=BB47_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB47_331:                             # %if.end2468
                                        #   in Loop: Header=BB47_307 Depth=4
	jmp	.LBB47_332
.LBB47_332:                             # %if.end2469
                                        #   in Loop: Header=BB47_307 Depth=4
	jmp	.LBB47_333
.LBB47_333:                             # %for.inc2470
                                        #   in Loop: Header=BB47_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_307
.LBB47_334:                             # %for.end2472
                                        #   in Loop: Header=BB47_299 Depth=3
	jmp	.LBB47_335
.LBB47_335:                             # %for.inc2473
                                        #   in Loop: Header=BB47_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_299
.LBB47_336:                             # %for.end2475
                                        #   in Loop: Header=BB47_285 Depth=2
	jmp	.LBB47_337
.LBB47_337:                             # %for.inc2476
                                        #   in Loop: Header=BB47_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_285
.LBB47_338:                             # %for.end2478
                                        #   in Loop: Header=BB47_281 Depth=1
	jmp	.LBB47_339
.LBB47_339:                             # %for.inc2479
                                        #   in Loop: Header=BB47_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_281
.LBB47_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB47_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB47_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB47_342 Depth=1
	movl	$0, -16(%rbp)
.LBB47_344:                             # %for.cond2490
                                        #   Parent Loop BB47_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB47_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB47_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB47_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB47_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB47_348
.LBB47_347:                             # %if.else2518
                                        #   in Loop: Header=BB47_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB47_348:                             # %if.end2536
                                        #   in Loop: Header=BB47_344 Depth=2
	jmp	.LBB47_349
.LBB47_349:                             # %for.inc2537
                                        #   in Loop: Header=BB47_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_344
.LBB47_350:                             # %for.end2539
                                        #   in Loop: Header=BB47_342 Depth=1
	jmp	.LBB47_351
.LBB47_351:                             # %for.inc2540
                                        #   in Loop: Header=BB47_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_342
.LBB47_352:                             # %for.end2542
	jmp	.LBB47_353
.LBB47_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$766812761, -380(%rbp)  # imm = 0x2DB4A259
	jne	.LBB47_355
.LBB47_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_354
.Lfunc_end47:
	.size	dct_chroma.38, .Lfunc_end47-dct_chroma.38
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.39           # -- Begin function dct_chroma.39
	.p2align	4, 0x90
	.type	dct_chroma.39,@function
dct_chroma.39:                          # @dct_chroma.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1936835107, -380(%rbp) # imm = 0x7371C223
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB48_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB48_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB48_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB48_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB48_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB48_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB48_11
.LBB48_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB48_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB48_10
.LBB48_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB48_10:                              # %cond.end
.LBB48_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB48_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB48_14
.LBB48_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB48_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB48_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB48_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB48_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_19 Depth 2
                                        #       Child Loop BB48_21 Depth 3
                                        #         Child Loop BB48_25 Depth 4
                                        #       Child Loop BB48_31 Depth 3
                                        #         Child Loop BB48_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB48_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	$0, -28(%rbp)
.LBB48_19:                              # %for.cond56
                                        #   Parent Loop BB48_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_21 Depth 3
                                        #         Child Loop BB48_25 Depth 4
                                        #       Child Loop BB48_31 Depth 3
                                        #         Child Loop BB48_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB48_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	$0, -12(%rbp)
.LBB48_21:                              # %for.cond60
                                        #   Parent Loop BB48_17 Depth=1
                                        #     Parent Loop BB48_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB48_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB48_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_23:                              # %land.end64
                                        #   in Loop: Header=BB48_21 Depth=3
	testb	$1, %al
	jne	.LBB48_24
	jmp	.LBB48_30
.LBB48_24:                              # %for.body66
                                        #   in Loop: Header=BB48_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB48_25:                              # %for.cond68
                                        #   Parent Loop BB48_17 Depth=1
                                        #     Parent Loop BB48_19 Depth=2
                                        #       Parent Loop BB48_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB48_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB48_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_25
.LBB48_28:                              # %for.end
                                        #   in Loop: Header=BB48_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB48_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_21
.LBB48_30:                              # %for.end141
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	$0, -16(%rbp)
.LBB48_31:                              # %for.cond142
                                        #   Parent Loop BB48_17 Depth=1
                                        #     Parent Loop BB48_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB48_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_33:                              # %land.end148
                                        #   in Loop: Header=BB48_31 Depth=3
	testb	$1, %al
	jne	.LBB48_34
	jmp	.LBB48_40
.LBB48_34:                              # %for.body150
                                        #   in Loop: Header=BB48_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB48_35:                              # %for.cond152
                                        #   Parent Loop BB48_17 Depth=1
                                        #     Parent Loop BB48_19 Depth=2
                                        #       Parent Loop BB48_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB48_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB48_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_35
.LBB48_38:                              # %for.end189
                                        #   in Loop: Header=BB48_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB48_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_31
.LBB48_40:                              # %for.end230
                                        #   in Loop: Header=BB48_19 Depth=2
	jmp	.LBB48_41
.LBB48_41:                              # %for.inc231
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_19
.LBB48_42:                              # %for.end233
                                        #   in Loop: Header=BB48_17 Depth=1
	jmp	.LBB48_43
.LBB48_43:                              # %for.inc234
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_17
.LBB48_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB48_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB48_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB48_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB48_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB48_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB48_50
.LBB48_49:                              # %if.else
                                        #   in Loop: Header=BB48_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB48_50:                              # %if.end349
                                        #   in Loop: Header=BB48_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB48_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB48_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB48_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB48_54:                              # %if.end359
                                        #   in Loop: Header=BB48_46 Depth=1
	jmp	.LBB48_55
.LBB48_55:                              # %if.end360
                                        #   in Loop: Header=BB48_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB48_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB48_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	$1, %eax
	jmp	.LBB48_59
.LBB48_58:                              # %cond.false370
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	-132(%rbp), %eax
.LBB48_59:                              # %cond.end371
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB48_60:                              # %if.end384
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB48_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_46
.LBB48_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB48_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB48_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB48_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB48_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB48_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB48_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB48_68
.LBB48_67:                              # %if.else447
                                        #   in Loop: Header=BB48_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB48_68:                              # %if.end461
                                        #   in Loop: Header=BB48_63 Depth=1
	jmp	.LBB48_73
.LBB48_69:                              # %if.else462
                                        #   in Loop: Header=BB48_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB48_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB48_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB48_72
.LBB48_71:                              # %if.else479
                                        #   in Loop: Header=BB48_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB48_72:                              # %if.end493
                                        #   in Loop: Header=BB48_63 Depth=1
	jmp	.LBB48_73
.LBB48_73:                              # %if.end494
                                        #   in Loop: Header=BB48_63 Depth=1
	jmp	.LBB48_74
.LBB48_74:                              # %for.inc495
                                        #   in Loop: Header=BB48_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_63
.LBB48_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB48_213
.LBB48_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB48_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB48_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB48_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB48_78 Depth=1
	movl	$0, -16(%rbp)
.LBB48_80:                              # %for.cond523
                                        #   Parent Loop BB48_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB48_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB48_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB48_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_80
.LBB48_83:                              # %for.end541
                                        #   in Loop: Header=BB48_78 Depth=1
	jmp	.LBB48_84
.LBB48_84:                              # %for.inc542
                                        #   in Loop: Header=BB48_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_78
.LBB48_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB48_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB48_86 Depth=1
	movl	$0, -12(%rbp)
.LBB48_88:                              # %for.cond605
                                        #   Parent Loop BB48_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB48_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB48_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_88
.LBB48_91:                              # %for.end634
                                        #   in Loop: Header=BB48_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB48_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_86
.LBB48_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB48_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB48_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB48_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB48_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB48_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB48_98
.LBB48_97:                              # %if.else700
                                        #   in Loop: Header=BB48_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB48_98:                              # %if.end723
                                        #   in Loop: Header=BB48_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB48_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB48_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	$1, %eax
	jmp	.LBB48_102
.LBB48_101:                             # %cond.false735
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	-132(%rbp), %eax
.LBB48_102:                             # %cond.end736
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB48_103:                             # %if.end748
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB48_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_94
.LBB48_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB48_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_108 Depth 2
                                        #     Child Loop BB48_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB48_106 Depth=1
	movl	$0, -12(%rbp)
.LBB48_108:                             # %for.cond823
                                        #   Parent Loop BB48_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB48_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB48_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB48_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_108
.LBB48_111:                             # %for.end835
                                        #   in Loop: Header=BB48_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB48_112:                             # %for.cond852
                                        #   Parent Loop BB48_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB48_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB48_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB48_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB48_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB48_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB48_117
.LBB48_116:                             # %if.else915
                                        #   in Loop: Header=BB48_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB48_117:                             # %if.end968
                                        #   in Loop: Header=BB48_112 Depth=2
	jmp	.LBB48_122
.LBB48_118:                             # %if.else969
                                        #   in Loop: Header=BB48_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB48_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB48_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB48_121
.LBB48_120:                             # %if.else1019
                                        #   in Loop: Header=BB48_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB48_121:                             # %if.end1066
                                        #   in Loop: Header=BB48_112 Depth=2
	jmp	.LBB48_122
.LBB48_122:                             # %if.end1067
                                        #   in Loop: Header=BB48_112 Depth=2
	jmp	.LBB48_123
.LBB48_123:                             # %for.inc1068
                                        #   in Loop: Header=BB48_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_112
.LBB48_124:                             # %for.end1070
                                        #   in Loop: Header=BB48_106 Depth=1
	jmp	.LBB48_125
.LBB48_125:                             # %for.inc1071
                                        #   in Loop: Header=BB48_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_106
.LBB48_126:                             # %for.end1073
	jmp	.LBB48_212
.LBB48_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB48_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB48_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB48_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB48_129 Depth=1
	movl	$0, -16(%rbp)
.LBB48_131:                             # %for.cond1083
                                        #   Parent Loop BB48_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB48_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB48_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB48_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_131
.LBB48_134:                             # %for.end1101
                                        #   in Loop: Header=BB48_129 Depth=1
	jmp	.LBB48_135
.LBB48_135:                             # %for.inc1102
                                        #   in Loop: Header=BB48_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_129
.LBB48_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB48_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB48_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB48_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_139:                             # %land.end1111
                                        #   in Loop: Header=BB48_137 Depth=1
	testb	$1, %al
	jne	.LBB48_140
	jmp	.LBB48_146
.LBB48_140:                             # %for.body1113
                                        #   in Loop: Header=BB48_137 Depth=1
	movl	$0, -16(%rbp)
.LBB48_141:                             # %for.cond1114
                                        #   Parent Loop BB48_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB48_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB48_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_141
.LBB48_144:                             # %for.end1143
                                        #   in Loop: Header=BB48_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB48_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_137
.LBB48_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB48_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB48_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_149:                             # %land.end1177
                                        #   in Loop: Header=BB48_147 Depth=1
	testb	$1, %al
	jne	.LBB48_150
	jmp	.LBB48_156
.LBB48_150:                             # %for.body1179
                                        #   in Loop: Header=BB48_147 Depth=1
	movl	$0, -12(%rbp)
.LBB48_151:                             # %for.cond1180
                                        #   Parent Loop BB48_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB48_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB48_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_151
.LBB48_154:                             # %for.end1209
                                        #   in Loop: Header=BB48_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB48_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_147
.LBB48_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB48_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB48_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB48_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB48_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB48_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB48_164
.LBB48_160:                             # %if.else1261
                                        #   in Loop: Header=BB48_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB48_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB48_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB48_163
.LBB48_162:                             # %if.else1287
                                        #   in Loop: Header=BB48_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB48_163:                             # %if.end1310
                                        #   in Loop: Header=BB48_157 Depth=1
	jmp	.LBB48_164
.LBB48_164:                             # %if.end1311
                                        #   in Loop: Header=BB48_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB48_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB48_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	$1, %eax
	jmp	.LBB48_168
.LBB48_167:                             # %cond.false1322
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-132(%rbp), %eax
.LBB48_168:                             # %cond.end1323
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB48_169:                             # %if.end1335
                                        #   in Loop: Header=BB48_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB48_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB48_171:                             # %if.end1347
                                        #   in Loop: Header=BB48_157 Depth=1
	jmp	.LBB48_172
.LBB48_172:                             # %for.inc1348
                                        #   in Loop: Header=BB48_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_157
.LBB48_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB48_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_178 Depth 2
                                        #     Child Loop BB48_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB48_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB48_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_176:                             # %land.end1359
                                        #   in Loop: Header=BB48_174 Depth=1
	testb	$1, %al
	jne	.LBB48_177
	jmp	.LBB48_187
.LBB48_177:                             # %for.body1361
                                        #   in Loop: Header=BB48_174 Depth=1
	movl	$0, -16(%rbp)
.LBB48_178:                             # %for.cond1362
                                        #   Parent Loop BB48_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB48_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB48_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_178
.LBB48_181:                             # %for.end1374
                                        #   in Loop: Header=BB48_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB48_182:                             # %for.cond1391
                                        #   Parent Loop BB48_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB48_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB48_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB48_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_182
.LBB48_185:                             # %for.end1416
                                        #   in Loop: Header=BB48_174 Depth=1
	jmp	.LBB48_186
.LBB48_186:                             # %for.inc1417
                                        #   in Loop: Header=BB48_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_174
.LBB48_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB48_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_192 Depth 2
                                        #     Child Loop BB48_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB48_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_190:                             # %land.end1426
                                        #   in Loop: Header=BB48_188 Depth=1
	testb	$1, %al
	jne	.LBB48_191
	jmp	.LBB48_210
.LBB48_191:                             # %for.body1428
                                        #   in Loop: Header=BB48_188 Depth=1
	movl	$0, -12(%rbp)
.LBB48_192:                             # %for.cond1429
                                        #   Parent Loop BB48_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB48_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB48_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB48_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_192
.LBB48_195:                             # %for.end1441
                                        #   in Loop: Header=BB48_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB48_196:                             # %for.cond1458
                                        #   Parent Loop BB48_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB48_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB48_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB48_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB48_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB48_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB48_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB48_201
.LBB48_200:                             # %if.else1521
                                        #   in Loop: Header=BB48_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB48_201:                             # %if.end1574
                                        #   in Loop: Header=BB48_196 Depth=2
	jmp	.LBB48_206
.LBB48_202:                             # %if.else1575
                                        #   in Loop: Header=BB48_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB48_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB48_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB48_205
.LBB48_204:                             # %if.else1625
                                        #   in Loop: Header=BB48_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB48_205:                             # %if.end1672
                                        #   in Loop: Header=BB48_196 Depth=2
	jmp	.LBB48_206
.LBB48_206:                             # %if.end1673
                                        #   in Loop: Header=BB48_196 Depth=2
	jmp	.LBB48_207
.LBB48_207:                             # %for.inc1674
                                        #   in Loop: Header=BB48_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_196
.LBB48_208:                             # %for.end1676
                                        #   in Loop: Header=BB48_188 Depth=1
	jmp	.LBB48_209
.LBB48_209:                             # %for.inc1677
                                        #   in Loop: Header=BB48_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_188
.LBB48_210:                             # %for.end1679
	jmp	.LBB48_211
.LBB48_211:                             # %if.end1680
	jmp	.LBB48_212
.LBB48_212:                             # %if.end1681
	jmp	.LBB48_213
.LBB48_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB48_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_216 Depth 2
                                        #       Child Loop BB48_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB48_214 Depth=1
	movl	$0, -116(%rbp)
.LBB48_216:                             # %for.cond1689
                                        #   Parent Loop BB48_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB48_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB48_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB48_218:                             # %for.cond1722
                                        #   Parent Loop BB48_214 Depth=1
                                        #     Parent Loop BB48_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB48_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB48_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_223
.LBB48_222:                             # %if.then1731
                                        #   in Loop: Header=BB48_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_224
.LBB48_223:                             # %if.else1740
                                        #   in Loop: Header=BB48_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB48_224:                             # %if.end1749
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB48_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB48_230
.LBB48_226:                             # %if.else1761
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB48_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB48_229
.LBB48_228:                             # %if.else1792
                                        #   in Loop: Header=BB48_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB48_229:                             # %if.end1820
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_230
.LBB48_230:                             # %if.end1821
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB48_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB48_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB48_234
.LBB48_233:                             # %if.then1839
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB48_235
.LBB48_234:                             # %if.else1841
                                        #   in Loop: Header=BB48_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB48_235:                             # %if.end1848
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB48_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB48_247
.LBB48_237:                             # %if.else1872
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB48_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB48_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB48_241
.LBB48_240:                             # %if.else1893
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB48_241:                             # %if.end1908
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_246
.LBB48_242:                             # %if.else1909
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB48_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB48_245
.LBB48_244:                             # %if.else1924
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB48_245:                             # %if.end1936
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_246
.LBB48_246:                             # %if.end1937
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_247
.LBB48_247:                             # %if.end1938
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_248
.LBB48_248:                             # %if.end1939
                                        #   in Loop: Header=BB48_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB48_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB48_250:                             # %if.end1949
                                        #   in Loop: Header=BB48_218 Depth=3
	jmp	.LBB48_251
.LBB48_251:                             # %for.inc1950
                                        #   in Loop: Header=BB48_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_218
.LBB48_252:                             # %for.end1952
                                        #   in Loop: Header=BB48_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB48_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB48_216
.LBB48_254:                             # %for.end1957
                                        #   in Loop: Header=BB48_214 Depth=1
	jmp	.LBB48_255
.LBB48_255:                             # %for.inc1958
                                        #   in Loop: Header=BB48_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB48_214
.LBB48_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB48_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB48_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB48_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_261 Depth 2
                                        #       Child Loop BB48_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB48_259 Depth=1
	movl	$0, -116(%rbp)
.LBB48_261:                             # %for.cond1972
                                        #   Parent Loop BB48_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB48_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB48_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB48_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB48_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB48_264:                             # %if.end2016
                                        #   in Loop: Header=BB48_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB48_265:                             # %for.cond2018
                                        #   Parent Loop BB48_259 Depth=1
                                        #     Parent Loop BB48_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB48_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB48_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB48_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB48_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB48_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_270
.LBB48_269:                             # %if.then2030
                                        #   in Loop: Header=BB48_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_271
.LBB48_270:                             # %if.else2039
                                        #   in Loop: Header=BB48_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB48_271:                             # %if.end2048
                                        #   in Loop: Header=BB48_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB48_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_265
.LBB48_273:                             # %for.end2060
                                        #   in Loop: Header=BB48_261 Depth=2
	jmp	.LBB48_274
.LBB48_274:                             # %for.inc2061
                                        #   in Loop: Header=BB48_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB48_261
.LBB48_275:                             # %for.end2063
                                        #   in Loop: Header=BB48_259 Depth=1
	jmp	.LBB48_276
.LBB48_276:                             # %for.inc2064
                                        #   in Loop: Header=BB48_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB48_259
.LBB48_277:                             # %for.end2066
	jmp	.LBB48_278
.LBB48_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB48_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB48_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB48_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_285 Depth 2
                                        #       Child Loop BB48_287 Depth 3
                                        #         Child Loop BB48_289 Depth 4
                                        #         Child Loop BB48_293 Depth 4
                                        #       Child Loop BB48_299 Depth 3
                                        #         Child Loop BB48_303 Depth 4
                                        #         Child Loop BB48_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB48_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB48_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_283:                             # %land.end2079
                                        #   in Loop: Header=BB48_281 Depth=1
	testb	$1, %al
	jne	.LBB48_284
	jmp	.LBB48_340
.LBB48_284:                             # %for.body2081
                                        #   in Loop: Header=BB48_281 Depth=1
	movl	$0, -28(%rbp)
.LBB48_285:                             # %for.cond2082
                                        #   Parent Loop BB48_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_287 Depth 3
                                        #         Child Loop BB48_289 Depth 4
                                        #         Child Loop BB48_293 Depth 4
                                        #       Child Loop BB48_299 Depth 3
                                        #         Child Loop BB48_303 Depth 4
                                        #         Child Loop BB48_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB48_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB48_285 Depth=2
	movl	$0, -12(%rbp)
.LBB48_287:                             # %for.cond2087
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_289 Depth 4
                                        #         Child Loop BB48_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB48_287 Depth=3
	movl	$0, -16(%rbp)
.LBB48_289:                             # %for.cond2091
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        #       Parent Loop BB48_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB48_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB48_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_289
.LBB48_292:                             # %for.end2106
                                        #   in Loop: Header=BB48_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB48_293:                             # %for.cond2125
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        #       Parent Loop BB48_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB48_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB48_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB48_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_293
.LBB48_296:                             # %for.end2156
                                        #   in Loop: Header=BB48_287 Depth=3
	jmp	.LBB48_297
.LBB48_297:                             # %for.inc2157
                                        #   in Loop: Header=BB48_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_287
.LBB48_298:                             # %for.end2159
                                        #   in Loop: Header=BB48_285 Depth=2
	movl	$0, -16(%rbp)
.LBB48_299:                             # %for.cond2160
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_303 Depth 4
                                        #         Child Loop BB48_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB48_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB48_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_301:                             # %land.end2166
                                        #   in Loop: Header=BB48_299 Depth=3
	testb	$1, %al
	jne	.LBB48_302
	jmp	.LBB48_336
.LBB48_302:                             # %for.body2168
                                        #   in Loop: Header=BB48_299 Depth=3
	movl	$0, -12(%rbp)
.LBB48_303:                             # %for.cond2169
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        #       Parent Loop BB48_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB48_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB48_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_303
.LBB48_306:                             # %for.end2184
                                        #   in Loop: Header=BB48_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB48_307:                             # %for.cond2203
                                        #   Parent Loop BB48_281 Depth=1
                                        #     Parent Loop BB48_285 Depth=2
                                        #       Parent Loop BB48_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB48_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB48_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB48_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB48_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_312
.LBB48_311:                             # %cond.false2231
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB48_312:                             # %cond.end2250
                                        #   in Loop: Header=BB48_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB48_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB48_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB48_318
.LBB48_314:                             # %cond.false2257
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB48_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_317
.LBB48_316:                             # %cond.false2279
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB48_317:                             # %cond.end2298
                                        #   in Loop: Header=BB48_307 Depth=4
.LBB48_318:                             # %cond.end2300
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB48_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB48_321
.LBB48_320:                             # %cond.false2333
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB48_321:                             # %cond.end2352
                                        #   in Loop: Header=BB48_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB48_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB48_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB48_327
.LBB48_323:                             # %cond.false2359
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB48_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB48_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB48_326
.LBB48_325:                             # %cond.false2381
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB48_326:                             # %cond.end2400
                                        #   in Loop: Header=BB48_307 Depth=4
.LBB48_327:                             # %cond.end2402
                                        #   in Loop: Header=BB48_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB48_332
.LBB48_328:                             # %if.else2412
                                        #   in Loop: Header=BB48_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB48_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB48_331
.LBB48_330:                             # %if.else2439
                                        #   in Loop: Header=BB48_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB48_331:                             # %if.end2468
                                        #   in Loop: Header=BB48_307 Depth=4
	jmp	.LBB48_332
.LBB48_332:                             # %if.end2469
                                        #   in Loop: Header=BB48_307 Depth=4
	jmp	.LBB48_333
.LBB48_333:                             # %for.inc2470
                                        #   in Loop: Header=BB48_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_307
.LBB48_334:                             # %for.end2472
                                        #   in Loop: Header=BB48_299 Depth=3
	jmp	.LBB48_335
.LBB48_335:                             # %for.inc2473
                                        #   in Loop: Header=BB48_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_299
.LBB48_336:                             # %for.end2475
                                        #   in Loop: Header=BB48_285 Depth=2
	jmp	.LBB48_337
.LBB48_337:                             # %for.inc2476
                                        #   in Loop: Header=BB48_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB48_285
.LBB48_338:                             # %for.end2478
                                        #   in Loop: Header=BB48_281 Depth=1
	jmp	.LBB48_339
.LBB48_339:                             # %for.inc2479
                                        #   in Loop: Header=BB48_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_281
.LBB48_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB48_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB48_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB48_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB48_342 Depth=1
	movl	$0, -16(%rbp)
.LBB48_344:                             # %for.cond2490
                                        #   Parent Loop BB48_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB48_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB48_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB48_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB48_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB48_348
.LBB48_347:                             # %if.else2518
                                        #   in Loop: Header=BB48_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB48_348:                             # %if.end2536
                                        #   in Loop: Header=BB48_344 Depth=2
	jmp	.LBB48_349
.LBB48_349:                             # %for.inc2537
                                        #   in Loop: Header=BB48_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_344
.LBB48_350:                             # %for.end2539
                                        #   in Loop: Header=BB48_342 Depth=1
	jmp	.LBB48_351
.LBB48_351:                             # %for.inc2540
                                        #   in Loop: Header=BB48_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_342
.LBB48_352:                             # %for.end2542
	jmp	.LBB48_353
.LBB48_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1936835107, -380(%rbp) # imm = 0x7371C223
	jne	.LBB48_355
.LBB48_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_354
.Lfunc_end48:
	.size	dct_chroma.39, .Lfunc_end48-dct_chroma.39
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.40           # -- Begin function dct_chroma.40
	.p2align	4, 0x90
	.type	dct_chroma.40,@function
dct_chroma.40:                          # @dct_chroma.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1290024376, -380(%rbp) # imm = 0x4CE435B8
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB49_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB49_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB49_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB49_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB49_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB49_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB49_11
.LBB49_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB49_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB49_10
.LBB49_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB49_10:                              # %cond.end
.LBB49_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB49_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB49_14
.LBB49_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB49_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB49_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB49_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB49_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
                                        #       Child Loop BB49_21 Depth 3
                                        #         Child Loop BB49_25 Depth 4
                                        #       Child Loop BB49_31 Depth 3
                                        #         Child Loop BB49_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB49_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -28(%rbp)
.LBB49_19:                              # %for.cond56
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_21 Depth 3
                                        #         Child Loop BB49_25 Depth 4
                                        #       Child Loop BB49_31 Depth 3
                                        #         Child Loop BB49_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$0, -12(%rbp)
.LBB49_21:                              # %for.cond60
                                        #   Parent Loop BB49_17 Depth=1
                                        #     Parent Loop BB49_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB49_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB49_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_23:                              # %land.end64
                                        #   in Loop: Header=BB49_21 Depth=3
	testb	$1, %al
	jne	.LBB49_24
	jmp	.LBB49_30
.LBB49_24:                              # %for.body66
                                        #   in Loop: Header=BB49_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB49_25:                              # %for.cond68
                                        #   Parent Loop BB49_17 Depth=1
                                        #     Parent Loop BB49_19 Depth=2
                                        #       Parent Loop BB49_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB49_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB49_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB49_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_25
.LBB49_28:                              # %for.end
                                        #   in Loop: Header=BB49_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB49_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_21
.LBB49_30:                              # %for.end141
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$0, -16(%rbp)
.LBB49_31:                              # %for.cond142
                                        #   Parent Loop BB49_17 Depth=1
                                        #     Parent Loop BB49_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB49_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB49_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_33:                              # %land.end148
                                        #   in Loop: Header=BB49_31 Depth=3
	testb	$1, %al
	jne	.LBB49_34
	jmp	.LBB49_40
.LBB49_34:                              # %for.body150
                                        #   in Loop: Header=BB49_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB49_35:                              # %for.cond152
                                        #   Parent Loop BB49_17 Depth=1
                                        #     Parent Loop BB49_19 Depth=2
                                        #       Parent Loop BB49_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB49_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB49_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB49_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_35
.LBB49_38:                              # %for.end189
                                        #   in Loop: Header=BB49_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB49_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_31
.LBB49_40:                              # %for.end230
                                        #   in Loop: Header=BB49_19 Depth=2
	jmp	.LBB49_41
.LBB49_41:                              # %for.inc231
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_19
.LBB49_42:                              # %for.end233
                                        #   in Loop: Header=BB49_17 Depth=1
	jmp	.LBB49_43
.LBB49_43:                              # %for.inc234
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_17
.LBB49_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB49_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB49_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB49_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB49_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB49_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_50
.LBB49_49:                              # %if.else
                                        #   in Loop: Header=BB49_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB49_50:                              # %if.end349
                                        #   in Loop: Header=BB49_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB49_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB49_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB49_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB49_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB49_54:                              # %if.end359
                                        #   in Loop: Header=BB49_46 Depth=1
	jmp	.LBB49_55
.LBB49_55:                              # %if.end360
                                        #   in Loop: Header=BB49_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB49_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB49_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	$1, %eax
	jmp	.LBB49_59
.LBB49_58:                              # %cond.false370
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	-136(%rbp), %eax
.LBB49_59:                              # %cond.end371
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB49_60:                              # %if.end384
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB49_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_46
.LBB49_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB49_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB49_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB49_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB49_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB49_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB49_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB49_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB49_68
.LBB49_67:                              # %if.else447
                                        #   in Loop: Header=BB49_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB49_68:                              # %if.end461
                                        #   in Loop: Header=BB49_63 Depth=1
	jmp	.LBB49_73
.LBB49_69:                              # %if.else462
                                        #   in Loop: Header=BB49_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB49_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB49_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB49_72
.LBB49_71:                              # %if.else479
                                        #   in Loop: Header=BB49_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB49_72:                              # %if.end493
                                        #   in Loop: Header=BB49_63 Depth=1
	jmp	.LBB49_73
.LBB49_73:                              # %if.end494
                                        #   in Loop: Header=BB49_63 Depth=1
	jmp	.LBB49_74
.LBB49_74:                              # %for.inc495
                                        #   in Loop: Header=BB49_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_63
.LBB49_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB49_213
.LBB49_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB49_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB49_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB49_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB49_78 Depth=1
	movl	$0, -16(%rbp)
.LBB49_80:                              # %for.cond523
                                        #   Parent Loop BB49_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB49_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB49_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_80
.LBB49_83:                              # %for.end541
                                        #   in Loop: Header=BB49_78 Depth=1
	jmp	.LBB49_84
.LBB49_84:                              # %for.inc542
                                        #   in Loop: Header=BB49_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_78
.LBB49_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB49_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB49_86 Depth=1
	movl	$0, -12(%rbp)
.LBB49_88:                              # %for.cond605
                                        #   Parent Loop BB49_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_88
.LBB49_91:                              # %for.end634
                                        #   in Loop: Header=BB49_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB49_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_86
.LBB49_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB49_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB49_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB49_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB49_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB49_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_98
.LBB49_97:                              # %if.else700
                                        #   in Loop: Header=BB49_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB49_98:                              # %if.end723
                                        #   in Loop: Header=BB49_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB49_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB49_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	$1, %eax
	jmp	.LBB49_102
.LBB49_101:                             # %cond.false735
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	-136(%rbp), %eax
.LBB49_102:                             # %cond.end736
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB49_103:                             # %if.end748
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB49_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_94
.LBB49_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB49_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_108 Depth 2
                                        #     Child Loop BB49_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB49_106 Depth=1
	movl	$0, -12(%rbp)
.LBB49_108:                             # %for.cond823
                                        #   Parent Loop BB49_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB49_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB49_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_108
.LBB49_111:                             # %for.end835
                                        #   in Loop: Header=BB49_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB49_112:                             # %for.cond852
                                        #   Parent Loop BB49_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB49_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB49_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB49_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB49_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB49_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB49_117
.LBB49_116:                             # %if.else915
                                        #   in Loop: Header=BB49_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB49_117:                             # %if.end968
                                        #   in Loop: Header=BB49_112 Depth=2
	jmp	.LBB49_122
.LBB49_118:                             # %if.else969
                                        #   in Loop: Header=BB49_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB49_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB49_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB49_121
.LBB49_120:                             # %if.else1019
                                        #   in Loop: Header=BB49_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB49_121:                             # %if.end1066
                                        #   in Loop: Header=BB49_112 Depth=2
	jmp	.LBB49_122
.LBB49_122:                             # %if.end1067
                                        #   in Loop: Header=BB49_112 Depth=2
	jmp	.LBB49_123
.LBB49_123:                             # %for.inc1068
                                        #   in Loop: Header=BB49_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_112
.LBB49_124:                             # %for.end1070
                                        #   in Loop: Header=BB49_106 Depth=1
	jmp	.LBB49_125
.LBB49_125:                             # %for.inc1071
                                        #   in Loop: Header=BB49_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_106
.LBB49_126:                             # %for.end1073
	jmp	.LBB49_212
.LBB49_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB49_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB49_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB49_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB49_129 Depth=1
	movl	$0, -16(%rbp)
.LBB49_131:                             # %for.cond1083
                                        #   Parent Loop BB49_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB49_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB49_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_131
.LBB49_134:                             # %for.end1101
                                        #   in Loop: Header=BB49_129 Depth=1
	jmp	.LBB49_135
.LBB49_135:                             # %for.inc1102
                                        #   in Loop: Header=BB49_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_129
.LBB49_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB49_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB49_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB49_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_139:                             # %land.end1111
                                        #   in Loop: Header=BB49_137 Depth=1
	testb	$1, %al
	jne	.LBB49_140
	jmp	.LBB49_146
.LBB49_140:                             # %for.body1113
                                        #   in Loop: Header=BB49_137 Depth=1
	movl	$0, -16(%rbp)
.LBB49_141:                             # %for.cond1114
                                        #   Parent Loop BB49_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB49_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB49_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_141
.LBB49_144:                             # %for.end1143
                                        #   in Loop: Header=BB49_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB49_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_137
.LBB49_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB49_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB49_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB49_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_149:                             # %land.end1177
                                        #   in Loop: Header=BB49_147 Depth=1
	testb	$1, %al
	jne	.LBB49_150
	jmp	.LBB49_156
.LBB49_150:                             # %for.body1179
                                        #   in Loop: Header=BB49_147 Depth=1
	movl	$0, -12(%rbp)
.LBB49_151:                             # %for.cond1180
                                        #   Parent Loop BB49_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB49_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB49_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_151
.LBB49_154:                             # %for.end1209
                                        #   in Loop: Header=BB49_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB49_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_147
.LBB49_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB49_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB49_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB49_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB49_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB49_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB49_164
.LBB49_160:                             # %if.else1261
                                        #   in Loop: Header=BB49_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB49_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB49_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_163
.LBB49_162:                             # %if.else1287
                                        #   in Loop: Header=BB49_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB49_163:                             # %if.end1310
                                        #   in Loop: Header=BB49_157 Depth=1
	jmp	.LBB49_164
.LBB49_164:                             # %if.end1311
                                        #   in Loop: Header=BB49_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB49_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB49_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	$1, %eax
	jmp	.LBB49_168
.LBB49_167:                             # %cond.false1322
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	-136(%rbp), %eax
.LBB49_168:                             # %cond.end1323
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB49_169:                             # %if.end1335
                                        #   in Loop: Header=BB49_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB49_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB49_171:                             # %if.end1347
                                        #   in Loop: Header=BB49_157 Depth=1
	jmp	.LBB49_172
.LBB49_172:                             # %for.inc1348
                                        #   in Loop: Header=BB49_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_157
.LBB49_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB49_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_178 Depth 2
                                        #     Child Loop BB49_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB49_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB49_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_176:                             # %land.end1359
                                        #   in Loop: Header=BB49_174 Depth=1
	testb	$1, %al
	jne	.LBB49_177
	jmp	.LBB49_187
.LBB49_177:                             # %for.body1361
                                        #   in Loop: Header=BB49_174 Depth=1
	movl	$0, -16(%rbp)
.LBB49_178:                             # %for.cond1362
                                        #   Parent Loop BB49_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB49_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB49_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_178
.LBB49_181:                             # %for.end1374
                                        #   in Loop: Header=BB49_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB49_182:                             # %for.cond1391
                                        #   Parent Loop BB49_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB49_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB49_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_182
.LBB49_185:                             # %for.end1416
                                        #   in Loop: Header=BB49_174 Depth=1
	jmp	.LBB49_186
.LBB49_186:                             # %for.inc1417
                                        #   in Loop: Header=BB49_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_174
.LBB49_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB49_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_192 Depth 2
                                        #     Child Loop BB49_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB49_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB49_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_190:                             # %land.end1426
                                        #   in Loop: Header=BB49_188 Depth=1
	testb	$1, %al
	jne	.LBB49_191
	jmp	.LBB49_210
.LBB49_191:                             # %for.body1428
                                        #   in Loop: Header=BB49_188 Depth=1
	movl	$0, -12(%rbp)
.LBB49_192:                             # %for.cond1429
                                        #   Parent Loop BB49_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB49_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB49_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_192
.LBB49_195:                             # %for.end1441
                                        #   in Loop: Header=BB49_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB49_196:                             # %for.cond1458
                                        #   Parent Loop BB49_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB49_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB49_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB49_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB49_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB49_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB49_201
.LBB49_200:                             # %if.else1521
                                        #   in Loop: Header=BB49_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB49_201:                             # %if.end1574
                                        #   in Loop: Header=BB49_196 Depth=2
	jmp	.LBB49_206
.LBB49_202:                             # %if.else1575
                                        #   in Loop: Header=BB49_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB49_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB49_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB49_205
.LBB49_204:                             # %if.else1625
                                        #   in Loop: Header=BB49_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB49_205:                             # %if.end1672
                                        #   in Loop: Header=BB49_196 Depth=2
	jmp	.LBB49_206
.LBB49_206:                             # %if.end1673
                                        #   in Loop: Header=BB49_196 Depth=2
	jmp	.LBB49_207
.LBB49_207:                             # %for.inc1674
                                        #   in Loop: Header=BB49_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_196
.LBB49_208:                             # %for.end1676
                                        #   in Loop: Header=BB49_188 Depth=1
	jmp	.LBB49_209
.LBB49_209:                             # %for.inc1677
                                        #   in Loop: Header=BB49_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_188
.LBB49_210:                             # %for.end1679
	jmp	.LBB49_211
.LBB49_211:                             # %if.end1680
	jmp	.LBB49_212
.LBB49_212:                             # %if.end1681
	jmp	.LBB49_213
.LBB49_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB49_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_216 Depth 2
                                        #       Child Loop BB49_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB49_214 Depth=1
	movl	$0, -116(%rbp)
.LBB49_216:                             # %for.cond1689
                                        #   Parent Loop BB49_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB49_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB49_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB49_218:                             # %for.cond1722
                                        #   Parent Loop BB49_214 Depth=1
                                        #     Parent Loop BB49_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB49_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB49_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_223
.LBB49_222:                             # %if.then1731
                                        #   in Loop: Header=BB49_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_224
.LBB49_223:                             # %if.else1740
                                        #   in Loop: Header=BB49_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB49_224:                             # %if.end1749
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB49_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB49_230
.LBB49_226:                             # %if.else1761
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB49_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_229
.LBB49_228:                             # %if.else1792
                                        #   in Loop: Header=BB49_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB49_229:                             # %if.end1820
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_230
.LBB49_230:                             # %if.end1821
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB49_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB49_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB49_234
.LBB49_233:                             # %if.then1839
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB49_235
.LBB49_234:                             # %if.else1841
                                        #   in Loop: Header=BB49_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB49_235:                             # %if.end1848
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB49_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB49_247
.LBB49_237:                             # %if.else1872
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB49_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB49_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB49_241
.LBB49_240:                             # %if.else1893
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB49_241:                             # %if.end1908
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_246
.LBB49_242:                             # %if.else1909
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB49_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB49_245
.LBB49_244:                             # %if.else1924
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB49_245:                             # %if.end1936
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_246
.LBB49_246:                             # %if.end1937
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_247
.LBB49_247:                             # %if.end1938
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_248
.LBB49_248:                             # %if.end1939
                                        #   in Loop: Header=BB49_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB49_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB49_250:                             # %if.end1949
                                        #   in Loop: Header=BB49_218 Depth=3
	jmp	.LBB49_251
.LBB49_251:                             # %for.inc1950
                                        #   in Loop: Header=BB49_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_218
.LBB49_252:                             # %for.end1952
                                        #   in Loop: Header=BB49_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB49_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB49_216
.LBB49_254:                             # %for.end1957
                                        #   in Loop: Header=BB49_214 Depth=1
	jmp	.LBB49_255
.LBB49_255:                             # %for.inc1958
                                        #   in Loop: Header=BB49_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB49_214
.LBB49_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB49_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB49_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB49_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_261 Depth 2
                                        #       Child Loop BB49_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB49_259 Depth=1
	movl	$0, -116(%rbp)
.LBB49_261:                             # %for.cond1972
                                        #   Parent Loop BB49_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB49_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB49_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB49_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB49_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB49_264:                             # %if.end2016
                                        #   in Loop: Header=BB49_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB49_265:                             # %for.cond2018
                                        #   Parent Loop BB49_259 Depth=1
                                        #     Parent Loop BB49_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB49_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB49_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB49_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB49_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB49_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_270
.LBB49_269:                             # %if.then2030
                                        #   in Loop: Header=BB49_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_271
.LBB49_270:                             # %if.else2039
                                        #   in Loop: Header=BB49_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB49_271:                             # %if.end2048
                                        #   in Loop: Header=BB49_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB49_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_265
.LBB49_273:                             # %for.end2060
                                        #   in Loop: Header=BB49_261 Depth=2
	jmp	.LBB49_274
.LBB49_274:                             # %for.inc2061
                                        #   in Loop: Header=BB49_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB49_261
.LBB49_275:                             # %for.end2063
                                        #   in Loop: Header=BB49_259 Depth=1
	jmp	.LBB49_276
.LBB49_276:                             # %for.inc2064
                                        #   in Loop: Header=BB49_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB49_259
.LBB49_277:                             # %for.end2066
	jmp	.LBB49_278
.LBB49_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB49_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB49_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB49_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_285 Depth 2
                                        #       Child Loop BB49_287 Depth 3
                                        #         Child Loop BB49_289 Depth 4
                                        #         Child Loop BB49_293 Depth 4
                                        #       Child Loop BB49_299 Depth 3
                                        #         Child Loop BB49_303 Depth 4
                                        #         Child Loop BB49_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB49_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB49_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_283:                             # %land.end2079
                                        #   in Loop: Header=BB49_281 Depth=1
	testb	$1, %al
	jne	.LBB49_284
	jmp	.LBB49_340
.LBB49_284:                             # %for.body2081
                                        #   in Loop: Header=BB49_281 Depth=1
	movl	$0, -28(%rbp)
.LBB49_285:                             # %for.cond2082
                                        #   Parent Loop BB49_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_287 Depth 3
                                        #         Child Loop BB49_289 Depth 4
                                        #         Child Loop BB49_293 Depth 4
                                        #       Child Loop BB49_299 Depth 3
                                        #         Child Loop BB49_303 Depth 4
                                        #         Child Loop BB49_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB49_285 Depth=2
	movl	$0, -12(%rbp)
.LBB49_287:                             # %for.cond2087
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_289 Depth 4
                                        #         Child Loop BB49_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB49_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB49_287 Depth=3
	movl	$0, -16(%rbp)
.LBB49_289:                             # %for.cond2091
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        #       Parent Loop BB49_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB49_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB49_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB49_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_289
.LBB49_292:                             # %for.end2106
                                        #   in Loop: Header=BB49_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB49_293:                             # %for.cond2125
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        #       Parent Loop BB49_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB49_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB49_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB49_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_293
.LBB49_296:                             # %for.end2156
                                        #   in Loop: Header=BB49_287 Depth=3
	jmp	.LBB49_297
.LBB49_297:                             # %for.inc2157
                                        #   in Loop: Header=BB49_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_287
.LBB49_298:                             # %for.end2159
                                        #   in Loop: Header=BB49_285 Depth=2
	movl	$0, -16(%rbp)
.LBB49_299:                             # %for.cond2160
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_303 Depth 4
                                        #         Child Loop BB49_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB49_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB49_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB49_301:                             # %land.end2166
                                        #   in Loop: Header=BB49_299 Depth=3
	testb	$1, %al
	jne	.LBB49_302
	jmp	.LBB49_336
.LBB49_302:                             # %for.body2168
                                        #   in Loop: Header=BB49_299 Depth=3
	movl	$0, -12(%rbp)
.LBB49_303:                             # %for.cond2169
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        #       Parent Loop BB49_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB49_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB49_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB49_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_303
.LBB49_306:                             # %for.end2184
                                        #   in Loop: Header=BB49_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB49_307:                             # %for.cond2203
                                        #   Parent Loop BB49_281 Depth=1
                                        #     Parent Loop BB49_285 Depth=2
                                        #       Parent Loop BB49_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB49_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB49_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB49_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB49_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB49_312
.LBB49_311:                             # %cond.false2231
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB49_312:                             # %cond.end2250
                                        #   in Loop: Header=BB49_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB49_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB49_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB49_318
.LBB49_314:                             # %cond.false2257
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB49_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB49_317
.LBB49_316:                             # %cond.false2279
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB49_317:                             # %cond.end2298
                                        #   in Loop: Header=BB49_307 Depth=4
.LBB49_318:                             # %cond.end2300
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB49_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB49_321
.LBB49_320:                             # %cond.false2333
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB49_321:                             # %cond.end2352
                                        #   in Loop: Header=BB49_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB49_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB49_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB49_327
.LBB49_323:                             # %cond.false2359
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB49_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB49_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB49_326
.LBB49_325:                             # %cond.false2381
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB49_326:                             # %cond.end2400
                                        #   in Loop: Header=BB49_307 Depth=4
.LBB49_327:                             # %cond.end2402
                                        #   in Loop: Header=BB49_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB49_332
.LBB49_328:                             # %if.else2412
                                        #   in Loop: Header=BB49_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB49_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB49_331
.LBB49_330:                             # %if.else2439
                                        #   in Loop: Header=BB49_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB49_331:                             # %if.end2468
                                        #   in Loop: Header=BB49_307 Depth=4
	jmp	.LBB49_332
.LBB49_332:                             # %if.end2469
                                        #   in Loop: Header=BB49_307 Depth=4
	jmp	.LBB49_333
.LBB49_333:                             # %for.inc2470
                                        #   in Loop: Header=BB49_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_307
.LBB49_334:                             # %for.end2472
                                        #   in Loop: Header=BB49_299 Depth=3
	jmp	.LBB49_335
.LBB49_335:                             # %for.inc2473
                                        #   in Loop: Header=BB49_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_299
.LBB49_336:                             # %for.end2475
                                        #   in Loop: Header=BB49_285 Depth=2
	jmp	.LBB49_337
.LBB49_337:                             # %for.inc2476
                                        #   in Loop: Header=BB49_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_285
.LBB49_338:                             # %for.end2478
                                        #   in Loop: Header=BB49_281 Depth=1
	jmp	.LBB49_339
.LBB49_339:                             # %for.inc2479
                                        #   in Loop: Header=BB49_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_281
.LBB49_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB49_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB49_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB49_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB49_342 Depth=1
	movl	$0, -16(%rbp)
.LBB49_344:                             # %for.cond2490
                                        #   Parent Loop BB49_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB49_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB49_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB49_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB49_348
.LBB49_347:                             # %if.else2518
                                        #   in Loop: Header=BB49_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB49_348:                             # %if.end2536
                                        #   in Loop: Header=BB49_344 Depth=2
	jmp	.LBB49_349
.LBB49_349:                             # %for.inc2537
                                        #   in Loop: Header=BB49_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_344
.LBB49_350:                             # %for.end2539
                                        #   in Loop: Header=BB49_342 Depth=1
	jmp	.LBB49_351
.LBB49_351:                             # %for.inc2540
                                        #   in Loop: Header=BB49_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_342
.LBB49_352:                             # %for.end2542
	jmp	.LBB49_353
.LBB49_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1290024376, -380(%rbp) # imm = 0x4CE435B8
	jne	.LBB49_355
.LBB49_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_354
.Lfunc_end49:
	.size	dct_chroma.40, .Lfunc_end49-dct_chroma.40
	.cfi_endproc
                                        # -- End function
	.type	QP_SCALE_CR,@object     # @QP_SCALE_CR
	.section	.rodata,"a",@progbits
	.globl	QP_SCALE_CR
	.p2align	4
QP_SCALE_CR:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\035\036\037  !\"\"##$$%%%&&&''''"
	.size	QP_SCALE_CR, 52

	.type	SNGL_SCAN,@object       # @SNGL_SCAN
	.globl	SNGL_SCAN
	.p2align	4
SNGL_SCAN:
	.zero	2
	.asciz	"\001"
	.ascii	"\000\001"
	.ascii	"\000\002"
	.zero	2,1
	.asciz	"\002"
	.asciz	"\003"
	.ascii	"\002\001"
	.ascii	"\001\002"
	.ascii	"\000\003"
	.ascii	"\001\003"
	.zero	2,2
	.ascii	"\003\001"
	.ascii	"\003\002"
	.ascii	"\002\003"
	.zero	2,3
	.size	SNGL_SCAN, 32

	.type	FIELD_SCAN,@object      # @FIELD_SCAN
	.globl	FIELD_SCAN
	.p2align	4
FIELD_SCAN:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.asciz	"\002"
	.ascii	"\002\001"
	.zero	2,2
	.ascii	"\002\003"
	.asciz	"\003"
	.ascii	"\003\001"
	.ascii	"\003\002"
	.zero	2,3
	.size	FIELD_SCAN, 32

	.type	COEFF_COST,@object      # @COEFF_COST
	.globl	COEFF_COST
	.p2align	4
COEFF_COST:
	.byte	3                       # 0x3
	.byte	2                       # 0x2
	.byte	2                       # 0x2
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	10
	.zero	16,9
	.size	COEFF_COST, 32

	.type	COEFF_BIT_COST,@object  # @COEFF_BIT_COST
	.globl	COEFF_BIT_COST
	.p2align	4
COEFF_BIT_COST:
	.ascii	"\003\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r"
	.ascii	"\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\003\005\007\007\007\t\t\t\t\013\013\r\r\r\r\017"
	.ascii	"\005\t\t\013\013\r\r\r\r\017\017\017\017\017\017\017"
	.ascii	"\007\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.zero	16
	.zero	16
	.ascii	"\003\007\t\t\013\r\r\017\017\017\017\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.size	COEFF_BIT_COST, 768

	.type	SCAN_YUV422,@object     # @SCAN_YUV422
	.globl	SCAN_YUV422
	.p2align	4
SCAN_YUV422:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.size	SCAN_YUV422, 16

	.type	hor_offset,@object      # @hor_offset
	.globl	hor_offset
	.p2align	4
hor_offset:
	.zero	16
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	hor_offset, 64

	.type	ver_offset,@object      # @ver_offset
	.globl	ver_offset
	.p2align	4
ver_offset:
	.zero	16
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	ver_offset, 64

	.type	quant_coef,@object      # @quant_coef
	.globl	quant_coef
	.p2align	4
quant_coef:
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.size	quant_coef, 384

	.type	dequant_coef,@object    # @dequant_coef
	.globl	dequant_coef
	.p2align	4
dequant_coef:
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.size	dequant_coef, 384

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	.L__const.dct_chroma.cbpblk_pattern,@object # @__const.dct_chroma.cbpblk_pattern
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.dct_chroma.cbpblk_pattern:
	.quad	0                       # 0x0
	.quad	983040                  # 0xf0000
	.quad	16711680                # 0xff0000
	.quad	4294901760              # 0xffff0000
	.size	.L__const.dct_chroma.cbpblk_pattern, 32

	.type	cbp_blk_chroma,@object  # @cbp_blk_chroma
	.data
	.p2align	4
cbp_blk_chroma:
	.ascii	"\020\021\022\023"
	.ascii	"\024\025\026\027"
	.ascii	"\030\031\032\033"
	.ascii	"\034\035\036\037"
	.ascii	" !\"#"
	.ascii	"$%&'"
	.ascii	"()*+"
	.ascii	",-./"
	.size	cbp_blk_chroma, 32

	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	A,@object               # @A
	.section	.rodata,"a",@progbits
	.p2align	4
A:
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.size	A, 64

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
