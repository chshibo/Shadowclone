	.text
	.file	"image.c"
	.globl	MbAffPostProc           # -- Begin function MbAffPostProc
	.p2align	4, 0x90
	.type	MbAffPostProc,@function
MbAffPostProc:                          # @MbAffPostProc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_MbAffPostProc.44
	callq	MbAffPostProc.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_MbAffPostProc.124
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.124
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_MbAffPostProc.127
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.127
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_MbAffPostProc.131
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.131
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_MbAffPostProc.134
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.134
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_MbAffPostProc.139
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.139
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_MbAffPostProc.152
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.152
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_MbAffPostProc.169
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.169
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	MbAffPostProc, .Lfunc_end0-MbAffPostProc
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture          # -- Begin function code_a_picture
	.p2align	4, 0x90
	.type	code_a_picture,@function
code_a_picture:                         # @code_a_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_code_a_picture.1
	movq	%rbx, %rdi
	callq	code_a_picture.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_code_a_picture.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_code_a_picture.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_code_a_picture.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_code_a_picture.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_code_a_picture.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.75
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_code_a_picture.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_code_a_picture.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.162
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	code_a_picture, .Lfunc_end1-code_a_picture
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame        # -- Begin function encode_one_frame
	.p2align	4, 0x90
	.type	encode_one_frame,@function
encode_one_frame:                       # @encode_one_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_encode_one_frame.2
	callq	encode_one_frame.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_encode_one_frame.19
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_encode_one_frame.30
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_encode_one_frame.65
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_encode_one_frame.118
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.118
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_encode_one_frame.126
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.126
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_encode_one_frame.130
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.130
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_encode_one_frame.156
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.156
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	encode_one_frame, .Lfunc_end2-encode_one_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame
	.type	ReadOneFrame,@function
ReadOneFrame:                           # @ReadOneFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_ReadOneFrame.38
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	ReadOneFrame.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_ReadOneFrame.39
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_ReadOneFrame.41
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_ReadOneFrame.53
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_ReadOneFrame.67
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_ReadOneFrame.116
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_ReadOneFrame.180
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.180
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_ReadOneFrame.186
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.186
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	ReadOneFrame, .Lfunc_end3-ReadOneFrame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders
	.type	PaddAutoCropBorders,@function
PaddAutoCropBorders:                    # @PaddAutoCropBorders
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_PaddAutoCropBorders.42
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	PaddAutoCropBorders.42
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_PaddAutoCropBorders.52
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.52
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_PaddAutoCropBorders.76
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.76
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_PaddAutoCropBorders.83
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.83
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_PaddAutoCropBorders.97
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.97
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_PaddAutoCropBorders.112
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.112
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_PaddAutoCropBorders.150
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.150
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_PaddAutoCropBorders.151
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.151
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	PaddAutoCropBorders, .Lfunc_end4-PaddAutoCropBorders
	.cfi_endproc
                                        # -- End function
	.globl	field_picture           # -- Begin function field_picture
	.p2align	4, 0x90
	.type	field_picture,@function
field_picture:                          # @field_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_field_picture.16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_field_picture.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_field_picture.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_field_picture.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_field_picture.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_field_picture.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.82
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_field_picture.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_field_picture.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	field_picture, .Lfunc_end5-field_picture
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture           # -- Begin function frame_picture
	.p2align	4, 0x90
	.type	frame_picture,@function
frame_picture:                          # @frame_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_2
# %bb.1:                                # %func_frame_picture.23
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_frame_picture.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.51
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	frame_picture, .Lfunc_end6-frame_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function picture_structure_decision
	.type	picture_structure_decision,@function
picture_structure_decision:             # @picture_structure_decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_picture_structure_decision.8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_picture_structure_decision.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_picture_structure_decision.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_picture_structure_decision.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_picture_structure_decision.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_picture_structure_decision.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_picture_structure_decision.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_picture_structure_decision.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.137
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	picture_structure_decision, .Lfunc_end7-picture_structure_decision
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer
	.type	field_mode_buffer,@function
field_mode_buffer:                      # @field_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_field_mode_buffer.21
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer.21
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_field_mode_buffer.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.47
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_field_mode_buffer.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.79
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_field_mode_buffer.149
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.149
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_field_mode_buffer.160
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.160
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_field_mode_buffer.161
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.161
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_field_mode_buffer.178
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.178
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_field_mode_buffer.185
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.185
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	field_mode_buffer, .Lfunc_end8-field_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture
	.type	writeout_picture,@function
writeout_picture:                       # @writeout_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_writeout_picture.11
	movq	%rbx, %rdi
	callq	writeout_picture.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_writeout_picture.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_writeout_picture.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.111
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_writeout_picture.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_writeout_picture.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.146
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_writeout_picture.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_writeout_picture.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.163
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_writeout_picture.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.166
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	writeout_picture, .Lfunc_end9-writeout_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer
	.type	frame_mode_buffer,@function
frame_mode_buffer:                      # @frame_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_frame_mode_buffer.4
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer.4
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_frame_mode_buffer.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.7
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_frame_mode_buffer.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.96
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_frame_mode_buffer.104
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.104
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_frame_mode_buffer.120
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.120
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_frame_mode_buffer.153
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.153
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_frame_mode_buffer.172
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.172
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_frame_mode_buffer.173
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.173
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	frame_mode_buffer, .Lfunc_end10-frame_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits
	.type	ReportNALNonVLCBits,@function
ReportNALNonVLCBits:                    # @ReportNALNonVLCBits
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_2
# %bb.1:                                # %func_ReportNALNonVLCBits.55
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_ReportNALNonVLCBits.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end11:
	.size	ReportNALNonVLCBits, .Lfunc_end11-ReportNALNonVLCBits
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe
	.type	ReportFirstframe,@function
ReportFirstframe:                       # @ReportFirstframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_ReportFirstframe.86
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ReportFirstframe.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ReportFirstframe.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ReportFirstframe.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ReportFirstframe.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ReportFirstframe.167
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.167
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	ReportFirstframe, .Lfunc_end12-ReportFirstframe
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra
	.type	ReportIntra,@function
ReportIntra:                            # @ReportIntra
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_2
# %bb.1:                                # %func_ReportIntra.32
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_ReportIntra.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end13:
	.size	ReportIntra, .Lfunc_end13-ReportIntra
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP
	.type	ReportSP,@function
ReportSP:                               # @ReportSP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_2
# %bb.1:                                # %func_ReportSP.37
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_ReportSP.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	ReportSP, .Lfunc_end14-ReportSP
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB
	.type	ReportRB,@function
ReportRB:                               # @ReportRB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %func_ReportRB.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_ReportRB.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end15:
	.size	ReportRB, .Lfunc_end15-ReportRB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB
	.type	ReportB,@function
ReportB:                                # @ReportB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_2
# %bb.1:                                # %func_ReportB.121
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.121
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_ReportB.129
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	ReportB, .Lfunc_end16-ReportB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP
	.type	ReportP,@function
ReportP:                                # @ReportP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_2
# %bb.1:                                # %func_ReportP.9
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_ReportP.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	ReportP, .Lfunc_end17-ReportP
	.cfi_endproc
                                        # -- End function
	.globl	copy_params             # -- Begin function copy_params
	.p2align	4, 0x90
	.type	copy_params,@function
copy_params:                            # @copy_params
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	active_sps, %rax
	movl	1148(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6556(%rcx)
	movq	active_sps, %rax
	movl	1160(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6560(%rcx)
	movq	active_sps, %rax
	movl	32(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6552(%rcx)
	movq	active_sps, %rax
	cmpl	$0, 1160(%rax)
	je	.LBB18_2
# %bb.1:                                # %if.then
	movq	active_sps, %rax
	movl	1164(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6564(%rcx)
	movq	active_sps, %rax
	movl	1168(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6568(%rcx)
	movq	active_sps, %rax
	movl	1172(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6572(%rcx)
	movq	active_sps, %rax
	movl	1176(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6576(%rcx)
	jmp	.LBB18_3
.LBB18_2:                               # %if.else
	movq	enc_picture, %rax
	movl	$0, 6564(%rax)
	movq	enc_picture, %rax
	movl	$0, 6568(%rax)
	movq	enc_picture, %rax
	movl	$0, 6572(%rax)
	movq	enc_picture, %rax
	movl	$0, 6576(%rax)
.LBB18_3:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	copy_params, .Lfunc_end18-copy_params
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld
	.type	distortion_fld,@function
distortion_fld:                         # @distortion_fld
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_distortion_fld.45
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_distortion_fld.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_distortion_fld.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_distortion_fld.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_distortion_fld.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_distortion_fld.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.125
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	distortion_fld, .Lfunc_end19-distortion_fld
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix      # -- Begin function UnifiedOneForthPix
	.p2align	4, 0x90
	.type	UnifiedOneForthPix,@function
UnifiedOneForthPix:                     # @UnifiedOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_UnifiedOneForthPix.22
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_UnifiedOneForthPix.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_UnifiedOneForthPix.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_UnifiedOneForthPix.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_UnifiedOneForthPix.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.147
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_UnifiedOneForthPix.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.183
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_UnifiedOneForthPix.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.187
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_UnifiedOneForthPix.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.188
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	UnifiedOneForthPix, .Lfunc_end20-UnifiedOneForthPix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation
	.type	GenerateFullPelRepresentation,@function
GenerateFullPelRepresentation:          # @GenerateFullPelRepresentation
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_GenerateFullPelRepresentation.13
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.13
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_GenerateFullPelRepresentation.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.24
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_GenerateFullPelRepresentation.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.28
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_GenerateFullPelRepresentation.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.29
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_GenerateFullPelRepresentation.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.113
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_GenerateFullPelRepresentation.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.144
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_GenerateFullPelRepresentation.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.171
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_GenerateFullPelRepresentation.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.181
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	GenerateFullPelRepresentation, .Lfunc_end21-GenerateFullPelRepresentation
	.cfi_endproc
                                        # -- End function
	.globl	dummy_slice_too_big     # -- Begin function dummy_slice_too_big
	.p2align	4, 0x90
	.type	dummy_slice_too_big,@function
dummy_slice_too_big:                    # @dummy_slice_too_big
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end22:
	.size	dummy_slice_too_big, .Lfunc_end22-dummy_slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data         # -- Begin function copy_rdopt_data
	.p2align	4, 0x90
	.type	copy_rdopt_data,@function
copy_rdopt_data:                        # @copy_rdopt_data
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_copy_rdopt_data.34
	movl	%ebx, %edi
	callq	copy_rdopt_data.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_copy_rdopt_data.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_copy_rdopt_data.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_copy_rdopt_data.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_copy_rdopt_data.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_copy_rdopt_data.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.114
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_copy_rdopt_data.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.140
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_copy_rdopt_data.141
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	copy_rdopt_data, .Lfunc_end23-copy_rdopt_data
	.cfi_endproc
                                        # -- End function
	.globl	buf2img                 # -- Begin function buf2img
	.p2align	4, 0x90
	.type	buf2img,@function
buf2img:                                # @buf2img
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_buf2img.3
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_buf2img.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_buf2img.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_buf2img.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_buf2img.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_buf2img.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_buf2img.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_buf2img.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	buf2img, .Lfunc_end24-buf2img
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit
	.type	writeUnit,@function
writeUnit:                              # @writeUnit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_7
# %bb.1:                                # %func_writeUnit.12
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_writeUnit.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_writeUnit.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_writeUnit.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_writeUnit.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_writeUnit.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
	jmp	.LBB25_6
.Lfunc_end25:
	.size	writeUnit, .Lfunc_end25-writeUnit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_frame
	.type	init_frame,@function
init_frame:                             # @init_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_7
# %bb.1:                                # %func_init_frame.40
	callq	init_frame.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_init_frame.73
	.cfi_def_cfa %rbp, 16
	callq	init_frame.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_init_frame.74
	.cfi_def_cfa %rbp, 16
	callq	init_frame.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_init_frame.80
	.cfi_def_cfa %rbp, 16
	callq	init_frame.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_init_frame.145
	.cfi_def_cfa %rbp, 16
	callq	init_frame.145
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_init_frame.157
	.cfi_def_cfa %rbp, 16
	callq	init_frame.157
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
	jmp	.LBB26_6
.Lfunc_end26:
	.size	init_frame, .Lfunc_end26-init_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_dec_ref_pic_marking_buffer
	.type	init_dec_ref_pic_marking_buffer,@function
init_dec_ref_pic_marking_buffer:        # @init_dec_ref_pic_marking_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	$0, 72512(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	init_dec_ref_pic_marking_buffer, .Lfunc_end27-init_dec_ref_pic_marking_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_field
	.type	init_field,@function
init_field:                             # @init_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_7
# %bb.1:                                # %func_init_field.109
	callq	init_field.109
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_init_field.128
	.cfi_def_cfa %rbp, 16
	callq	init_field.128
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_init_field.154
	.cfi_def_cfa %rbp, 16
	callq	init_field.154
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_init_field.158
	.cfi_def_cfa %rbp, 16
	callq	init_field.158
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_init_field.170
	.cfi_def_cfa %rbp, 16
	callq	init_field.170
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_init_field.184
	.cfi_def_cfa %rbp, 16
	callq	init_field.184
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
	jmp	.LBB28_6
.Lfunc_end28:
	.size	init_field, .Lfunc_end28-init_field
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_snr
	.type	find_snr,@function
find_snr:                               # @find_snr
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_9
# %bb.1:                                # %func_find_snr.14
	callq	find_snr.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_find_snr.33
	.cfi_def_cfa %rbp, 16
	callq	find_snr.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_find_snr.36
	.cfi_def_cfa %rbp, 16
	callq	find_snr.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_find_snr.81
	.cfi_def_cfa %rbp, 16
	callq	find_snr.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %func_find_snr.106
	.cfi_def_cfa %rbp, 16
	callq	find_snr.106
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_find_snr.123
	.cfi_def_cfa %rbp, 16
	callq	find_snr.123
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_7:                               # %func_find_snr.136
	.cfi_def_cfa %rbp, 16
	callq	find_snr.136
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_8:                               # %func_find_snr.174
	.cfi_def_cfa %rbp, 16
	callq	find_snr.174
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB29_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB29_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB29_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB29_7
	jmp	.LBB29_8
.Lfunc_end29:
	.size	find_snr, .Lfunc_end29-find_snr
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion
	.type	find_distortion,@function
find_distortion:                        # @find_distortion
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_find_distortion.68
	callq	find_distortion.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_find_distortion.133
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.133
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_find_distortion.138
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.138
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_find_distortion.168
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.168
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_find_distortion.175
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.175
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_find_distortion.177
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.177
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_find_distortion.179
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.179
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_find_distortion.182
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.182
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	find_distortion, .Lfunc_end30-find_distortion
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB
	.type	copy_motion_vectors_MB,@function
copy_motion_vectors_MB:                 # @copy_motion_vectors_MB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_copy_motion_vectors_MB.46
	callq	copy_motion_vectors_MB.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_copy_motion_vectors_MB.48
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_copy_motion_vectors_MB.87
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_copy_motion_vectors_MB.142
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.142
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_copy_motion_vectors_MB.155
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.155
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_copy_motion_vectors_MB.164
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.164
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_copy_motion_vectors_MB.165
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.165
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_copy_motion_vectors_MB.176
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.176
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	copy_motion_vectors_MB, .Lfunc_end31-copy_motion_vectors_MB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function CalculateFrameNumber
	.type	CalculateFrameNumber,@function
CalculateFrameNumber:                   # @CalculateFrameNumber
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	je	.LBB32_5
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB32_3
# %bb.2:                                # %if.then2
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	jmp	.LBB32_4
.LBB32_3:                               # %if.else
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
.LBB32_4:                               # %if.end
	jmp	.LBB32_9
.LBB32_5:                               # %if.else24
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB32_8
# %bb.7:                                # %if.then35
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, frame_no
.LBB32_8:                               # %if.end37
	jmp	.LBB32_9
.LBB32_9:                               # %if.end38
	movl	frame_no, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	CalculateFrameNumber, .Lfunc_end32-CalculateFrameNumber
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_frame
	.type	put_buffer_frame,@function
put_buffer_frame:                       # @put_buffer_frame
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	put_buffer_frame, .Lfunc_end33-put_buffer_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_top
	.type	put_buffer_top,@function
put_buffer_top:                         # @put_buffer_top
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$0, 71796(%rax)
	movq	imgY_org_top, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_top, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	put_buffer_top, .Lfunc_end34-put_buffer_top
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_bot
	.type	put_buffer_bot,@function
put_buffer_bot:                         # @put_buffer_bot
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$1, 71796(%rax)
	movq	imgY_org_bot, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_bot, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end35:
	.size	put_buffer_bot, .Lfunc_end35-put_buffer_bot
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding
	.type	rdPictureCoding,@function
rdPictureCoding:                        # @rdPictureCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_rdPictureCoding.5
	callq	rdPictureCoding.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_rdPictureCoding.31
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_rdPictureCoding.64
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_rdPictureCoding.98
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_rdPictureCoding.110
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.110
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_rdPictureCoding.119
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.119
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_rdPictureCoding.132
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.132
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_rdPictureCoding.143
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.143
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	rdPictureCoding, .Lfunc_end36-rdPictureCoding
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.1        # -- Begin function code_a_picture.1
	.p2align	4, 0x90
	.type	code_a_picture.1,@function
code_a_picture.1:                       # @code_a_picture.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$416042703, -28(%rbp)   # imm = 0x18CC4ECF
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB37_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB37_8
.LBB37_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB37_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB37_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB37_7
.LBB37_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB37_7:                               # %land.end
.LBB37_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB37_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB37_10:                              # %if.end
	jmp	.LBB37_11
.LBB37_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB37_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_13
.LBB37_13:                              # %while.cond15
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB37_14
	jmp	.LBB37_15
.LBB37_14:                              # %while.body19
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB37_13
.LBB37_15:                              # %while.end
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_11
.LBB37_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB37_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB37_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB37_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB37_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB37_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB37_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_19
.LBB37_22:                              # %for.end
	jmp	.LBB37_23
.LBB37_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB37_25:                              # %if.end34
	cmpl	$416042703, -28(%rbp)   # imm = 0x18CC4ECF
	jne	.LBB37_27
.LBB37_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_26
.Lfunc_end37:
	.size	code_a_picture.1, .Lfunc_end37-code_a_picture.1
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.2      # -- Begin function encode_one_frame.2
	.p2align	4, 0x90
	.type	encode_one_frame.2,@function
encode_one_frame.2:                     # @encode_one_frame.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1807304537, -36(%rbp)  # imm = 0x6BB94759
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -48(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB38_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB38_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB38_9
.LBB38_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB38_8
.LBB38_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB38_8:                               # %if.end21
	jmp	.LBB38_9
.LBB38_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB38_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB38_38
.LBB38_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB38_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB38_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB38_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB38_20
.LBB38_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB38_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB38_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB38_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB38_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB38_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB38_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB38_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_29
.LBB38_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB38_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB38_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB38_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB38_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB38_35
.LBB38_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB38_35:                              # %if.end89
	jmp	.LBB38_37
.LBB38_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB38_37:                              # %if.end92
	jmp	.LBB38_38
.LBB38_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB38_41
.LBB38_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB38_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB38_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB38_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_45
# %bb.44:                               # %if.then109
	movl	-40(%rbp), %edi
	vmovss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB38_54
.LBB38_45:                              # %if.else112
	movl	-44(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB38_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB38_53
.LBB38_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB38_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB38_52
.LBB38_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB38_52:                              # %if.end130
	jmp	.LBB38_53
.LBB38_53:                              # %if.end131
	jmp	.LBB38_54
.LBB38_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB38_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB38_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB38_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB38_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB38_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB38_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB38_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB38_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB38_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB38_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB38_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB38_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB38_70
.LBB38_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB38_70:                              # %if.end171
	jmp	.LBB38_81
.LBB38_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB38_80
.LBB38_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB38_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB38_79
.LBB38_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB38_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB38_78
.LBB38_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB38_78:                              # %if.end187
	jmp	.LBB38_79
.LBB38_79:                              # %if.end188
	jmp	.LBB38_80
.LBB38_80:                              # %if.end189
	jmp	.LBB38_81
.LBB38_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB38_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB38_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB38_85
.LBB38_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB38_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB38_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB38_88
.LBB38_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB38_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB38_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB38_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB38_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB38_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB38_110
.LBB38_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB38_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB38_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_98
.LBB38_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB38_98:                              # %if.end239
	jmp	.LBB38_99
.LBB38_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB38_104
	jmp	.LBB38_100
.LBB38_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB38_102
	jmp	.LBB38_101
.LBB38_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB38_103
	jmp	.LBB38_108
.LBB38_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB38_109
.LBB38_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB38_109
.LBB38_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB38_107
.LBB38_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB38_107:                             # %if.end261
	jmp	.LBB38_109
.LBB38_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB38_109:                             # %sw.epilog
	jmp	.LBB38_110
.LBB38_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB38_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB38_119
.LBB38_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB38_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB38_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB38_118:                             # %if.end292
	jmp	.LBB38_119
.LBB38_119:                             # %if.end293
	jmp	.LBB38_120
.LBB38_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB38_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB38_123
.LBB38_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB38_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1807304537, -36(%rbp)  # imm = 0x6BB94759
	jne	.LBB38_125
.LBB38_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_124
.Lfunc_end38:
	.size	encode_one_frame.2, .Lfunc_end38-encode_one_frame.2
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.3               # -- Begin function buf2img.3
	.p2align	4, 0x90
	.type	buf2img.3,@function
buf2img.3:                              # @buf2img.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$438131119, -60(%rbp)   # imm = 0x1A1D59AF
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB39_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB39_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB39_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB39_6
	jmp	.LBB39_4
.LBB39_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB39_15
	jmp	.LBB39_5
.LBB39_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB39_24
	jmp	.LBB39_33
.LBB39_6:                               # %sw.bb
	movl	$0, -8(%rbp)
.LBB39_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB39_7 Depth=1
	movl	$0, -4(%rbp)
.LBB39_9:                               # %for.cond5
                                        #   Parent Loop BB39_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB39_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB39_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_9
.LBB39_12:                              # %for.end
                                        #   in Loop: Header=BB39_7 Depth=1
	jmp	.LBB39_13
.LBB39_13:                              # %for.inc14
                                        #   in Loop: Header=BB39_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_7
.LBB39_14:                              # %for.end16
	jmp	.LBB39_34
.LBB39_15:                              # %sw.bb17
	movl	$0, -8(%rbp)
.LBB39_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	$0, -4(%rbp)
.LBB39_18:                              # %for.cond22
                                        #   Parent Loop BB39_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB39_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_18
.LBB39_21:                              # %for.end38
                                        #   in Loop: Header=BB39_16 Depth=1
	jmp	.LBB39_22
.LBB39_22:                              # %for.inc39
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_16
.LBB39_23:                              # %for.end41
	jmp	.LBB39_34
.LBB39_24:                              # %sw.bb42
	movl	$0, -8(%rbp)
.LBB39_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -4(%rbp)
.LBB39_27:                              # %for.cond47
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB39_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_27
.LBB39_30:                              # %for.end74
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_31
.LBB39_31:                              # %for.inc75
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_25
.LBB39_32:                              # %for.end77
	jmp	.LBB39_33
.LBB39_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB39_34:                              # %sw.epilog
	jmp	.LBB39_44
.LBB39_35:                              # %if.else
	movl	$0, -8(%rbp)
.LBB39_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB39_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB39_36 Depth=1
	movl	$0, -4(%rbp)
.LBB39_38:                              # %for.cond82
                                        #   Parent Loop BB39_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB39_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB39_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_38
.LBB39_41:                              # %for.end102
                                        #   in Loop: Header=BB39_36 Depth=1
	jmp	.LBB39_42
.LBB39_42:                              # %for.inc103
                                        #   in Loop: Header=BB39_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_36
.LBB39_43:                              # %for.end105
	jmp	.LBB39_44
.LBB39_44:                              # %if.end106
	cmpl	$438131119, -60(%rbp)   # imm = 0x1A1D59AF
	jne	.LBB39_46
.LBB39_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_45
.Lfunc_end39:
	.size	buf2img.3, .Lfunc_end39-buf2img.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.4
	.type	frame_mode_buffer.4,@function
frame_mode_buffer.4:                    # @frame_mode_buffer.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$431622058, -8(%rbp)    # imm = 0x19BA07AA
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -16(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB40_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB40_3
.LBB40_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB40_3:                               # %if.end
	cmpl	$431622058, -8(%rbp)    # imm = 0x19BA07AA
	jne	.LBB40_5
.LBB40_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_4
.Lfunc_end40:
	.size	frame_mode_buffer.4, .Lfunc_end40-frame_mode_buffer.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.5
	.type	rdPictureCoding.5,@function
rdPictureCoding.5:                      # @rdPictureCoding.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$340746740, -24(%rbp)   # imm = 0x144F61F4
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB41_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB41_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB41_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB41_6
.LBB41_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB41_6:                               # %if.end
	jmp	.LBB41_8
.LBB41_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB41_8:                               # %if.end10
	jmp	.LBB41_10
.LBB41_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB41_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB41_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB41_13
.LBB41_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB41_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB41_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB41_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB41_18
.LBB41_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB41_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB41_20
.LBB41_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB41_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB41_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB41_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB41_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB41_26
.LBB41_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB41_26:                              # %if.end53
	jmp	.LBB41_34
.LBB41_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB41_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB41_33
.LBB41_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB41_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB41_32
.LBB41_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB41_32:                              # %if.end66
	jmp	.LBB41_33
.LBB41_33:                              # %if.end67
	jmp	.LBB41_34
.LBB41_34:                              # %if.end68
	jmp	.LBB41_36
.LBB41_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB41_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB41_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB41_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB41_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB41_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB41_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB41_46
.LBB41_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB41_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB41_45
.LBB41_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB41_45:                              # %if.end98
	jmp	.LBB41_46
.LBB41_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB41_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB41_51
.LBB41_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB41_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB41_50:                              # %if.end111
	jmp	.LBB41_51
.LBB41_51:                              # %if.end112
	cmpl	$340746740, -24(%rbp)   # imm = 0x144F61F4
	jne	.LBB41_53
.LBB41_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_52
.Lfunc_end41:
	.size	rdPictureCoding.5, .Lfunc_end41-rdPictureCoding.5
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.6        # -- Begin function code_a_picture.6
	.p2align	4, 0x90
	.type	code_a_picture.6,@function
code_a_picture.6:                       # @code_a_picture.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$385438613, -28(%rbp)   # imm = 0x16F95395
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB42_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB42_8
.LBB42_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB42_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB42_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB42_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB42_7
.LBB42_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB42_7:                               # %land.end
.LBB42_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB42_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB42_10:                              # %if.end
	jmp	.LBB42_11
.LBB42_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB42_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_13
.LBB42_13:                              # %while.cond15
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB42_14
	jmp	.LBB42_15
.LBB42_14:                              # %while.body19
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB42_13
.LBB42_15:                              # %while.end
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_11
.LBB42_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB42_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB42_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB42_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB42_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB42_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB42_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_19
.LBB42_22:                              # %for.end
	jmp	.LBB42_23
.LBB42_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB42_25:                              # %if.end34
	cmpl	$385438613, -28(%rbp)   # imm = 0x16F95395
	jne	.LBB42_27
.LBB42_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_26
.Lfunc_end42:
	.size	code_a_picture.6, .Lfunc_end42-code_a_picture.6
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.7
	.type	frame_mode_buffer.7,@function
frame_mode_buffer.7:                    # @frame_mode_buffer.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1904993729, -12(%rbp)  # imm = 0x718BE5C1
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB43_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB43_3
.LBB43_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB43_3:                               # %if.end
	cmpl	$1904993729, -12(%rbp)  # imm = 0x718BE5C1
	jne	.LBB43_5
.LBB43_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_4
.Lfunc_end43:
	.size	frame_mode_buffer.7, .Lfunc_end43-frame_mode_buffer.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.8
.LCPI44_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI44_1:
	.quad	4611686018427387904     # double 2
.LCPI44_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.8,@function
picture_structure_decision.8:           # @picture_structure_decision.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI44_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1314055809, -36(%rbp)  # imm = 0x4E52E681
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI44_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-44(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1314055809, -36(%rbp)  # imm = 0x4E52E681
	jne	.LBB44_2
.LBB44_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_1
.Lfunc_end44:
	.size	picture_structure_decision.8, .Lfunc_end44-picture_structure_decision.8
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.9
	.type	ReportP.9,@function
ReportP.9:                              # @ReportP.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1634418709, -12(%rbp)  # imm = 0x616B4015
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1634418709, -12(%rbp)  # imm = 0x616B4015
	jne	.LBB45_2
.LBB45_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_1
.Lfunc_end45:
	.size	ReportP.9, .Lfunc_end45-ReportP.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.10
.LCPI46_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI46_1:
	.quad	4611686018427387904     # double 2
.LCPI46_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.10,@function
picture_structure_decision.10:          # @picture_structure_decision.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI46_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1520978162, -28(%rbp)  # imm = 0x5AA848F2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1520978162, -28(%rbp)  # imm = 0x5AA848F2
	jne	.LBB46_2
.LBB46_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_1
.Lfunc_end46:
	.size	picture_structure_decision.10, .Lfunc_end46-picture_structure_decision.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.11
	.type	writeout_picture.11,@function
writeout_picture.11:                    # @writeout_picture.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1474252273, -28(%rbp)  # imm = 0x57DF4DF1
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB47_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB47_3:                               # %for.cond1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB47_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_3
.LBB47_6:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc10
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_8:                               # %for.end12
	cmpl	$1474252273, -28(%rbp)  # imm = 0x57DF4DF1
	jne	.LBB47_10
.LBB47_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_9
.Lfunc_end47:
	.size	writeout_picture.11, .Lfunc_end47-writeout_picture.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.12
	.type	writeUnit.12,@function
writeUnit.12:                           # @writeUnit.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1986867388, -16(%rbp)  # imm = 0x766D30BC
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB48_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB48_18
.LBB48_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB48_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB48_6
.LBB48_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB48_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB48_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB48_9
.LBB48_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB48_9:                               # %if.end21
	jmp	.LBB48_17
.LBB48_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB48_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB48_13
.LBB48_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB48_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB48_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB48_16
.LBB48_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB48_16:                              # %if.end39
	jmp	.LBB48_17
.LBB48_17:                              # %if.end40
	jmp	.LBB48_18
.LBB48_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1986867388, -16(%rbp)  # imm = 0x766D30BC
	jne	.LBB48_20
.LBB48_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_19
.Lfunc_end48:
	.size	writeUnit.12, .Lfunc_end48-writeUnit.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.13
	.type	GenerateFullPelRepresentation.13,@function
GenerateFullPelRepresentation.13:       # @GenerateFullPelRepresentation.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$311421003, -44(%rbp)   # imm = 0x128FE84B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -28(%rbp)
.LBB49_3:                               # %for.cond1
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB49_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc5
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end7
	cmpl	$311421003, -44(%rbp)   # imm = 0x128FE84B
	jne	.LBB49_10
.LBB49_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_9
.Lfunc_end49:
	.size	GenerateFullPelRepresentation.13, .Lfunc_end49-GenerateFullPelRepresentation.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.14
.LCPI50_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.14,@function
find_snr.14:                            # @find_snr.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$58853940, -48(%rbp)    # imm = 0x3820A34
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB50_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	$0, -4(%rbp)
.LBB50_4:                               # %for.cond8
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc22
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB50_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB50_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB50_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -4(%rbp)
.LBB50_13:                              # %for.cond33
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB50_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB50_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end76
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc77
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end79
	jmp	.LBB50_19
.LBB50_19:                              # %if.end
	jmp	.LBB50_41
.LBB50_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB50_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB50_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB50_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB50_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	$0, -4(%rbp)
.LBB50_25:                              # %for.cond89
                                        #   Parent Loop BB50_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB50_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB50_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB50_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_25
.LBB50_28:                              # %for.end112
                                        #   in Loop: Header=BB50_23 Depth=1
	jmp	.LBB50_29
.LBB50_29:                              # %for.inc113
                                        #   in Loop: Header=BB50_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_23
.LBB50_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB50_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB50_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB50_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	$0, -4(%rbp)
.LBB50_34:                              # %for.cond125
                                        #   Parent Loop BB50_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB50_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB50_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB50_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_34
.LBB50_37:                              # %for.end169
                                        #   in Loop: Header=BB50_32 Depth=1
	jmp	.LBB50_38
.LBB50_38:                              # %for.inc170
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_32
.LBB50_39:                              # %for.end172
	jmp	.LBB50_40
.LBB50_40:                              # %if.end173
	jmp	.LBB50_41
.LBB50_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB50_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB50_43:                              # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB50_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB50_45:                              # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB50_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB50_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB50_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI50_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB50_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI50_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI50_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB50_51
.LBB50_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB50_51:                              # %if.end219
	jmp	.LBB50_52
.LBB50_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB50_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB50_55
.LBB50_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB50_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB50_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB50_61
.LBB50_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB50_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB50_60
.LBB50_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB50_60:                              # %if.end394
	jmp	.LBB50_61
.LBB50_61:                              # %if.end395
	cmpl	$58853940, -48(%rbp)    # imm = 0x3820A34
	jne	.LBB50_63
.LBB50_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_62
.Lfunc_end50:
	.size	find_snr.14, .Lfunc_end50-find_snr.14
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.15       # -- Begin function code_a_picture.15
	.p2align	4, 0x90
	.type	code_a_picture.15,@function
code_a_picture.15:                      # @code_a_picture.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1359852490, -28(%rbp)  # imm = 0x510DB3CA
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB51_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB51_8
.LBB51_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB51_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB51_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB51_7
.LBB51_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB51_7:                               # %land.end
.LBB51_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB51_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB51_10:                              # %if.end
	jmp	.LBB51_11
.LBB51_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB51_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB51_11 Depth=1
	jmp	.LBB51_13
.LBB51_13:                              # %while.cond15
                                        #   Parent Loop BB51_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB51_14
	jmp	.LBB51_15
.LBB51_14:                              # %while.body19
                                        #   in Loop: Header=BB51_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB51_13
.LBB51_15:                              # %while.end
                                        #   in Loop: Header=BB51_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_11
.LBB51_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB51_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB51_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB51_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB51_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB51_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_19
.LBB51_22:                              # %for.end
	jmp	.LBB51_23
.LBB51_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB51_25:                              # %if.end34
	cmpl	$1359852490, -28(%rbp)  # imm = 0x510DB3CA
	jne	.LBB51_27
.LBB51_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_26
.Lfunc_end51:
	.size	code_a_picture.15, .Lfunc_end51-code_a_picture.15
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.16        # -- Begin function field_picture.16
	.p2align	4, 0x90
	.type	field_picture.16,@function
field_picture.16:                       # @field_picture.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$752489796, -16(%rbp)   # imm = 0x2CDA1544
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB52_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB52_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB52_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB52_6
.LBB52_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB52_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB52_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB52_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB52_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB52_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB52_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB52_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB52_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB52_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$752489796, -16(%rbp)   # imm = 0x2CDA1544
	jne	.LBB52_18
.LBB52_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_17
.Lfunc_end52:
	.size	field_picture.16, .Lfunc_end52-field_picture.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.17
	.type	ReportRB.17,@function
ReportRB.17:                            # @ReportRB.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1768663024, -20(%rbp)  # imm = 0x696BA7F0
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1768663024, -20(%rbp)  # imm = 0x696BA7F0
	jne	.LBB53_2
.LBB53_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_1
.Lfunc_end53:
	.size	ReportRB.17, .Lfunc_end53-ReportRB.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.18
	.type	ReportP.18,@function
ReportP.18:                             # @ReportP.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1082494981, -12(%rbp)  # imm = 0x40859005
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1082494981, -12(%rbp)  # imm = 0x40859005
	jne	.LBB54_2
.LBB54_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_1
.Lfunc_end54:
	.size	ReportP.18, .Lfunc_end54-ReportP.18
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.19     # -- Begin function encode_one_frame.19
	.p2align	4, 0x90
	.type	encode_one_frame.19,@function
encode_one_frame.19:                    # @encode_one_frame.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$170825507, -52(%rbp)   # imm = 0xA2E9723
	movl	$0, -36(%rbp)
	movl	$0, -68(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB55_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB55_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB55_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB55_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB55_9
.LBB55_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB55_8
.LBB55_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB55_8:                               # %if.end21
	jmp	.LBB55_9
.LBB55_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB55_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB55_38
.LBB55_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB55_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB55_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB55_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB55_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB55_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB55_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB55_20
.LBB55_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB55_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB55_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB55_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB55_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB55_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB55_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB55_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB55_29
.LBB55_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB55_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB55_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB55_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB55_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB55_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB55_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB55_35
.LBB55_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB55_35:                              # %if.end89
	jmp	.LBB55_37
.LBB55_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB55_37:                              # %if.end92
	jmp	.LBB55_38
.LBB55_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB55_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB55_41
.LBB55_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB55_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB55_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB55_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB55_45
# %bb.44:                               # %if.then109
	movl	-68(%rbp), %edi
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB55_54
.LBB55_45:                              # %if.else112
	movl	-36(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB55_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB55_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB55_53
.LBB55_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB55_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB55_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB55_52
.LBB55_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB55_52:                              # %if.end130
	jmp	.LBB55_53
.LBB55_53:                              # %if.end131
	jmp	.LBB55_54
.LBB55_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB55_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB55_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB55_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB55_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB55_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB55_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB55_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB55_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB55_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB55_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB55_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB55_66:                              # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB55_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB55_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB55_70
.LBB55_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB55_70:                              # %if.end171
	jmp	.LBB55_81
.LBB55_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB55_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB55_80
.LBB55_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB55_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB55_79
.LBB55_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB55_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB55_78
.LBB55_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB55_78:                              # %if.end187
	jmp	.LBB55_79
.LBB55_79:                              # %if.end188
	jmp	.LBB55_80
.LBB55_80:                              # %if.end189
	jmp	.LBB55_81
.LBB55_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB55_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB55_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB55_85
.LBB55_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB55_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB55_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB55_88
.LBB55_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB55_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB55_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB55_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB55_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB55_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB55_110
.LBB55_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB55_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB55_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB55_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_98
.LBB55_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB55_98:                              # %if.end239
	jmp	.LBB55_99
.LBB55_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB55_104
	jmp	.LBB55_100
.LBB55_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB55_102
	jmp	.LBB55_101
.LBB55_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB55_103
	jmp	.LBB55_108
.LBB55_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB55_109
.LBB55_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB55_109
.LBB55_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB55_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB55_107
.LBB55_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB55_107:                             # %if.end261
	jmp	.LBB55_109
.LBB55_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB55_109:                             # %sw.epilog
	jmp	.LBB55_110
.LBB55_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB55_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB55_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB55_119
.LBB55_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB55_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB55_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB55_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB55_118:                             # %if.end292
	jmp	.LBB55_119
.LBB55_119:                             # %if.end293
	jmp	.LBB55_120
.LBB55_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB55_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB55_123
.LBB55_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB55_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$170825507, -52(%rbp)   # imm = 0xA2E9723
	jne	.LBB55_125
.LBB55_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_124
.Lfunc_end55:
	.size	encode_one_frame.19, .Lfunc_end55-encode_one_frame.19
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.20        # -- Begin function field_picture.20
	.p2align	4, 0x90
	.type	field_picture.20,@function
field_picture.20:                       # @field_picture.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$62730717, -12(%rbp)    # imm = 0x3BD31DD
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB56_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB56_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB56_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB56_6
.LBB56_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB56_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB56_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB56_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB56_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB56_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB56_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB56_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$62730717, -12(%rbp)    # imm = 0x3BD31DD
	jne	.LBB56_18
.LBB56_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_17
.Lfunc_end56:
	.size	field_picture.20, .Lfunc_end56-field_picture.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.21
	.type	field_mode_buffer.21,@function
field_mode_buffer.21:                   # @field_mode_buffer.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$753309835, -16(%rbp)   # imm = 0x2CE6988B
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$753309835, -16(%rbp)   # imm = 0x2CE6988B
	jne	.LBB57_2
.LBB57_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_1
.Lfunc_end57:
	.size	field_mode_buffer.21, .Lfunc_end57-field_mode_buffer.21
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.22   # -- Begin function UnifiedOneForthPix.22
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.22,@function
UnifiedOneForthPix.22:                  # @UnifiedOneForthPix.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$749143347, -108(%rbp)  # imm = 0x2CA70533
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB58_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB58_3
.LBB58_2:                               # %if.then
	jmp	.LBB58_266
.LBB58_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB58_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB58_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB58_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB58_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB58_11
.LBB58_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB58_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB58_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB58_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB58_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB58_14:                              # %for.cond49
                                        #   Parent Loop BB58_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB58_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB58_18
.LBB58_17:                              # %cond.false
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-48(%rbp), %eax
.LBB58_18:                              # %cond.end
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_24
.LBB58_20:                              # %cond.false63
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB58_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB58_23
.LBB58_22:                              # %cond.false71
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-48(%rbp), %eax
.LBB58_23:                              # %cond.end72
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_24:                              # %cond.end74
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB58_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB58_27
.LBB58_26:                              # %cond.false83
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edx
.LBB58_27:                              # %cond.end84
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB58_33
.LBB58_29:                              # %cond.false89
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB58_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB58_32
.LBB58_31:                              # %cond.false97
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edx
.LBB58_32:                              # %cond.end98
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_33:                              # %cond.end100
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB58_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false115
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB58_36:                              # %cond.end117
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB58_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB58_42
.LBB58_38:                              # %cond.false122
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB58_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false131
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB58_41:                              # %cond.end133
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_42:                              # %cond.end135
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB58_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_45
.LBB58_44:                              # %cond.false152
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB58_45:                              # %cond.end154
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB58_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB58_51
.LBB58_47:                              # %cond.false159
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB58_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_50
.LBB58_49:                              # %cond.false168
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB58_50:                              # %cond.end170
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_51:                              # %cond.end172
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB58_54
.LBB58_53:                              # %cond.false187
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB58_54:                              # %cond.end189
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB58_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB58_60
.LBB58_56:                              # %cond.false194
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB58_59
.LBB58_58:                              # %cond.false203
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB58_59:                              # %cond.end205
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_60:                              # %cond.end207
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB58_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_63
.LBB58_62:                              # %cond.false225
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB58_63:                              # %cond.end227
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB58_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB58_69
.LBB58_65:                              # %cond.false232
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB58_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB58_68
.LBB58_67:                              # %cond.false241
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB58_68:                              # %cond.end243
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_69:                              # %cond.end245
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB58_72
.LBB58_71:                              # %cond.false260
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB58_72:                              # %cond.end262
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB58_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB58_78
.LBB58_74:                              # %cond.false267
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB58_77
.LBB58_76:                              # %cond.false276
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB58_77:                              # %cond.end278
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_78:                              # %cond.end280
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB58_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false297
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB58_81:                              # %cond.end298
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB58_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB58_87
.LBB58_83:                              # %cond.false303
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB58_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB58_86
.LBB58_85:                              # %cond.false311
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB58_86:                              # %cond.end312
                                        #   in Loop: Header=BB58_14 Depth=2
.LBB58_87:                              # %cond.end314
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_14
.LBB58_89:                              # %for.end
                                        #   in Loop: Header=BB58_12 Depth=1
	jmp	.LBB58_90
.LBB58_90:                              # %for.inc336
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB58_12
.LBB58_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB58_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB58_92 Depth=1
	movl	$0, -48(%rbp)
.LBB58_94:                              # %for.cond346
                                        #   Parent Loop BB58_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB58_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB58_98
.LBB58_97:                              # %cond.false364
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB58_98:                              # %cond.end366
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB58_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB58_101
.LBB58_100:                             # %cond.false378
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB58_101:                             # %cond.end380
                                        #   in Loop: Header=BB58_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB58_104
.LBB58_103:                             # %cond.false390
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB58_104:                             # %cond.end392
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB58_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB58_107
.LBB58_106:                             # %cond.false405
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB58_107:                             # %cond.end407
                                        #   in Loop: Header=BB58_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB58_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB58_110
.LBB58_109:                             # %cond.false417
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB58_110:                             # %cond.end419
                                        #   in Loop: Header=BB58_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB58_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false442
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_113:                             # %cond.end449
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_119
.LBB58_115:                             # %cond.false454
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB58_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_118
.LBB58_117:                             # %cond.false466
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_118:                             # %cond.end473
                                        #   in Loop: Header=BB58_94 Depth=2
.LBB58_119:                             # %cond.end475
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB58_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_122
.LBB58_121:                             # %cond.false490
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB58_122:                             # %cond.end493
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB58_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_128
.LBB58_124:                             # %cond.false498
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB58_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB58_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_127
.LBB58_126:                             # %cond.false506
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB58_127:                             # %cond.end509
                                        #   in Loop: Header=BB58_94 Depth=2
.LBB58_128:                             # %cond.end511
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB58_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB58_94
.LBB58_130:                             # %for.end516
                                        #   in Loop: Header=BB58_92 Depth=1
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc517
                                        #   in Loop: Header=BB58_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_92
.LBB58_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB58_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB58_133 Depth=1
	movl	$0, -44(%rbp)
.LBB58_135:                             # %for.cond533
                                        #   Parent Loop BB58_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_139
.LBB58_138:                             # %cond.false553
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB58_139:                             # %cond.end555
                                        #   in Loop: Header=BB58_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_145
.LBB58_141:                             # %cond.false567
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_144
.LBB58_143:                             # %cond.false579
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB58_144:                             # %cond.end581
                                        #   in Loop: Header=BB58_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_145:                             # %cond.end589
                                        #   in Loop: Header=BB58_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB58_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_157
.LBB58_147:                             # %cond.false594
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_150
.LBB58_149:                             # %cond.false607
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB58_150:                             # %cond.end609
                                        #   in Loop: Header=BB58_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_156
.LBB58_152:                             # %cond.false621
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_155
.LBB58_154:                             # %cond.false633
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB58_155:                             # %cond.end635
                                        #   in Loop: Header=BB58_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_156:                             # %cond.end643
                                        #   in Loop: Header=BB58_135 Depth=2
.LBB58_157:                             # %cond.end645
                                        #   in Loop: Header=BB58_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB58_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_135
.LBB58_159:                             # %for.end650
                                        #   in Loop: Header=BB58_133 Depth=1
	jmp	.LBB58_160
.LBB58_160:                             # %for.inc651
                                        #   in Loop: Header=BB58_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB58_133
.LBB58_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB58_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB58_162 Depth=1
	movl	$0, -48(%rbp)
.LBB58_164:                             # %for.cond659
                                        #   Parent Loop BB58_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB58_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_169
.LBB58_168:                             # %cond.false681
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_169:                             # %cond.end683
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_175
.LBB58_171:                             # %cond.false696
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_174
.LBB58_173:                             # %cond.false707
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_174:                             # %cond.end709
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_175:                             # %cond.end718
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_187
.LBB58_177:                             # %cond.false723
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_180
.LBB58_179:                             # %cond.false735
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_180:                             # %cond.end737
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_186
.LBB58_182:                             # %cond.false750
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_185
.LBB58_184:                             # %cond.false761
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_185:                             # %cond.end763
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_186:                             # %cond.end772
                                        #   in Loop: Header=BB58_164 Depth=2
.LBB58_187:                             # %cond.end774
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB58_261
.LBB58_188:                             # %if.else
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB58_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB58_192
.LBB58_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB58_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB58_226
.LBB58_192:                             # %if.then791
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_195
.LBB58_194:                             # %cond.false803
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_195:                             # %cond.end805
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_198
.LBB58_197:                             # %cond.false816
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_198:                             # %cond.end818
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_207
.LBB58_200:                             # %cond.false832
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_203
.LBB58_202:                             # %cond.false840
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_203:                             # %cond.end842
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_206
.LBB58_205:                             # %cond.false853
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_206:                             # %cond.end855
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_207:                             # %cond.end865
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_225
.LBB58_209:                             # %cond.false870
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_212
.LBB58_211:                             # %cond.false879
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_212:                             # %cond.end881
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_215
.LBB58_214:                             # %cond.false892
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_215:                             # %cond.end894
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_224
.LBB58_217:                             # %cond.false908
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_220
.LBB58_219:                             # %cond.false916
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_220:                             # %cond.end918
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_223
.LBB58_222:                             # %cond.false929
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_223:                             # %cond.end931
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_224:                             # %cond.end941
                                        #   in Loop: Header=BB58_164 Depth=2
.LBB58_225:                             # %cond.end943
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB58_260
.LBB58_226:                             # %if.else946
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_229
.LBB58_228:                             # %cond.false962
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_229:                             # %cond.end964
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_232
.LBB58_231:                             # %cond.false973
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_232:                             # %cond.end975
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_241
.LBB58_234:                             # %cond.false987
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_237
.LBB58_236:                             # %cond.false999
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_237:                             # %cond.end1001
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_240
.LBB58_239:                             # %cond.false1010
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_240:                             # %cond.end1012
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_241:                             # %cond.end1020
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB58_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_259
.LBB58_243:                             # %cond.false1025
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_246
.LBB58_245:                             # %cond.false1038
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_246:                             # %cond.end1040
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_249
.LBB58_248:                             # %cond.false1049
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_249:                             # %cond.end1051
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB58_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_258
.LBB58_251:                             # %cond.false1063
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB58_254
.LBB58_253:                             # %cond.false1075
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB58_254:                             # %cond.end1077
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB58_257
.LBB58_256:                             # %cond.false1086
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB58_257:                             # %cond.end1088
                                        #   in Loop: Header=BB58_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB58_258:                             # %cond.end1096
                                        #   in Loop: Header=BB58_164 Depth=2
.LBB58_259:                             # %cond.end1098
                                        #   in Loop: Header=BB58_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB58_260:                             # %if.end1101
                                        #   in Loop: Header=BB58_164 Depth=2
	jmp	.LBB58_261
.LBB58_261:                             # %if.end1102
                                        #   in Loop: Header=BB58_164 Depth=2
	jmp	.LBB58_262
.LBB58_262:                             # %for.inc1103
                                        #   in Loop: Header=BB58_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB58_164
.LBB58_263:                             # %for.end1105
                                        #   in Loop: Header=BB58_162 Depth=1
	jmp	.LBB58_264
.LBB58_264:                             # %for.inc1106
                                        #   in Loop: Header=BB58_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_162
.LBB58_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB58_266:                             # %return
	cmpl	$749143347, -108(%rbp)  # imm = 0x2CA70533
	jne	.LBB58_268
.LBB58_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_267
.Lfunc_end58:
	.size	UnifiedOneForthPix.22, .Lfunc_end58-UnifiedOneForthPix.22
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.23        # -- Begin function frame_picture.23
	.p2align	4, 0x90
	.type	frame_picture.23,@function
frame_picture.23:                       # @frame_picture.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1996013555, -16(%rbp)  # imm = 0x76F8BFF3
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB59_6
.LBB59_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB59_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB59_5
.LBB59_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB59_5:                               # %if.end
	jmp	.LBB59_6
.LBB59_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB59_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB59_8:                               # %if.end67
	cmpl	$1996013555, -16(%rbp)  # imm = 0x76F8BFF3
	jne	.LBB59_10
.LBB59_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_9
.Lfunc_end59:
	.size	frame_picture.23, .Lfunc_end59-frame_picture.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.24
	.type	GenerateFullPelRepresentation.24,@function
GenerateFullPelRepresentation.24:       # @GenerateFullPelRepresentation.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$2033046899, -44(%rbp)  # imm = 0x792DD573
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -32(%rbp)
.LBB60_3:                               # %for.cond1
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB60_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_3
.LBB60_6:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_7
.LBB60_7:                               # %for.inc5
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_1
.LBB60_8:                               # %for.end7
	cmpl	$2033046899, -44(%rbp)  # imm = 0x792DD573
	jne	.LBB60_10
.LBB60_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_9
.Lfunc_end60:
	.size	GenerateFullPelRepresentation.24, .Lfunc_end60-GenerateFullPelRepresentation.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.25
.LCPI61_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI61_1:
	.quad	4611686018427387904     # double 2
.LCPI61_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.25,@function
picture_structure_decision.25:          # @picture_structure_decision.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1212716994, -48(%rbp)  # imm = 0x484897C2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -44(%rbp)
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-44(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1212716994, -48(%rbp)  # imm = 0x484897C2
	jne	.LBB61_2
.LBB61_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_1
.Lfunc_end61:
	.size	picture_structure_decision.25, .Lfunc_end61-picture_structure_decision.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.26
.LCPI62_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI62_1:
	.quad	4611686018427387904     # double 2
.LCPI62_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.26,@function
picture_structure_decision.26:          # @picture_structure_decision.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI62_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1402775117, -32(%rbp)  # imm = 0x539CA64D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI62_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-44(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1402775117, -32(%rbp)  # imm = 0x539CA64D
	jne	.LBB62_2
.LBB62_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_1
.Lfunc_end62:
	.size	picture_structure_decision.26, .Lfunc_end62-picture_structure_decision.26
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.27        # -- Begin function field_picture.27
	.p2align	4, 0x90
	.type	field_picture.27,@function
field_picture.27:                       # @field_picture.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$965801369, -16(%rbp)   # imm = 0x3990F599
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB63_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB63_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB63_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB63_6
.LBB63_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB63_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB63_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB63_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB63_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB63_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB63_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB63_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB63_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB63_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB63_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$965801369, -16(%rbp)   # imm = 0x3990F599
	jne	.LBB63_18
.LBB63_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_17
.Lfunc_end63:
	.size	field_picture.27, .Lfunc_end63-field_picture.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.28
	.type	GenerateFullPelRepresentation.28,@function
GenerateFullPelRepresentation.28:       # @GenerateFullPelRepresentation.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1970846509, -44(%rbp)  # imm = 0x7578BB2D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -32(%rbp)
.LBB64_3:                               # %for.cond1
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB64_3
.LBB64_6:                               # %for.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_7
.LBB64_7:                               # %for.inc5
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_1
.LBB64_8:                               # %for.end7
	cmpl	$1970846509, -44(%rbp)  # imm = 0x7578BB2D
	jne	.LBB64_10
.LBB64_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_9
.Lfunc_end64:
	.size	GenerateFullPelRepresentation.28, .Lfunc_end64-GenerateFullPelRepresentation.28
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.29
	.type	GenerateFullPelRepresentation.29,@function
GenerateFullPelRepresentation.29:       # @GenerateFullPelRepresentation.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$924026665, -44(%rbp)   # imm = 0x37138729
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -32(%rbp)
.LBB65_3:                               # %for.cond1
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB65_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_3
.LBB65_6:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_7
.LBB65_7:                               # %for.inc5
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_1
.LBB65_8:                               # %for.end7
	cmpl	$924026665, -44(%rbp)   # imm = 0x37138729
	jne	.LBB65_10
.LBB65_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_9
.Lfunc_end65:
	.size	GenerateFullPelRepresentation.29, .Lfunc_end65-GenerateFullPelRepresentation.29
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.30     # -- Begin function encode_one_frame.30
	.p2align	4, 0x90
	.type	encode_one_frame.30,@function
encode_one_frame.30:                    # @encode_one_frame.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$302353202, -44(%rbp)   # imm = 0x12058B32
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB66_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB66_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB66_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB66_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB66_9
.LBB66_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB66_8
.LBB66_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB66_8:                               # %if.end21
	jmp	.LBB66_9
.LBB66_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB66_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB66_38
.LBB66_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB66_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB66_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB66_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB66_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB66_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB66_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB66_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB66_20
.LBB66_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB66_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB66_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB66_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB66_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB66_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB66_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB66_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_29
.LBB66_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB66_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB66_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB66_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB66_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB66_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB66_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB66_35
.LBB66_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB66_35:                              # %if.end89
	jmp	.LBB66_37
.LBB66_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB66_37:                              # %if.end92
	jmp	.LBB66_38
.LBB66_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB66_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB66_41
.LBB66_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB66_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB66_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB66_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB66_45
# %bb.44:                               # %if.then109
	movl	-32(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB66_54
.LBB66_45:                              # %if.else112
	movl	-64(%rbp), %edi
	vmovss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB66_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB66_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB66_53
.LBB66_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB66_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB66_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB66_52
.LBB66_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB66_52:                              # %if.end130
	jmp	.LBB66_53
.LBB66_53:                              # %if.end131
	jmp	.LBB66_54
.LBB66_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB66_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB66_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB66_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB66_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB66_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB66_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB66_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB66_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB66_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB66_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB66_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB66_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB66_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB66_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB66_70
.LBB66_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB66_70:                              # %if.end171
	jmp	.LBB66_81
.LBB66_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB66_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB66_80
.LBB66_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB66_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB66_79
.LBB66_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB66_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB66_78
.LBB66_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB66_78:                              # %if.end187
	jmp	.LBB66_79
.LBB66_79:                              # %if.end188
	jmp	.LBB66_80
.LBB66_80:                              # %if.end189
	jmp	.LBB66_81
.LBB66_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB66_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB66_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB66_85
.LBB66_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB66_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB66_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB66_88
.LBB66_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB66_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB66_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB66_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB66_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB66_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB66_110
.LBB66_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB66_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB66_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB66_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_98
.LBB66_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB66_98:                              # %if.end239
	jmp	.LBB66_99
.LBB66_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB66_104
	jmp	.LBB66_100
.LBB66_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB66_102
	jmp	.LBB66_101
.LBB66_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB66_103
	jmp	.LBB66_108
.LBB66_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB66_109
.LBB66_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB66_109
.LBB66_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB66_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB66_107
.LBB66_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB66_107:                             # %if.end261
	jmp	.LBB66_109
.LBB66_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB66_109:                             # %sw.epilog
	jmp	.LBB66_110
.LBB66_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB66_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB66_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB66_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB66_119
.LBB66_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB66_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB66_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB66_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB66_118:                             # %if.end292
	jmp	.LBB66_119
.LBB66_119:                             # %if.end293
	jmp	.LBB66_120
.LBB66_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB66_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB66_123
.LBB66_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB66_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$302353202, -44(%rbp)   # imm = 0x12058B32
	jne	.LBB66_125
.LBB66_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_124
.Lfunc_end66:
	.size	encode_one_frame.30, .Lfunc_end66-encode_one_frame.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.31
	.type	rdPictureCoding.31,@function
rdPictureCoding.31:                     # @rdPictureCoding.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1487034636, -24(%rbp)  # imm = 0x58A2590C
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB67_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB67_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB67_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB67_6
.LBB67_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB67_6:                               # %if.end
	jmp	.LBB67_8
.LBB67_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB67_8:                               # %if.end10
	jmp	.LBB67_10
.LBB67_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB67_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB67_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB67_13
.LBB67_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB67_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB67_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB67_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB67_18
.LBB67_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB67_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB67_20
.LBB67_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB67_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB67_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB67_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB67_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB67_26
.LBB67_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB67_26:                              # %if.end53
	jmp	.LBB67_34
.LBB67_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB67_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB67_33
.LBB67_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB67_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB67_32
.LBB67_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB67_32:                              # %if.end66
	jmp	.LBB67_33
.LBB67_33:                              # %if.end67
	jmp	.LBB67_34
.LBB67_34:                              # %if.end68
	jmp	.LBB67_36
.LBB67_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB67_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB67_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB67_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB67_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB67_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB67_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB67_46
.LBB67_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB67_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB67_45
.LBB67_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB67_45:                              # %if.end98
	jmp	.LBB67_46
.LBB67_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB67_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB67_51
.LBB67_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB67_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB67_50:                              # %if.end111
	jmp	.LBB67_51
.LBB67_51:                              # %if.end112
	cmpl	$1487034636, -24(%rbp)  # imm = 0x58A2590C
	jne	.LBB67_53
.LBB67_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_52
.Lfunc_end67:
	.size	rdPictureCoding.31, .Lfunc_end67-rdPictureCoding.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.32
	.type	ReportIntra.32,@function
ReportIntra.32:                         # @ReportIntra.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1503310735, -12(%rbp)  # imm = 0x599AB38F
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB68_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB68_3
.LBB68_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB68_3:                               # %if.end
	cmpl	$1503310735, -12(%rbp)  # imm = 0x599AB38F
	jne	.LBB68_5
.LBB68_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_4
.Lfunc_end68:
	.size	ReportIntra.32, .Lfunc_end68-ReportIntra.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.33
.LCPI69_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.33,@function
find_snr.33:                            # @find_snr.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1480786773, -52(%rbp)  # imm = 0x58430355
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB69_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB69_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB69_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	$0, -4(%rbp)
.LBB69_4:                               # %for.cond8
                                        #   Parent Loop BB69_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB69_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB69_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB69_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_4
.LBB69_7:                               # %for.end
                                        #   in Loop: Header=BB69_2 Depth=1
	jmp	.LBB69_8
.LBB69_8:                               # %for.inc22
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_2
.LBB69_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB69_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB69_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB69_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB69_11 Depth=1
	movl	$0, -4(%rbp)
.LBB69_13:                              # %for.cond33
                                        #   Parent Loop BB69_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB69_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB69_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB69_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_13
.LBB69_16:                              # %for.end76
                                        #   in Loop: Header=BB69_11 Depth=1
	jmp	.LBB69_17
.LBB69_17:                              # %for.inc77
                                        #   in Loop: Header=BB69_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_11
.LBB69_18:                              # %for.end79
	jmp	.LBB69_19
.LBB69_19:                              # %if.end
	jmp	.LBB69_41
.LBB69_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB69_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB69_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB69_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB69_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	$0, -4(%rbp)
.LBB69_25:                              # %for.cond89
                                        #   Parent Loop BB69_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB69_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB69_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_25
.LBB69_28:                              # %for.end112
                                        #   in Loop: Header=BB69_23 Depth=1
	jmp	.LBB69_29
.LBB69_29:                              # %for.inc113
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_23
.LBB69_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB69_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB69_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB69_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	$0, -4(%rbp)
.LBB69_34:                              # %for.cond125
                                        #   Parent Loop BB69_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB69_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB69_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB69_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_34
.LBB69_37:                              # %for.end169
                                        #   in Loop: Header=BB69_32 Depth=1
	jmp	.LBB69_38
.LBB69_38:                              # %for.inc170
                                        #   in Loop: Header=BB69_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_32
.LBB69_39:                              # %for.end172
	jmp	.LBB69_40
.LBB69_40:                              # %if.end173
	jmp	.LBB69_41
.LBB69_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB69_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB69_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB69_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB69_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB69_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB69_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB69_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI69_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB69_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI69_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI69_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB69_51
.LBB69_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB69_51:                              # %if.end219
	jmp	.LBB69_52
.LBB69_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB69_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB69_55
.LBB69_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB69_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB69_61
.LBB69_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB69_60
.LBB69_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB69_60:                              # %if.end394
	jmp	.LBB69_61
.LBB69_61:                              # %if.end395
	cmpl	$1480786773, -52(%rbp)  # imm = 0x58430355
	jne	.LBB69_63
.LBB69_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_62
.Lfunc_end69:
	.size	find_snr.33, .Lfunc_end69-find_snr.33
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.34      # -- Begin function copy_rdopt_data.34
	.p2align	4, 0x90
	.type	copy_rdopt_data.34,@function
copy_rdopt_data.34:                     # @copy_rdopt_data.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1697756786, -52(%rbp)  # imm = 0x6531B672
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB70_4
.LBB70_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB70_4
.LBB70_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB70_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_7 Depth 2
                                        #       Child Loop BB70_9 Depth 3
                                        #         Child Loop BB70_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	$0, -8(%rbp)
.LBB70_7:                               # %for.cond17
                                        #   Parent Loop BB70_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_9 Depth 3
                                        #         Child Loop BB70_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB70_7 Depth=2
	movl	$0, -12(%rbp)
.LBB70_9:                               # %for.cond21
                                        #   Parent Loop BB70_5 Depth=1
                                        #     Parent Loop BB70_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB70_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB70_9 Depth=3
	movl	$0, -16(%rbp)
.LBB70_11:                              # %for.cond25
                                        #   Parent Loop BB70_5 Depth=1
                                        #     Parent Loop BB70_7 Depth=2
                                        #       Parent Loop BB70_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB70_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB70_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB70_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_11
.LBB70_14:                              # %for.end
                                        #   in Loop: Header=BB70_9 Depth=3
	jmp	.LBB70_15
.LBB70_15:                              # %for.inc46
                                        #   in Loop: Header=BB70_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_9
.LBB70_16:                              # %for.end48
                                        #   in Loop: Header=BB70_7 Depth=2
	jmp	.LBB70_17
.LBB70_17:                              # %for.inc49
                                        #   in Loop: Header=BB70_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_7
.LBB70_18:                              # %for.end51
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_19
.LBB70_19:                              # %for.inc52
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_5
.LBB70_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB70_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_23 Depth 2
                                        #       Child Loop BB70_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB70_21 Depth=1
	movl	$0, -12(%rbp)
.LBB70_23:                              # %for.cond59
                                        #   Parent Loop BB70_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB70_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB70_23 Depth=2
	movl	$0, -16(%rbp)
.LBB70_25:                              # %for.cond63
                                        #   Parent Loop BB70_21 Depth=1
                                        #     Parent Loop BB70_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB70_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB70_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB70_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_25
.LBB70_28:                              # %for.end82
                                        #   in Loop: Header=BB70_23 Depth=2
	jmp	.LBB70_29
.LBB70_29:                              # %for.inc83
                                        #   in Loop: Header=BB70_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_23
.LBB70_30:                              # %for.end85
                                        #   in Loop: Header=BB70_21 Depth=1
	jmp	.LBB70_31
.LBB70_31:                              # %for.inc86
                                        #   in Loop: Header=BB70_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_21
.LBB70_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB70_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB70_33 Depth=1
	movl	$0, -4(%rbp)
.LBB70_35:                              # %for.cond93
                                        #   Parent Loop BB70_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB70_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB70_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB70_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB70_38:                              # %if.end
                                        #   in Loop: Header=BB70_35 Depth=2
	jmp	.LBB70_39
.LBB70_39:                              # %for.inc176
                                        #   in Loop: Header=BB70_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_35
.LBB70_40:                              # %for.end178
                                        #   in Loop: Header=BB70_33 Depth=1
	jmp	.LBB70_41
.LBB70_41:                              # %for.inc179
                                        #   in Loop: Header=BB70_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_33
.LBB70_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB70_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB70_43 Depth=1
	movl	$0, -4(%rbp)
.LBB70_45:                              # %for.cond186
                                        #   Parent Loop BB70_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB70_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB70_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_45
.LBB70_48:                              # %for.end203
                                        #   in Loop: Header=BB70_43 Depth=1
	jmp	.LBB70_49
.LBB70_49:                              # %for.inc204
                                        #   in Loop: Header=BB70_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_43
.LBB70_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB70_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB70_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB70_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB70_52 Depth=1
	movl	$0, -4(%rbp)
.LBB70_54:                              # %for.cond214
                                        #   Parent Loop BB70_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB70_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB70_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB70_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_54
.LBB70_57:                              # %for.end247
                                        #   in Loop: Header=BB70_52 Depth=1
	jmp	.LBB70_58
.LBB70_58:                              # %for.inc248
                                        #   in Loop: Header=BB70_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_52
.LBB70_59:                              # %for.end250
	jmp	.LBB70_60
.LBB70_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB70_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB70_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB70_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB70_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB70_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_68:                              # %for.cond283
                                        #   Parent Loop BB70_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB70_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB70_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_68
.LBB70_71:                              # %for.end306
                                        #   in Loop: Header=BB70_66 Depth=1
	jmp	.LBB70_72
.LBB70_72:                              # %for.inc307
                                        #   in Loop: Header=BB70_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_66
.LBB70_73:                              # %for.end309
	jmp	.LBB70_98
.LBB70_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB70_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB70_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB70_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_79:                              # %for.cond324
                                        #   Parent Loop BB70_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB70_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB70_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_79
.LBB70_82:                              # %for.end341
                                        #   in Loop: Header=BB70_77 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc342
                                        #   in Loop: Header=BB70_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_77
.LBB70_84:                              # %for.end344
	jmp	.LBB70_97
.LBB70_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB70_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB70_96
.LBB70_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB70_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_90:                              # %for.cond359
                                        #   Parent Loop BB70_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB70_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB70_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_90
.LBB70_93:                              # %for.end384
                                        #   in Loop: Header=BB70_88 Depth=1
	jmp	.LBB70_94
.LBB70_94:                              # %for.inc385
                                        #   in Loop: Header=BB70_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_88
.LBB70_95:                              # %for.end387
	jmp	.LBB70_96
.LBB70_96:                              # %if.end388
	jmp	.LBB70_97
.LBB70_97:                              # %if.end389
	jmp	.LBB70_98
.LBB70_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB70_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB70_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB70_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB70_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB70_103 Depth=1
	movl	$0, -4(%rbp)
.LBB70_105:                             # %for.cond410
                                        #   Parent Loop BB70_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB70_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB70_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB70_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB70_109
.LBB70_108:                             # %if.else483
                                        #   in Loop: Header=BB70_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB70_109:                             # %if.end506
                                        #   in Loop: Header=BB70_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB70_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB70_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB70_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB70_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB70_113
.LBB70_112:                             # %if.else568
                                        #   in Loop: Header=BB70_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB70_113:                             # %if.end591
                                        #   in Loop: Header=BB70_105 Depth=2
	jmp	.LBB70_114
.LBB70_114:                             # %if.end592
                                        #   in Loop: Header=BB70_105 Depth=2
	jmp	.LBB70_115
.LBB70_115:                             # %for.inc593
                                        #   in Loop: Header=BB70_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_105
.LBB70_116:                             # %for.end595
                                        #   in Loop: Header=BB70_103 Depth=1
	jmp	.LBB70_117
.LBB70_117:                             # %for.inc596
                                        #   in Loop: Header=BB70_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_103
.LBB70_118:                             # %for.end598
	jmp	.LBB70_130
.LBB70_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB70_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	$0, -4(%rbp)
.LBB70_122:                             # %for.cond604
                                        #   Parent Loop BB70_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB70_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB70_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB70_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB70_125:                             # %if.end654
                                        #   in Loop: Header=BB70_122 Depth=2
	jmp	.LBB70_126
.LBB70_126:                             # %for.inc655
                                        #   in Loop: Header=BB70_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_122
.LBB70_127:                             # %for.end657
                                        #   in Loop: Header=BB70_120 Depth=1
	jmp	.LBB70_128
.LBB70_128:                             # %for.inc658
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_120
.LBB70_129:                             # %for.end660
	jmp	.LBB70_130
.LBB70_130:                             # %if.end661
	jmp	.LBB70_131
.LBB70_131:                             # %if.end662
	cmpl	$1697756786, -52(%rbp)  # imm = 0x6531B672
	jne	.LBB70_133
.LBB70_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_132
.Lfunc_end70:
	.size	copy_rdopt_data.34, .Lfunc_end70-copy_rdopt_data.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.35
	.type	writeUnit.35,@function
writeUnit.35:                           # @writeUnit.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1317862719, -16(%rbp)  # imm = 0x4E8CFD3F
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB71_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB71_18
.LBB71_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB71_6
.LBB71_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB71_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB71_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB71_9
.LBB71_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB71_9:                               # %if.end21
	jmp	.LBB71_17
.LBB71_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB71_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB71_13
.LBB71_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB71_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB71_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB71_16
.LBB71_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB71_16:                              # %if.end39
	jmp	.LBB71_17
.LBB71_17:                              # %if.end40
	jmp	.LBB71_18
.LBB71_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1317862719, -16(%rbp)  # imm = 0x4E8CFD3F
	jne	.LBB71_20
.LBB71_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_19
.Lfunc_end71:
	.size	writeUnit.35, .Lfunc_end71-writeUnit.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.36
.LCPI72_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.36,@function
find_snr.36:                            # @find_snr.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$100266479, -48(%rbp)   # imm = 0x5F9F1EF
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB72_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB72_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB72_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	$0, -4(%rbp)
.LBB72_4:                               # %for.cond8
                                        #   Parent Loop BB72_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB72_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB72_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB72_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_4
.LBB72_7:                               # %for.end
                                        #   in Loop: Header=BB72_2 Depth=1
	jmp	.LBB72_8
.LBB72_8:                               # %for.inc22
                                        #   in Loop: Header=BB72_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_2
.LBB72_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB72_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB72_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	$0, -4(%rbp)
.LBB72_13:                              # %for.cond33
                                        #   Parent Loop BB72_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB72_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB72_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB72_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_13
.LBB72_16:                              # %for.end76
                                        #   in Loop: Header=BB72_11 Depth=1
	jmp	.LBB72_17
.LBB72_17:                              # %for.inc77
                                        #   in Loop: Header=BB72_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_11
.LBB72_18:                              # %for.end79
	jmp	.LBB72_19
.LBB72_19:                              # %if.end
	jmp	.LBB72_41
.LBB72_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB72_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB72_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB72_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB72_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB72_23 Depth=1
	movl	$0, -4(%rbp)
.LBB72_25:                              # %for.cond89
                                        #   Parent Loop BB72_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB72_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB72_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB72_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_25
.LBB72_28:                              # %for.end112
                                        #   in Loop: Header=BB72_23 Depth=1
	jmp	.LBB72_29
.LBB72_29:                              # %for.inc113
                                        #   in Loop: Header=BB72_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_23
.LBB72_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB72_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB72_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	$0, -4(%rbp)
.LBB72_34:                              # %for.cond125
                                        #   Parent Loop BB72_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB72_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB72_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB72_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_34
.LBB72_37:                              # %for.end169
                                        #   in Loop: Header=BB72_32 Depth=1
	jmp	.LBB72_38
.LBB72_38:                              # %for.inc170
                                        #   in Loop: Header=BB72_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_32
.LBB72_39:                              # %for.end172
	jmp	.LBB72_40
.LBB72_40:                              # %if.end173
	jmp	.LBB72_41
.LBB72_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB72_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB72_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB72_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB72_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB72_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB72_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB72_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI72_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI72_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI72_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB72_51
.LBB72_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB72_51:                              # %if.end219
	jmp	.LBB72_52
.LBB72_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB72_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB72_55
.LBB72_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB72_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB72_61
.LBB72_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB72_60
.LBB72_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB72_60:                              # %if.end394
	jmp	.LBB72_61
.LBB72_61:                              # %if.end395
	cmpl	$100266479, -48(%rbp)   # imm = 0x5F9F1EF
	jne	.LBB72_63
.LBB72_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_62
.Lfunc_end72:
	.size	find_snr.36, .Lfunc_end72-find_snr.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.37
	.type	ReportSP.37,@function
ReportSP.37:                            # @ReportSP.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1130274634, -12(%rbp)  # imm = 0x435E9F4A
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1130274634, -12(%rbp)  # imm = 0x435E9F4A
	jne	.LBB73_2
.LBB73_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_1
.Lfunc_end73:
	.size	ReportSP.37, .Lfunc_end73-ReportSP.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.38
	.type	ReadOneFrame.38,@function
ReadOneFrame.38:                        # @ReadOneFrame.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1990646151, -72(%rbp)  # imm = 0x76A6D987
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB74_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB74_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	imull	-44(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB74_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB74_4:                               # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB74_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB74_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB74_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB74_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB74_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB74_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB74_26
# %bb.11:                               # %if.then42
	cmpl	$0, -32(%rbp)
	je	.LBB74_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB74_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB74_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB74_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB74_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB74_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB74_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB74_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB74_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB74_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB74_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB74_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB74_24:                              # %if.end85
	jmp	.LBB74_25
.LBB74_25:                              # %if.end86
	jmp	.LBB74_27
.LBB74_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB74_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1990646151, -72(%rbp)  # imm = 0x76A6D987
	jne	.LBB74_29
.LBB74_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_28
.Lfunc_end74:
	.size	ReadOneFrame.38, .Lfunc_end74-ReadOneFrame.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.39
	.type	ReadOneFrame.39,@function
ReadOneFrame.39:                        # @ReadOneFrame.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$199128235, -72(%rbp)   # imm = 0xBDE74AB
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB75_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB75_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB75_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB75_4:                               # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB75_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB75_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB75_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB75_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB75_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB75_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB75_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB75_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB75_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB75_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB75_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB75_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB75_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB75_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB75_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB75_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB75_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB75_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB75_24:                              # %if.end85
	jmp	.LBB75_25
.LBB75_25:                              # %if.end86
	jmp	.LBB75_27
.LBB75_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB75_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$199128235, -72(%rbp)   # imm = 0xBDE74AB
	jne	.LBB75_29
.LBB75_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_28
.Lfunc_end75:
	.size	ReadOneFrame.39, .Lfunc_end75-ReadOneFrame.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.40
.LCPI76_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.40,@function
init_frame.40:                          # @init_frame.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$176584136, -16(%rbp)   # imm = 0xA8675C8
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB76_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB76_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB76_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB76_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB76_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB76_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB76_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_17
.LBB76_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_17:                              # %if.end32
	jmp	.LBB76_25
.LBB76_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_22
.LBB76_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB76_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB76_24:                              # %if.end50
	jmp	.LBB76_25
.LBB76_25:                              # %if.end51
	jmp	.LBB76_26
.LBB76_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB76_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB76_28:                              # %if.end62
	jmp	.LBB76_72
.LBB76_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB76_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB76_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB76_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB76_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_30
.LBB76_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB76_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB76_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB76_36:                              # %if.end102
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB76_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB76_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB76_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB76_41
.LBB76_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB76_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB76_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB76_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB76_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_49
.LBB76_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB76_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB76_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB76_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB76_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB76_58
.LBB76_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB76_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB76_57:                              # %cond.end
.LBB76_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB76_66
.LBB76_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB76_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB76_65
.LBB76_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB76_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB76_64
.LBB76_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB76_64:                              # %cond.end209
.LBB76_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_66:                              # %if.end214
	jmp	.LBB76_67
.LBB76_67:                              # %if.end215
	jmp	.LBB76_71
.LBB76_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB76_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB76_70:                              # %if.end226
	jmp	.LBB76_71
.LBB76_71:                              # %if.end227
	jmp	.LBB76_72
.LBB76_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$176584136, -16(%rbp)   # imm = 0xA8675C8
	jne	.LBB76_74
.LBB76_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_73
.Lfunc_end76:
	.size	init_frame.40, .Lfunc_end76-init_frame.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.41
	.type	ReadOneFrame.41,@function
ReadOneFrame.41:                        # @ReadOneFrame.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$333990084, -68(%rbp)   # imm = 0x13E848C4
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-44(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB77_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB77_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB77_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB77_4:                               # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB77_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB77_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB77_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB77_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB77_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB77_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB77_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB77_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB77_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB77_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB77_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB77_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB77_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB77_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB77_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB77_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB77_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB77_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB77_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB77_24:                              # %if.end85
	jmp	.LBB77_25
.LBB77_25:                              # %if.end86
	jmp	.LBB77_27
.LBB77_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB77_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$333990084, -68(%rbp)   # imm = 0x13E848C4
	jne	.LBB77_29
.LBB77_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_28
.Lfunc_end77:
	.size	ReadOneFrame.41, .Lfunc_end77-ReadOneFrame.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.42
	.type	PaddAutoCropBorders.42,@function
PaddAutoCropBorders.42:                 # @PaddAutoCropBorders.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1358982012, -36(%rbp)  # imm = 0x51006B7C
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB78_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_3:                               # %for.cond1
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB78_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_3
.LBB78_6:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_7
.LBB78_7:                               # %for.inc10
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_8:                               # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB78_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	$0, -8(%rbp)
.LBB78_11:                              # %for.cond16
                                        #   Parent Loop BB78_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB78_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB78_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB78_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_11
.LBB78_14:                              # %for.end30
                                        #   in Loop: Header=BB78_9 Depth=1
	jmp	.LBB78_15
.LBB78_15:                              # %for.inc31
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_9
.LBB78_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB78_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB78_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB78_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB78_18 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_20:                              # %for.cond38
                                        #   Parent Loop BB78_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB78_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB78_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB78_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_20
.LBB78_23:                              # %for.end65
                                        #   in Loop: Header=BB78_18 Depth=1
	jmp	.LBB78_24
.LBB78_24:                              # %for.inc66
                                        #   in Loop: Header=BB78_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_18
.LBB78_25:                              # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB78_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB78_26 Depth=1
	movl	$0, -8(%rbp)
.LBB78_28:                              # %for.cond72
                                        #   Parent Loop BB78_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB78_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB78_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB78_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_28
.LBB78_31:                              # %for.end99
                                        #   in Loop: Header=BB78_26 Depth=1
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc100
                                        #   in Loop: Header=BB78_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_26
.LBB78_33:                              # %for.end102
	jmp	.LBB78_34
.LBB78_34:                              # %if.end
	cmpl	$1358982012, -36(%rbp)  # imm = 0x51006B7C
	jne	.LBB78_36
.LBB78_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_35
.Lfunc_end78:
	.size	PaddAutoCropBorders.42, .Lfunc_end78-PaddAutoCropBorders.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.43
	.type	writeUnit.43,@function
writeUnit.43:                           # @writeUnit.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1423640304, -16(%rbp)  # imm = 0x54DB06F0
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB79_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB79_18
.LBB79_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB79_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB79_6
.LBB79_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB79_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB79_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB79_9
.LBB79_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB79_9:                               # %if.end21
	jmp	.LBB79_17
.LBB79_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB79_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB79_13
.LBB79_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB79_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB79_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB79_16
.LBB79_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB79_16:                              # %if.end39
	jmp	.LBB79_17
.LBB79_17:                              # %if.end40
	jmp	.LBB79_18
.LBB79_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1423640304, -16(%rbp)  # imm = 0x54DB06F0
	jne	.LBB79_20
.LBB79_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_19
.Lfunc_end79:
	.size	writeUnit.43, .Lfunc_end79-writeUnit.43
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.44        # -- Begin function MbAffPostProc.44
	.p2align	4, 0x90
	.type	MbAffPostProc.44,@function
MbAffPostProc.44:                       # @MbAffPostProc.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$595999704, -44(%rbp)   # imm = 0x23863BD8
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB80_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB80_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_5 Depth 2
                                        #       Child Loop BB80_7 Depth 3
                                        #     Child Loop BB80_13 Depth 2
                                        #       Child Loop BB80_15 Depth 3
                                        #     Child Loop BB80_21 Depth 2
                                        #       Child Loop BB80_23 Depth 3
                                        #         Child Loop BB80_25 Depth 4
                                        #       Child Loop BB80_31 Depth 3
                                        #         Child Loop BB80_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB80_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB80_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB80_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB80_5:                               # %for.cond5
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB80_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB80_5 Depth=2
	movl	$0, -8(%rbp)
.LBB80_7:                               # %for.cond8
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB80_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB80_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB80_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_7
.LBB80_10:                              # %for.end
                                        #   in Loop: Header=BB80_5 Depth=2
	jmp	.LBB80_11
.LBB80_11:                              # %for.inc20
                                        #   in Loop: Header=BB80_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_5
.LBB80_12:                              # %for.end22
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	$0, -4(%rbp)
.LBB80_13:                              # %for.cond23
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB80_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB80_13 Depth=2
	movl	$0, -8(%rbp)
.LBB80_15:                              # %for.cond26
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB80_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB80_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB80_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_15
.LBB80_18:                              # %for.end54
                                        #   in Loop: Header=BB80_13 Depth=2
	jmp	.LBB80_19
.LBB80_19:                              # %for.inc55
                                        #   in Loop: Header=BB80_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_13
.LBB80_20:                              # %for.end57
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB80_21:                              # %for.cond61
                                        #   Parent Loop BB80_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_23 Depth 3
                                        #         Child Loop BB80_25 Depth 4
                                        #       Child Loop BB80_31 Depth 3
                                        #         Child Loop BB80_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB80_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB80_21 Depth=2
	movl	$0, -4(%rbp)
.LBB80_23:                              # %for.cond64
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB80_23 Depth=3
	movl	$0, -8(%rbp)
.LBB80_25:                              # %for.cond69
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_21 Depth=2
                                        #       Parent Loop BB80_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB80_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB80_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB80_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_25
.LBB80_28:                              # %for.end87
                                        #   in Loop: Header=BB80_23 Depth=3
	jmp	.LBB80_29
.LBB80_29:                              # %for.inc88
                                        #   in Loop: Header=BB80_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_23
.LBB80_30:                              # %for.end90
                                        #   in Loop: Header=BB80_21 Depth=2
	movl	$0, -4(%rbp)
.LBB80_31:                              # %for.cond91
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB80_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB80_31 Depth=3
	movl	$0, -8(%rbp)
.LBB80_33:                              # %for.cond95
                                        #   Parent Loop BB80_2 Depth=1
                                        #     Parent Loop BB80_21 Depth=2
                                        #       Parent Loop BB80_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB80_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB80_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB80_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_33
.LBB80_36:                              # %for.end130
                                        #   in Loop: Header=BB80_31 Depth=3
	jmp	.LBB80_37
.LBB80_37:                              # %for.inc131
                                        #   in Loop: Header=BB80_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_31
.LBB80_38:                              # %for.end133
                                        #   in Loop: Header=BB80_21 Depth=2
	jmp	.LBB80_39
.LBB80_39:                              # %for.inc134
                                        #   in Loop: Header=BB80_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_21
.LBB80_40:                              # %for.end136
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_41
.LBB80_41:                              # %if.end
                                        #   in Loop: Header=BB80_2 Depth=1
	jmp	.LBB80_42
.LBB80_42:                              # %for.inc137
                                        #   in Loop: Header=BB80_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_2
.LBB80_43:                              # %for.end139
	jmp	.LBB80_67
.LBB80_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB80_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_48 Depth 2
                                        #       Child Loop BB80_50 Depth 3
                                        #     Child Loop BB80_56 Depth 2
                                        #       Child Loop BB80_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB80_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB80_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB80_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB80_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB80_48:                              # %for.cond149
                                        #   Parent Loop BB80_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB80_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB80_48 Depth=2
	movl	$0, -8(%rbp)
.LBB80_50:                              # %for.cond152
                                        #   Parent Loop BB80_45 Depth=1
                                        #     Parent Loop BB80_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB80_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB80_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB80_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_50
.LBB80_53:                              # %for.end167
                                        #   in Loop: Header=BB80_48 Depth=2
	jmp	.LBB80_54
.LBB80_54:                              # %for.inc168
                                        #   in Loop: Header=BB80_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_48
.LBB80_55:                              # %for.end170
                                        #   in Loop: Header=BB80_45 Depth=1
	movl	$0, -4(%rbp)
.LBB80_56:                              # %for.cond171
                                        #   Parent Loop BB80_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB80_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB80_56 Depth=2
	movl	$0, -8(%rbp)
.LBB80_58:                              # %for.cond174
                                        #   Parent Loop BB80_45 Depth=1
                                        #     Parent Loop BB80_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB80_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB80_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB80_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_58
.LBB80_61:                              # %for.end203
                                        #   in Loop: Header=BB80_56 Depth=2
	jmp	.LBB80_62
.LBB80_62:                              # %for.inc204
                                        #   in Loop: Header=BB80_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_56
.LBB80_63:                              # %for.end206
                                        #   in Loop: Header=BB80_45 Depth=1
	jmp	.LBB80_64
.LBB80_64:                              # %if.end207
                                        #   in Loop: Header=BB80_45 Depth=1
	jmp	.LBB80_65
.LBB80_65:                              # %for.inc208
                                        #   in Loop: Header=BB80_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_45
.LBB80_66:                              # %for.end210
	jmp	.LBB80_67
.LBB80_67:                              # %if.end211
	cmpl	$595999704, -44(%rbp)   # imm = 0x23863BD8
	jne	.LBB80_69
.LBB80_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_68
.Lfunc_end80:
	.size	MbAffPostProc.44, .Lfunc_end80-MbAffPostProc.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.45
	.type	distortion_fld.45,@function
distortion_fld.45:                      # @distortion_fld.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$735126603, -4(%rbp)    # imm = 0x2BD1244B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$735126603, -4(%rbp)    # imm = 0x2BD1244B
	jne	.LBB81_2
.LBB81_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_1
.Lfunc_end81:
	.size	distortion_fld.45, .Lfunc_end81-distortion_fld.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.46
	.type	copy_motion_vectors_MB.46,@function
copy_motion_vectors_MB.46:              # @copy_motion_vectors_MB.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1481465453, -20(%rbp)  # imm = 0x584D5E6D
	movl	$0, -12(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -8(%rbp)
.LBB82_3:                               # %for.cond1
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB82_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	$0, -4(%rbp)
.LBB82_5:                               # %for.cond4
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB82_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	$0, -16(%rbp)
.LBB82_7:                               # %for.cond7
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        #       Parent Loop BB82_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB82_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB82_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB82_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB82_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB82_12:                              # %if.end
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB82_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_7
.LBB82_14:                              # %for.end
                                        #   in Loop: Header=BB82_5 Depth=3
	jmp	.LBB82_15
.LBB82_15:                              # %for.inc359
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_5
.LBB82_16:                              # %for.end361
                                        #   in Loop: Header=BB82_3 Depth=2
	jmp	.LBB82_17
.LBB82_17:                              # %for.inc362
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_3
.LBB82_18:                              # %for.end364
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_19
.LBB82_19:                              # %for.inc365
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_1
.LBB82_20:                              # %for.end367
	cmpl	$1481465453, -20(%rbp)  # imm = 0x584D5E6D
	jne	.LBB82_22
.LBB82_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_21
.Lfunc_end82:
	.size	copy_motion_vectors_MB.46, .Lfunc_end82-copy_motion_vectors_MB.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.47
	.type	field_mode_buffer.47,@function
field_mode_buffer.47:                   # @field_mode_buffer.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1293840992, -16(%rbp)  # imm = 0x4D1E7260
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1293840992, -16(%rbp)  # imm = 0x4D1E7260
	jne	.LBB83_2
.LBB83_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_1
.Lfunc_end83:
	.size	field_mode_buffer.47, .Lfunc_end83-field_mode_buffer.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.48
	.type	copy_motion_vectors_MB.48,@function
copy_motion_vectors_MB.48:              # @copy_motion_vectors_MB.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$270222787, -20(%rbp)   # imm = 0x101B45C3
	movl	$0, -12(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -8(%rbp)
.LBB84_3:                               # %for.cond1
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	$0, -4(%rbp)
.LBB84_5:                               # %for.cond4
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB84_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB84_5 Depth=3
	movl	$0, -16(%rbp)
.LBB84_7:                               # %for.cond7
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        #       Parent Loop BB84_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB84_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB84_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB84_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB84_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB84_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB84_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB84_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB84_12:                              # %if.end
                                        #   in Loop: Header=BB84_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB84_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_7
.LBB84_14:                              # %for.end
                                        #   in Loop: Header=BB84_5 Depth=3
	jmp	.LBB84_15
.LBB84_15:                              # %for.inc359
                                        #   in Loop: Header=BB84_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_5
.LBB84_16:                              # %for.end361
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_17
.LBB84_17:                              # %for.inc362
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_18:                              # %for.end364
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_19
.LBB84_19:                              # %for.inc365
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_1
.LBB84_20:                              # %for.end367
	cmpl	$270222787, -20(%rbp)   # imm = 0x101B45C3
	jne	.LBB84_22
.LBB84_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_21
.Lfunc_end84:
	.size	copy_motion_vectors_MB.48, .Lfunc_end84-copy_motion_vectors_MB.48
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.49              # -- Begin function buf2img.49
	.p2align	4, 0x90
	.type	buf2img.49,@function
buf2img.49:                             # @buf2img.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1182456629, -60(%rbp)  # imm = 0x467ADB35
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB85_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB85_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB85_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB85_6
	jmp	.LBB85_4
.LBB85_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB85_15
	jmp	.LBB85_5
.LBB85_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB85_24
	jmp	.LBB85_33
.LBB85_6:                               # %sw.bb
	movl	$0, -8(%rbp)
.LBB85_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB85_7 Depth=1
	movl	$0, -4(%rbp)
.LBB85_9:                               # %for.cond5
                                        #   Parent Loop BB85_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB85_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB85_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB85_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_9
.LBB85_12:                              # %for.end
                                        #   in Loop: Header=BB85_7 Depth=1
	jmp	.LBB85_13
.LBB85_13:                              # %for.inc14
                                        #   in Loop: Header=BB85_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_7
.LBB85_14:                              # %for.end16
	jmp	.LBB85_34
.LBB85_15:                              # %sw.bb17
	movl	$0, -8(%rbp)
.LBB85_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB85_16 Depth=1
	movl	$0, -4(%rbp)
.LBB85_18:                              # %for.cond22
                                        #   Parent Loop BB85_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB85_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB85_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB85_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_18
.LBB85_21:                              # %for.end38
                                        #   in Loop: Header=BB85_16 Depth=1
	jmp	.LBB85_22
.LBB85_22:                              # %for.inc39
                                        #   in Loop: Header=BB85_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_16
.LBB85_23:                              # %for.end41
	jmp	.LBB85_34
.LBB85_24:                              # %sw.bb42
	movl	$0, -8(%rbp)
.LBB85_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB85_25 Depth=1
	movl	$0, -4(%rbp)
.LBB85_27:                              # %for.cond47
                                        #   Parent Loop BB85_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB85_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB85_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB85_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_27
.LBB85_30:                              # %for.end74
                                        #   in Loop: Header=BB85_25 Depth=1
	jmp	.LBB85_31
.LBB85_31:                              # %for.inc75
                                        #   in Loop: Header=BB85_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_25
.LBB85_32:                              # %for.end77
	jmp	.LBB85_33
.LBB85_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB85_34:                              # %sw.epilog
	jmp	.LBB85_44
.LBB85_35:                              # %if.else
	movl	$0, -8(%rbp)
.LBB85_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB85_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB85_36 Depth=1
	movl	$0, -4(%rbp)
.LBB85_38:                              # %for.cond82
                                        #   Parent Loop BB85_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB85_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB85_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB85_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_38
.LBB85_41:                              # %for.end102
                                        #   in Loop: Header=BB85_36 Depth=1
	jmp	.LBB85_42
.LBB85_42:                              # %for.inc103
                                        #   in Loop: Header=BB85_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_36
.LBB85_43:                              # %for.end105
	jmp	.LBB85_44
.LBB85_44:                              # %if.end106
	cmpl	$1182456629, -60(%rbp)  # imm = 0x467ADB35
	jne	.LBB85_46
.LBB85_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_45
.Lfunc_end85:
	.size	buf2img.49, .Lfunc_end85-buf2img.49
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.50        # -- Begin function field_picture.50
	.p2align	4, 0x90
	.type	field_picture.50,@function
field_picture.50:                       # @field_picture.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$749516780, -16(%rbp)   # imm = 0x2CACB7EC
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB86_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB86_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB86_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB86_6
.LBB86_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB86_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB86_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB86_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB86_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB86_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB86_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB86_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB86_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB86_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB86_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB86_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$749516780, -16(%rbp)   # imm = 0x2CACB7EC
	jne	.LBB86_18
.LBB86_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_17
.Lfunc_end86:
	.size	field_picture.50, .Lfunc_end86-field_picture.50
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.51        # -- Begin function frame_picture.51
	.p2align	4, 0x90
	.type	frame_picture.51,@function
frame_picture.51:                       # @frame_picture.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1325271924, -16(%rbp)  # imm = 0x4EFE0B74
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB87_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB87_6
.LBB87_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB87_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB87_5
.LBB87_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB87_5:                               # %if.end
	jmp	.LBB87_6
.LBB87_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB87_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB87_8:                               # %if.end67
	cmpl	$1325271924, -16(%rbp)  # imm = 0x4EFE0B74
	jne	.LBB87_10
.LBB87_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_9
.Lfunc_end87:
	.size	frame_picture.51, .Lfunc_end87-frame_picture.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.52
	.type	PaddAutoCropBorders.52,@function
PaddAutoCropBorders.52:                 # @PaddAutoCropBorders.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1507944645, -32(%rbp)  # imm = 0x59E168C5
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB88_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB88_3:                               # %for.cond1
                                        #   Parent Loop BB88_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB88_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB88_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB88_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_3
.LBB88_6:                               # %for.end
                                        #   in Loop: Header=BB88_1 Depth=1
	jmp	.LBB88_7
.LBB88_7:                               # %for.inc10
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_1
.LBB88_8:                               # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB88_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB88_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB88_9 Depth=1
	movl	$0, -4(%rbp)
.LBB88_11:                              # %for.cond16
                                        #   Parent Loop BB88_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB88_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB88_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB88_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_11
.LBB88_14:                              # %for.end30
                                        #   in Loop: Header=BB88_9 Depth=1
	jmp	.LBB88_15
.LBB88_15:                              # %for.inc31
                                        #   in Loop: Header=BB88_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_9
.LBB88_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB88_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB88_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB88_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB88_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB88_20:                              # %for.cond38
                                        #   Parent Loop BB88_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB88_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB88_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB88_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_20
.LBB88_23:                              # %for.end65
                                        #   in Loop: Header=BB88_18 Depth=1
	jmp	.LBB88_24
.LBB88_24:                              # %for.inc66
                                        #   in Loop: Header=BB88_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_18
.LBB88_25:                              # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB88_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB88_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB88_26 Depth=1
	movl	$0, -4(%rbp)
.LBB88_28:                              # %for.cond72
                                        #   Parent Loop BB88_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB88_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB88_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB88_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_28
.LBB88_31:                              # %for.end99
                                        #   in Loop: Header=BB88_26 Depth=1
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc100
                                        #   in Loop: Header=BB88_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_26
.LBB88_33:                              # %for.end102
	jmp	.LBB88_34
.LBB88_34:                              # %if.end
	cmpl	$1507944645, -32(%rbp)  # imm = 0x59E168C5
	jne	.LBB88_36
.LBB88_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_35
.Lfunc_end88:
	.size	PaddAutoCropBorders.52, .Lfunc_end88-PaddAutoCropBorders.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.53
	.type	ReadOneFrame.53,@function
ReadOneFrame.53:                        # @ReadOneFrame.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$629051571, -68(%rbp)   # imm = 0x257E90B3
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-44(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-76(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB89_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB89_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB89_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB89_4:                               # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB89_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB89_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB89_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB89_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB89_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB89_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB89_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB89_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB89_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB89_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB89_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB89_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB89_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB89_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB89_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB89_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB89_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB89_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB89_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB89_24:                              # %if.end85
	jmp	.LBB89_25
.LBB89_25:                              # %if.end86
	jmp	.LBB89_27
.LBB89_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB89_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$629051571, -68(%rbp)   # imm = 0x257E90B3
	jne	.LBB89_29
.LBB89_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_28
.Lfunc_end89:
	.size	ReadOneFrame.53, .Lfunc_end89-ReadOneFrame.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.54
	.type	distortion_fld.54,@function
distortion_fld.54:                      # @distortion_fld.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$174814235, -4(%rbp)    # imm = 0xA6B741B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$174814235, -4(%rbp)    # imm = 0xA6B741B
	jne	.LBB90_2
.LBB90_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_1
.Lfunc_end90:
	.size	distortion_fld.54, .Lfunc_end90-distortion_fld.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.55
	.type	ReportNALNonVLCBits.55,@function
ReportNALNonVLCBits.55:                 # @ReportNALNonVLCBits.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1228625238, -4(%rbp)   # imm = 0x493B5556
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$1228625238, -4(%rbp)   # imm = 0x493B5556
	jne	.LBB91_2
.LBB91_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_1
.Lfunc_end91:
	.size	ReportNALNonVLCBits.55, .Lfunc_end91-ReportNALNonVLCBits.55
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.56
	.type	ReportNALNonVLCBits.56,@function
ReportNALNonVLCBits.56:                 # @ReportNALNonVLCBits.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1112157630, -4(%rbp)   # imm = 0x424A2DBE
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$1112157630, -4(%rbp)   # imm = 0x424A2DBE
	jne	.LBB92_2
.LBB92_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_1
.Lfunc_end92:
	.size	ReportNALNonVLCBits.56, .Lfunc_end92-ReportNALNonVLCBits.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.57
	.type	writeUnit.57,@function
writeUnit.57:                           # @writeUnit.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$640824298, -16(%rbp)   # imm = 0x263233EA
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB93_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB93_18
.LBB93_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB93_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB93_6
.LBB93_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB93_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB93_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB93_9
.LBB93_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB93_9:                               # %if.end21
	jmp	.LBB93_17
.LBB93_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB93_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB93_13
.LBB93_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB93_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB93_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB93_16
.LBB93_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB93_16:                              # %if.end39
	jmp	.LBB93_17
.LBB93_17:                              # %if.end40
	jmp	.LBB93_18
.LBB93_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$640824298, -16(%rbp)   # imm = 0x263233EA
	jne	.LBB93_20
.LBB93_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_19
.Lfunc_end93:
	.size	writeUnit.57, .Lfunc_end93-writeUnit.57
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.58
	.type	writeUnit.58,@function
writeUnit.58:                           # @writeUnit.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1344012360, -16(%rbp)  # imm = 0x501C0048
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB94_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB94_18
.LBB94_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB94_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB94_6
.LBB94_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB94_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB94_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB94_9
.LBB94_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB94_9:                               # %if.end21
	jmp	.LBB94_17
.LBB94_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB94_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB94_13
.LBB94_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB94_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB94_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB94_16
.LBB94_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB94_16:                              # %if.end39
	jmp	.LBB94_17
.LBB94_17:                              # %if.end40
	jmp	.LBB94_18
.LBB94_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1344012360, -16(%rbp)  # imm = 0x501C0048
	jne	.LBB94_20
.LBB94_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_19
.Lfunc_end94:
	.size	writeUnit.58, .Lfunc_end94-writeUnit.58
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.59       # -- Begin function code_a_picture.59
	.p2align	4, 0x90
	.type	code_a_picture.59,@function
code_a_picture.59:                      # @code_a_picture.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1046875711, -28(%rbp)  # imm = 0x3E660E3F
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB95_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB95_8
.LBB95_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB95_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB95_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB95_7
.LBB95_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB95_7:                               # %land.end
.LBB95_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB95_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB95_10:                              # %if.end
	jmp	.LBB95_11
.LBB95_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB95_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB95_11 Depth=1
	jmp	.LBB95_13
.LBB95_13:                              # %while.cond15
                                        #   Parent Loop BB95_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB95_14
	jmp	.LBB95_15
.LBB95_14:                              # %while.body19
                                        #   in Loop: Header=BB95_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB95_13
.LBB95_15:                              # %while.end
                                        #   in Loop: Header=BB95_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_11
.LBB95_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB95_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB95_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB95_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB95_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB95_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB95_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_19
.LBB95_22:                              # %for.end
	jmp	.LBB95_23
.LBB95_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB95_25:                              # %if.end34
	cmpl	$1046875711, -28(%rbp)  # imm = 0x3E660E3F
	jne	.LBB95_27
.LBB95_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_26
.Lfunc_end95:
	.size	code_a_picture.59, .Lfunc_end95-code_a_picture.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.60
	.type	distortion_fld.60,@function
distortion_fld.60:                      # @distortion_fld.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$885116894, -4(%rbp)    # imm = 0x34C1CFDE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$885116894, -4(%rbp)    # imm = 0x34C1CFDE
	jne	.LBB96_2
.LBB96_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_1
.Lfunc_end96:
	.size	distortion_fld.60, .Lfunc_end96-distortion_fld.60
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.61              # -- Begin function buf2img.61
	.p2align	4, 0x90
	.type	buf2img.61,@function
buf2img.61:                             # @buf2img.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$444463937, -60(%rbp)   # imm = 0x1A7DFB41
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB97_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB97_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB97_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB97_6
	jmp	.LBB97_4
.LBB97_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB97_15
	jmp	.LBB97_5
.LBB97_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB97_24
	jmp	.LBB97_33
.LBB97_6:                               # %sw.bb
	movl	$0, -8(%rbp)
.LBB97_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	$0, -4(%rbp)
.LBB97_9:                               # %for.cond5
                                        #   Parent Loop BB97_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB97_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB97_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_9
.LBB97_12:                              # %for.end
                                        #   in Loop: Header=BB97_7 Depth=1
	jmp	.LBB97_13
.LBB97_13:                              # %for.inc14
                                        #   in Loop: Header=BB97_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_7
.LBB97_14:                              # %for.end16
	jmp	.LBB97_34
.LBB97_15:                              # %sw.bb17
	movl	$0, -8(%rbp)
.LBB97_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	$0, -4(%rbp)
.LBB97_18:                              # %for.cond22
                                        #   Parent Loop BB97_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB97_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB97_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_18
.LBB97_21:                              # %for.end38
                                        #   in Loop: Header=BB97_16 Depth=1
	jmp	.LBB97_22
.LBB97_22:                              # %for.inc39
                                        #   in Loop: Header=BB97_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_16
.LBB97_23:                              # %for.end41
	jmp	.LBB97_34
.LBB97_24:                              # %sw.bb42
	movl	$0, -8(%rbp)
.LBB97_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB97_25 Depth=1
	movl	$0, -4(%rbp)
.LBB97_27:                              # %for.cond47
                                        #   Parent Loop BB97_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB97_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB97_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_27
.LBB97_30:                              # %for.end74
                                        #   in Loop: Header=BB97_25 Depth=1
	jmp	.LBB97_31
.LBB97_31:                              # %for.inc75
                                        #   in Loop: Header=BB97_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_25
.LBB97_32:                              # %for.end77
	jmp	.LBB97_33
.LBB97_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB97_34:                              # %sw.epilog
	jmp	.LBB97_44
.LBB97_35:                              # %if.else
	movl	$0, -8(%rbp)
.LBB97_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB97_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB97_36 Depth=1
	movl	$0, -4(%rbp)
.LBB97_38:                              # %for.cond82
                                        #   Parent Loop BB97_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB97_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB97_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB97_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_38
.LBB97_41:                              # %for.end102
                                        #   in Loop: Header=BB97_36 Depth=1
	jmp	.LBB97_42
.LBB97_42:                              # %for.inc103
                                        #   in Loop: Header=BB97_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_36
.LBB97_43:                              # %for.end105
	jmp	.LBB97_44
.LBB97_44:                              # %if.end106
	cmpl	$444463937, -60(%rbp)   # imm = 0x1A7DFB41
	jne	.LBB97_46
.LBB97_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_45
.Lfunc_end97:
	.size	buf2img.61, .Lfunc_end97-buf2img.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.62
	.type	ReportSP.62,@function
ReportSP.62:                            # @ReportSP.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1994629127, -8(%rbp)   # imm = 0x76E3A007
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1994629127, -8(%rbp)   # imm = 0x76E3A007
	jne	.LBB98_2
.LBB98_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_1
.Lfunc_end98:
	.size	ReportSP.62, .Lfunc_end98-ReportSP.62
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.63        # -- Begin function field_picture.63
	.p2align	4, 0x90
	.type	field_picture.63,@function
field_picture.63:                       # @field_picture.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$604517405, -16(%rbp)   # imm = 0x2408341D
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB99_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB99_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB99_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB99_6
.LBB99_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB99_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB99_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB99_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB99_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB99_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB99_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB99_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB99_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB99_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB99_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$604517405, -16(%rbp)   # imm = 0x2408341D
	jne	.LBB99_18
.LBB99_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_17
.Lfunc_end99:
	.size	field_picture.63, .Lfunc_end99-field_picture.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.64
	.type	rdPictureCoding.64,@function
rdPictureCoding.64:                     # @rdPictureCoding.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1172404476, -24(%rbp)  # imm = 0x45E178FC
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB100_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_6
.LBB100_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_6:                              # %if.end
	jmp	.LBB100_8
.LBB100_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB100_8:                              # %if.end10
	jmp	.LBB100_10
.LBB100_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB100_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB100_13
.LBB100_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB100_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB100_18
.LBB100_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB100_20
.LBB100_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB100_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB100_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_26
.LBB100_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_26:                             # %if.end53
	jmp	.LBB100_34
.LBB100_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB100_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_33
.LBB100_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB100_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB100_32
.LBB100_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_32:                             # %if.end66
	jmp	.LBB100_33
.LBB100_33:                             # %if.end67
	jmp	.LBB100_34
.LBB100_34:                             # %if.end68
	jmp	.LBB100_36
.LBB100_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB100_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB100_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB100_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB100_46
.LBB100_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB100_45
.LBB100_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB100_45:                             # %if.end98
	jmp	.LBB100_46
.LBB100_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB100_51
.LBB100_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB100_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB100_50:                             # %if.end111
	jmp	.LBB100_51
.LBB100_51:                             # %if.end112
	cmpl	$1172404476, -24(%rbp)  # imm = 0x45E178FC
	jne	.LBB100_53
.LBB100_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_52
.Lfunc_end100:
	.size	rdPictureCoding.64, .Lfunc_end100-rdPictureCoding.64
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.65     # -- Begin function encode_one_frame.65
	.p2align	4, 0x90
	.type	encode_one_frame.65,@function
encode_one_frame.65:                    # @encode_one_frame.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$71351184, -36(%rbp)    # imm = 0x440BB90
	movl	$0, -64(%rbp)
	movl	$0, -32(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -44(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB101_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB101_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB101_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB101_9
.LBB101_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB101_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB101_8
.LBB101_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB101_8:                              # %if.end21
	jmp	.LBB101_9
.LBB101_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB101_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB101_38
.LBB101_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB101_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB101_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB101_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB101_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB101_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB101_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB101_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB101_20
.LBB101_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB101_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB101_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB101_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB101_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB101_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB101_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB101_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB101_29
.LBB101_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB101_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB101_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB101_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB101_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB101_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -60(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB101_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB101_35
.LBB101_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB101_35:                             # %if.end89
	jmp	.LBB101_37
.LBB101_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB101_37:                             # %if.end92
	jmp	.LBB101_38
.LBB101_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB101_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB101_41
.LBB101_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB101_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB101_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB101_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB101_45
# %bb.44:                               # %if.then109
	movl	-32(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB101_54
.LBB101_45:                             # %if.else112
	movl	-64(%rbp), %edi
	vmovss	-24(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB101_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB101_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB101_53
.LBB101_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB101_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB101_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB101_52
.LBB101_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB101_52:                             # %if.end130
	jmp	.LBB101_53
.LBB101_53:                             # %if.end131
	jmp	.LBB101_54
.LBB101_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB101_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB101_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB101_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB101_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB101_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB101_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB101_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB101_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB101_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB101_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB101_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB101_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB101_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB101_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB101_70
.LBB101_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB101_70:                             # %if.end171
	jmp	.LBB101_81
.LBB101_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB101_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB101_80
.LBB101_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB101_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB101_79
.LBB101_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB101_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB101_78
.LBB101_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB101_78:                             # %if.end187
	jmp	.LBB101_79
.LBB101_79:                             # %if.end188
	jmp	.LBB101_80
.LBB101_80:                             # %if.end189
	jmp	.LBB101_81
.LBB101_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB101_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB101_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB101_85
.LBB101_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB101_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB101_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB101_88
.LBB101_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB101_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB101_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB101_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB101_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB101_110
.LBB101_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB101_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB101_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB101_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_98
.LBB101_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB101_98:                             # %if.end239
	jmp	.LBB101_99
.LBB101_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB101_104
	jmp	.LBB101_100
.LBB101_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB101_102
	jmp	.LBB101_101
.LBB101_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB101_103
	jmp	.LBB101_108
.LBB101_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB101_109
.LBB101_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB101_109
.LBB101_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB101_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB101_107
.LBB101_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB101_107:                            # %if.end261
	jmp	.LBB101_109
.LBB101_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB101_109:                            # %sw.epilog
	jmp	.LBB101_110
.LBB101_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB101_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB101_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB101_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB101_119
.LBB101_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB101_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB101_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB101_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB101_118:                            # %if.end292
	jmp	.LBB101_119
.LBB101_119:                            # %if.end293
	jmp	.LBB101_120
.LBB101_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB101_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB101_123
.LBB101_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB101_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$71351184, -36(%rbp)    # imm = 0x440BB90
	jne	.LBB101_125
.LBB101_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_124
.Lfunc_end101:
	.size	encode_one_frame.65, .Lfunc_end101-encode_one_frame.65
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.66   # -- Begin function UnifiedOneForthPix.66
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.66,@function
UnifiedOneForthPix.66:                  # @UnifiedOneForthPix.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$2039562261, -108(%rbp) # imm = 0x79914015
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB102_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB102_3
.LBB102_2:                              # %if.then
	jmp	.LBB102_266
.LBB102_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB102_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB102_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB102_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB102_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB102_11
.LBB102_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB102_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB102_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB102_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB102_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB102_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB102_14:                             # %for.cond49
                                        #   Parent Loop BB102_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB102_18
.LBB102_17:                             # %cond.false
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-48(%rbp), %eax
.LBB102_18:                             # %cond.end
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_24
.LBB102_20:                             # %cond.false63
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB102_23
.LBB102_22:                             # %cond.false71
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-48(%rbp), %eax
.LBB102_23:                             # %cond.end72
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_24:                             # %cond.end74
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB102_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB102_27
.LBB102_26:                             # %cond.false83
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edx
.LBB102_27:                             # %cond.end84
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB102_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB102_33
.LBB102_29:                             # %cond.false89
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB102_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB102_32
.LBB102_31:                             # %cond.false97
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edx
.LBB102_32:                             # %cond.end98
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_33:                             # %cond.end100
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB102_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_36
.LBB102_35:                             # %cond.false115
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB102_36:                             # %cond.end117
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB102_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB102_42
.LBB102_38:                             # %cond.false122
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB102_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_41
.LBB102_40:                             # %cond.false131
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB102_41:                             # %cond.end133
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_42:                             # %cond.end135
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB102_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_45
.LBB102_44:                             # %cond.false152
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB102_45:                             # %cond.end154
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB102_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB102_51
.LBB102_47:                             # %cond.false159
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB102_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_50
.LBB102_49:                             # %cond.false168
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB102_50:                             # %cond.end170
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_51:                             # %cond.end172
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB102_54
.LBB102_53:                             # %cond.false187
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB102_54:                             # %cond.end189
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB102_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB102_60
.LBB102_56:                             # %cond.false194
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB102_59
.LBB102_58:                             # %cond.false203
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB102_59:                             # %cond.end205
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_60:                             # %cond.end207
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB102_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_63
.LBB102_62:                             # %cond.false225
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB102_63:                             # %cond.end227
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB102_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB102_69
.LBB102_65:                             # %cond.false232
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB102_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB102_68
.LBB102_67:                             # %cond.false241
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB102_68:                             # %cond.end243
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_69:                             # %cond.end245
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB102_72
.LBB102_71:                             # %cond.false260
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB102_72:                             # %cond.end262
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB102_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB102_78
.LBB102_74:                             # %cond.false267
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB102_77
.LBB102_76:                             # %cond.false276
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB102_77:                             # %cond.end278
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_78:                             # %cond.end280
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB102_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB102_81
.LBB102_80:                             # %cond.false297
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB102_81:                             # %cond.end298
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB102_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB102_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB102_87
.LBB102_83:                             # %cond.false303
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB102_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB102_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB102_86
.LBB102_85:                             # %cond.false311
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB102_86:                             # %cond.end312
                                        #   in Loop: Header=BB102_14 Depth=2
.LBB102_87:                             # %cond.end314
                                        #   in Loop: Header=BB102_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB102_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_14
.LBB102_89:                             # %for.end
                                        #   in Loop: Header=BB102_12 Depth=1
	jmp	.LBB102_90
.LBB102_90:                             # %for.inc336
                                        #   in Loop: Header=BB102_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_12
.LBB102_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB102_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB102_92 Depth=1
	movl	$0, -48(%rbp)
.LBB102_94:                             # %for.cond346
                                        #   Parent Loop BB102_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB102_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB102_98
.LBB102_97:                             # %cond.false364
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB102_98:                             # %cond.end366
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB102_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB102_101
.LBB102_100:                            # %cond.false378
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB102_101:                            # %cond.end380
                                        #   in Loop: Header=BB102_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB102_104
.LBB102_103:                            # %cond.false390
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB102_104:                            # %cond.end392
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB102_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB102_107
.LBB102_106:                            # %cond.false405
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB102_107:                            # %cond.end407
                                        #   in Loop: Header=BB102_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB102_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB102_110
.LBB102_109:                            # %cond.false417
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB102_110:                            # %cond.end419
                                        #   in Loop: Header=BB102_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB102_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_113
.LBB102_112:                            # %cond.false442
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_113:                            # %cond.end449
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_119
.LBB102_115:                            # %cond.false454
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB102_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_118
.LBB102_117:                            # %cond.false466
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_118:                            # %cond.end473
                                        #   in Loop: Header=BB102_94 Depth=2
.LBB102_119:                            # %cond.end475
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB102_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_122
.LBB102_121:                            # %cond.false490
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB102_122:                            # %cond.end493
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB102_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB102_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_128
.LBB102_124:                            # %cond.false498
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB102_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB102_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_127
.LBB102_126:                            # %cond.false506
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB102_127:                            # %cond.end509
                                        #   in Loop: Header=BB102_94 Depth=2
.LBB102_128:                            # %cond.end511
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB102_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_94
.LBB102_130:                            # %for.end516
                                        #   in Loop: Header=BB102_92 Depth=1
	jmp	.LBB102_131
.LBB102_131:                            # %for.inc517
                                        #   in Loop: Header=BB102_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_92
.LBB102_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB102_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB102_133 Depth=1
	movl	$0, -44(%rbp)
.LBB102_135:                            # %for.cond533
                                        #   Parent Loop BB102_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_139
.LBB102_138:                            # %cond.false553
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB102_139:                            # %cond.end555
                                        #   in Loop: Header=BB102_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_145
.LBB102_141:                            # %cond.false567
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_144
.LBB102_143:                            # %cond.false579
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB102_144:                            # %cond.end581
                                        #   in Loop: Header=BB102_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_145:                            # %cond.end589
                                        #   in Loop: Header=BB102_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB102_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_157
.LBB102_147:                            # %cond.false594
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_150
.LBB102_149:                            # %cond.false607
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB102_150:                            # %cond.end609
                                        #   in Loop: Header=BB102_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_156
.LBB102_152:                            # %cond.false621
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_155
.LBB102_154:                            # %cond.false633
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB102_155:                            # %cond.end635
                                        #   in Loop: Header=BB102_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_156:                            # %cond.end643
                                        #   in Loop: Header=BB102_135 Depth=2
.LBB102_157:                            # %cond.end645
                                        #   in Loop: Header=BB102_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB102_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_135
.LBB102_159:                            # %for.end650
                                        #   in Loop: Header=BB102_133 Depth=1
	jmp	.LBB102_160
.LBB102_160:                            # %for.inc651
                                        #   in Loop: Header=BB102_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_133
.LBB102_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB102_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB102_162 Depth=1
	movl	$0, -48(%rbp)
.LBB102_164:                            # %for.cond659
                                        #   Parent Loop BB102_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB102_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_169
.LBB102_168:                            # %cond.false681
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_169:                            # %cond.end683
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_175
.LBB102_171:                            # %cond.false696
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_174
.LBB102_173:                            # %cond.false707
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_174:                            # %cond.end709
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_175:                            # %cond.end718
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_187
.LBB102_177:                            # %cond.false723
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_180
.LBB102_179:                            # %cond.false735
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_180:                            # %cond.end737
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_186
.LBB102_182:                            # %cond.false750
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_185
.LBB102_184:                            # %cond.false761
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_185:                            # %cond.end763
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_186:                            # %cond.end772
                                        #   in Loop: Header=BB102_164 Depth=2
.LBB102_187:                            # %cond.end774
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB102_261
.LBB102_188:                            # %if.else
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB102_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB102_192
.LBB102_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB102_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB102_226
.LBB102_192:                            # %if.then791
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_195
.LBB102_194:                            # %cond.false803
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_195:                            # %cond.end805
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_198
.LBB102_197:                            # %cond.false816
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_198:                            # %cond.end818
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_207
.LBB102_200:                            # %cond.false832
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_203
.LBB102_202:                            # %cond.false840
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_203:                            # %cond.end842
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_206
.LBB102_205:                            # %cond.false853
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_206:                            # %cond.end855
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_207:                            # %cond.end865
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_225
.LBB102_209:                            # %cond.false870
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_212
.LBB102_211:                            # %cond.false879
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_212:                            # %cond.end881
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_215
.LBB102_214:                            # %cond.false892
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_215:                            # %cond.end894
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_224
.LBB102_217:                            # %cond.false908
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_220
.LBB102_219:                            # %cond.false916
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_220:                            # %cond.end918
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_223
.LBB102_222:                            # %cond.false929
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_223:                            # %cond.end931
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_224:                            # %cond.end941
                                        #   in Loop: Header=BB102_164 Depth=2
.LBB102_225:                            # %cond.end943
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB102_260
.LBB102_226:                            # %if.else946
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_229
.LBB102_228:                            # %cond.false962
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_229:                            # %cond.end964
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_232
.LBB102_231:                            # %cond.false973
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_232:                            # %cond.end975
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_241
.LBB102_234:                            # %cond.false987
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_237
.LBB102_236:                            # %cond.false999
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_237:                            # %cond.end1001
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_240
.LBB102_239:                            # %cond.false1010
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_240:                            # %cond.end1012
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_241:                            # %cond.end1020
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB102_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_259
.LBB102_243:                            # %cond.false1025
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_246
.LBB102_245:                            # %cond.false1038
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_246:                            # %cond.end1040
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_249
.LBB102_248:                            # %cond.false1049
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_249:                            # %cond.end1051
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB102_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_258
.LBB102_251:                            # %cond.false1063
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB102_254
.LBB102_253:                            # %cond.false1075
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB102_254:                            # %cond.end1077
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB102_257
.LBB102_256:                            # %cond.false1086
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB102_257:                            # %cond.end1088
                                        #   in Loop: Header=BB102_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_258:                            # %cond.end1096
                                        #   in Loop: Header=BB102_164 Depth=2
.LBB102_259:                            # %cond.end1098
                                        #   in Loop: Header=BB102_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB102_260:                            # %if.end1101
                                        #   in Loop: Header=BB102_164 Depth=2
	jmp	.LBB102_261
.LBB102_261:                            # %if.end1102
                                        #   in Loop: Header=BB102_164 Depth=2
	jmp	.LBB102_262
.LBB102_262:                            # %for.inc1103
                                        #   in Loop: Header=BB102_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_164
.LBB102_263:                            # %for.end1105
                                        #   in Loop: Header=BB102_162 Depth=1
	jmp	.LBB102_264
.LBB102_264:                            # %for.inc1106
                                        #   in Loop: Header=BB102_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_162
.LBB102_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB102_266:                            # %return
	cmpl	$2039562261, -108(%rbp) # imm = 0x79914015
	jne	.LBB102_268
.LBB102_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_267
.Lfunc_end102:
	.size	UnifiedOneForthPix.66, .Lfunc_end102-UnifiedOneForthPix.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.67
	.type	ReadOneFrame.67,@function
ReadOneFrame.67:                        # @ReadOneFrame.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$2088336155, -72(%rbp)  # imm = 0x7C797B1B
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -40(%rbp)
	movl	%r9d, -28(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB103_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB103_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB103_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB103_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB103_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB103_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB103_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB103_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB103_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB103_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB103_26
# %bb.11:                               # %if.then42
	cmpl	$0, -36(%rbp)
	je	.LBB103_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB103_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB103_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB103_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB103_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB103_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB103_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB103_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB103_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB103_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB103_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB103_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB103_24:                             # %if.end85
	jmp	.LBB103_25
.LBB103_25:                             # %if.end86
	jmp	.LBB103_27
.LBB103_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB103_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$2088336155, -72(%rbp)  # imm = 0x7C797B1B
	jne	.LBB103_29
.LBB103_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_28
.Lfunc_end103:
	.size	ReadOneFrame.67, .Lfunc_end103-ReadOneFrame.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.68
	.type	find_distortion.68,@function
find_distortion.68:                     # @find_distortion.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1786649510, -44(%rbp)  # imm = 0x6A7E1BA6
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB104_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB104_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	$0, -12(%rbp)
.LBB104_4:                              # %for.cond3
                                        #   Parent Loop BB104_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB104_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB104_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB104_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_4
.LBB104_7:                              # %for.end
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc17
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_2
.LBB104_9:                              # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB104_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB104_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB104_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	$0, -12(%rbp)
.LBB104_13:                             # %for.cond27
                                        #   Parent Loop BB104_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB104_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB104_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_13
.LBB104_16:                             # %for.end71
                                        #   in Loop: Header=BB104_11 Depth=1
	jmp	.LBB104_17
.LBB104_17:                             # %for.inc72
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_11
.LBB104_18:                             # %for.end74
	jmp	.LBB104_19
.LBB104_19:                             # %if.end
	jmp	.LBB104_39
.LBB104_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB104_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB104_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB104_21 Depth=1
	movl	$0, -12(%rbp)
.LBB104_23:                             # %for.cond80
                                        #   Parent Loop BB104_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB104_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB104_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB104_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_23
.LBB104_26:                             # %for.end104
                                        #   in Loop: Header=BB104_21 Depth=1
	jmp	.LBB104_27
.LBB104_27:                             # %for.inc105
                                        #   in Loop: Header=BB104_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_21
.LBB104_28:                             # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB104_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB104_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB104_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB104_30 Depth=1
	movl	$0, -12(%rbp)
.LBB104_32:                             # %for.cond117
                                        #   Parent Loop BB104_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB104_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB104_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB104_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_32
.LBB104_35:                             # %for.end163
                                        #   in Loop: Header=BB104_30 Depth=1
	jmp	.LBB104_36
.LBB104_36:                             # %for.inc164
                                        #   in Loop: Header=BB104_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_30
.LBB104_37:                             # %for.end166
	jmp	.LBB104_38
.LBB104_38:                             # %if.end167
	jmp	.LBB104_39
.LBB104_39:                             # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1786649510, -44(%rbp)  # imm = 0x6A7E1BA6
	jne	.LBB104_41
.LBB104_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_40
.Lfunc_end104:
	.size	find_distortion.68, .Lfunc_end104-find_distortion.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.69
	.type	ReportIntra.69,@function
ReportIntra.69:                         # @ReportIntra.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1893203521, -12(%rbp)  # imm = 0x70D7FE41
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB105_3
.LBB105_2:                              # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB105_3:                              # %if.end
	cmpl	$1893203521, -12(%rbp)  # imm = 0x70D7FE41
	jne	.LBB105_5
.LBB105_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_4
.Lfunc_end105:
	.size	ReportIntra.69, .Lfunc_end105-ReportIntra.69
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.70       # -- Begin function code_a_picture.70
	.p2align	4, 0x90
	.type	code_a_picture.70,@function
code_a_picture.70:                      # @code_a_picture.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1857115304, -28(%rbp)  # imm = 0x6EB154A8
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB106_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB106_8
.LBB106_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB106_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB106_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB106_7
.LBB106_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB106_7:                              # %land.end
.LBB106_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB106_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB106_10:                             # %if.end
	jmp	.LBB106_11
.LBB106_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB106_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB106_11 Depth=1
	jmp	.LBB106_13
.LBB106_13:                             # %while.cond15
                                        #   Parent Loop BB106_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB106_14
	jmp	.LBB106_15
.LBB106_14:                             # %while.body19
                                        #   in Loop: Header=BB106_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB106_13
.LBB106_15:                             # %while.end
                                        #   in Loop: Header=BB106_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_11
.LBB106_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB106_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB106_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB106_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB106_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB106_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB106_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_19
.LBB106_22:                             # %for.end
	jmp	.LBB106_23
.LBB106_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB106_25:                             # %if.end34
	cmpl	$1857115304, -28(%rbp)  # imm = 0x6EB154A8
	jne	.LBB106_27
.LBB106_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_26
.Lfunc_end106:
	.size	code_a_picture.70, .Lfunc_end106-code_a_picture.70
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.71              # -- Begin function buf2img.71
	.p2align	4, 0x90
	.type	buf2img.71,@function
buf2img.71:                             # @buf2img.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1086995793, -60(%rbp)  # imm = 0x40CA3D51
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB107_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB107_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB107_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB107_6
	jmp	.LBB107_4
.LBB107_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB107_15
	jmp	.LBB107_5
.LBB107_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB107_24
	jmp	.LBB107_33
.LBB107_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB107_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB107_7 Depth=1
	movl	$0, -4(%rbp)
.LBB107_9:                              # %for.cond5
                                        #   Parent Loop BB107_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB107_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB107_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB107_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_9
.LBB107_12:                             # %for.end
                                        #   in Loop: Header=BB107_7 Depth=1
	jmp	.LBB107_13
.LBB107_13:                             # %for.inc14
                                        #   in Loop: Header=BB107_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_7
.LBB107_14:                             # %for.end16
	jmp	.LBB107_34
.LBB107_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB107_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB107_16 Depth=1
	movl	$0, -4(%rbp)
.LBB107_18:                             # %for.cond22
                                        #   Parent Loop BB107_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB107_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB107_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB107_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_18
.LBB107_21:                             # %for.end38
                                        #   in Loop: Header=BB107_16 Depth=1
	jmp	.LBB107_22
.LBB107_22:                             # %for.inc39
                                        #   in Loop: Header=BB107_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_16
.LBB107_23:                             # %for.end41
	jmp	.LBB107_34
.LBB107_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB107_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB107_25 Depth=1
	movl	$0, -4(%rbp)
.LBB107_27:                             # %for.cond47
                                        #   Parent Loop BB107_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB107_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB107_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB107_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_27
.LBB107_30:                             # %for.end74
                                        #   in Loop: Header=BB107_25 Depth=1
	jmp	.LBB107_31
.LBB107_31:                             # %for.inc75
                                        #   in Loop: Header=BB107_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_25
.LBB107_32:                             # %for.end77
	jmp	.LBB107_33
.LBB107_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB107_34:                             # %sw.epilog
	jmp	.LBB107_44
.LBB107_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB107_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB107_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB107_36 Depth=1
	movl	$0, -4(%rbp)
.LBB107_38:                             # %for.cond82
                                        #   Parent Loop BB107_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB107_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB107_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB107_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_38
.LBB107_41:                             # %for.end102
                                        #   in Loop: Header=BB107_36 Depth=1
	jmp	.LBB107_42
.LBB107_42:                             # %for.inc103
                                        #   in Loop: Header=BB107_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_36
.LBB107_43:                             # %for.end105
	jmp	.LBB107_44
.LBB107_44:                             # %if.end106
	cmpl	$1086995793, -60(%rbp)  # imm = 0x40CA3D51
	jne	.LBB107_46
.LBB107_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_45
.Lfunc_end107:
	.size	buf2img.71, .Lfunc_end107-buf2img.71
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.72      # -- Begin function copy_rdopt_data.72
	.p2align	4, 0x90
	.type	copy_rdopt_data.72,@function
copy_rdopt_data.72:                     # @copy_rdopt_data.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2020976017, -48(%rbp)  # imm = 0x7875A591
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB108_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB108_4
.LBB108_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB108_4
.LBB108_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB108_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_7 Depth 2
                                        #       Child Loop BB108_9 Depth 3
                                        #         Child Loop BB108_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -8(%rbp)
.LBB108_7:                              # %for.cond17
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_9 Depth 3
                                        #         Child Loop BB108_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB108_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB108_7 Depth=2
	movl	$0, -12(%rbp)
.LBB108_9:                              # %for.cond21
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB108_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB108_9 Depth=3
	movl	$0, -16(%rbp)
.LBB108_11:                             # %for.cond25
                                        #   Parent Loop BB108_5 Depth=1
                                        #     Parent Loop BB108_7 Depth=2
                                        #       Parent Loop BB108_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB108_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB108_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB108_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_11
.LBB108_14:                             # %for.end
                                        #   in Loop: Header=BB108_9 Depth=3
	jmp	.LBB108_15
.LBB108_15:                             # %for.inc46
                                        #   in Loop: Header=BB108_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_9
.LBB108_16:                             # %for.end48
                                        #   in Loop: Header=BB108_7 Depth=2
	jmp	.LBB108_17
.LBB108_17:                             # %for.inc49
                                        #   in Loop: Header=BB108_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_7
.LBB108_18:                             # %for.end51
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_19
.LBB108_19:                             # %for.inc52
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_5
.LBB108_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB108_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_23 Depth 2
                                        #       Child Loop BB108_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB108_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -12(%rbp)
.LBB108_23:                             # %for.cond59
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB108_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB108_23 Depth=2
	movl	$0, -16(%rbp)
.LBB108_25:                             # %for.cond63
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB108_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB108_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB108_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_25
.LBB108_28:                             # %for.end82
                                        #   in Loop: Header=BB108_23 Depth=2
	jmp	.LBB108_29
.LBB108_29:                             # %for.inc83
                                        #   in Loop: Header=BB108_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_23
.LBB108_30:                             # %for.end85
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_31
.LBB108_31:                             # %for.inc86
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_21
.LBB108_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB108_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB108_33 Depth=1
	movl	$0, -4(%rbp)
.LBB108_35:                             # %for.cond93
                                        #   Parent Loop BB108_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB108_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB108_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB108_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB108_38:                             # %if.end
                                        #   in Loop: Header=BB108_35 Depth=2
	jmp	.LBB108_39
.LBB108_39:                             # %for.inc176
                                        #   in Loop: Header=BB108_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_35
.LBB108_40:                             # %for.end178
                                        #   in Loop: Header=BB108_33 Depth=1
	jmp	.LBB108_41
.LBB108_41:                             # %for.inc179
                                        #   in Loop: Header=BB108_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_33
.LBB108_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB108_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB108_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	$0, -4(%rbp)
.LBB108_45:                             # %for.cond186
                                        #   Parent Loop BB108_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB108_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB108_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB108_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_45
.LBB108_48:                             # %for.end203
                                        #   in Loop: Header=BB108_43 Depth=1
	jmp	.LBB108_49
.LBB108_49:                             # %for.inc204
                                        #   in Loop: Header=BB108_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_43
.LBB108_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB108_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB108_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	$0, -4(%rbp)
.LBB108_54:                             # %for.cond214
                                        #   Parent Loop BB108_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB108_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB108_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_54
.LBB108_57:                             # %for.end247
                                        #   in Loop: Header=BB108_52 Depth=1
	jmp	.LBB108_58
.LBB108_58:                             # %for.inc248
                                        #   in Loop: Header=BB108_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_52
.LBB108_59:                             # %for.end250
	jmp	.LBB108_60
.LBB108_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB108_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB108_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB108_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB108_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_61
.LBB108_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB108_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB108_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_68:                             # %for.cond283
                                        #   Parent Loop BB108_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB108_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB108_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_68
.LBB108_71:                             # %for.end306
                                        #   in Loop: Header=BB108_66 Depth=1
	jmp	.LBB108_72
.LBB108_72:                             # %for.inc307
                                        #   in Loop: Header=BB108_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_66
.LBB108_73:                             # %for.end309
	jmp	.LBB108_98
.LBB108_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB108_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB108_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB108_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_79:                             # %for.cond324
                                        #   Parent Loop BB108_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB108_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB108_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_79
.LBB108_82:                             # %for.end341
                                        #   in Loop: Header=BB108_77 Depth=1
	jmp	.LBB108_83
.LBB108_83:                             # %for.inc342
                                        #   in Loop: Header=BB108_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_77
.LBB108_84:                             # %for.end344
	jmp	.LBB108_97
.LBB108_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB108_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB108_96
.LBB108_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB108_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_90:                             # %for.cond359
                                        #   Parent Loop BB108_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB108_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB108_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_90
.LBB108_93:                             # %for.end384
                                        #   in Loop: Header=BB108_88 Depth=1
	jmp	.LBB108_94
.LBB108_94:                             # %for.inc385
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_88
.LBB108_95:                             # %for.end387
	jmp	.LBB108_96
.LBB108_96:                             # %if.end388
	jmp	.LBB108_97
.LBB108_97:                             # %if.end389
	jmp	.LBB108_98
.LBB108_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB108_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB108_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB108_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB108_103 Depth=1
	movl	$0, -4(%rbp)
.LBB108_105:                            # %for.cond410
                                        #   Parent Loop BB108_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB108_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB108_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB108_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB108_109
.LBB108_108:                            # %if.else483
                                        #   in Loop: Header=BB108_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB108_109:                            # %if.end506
                                        #   in Loop: Header=BB108_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB108_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB108_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB108_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB108_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB108_113
.LBB108_112:                            # %if.else568
                                        #   in Loop: Header=BB108_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB108_113:                            # %if.end591
                                        #   in Loop: Header=BB108_105 Depth=2
	jmp	.LBB108_114
.LBB108_114:                            # %if.end592
                                        #   in Loop: Header=BB108_105 Depth=2
	jmp	.LBB108_115
.LBB108_115:                            # %for.inc593
                                        #   in Loop: Header=BB108_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_105
.LBB108_116:                            # %for.end595
                                        #   in Loop: Header=BB108_103 Depth=1
	jmp	.LBB108_117
.LBB108_117:                            # %for.inc596
                                        #   in Loop: Header=BB108_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_103
.LBB108_118:                            # %for.end598
	jmp	.LBB108_130
.LBB108_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB108_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB108_120 Depth=1
	movl	$0, -4(%rbp)
.LBB108_122:                            # %for.cond604
                                        #   Parent Loop BB108_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB108_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB108_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB108_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB108_125:                            # %if.end654
                                        #   in Loop: Header=BB108_122 Depth=2
	jmp	.LBB108_126
.LBB108_126:                            # %for.inc655
                                        #   in Loop: Header=BB108_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_122
.LBB108_127:                            # %for.end657
                                        #   in Loop: Header=BB108_120 Depth=1
	jmp	.LBB108_128
.LBB108_128:                            # %for.inc658
                                        #   in Loop: Header=BB108_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_120
.LBB108_129:                            # %for.end660
	jmp	.LBB108_130
.LBB108_130:                            # %if.end661
	jmp	.LBB108_131
.LBB108_131:                            # %if.end662
	cmpl	$2020976017, -48(%rbp)  # imm = 0x7875A591
	jne	.LBB108_133
.LBB108_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_132
.Lfunc_end108:
	.size	copy_rdopt_data.72, .Lfunc_end108-copy_rdopt_data.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.73
.LCPI109_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.73,@function
init_frame.73:                          # @init_frame.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1849541545, -16(%rbp)  # imm = 0x6E3DC3A9
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB109_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_1
.LBB109_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB109_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB109_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB109_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB109_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB109_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB109_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB109_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB109_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB109_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB109_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB109_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB109_17
.LBB109_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB109_17:                             # %if.end32
	jmp	.LBB109_25
.LBB109_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB109_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB109_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB109_22
.LBB109_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB109_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB109_24:                             # %if.end50
	jmp	.LBB109_25
.LBB109_25:                             # %if.end51
	jmp	.LBB109_26
.LBB109_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB109_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB109_28:                             # %if.end62
	jmp	.LBB109_72
.LBB109_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB109_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB109_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB109_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB109_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_30
.LBB109_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB109_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB109_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB109_36:                             # %if.end102
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB109_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB109_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB109_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB109_41
.LBB109_40:                             # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB109_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB109_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB109_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB109_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB109_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB109_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB109_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB109_49
.LBB109_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB109_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB109_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB109_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB109_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB109_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB109_58
.LBB109_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB109_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB109_57
.LBB109_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB109_57:                             # %cond.end
.LBB109_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB109_66
.LBB109_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB109_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB109_65
.LBB109_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB109_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB109_64
.LBB109_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB109_64:                             # %cond.end209
.LBB109_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB109_66:                             # %if.end214
	jmp	.LBB109_67
.LBB109_67:                             # %if.end215
	jmp	.LBB109_71
.LBB109_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB109_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB109_70:                             # %if.end226
	jmp	.LBB109_71
.LBB109_71:                             # %if.end227
	jmp	.LBB109_72
.LBB109_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$1849541545, -16(%rbp)  # imm = 0x6E3DC3A9
	jne	.LBB109_74
.LBB109_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_73
.Lfunc_end109:
	.size	init_frame.73, .Lfunc_end109-init_frame.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.74
.LCPI110_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.74,@function
init_frame.74:                          # @init_frame.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$333759306, -16(%rbp)   # imm = 0x13E4C34A
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB110_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_1
.LBB110_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB110_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB110_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB110_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB110_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB110_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB110_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB110_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB110_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB110_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB110_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB110_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB110_17
.LBB110_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB110_17:                             # %if.end32
	jmp	.LBB110_25
.LBB110_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB110_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB110_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB110_22
.LBB110_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB110_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB110_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB110_24:                             # %if.end50
	jmp	.LBB110_25
.LBB110_25:                             # %if.end51
	jmp	.LBB110_26
.LBB110_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB110_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB110_28:                             # %if.end62
	jmp	.LBB110_72
.LBB110_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB110_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB110_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB110_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB110_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_30
.LBB110_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB110_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB110_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB110_36:                             # %if.end102
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB110_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB110_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB110_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB110_41
.LBB110_40:                             # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB110_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB110_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB110_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB110_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB110_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB110_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB110_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB110_49
.LBB110_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB110_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB110_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB110_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB110_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB110_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB110_58
.LBB110_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB110_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB110_57
.LBB110_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB110_57:                             # %cond.end
.LBB110_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB110_66
.LBB110_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB110_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB110_65
.LBB110_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB110_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB110_64
.LBB110_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB110_64:                             # %cond.end209
.LBB110_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB110_66:                             # %if.end214
	jmp	.LBB110_67
.LBB110_67:                             # %if.end215
	jmp	.LBB110_71
.LBB110_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB110_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB110_70:                             # %if.end226
	jmp	.LBB110_71
.LBB110_71:                             # %if.end227
	jmp	.LBB110_72
.LBB110_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$333759306, -16(%rbp)   # imm = 0x13E4C34A
	jne	.LBB110_74
.LBB110_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_73
.Lfunc_end110:
	.size	init_frame.74, .Lfunc_end110-init_frame.74
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.75       # -- Begin function code_a_picture.75
	.p2align	4, 0x90
	.type	code_a_picture.75,@function
code_a_picture.75:                      # @code_a_picture.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$356448182, -28(%rbp)   # imm = 0x153EF7B6
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB111_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB111_8
.LBB111_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB111_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB111_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB111_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB111_7
.LBB111_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB111_7:                              # %land.end
.LBB111_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB111_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB111_10:                             # %if.end
	jmp	.LBB111_11
.LBB111_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB111_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_13
.LBB111_13:                             # %while.cond15
                                        #   Parent Loop BB111_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB111_14
	jmp	.LBB111_15
.LBB111_14:                             # %while.body19
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB111_13
.LBB111_15:                             # %while.end
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_11
.LBB111_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB111_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB111_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB111_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB111_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB111_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB111_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_19
.LBB111_22:                             # %for.end
	jmp	.LBB111_23
.LBB111_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB111_25:                             # %if.end34
	cmpl	$356448182, -28(%rbp)   # imm = 0x153EF7B6
	jne	.LBB111_27
.LBB111_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_26
.Lfunc_end111:
	.size	code_a_picture.75, .Lfunc_end111-code_a_picture.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.76
	.type	PaddAutoCropBorders.76,@function
PaddAutoCropBorders.76:                 # @PaddAutoCropBorders.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1458057036, -24(%rbp)  # imm = 0x56E82F4C
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB112_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_3:                              # %for.cond1
                                        #   Parent Loop BB112_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB112_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB112_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_3
.LBB112_6:                              # %for.end
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_7
.LBB112_7:                              # %for.inc10
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_1
.LBB112_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB112_9 Depth=1
	movl	$0, -8(%rbp)
.LBB112_11:                             # %for.cond16
                                        #   Parent Loop BB112_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB112_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB112_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB112_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_11
.LBB112_14:                             # %for.end30
                                        #   in Loop: Header=BB112_9 Depth=1
	jmp	.LBB112_15
.LBB112_15:                             # %for.inc31
                                        #   in Loop: Header=BB112_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_9
.LBB112_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB112_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB112_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB112_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_20:                             # %for.cond38
                                        #   Parent Loop BB112_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB112_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB112_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB112_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_20
.LBB112_23:                             # %for.end65
                                        #   in Loop: Header=BB112_18 Depth=1
	jmp	.LBB112_24
.LBB112_24:                             # %for.inc66
                                        #   in Loop: Header=BB112_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_18
.LBB112_25:                             # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB112_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB112_26 Depth=1
	movl	$0, -8(%rbp)
.LBB112_28:                             # %for.cond72
                                        #   Parent Loop BB112_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB112_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB112_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB112_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_28
.LBB112_31:                             # %for.end99
                                        #   in Loop: Header=BB112_26 Depth=1
	jmp	.LBB112_32
.LBB112_32:                             # %for.inc100
                                        #   in Loop: Header=BB112_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_26
.LBB112_33:                             # %for.end102
	jmp	.LBB112_34
.LBB112_34:                             # %if.end
	cmpl	$1458057036, -24(%rbp)  # imm = 0x56E82F4C
	jne	.LBB112_36
.LBB112_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_35
.Lfunc_end112:
	.size	PaddAutoCropBorders.76, .Lfunc_end112-PaddAutoCropBorders.76
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.77      # -- Begin function copy_rdopt_data.77
	.p2align	4, 0x90
	.type	copy_rdopt_data.77,@function
copy_rdopt_data.77:                     # @copy_rdopt_data.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1525772511, -52(%rbp)  # imm = 0x5AF170DF
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB113_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB113_4
.LBB113_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB113_4
.LBB113_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB113_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_7 Depth 2
                                        #       Child Loop BB113_9 Depth 3
                                        #         Child Loop BB113_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_7:                              # %for.cond17
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_9 Depth 3
                                        #         Child Loop BB113_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB113_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB113_7 Depth=2
	movl	$0, -12(%rbp)
.LBB113_9:                              # %for.cond21
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB113_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB113_9 Depth=3
	movl	$0, -16(%rbp)
.LBB113_11:                             # %for.cond25
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_7 Depth=2
                                        #       Parent Loop BB113_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB113_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB113_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB113_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_11
.LBB113_14:                             # %for.end
                                        #   in Loop: Header=BB113_9 Depth=3
	jmp	.LBB113_15
.LBB113_15:                             # %for.inc46
                                        #   in Loop: Header=BB113_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_9
.LBB113_16:                             # %for.end48
                                        #   in Loop: Header=BB113_7 Depth=2
	jmp	.LBB113_17
.LBB113_17:                             # %for.inc49
                                        #   in Loop: Header=BB113_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_7
.LBB113_18:                             # %for.end51
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_19
.LBB113_19:                             # %for.inc52
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_5
.LBB113_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB113_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_23 Depth 2
                                        #       Child Loop BB113_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB113_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	$0, -12(%rbp)
.LBB113_23:                             # %for.cond59
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB113_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	$0, -16(%rbp)
.LBB113_25:                             # %for.cond63
                                        #   Parent Loop BB113_21 Depth=1
                                        #     Parent Loop BB113_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB113_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB113_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB113_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_25
.LBB113_28:                             # %for.end82
                                        #   in Loop: Header=BB113_23 Depth=2
	jmp	.LBB113_29
.LBB113_29:                             # %for.inc83
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_23
.LBB113_30:                             # %for.end85
                                        #   in Loop: Header=BB113_21 Depth=1
	jmp	.LBB113_31
.LBB113_31:                             # %for.inc86
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_21
.LBB113_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB113_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB113_33 Depth=1
	movl	$0, -4(%rbp)
.LBB113_35:                             # %for.cond93
                                        #   Parent Loop BB113_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB113_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB113_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB113_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB113_38:                             # %if.end
                                        #   in Loop: Header=BB113_35 Depth=2
	jmp	.LBB113_39
.LBB113_39:                             # %for.inc176
                                        #   in Loop: Header=BB113_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_35
.LBB113_40:                             # %for.end178
                                        #   in Loop: Header=BB113_33 Depth=1
	jmp	.LBB113_41
.LBB113_41:                             # %for.inc179
                                        #   in Loop: Header=BB113_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_33
.LBB113_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB113_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB113_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	$0, -4(%rbp)
.LBB113_45:                             # %for.cond186
                                        #   Parent Loop BB113_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB113_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB113_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB113_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_45
.LBB113_48:                             # %for.end203
                                        #   in Loop: Header=BB113_43 Depth=1
	jmp	.LBB113_49
.LBB113_49:                             # %for.inc204
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_43
.LBB113_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB113_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB113_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	$0, -4(%rbp)
.LBB113_54:                             # %for.cond214
                                        #   Parent Loop BB113_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB113_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB113_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_54
.LBB113_57:                             # %for.end247
                                        #   in Loop: Header=BB113_52 Depth=1
	jmp	.LBB113_58
.LBB113_58:                             # %for.inc248
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_52
.LBB113_59:                             # %for.end250
	jmp	.LBB113_60
.LBB113_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB113_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB113_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB113_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB113_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_61
.LBB113_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB113_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB113_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_68:                             # %for.cond283
                                        #   Parent Loop BB113_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB113_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB113_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_68
.LBB113_71:                             # %for.end306
                                        #   in Loop: Header=BB113_66 Depth=1
	jmp	.LBB113_72
.LBB113_72:                             # %for.inc307
                                        #   in Loop: Header=BB113_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_66
.LBB113_73:                             # %for.end309
	jmp	.LBB113_98
.LBB113_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB113_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB113_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB113_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_79:                             # %for.cond324
                                        #   Parent Loop BB113_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB113_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB113_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_79
.LBB113_82:                             # %for.end341
                                        #   in Loop: Header=BB113_77 Depth=1
	jmp	.LBB113_83
.LBB113_83:                             # %for.inc342
                                        #   in Loop: Header=BB113_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_77
.LBB113_84:                             # %for.end344
	jmp	.LBB113_97
.LBB113_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB113_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB113_96
.LBB113_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB113_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_90:                             # %for.cond359
                                        #   Parent Loop BB113_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB113_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB113_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_90
.LBB113_93:                             # %for.end384
                                        #   in Loop: Header=BB113_88 Depth=1
	jmp	.LBB113_94
.LBB113_94:                             # %for.inc385
                                        #   in Loop: Header=BB113_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_88
.LBB113_95:                             # %for.end387
	jmp	.LBB113_96
.LBB113_96:                             # %if.end388
	jmp	.LBB113_97
.LBB113_97:                             # %if.end389
	jmp	.LBB113_98
.LBB113_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB113_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB113_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB113_103 Depth=1
	movl	$0, -4(%rbp)
.LBB113_105:                            # %for.cond410
                                        #   Parent Loop BB113_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB113_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB113_109
.LBB113_108:                            # %if.else483
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB113_109:                            # %if.end506
                                        #   in Loop: Header=BB113_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB113_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB113_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB113_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB113_113
.LBB113_112:                            # %if.else568
                                        #   in Loop: Header=BB113_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB113_113:                            # %if.end591
                                        #   in Loop: Header=BB113_105 Depth=2
	jmp	.LBB113_114
.LBB113_114:                            # %if.end592
                                        #   in Loop: Header=BB113_105 Depth=2
	jmp	.LBB113_115
.LBB113_115:                            # %for.inc593
                                        #   in Loop: Header=BB113_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_105
.LBB113_116:                            # %for.end595
                                        #   in Loop: Header=BB113_103 Depth=1
	jmp	.LBB113_117
.LBB113_117:                            # %for.inc596
                                        #   in Loop: Header=BB113_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_103
.LBB113_118:                            # %for.end598
	jmp	.LBB113_130
.LBB113_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB113_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB113_120 Depth=1
	movl	$0, -4(%rbp)
.LBB113_122:                            # %for.cond604
                                        #   Parent Loop BB113_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB113_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB113_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB113_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB113_125:                            # %if.end654
                                        #   in Loop: Header=BB113_122 Depth=2
	jmp	.LBB113_126
.LBB113_126:                            # %for.inc655
                                        #   in Loop: Header=BB113_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_122
.LBB113_127:                            # %for.end657
                                        #   in Loop: Header=BB113_120 Depth=1
	jmp	.LBB113_128
.LBB113_128:                            # %for.inc658
                                        #   in Loop: Header=BB113_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_120
.LBB113_129:                            # %for.end660
	jmp	.LBB113_130
.LBB113_130:                            # %if.end661
	jmp	.LBB113_131
.LBB113_131:                            # %if.end662
	cmpl	$1525772511, -52(%rbp)  # imm = 0x5AF170DF
	jne	.LBB113_133
.LBB113_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_132
.Lfunc_end113:
	.size	copy_rdopt_data.77, .Lfunc_end113-copy_rdopt_data.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.78
.LCPI114_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI114_1:
	.quad	4611686018427387904     # double 2
.LCPI114_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.78,@function
picture_structure_decision.78:          # @picture_structure_decision.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI114_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI114_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1884439548, -40(%rbp)  # imm = 0x705243FC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI114_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -44(%rbp)
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1884439548, -40(%rbp)  # imm = 0x705243FC
	jne	.LBB114_2
.LBB114_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_1
.Lfunc_end114:
	.size	picture_structure_decision.78, .Lfunc_end114-picture_structure_decision.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.79
	.type	field_mode_buffer.79,@function
field_mode_buffer.79:                   # @field_mode_buffer.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1136202417, -8(%rbp)   # imm = 0x43B912B1
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1136202417, -8(%rbp)   # imm = 0x43B912B1
	jne	.LBB115_2
.LBB115_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_1
.Lfunc_end115:
	.size	field_mode_buffer.79, .Lfunc_end115-field_mode_buffer.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.80
.LCPI116_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.80,@function
init_frame.80:                          # @init_frame.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$496497968, -16(%rbp)   # imm = 0x1D97F530
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB116_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_1
.LBB116_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB116_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB116_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB116_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB116_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB116_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB116_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB116_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB116_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_17
.LBB116_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_17:                             # %if.end32
	jmp	.LBB116_25
.LBB116_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_22
.LBB116_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB116_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB116_24:                             # %if.end50
	jmp	.LBB116_25
.LBB116_25:                             # %if.end51
	jmp	.LBB116_26
.LBB116_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB116_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB116_28:                             # %if.end62
	jmp	.LBB116_72
.LBB116_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB116_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB116_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB116_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB116_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_30
.LBB116_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB116_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB116_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB116_36:                             # %if.end102
	vmovsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB116_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB116_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB116_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB116_41
.LBB116_40:                             # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB116_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB116_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB116_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_49
.LBB116_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB116_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB116_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB116_58
.LBB116_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB116_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB116_57
.LBB116_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB116_57:                             # %cond.end
.LBB116_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_66
.LBB116_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB116_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB116_65
.LBB116_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB116_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB116_64
.LBB116_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB116_64:                             # %cond.end209
.LBB116_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_66:                             # %if.end214
	jmp	.LBB116_67
.LBB116_67:                             # %if.end215
	jmp	.LBB116_71
.LBB116_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB116_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_70:                             # %if.end226
	jmp	.LBB116_71
.LBB116_71:                             # %if.end227
	jmp	.LBB116_72
.LBB116_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$496497968, -16(%rbp)   # imm = 0x1D97F530
	jne	.LBB116_74
.LBB116_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_73
.Lfunc_end116:
	.size	init_frame.80, .Lfunc_end116-init_frame.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.81
.LCPI117_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.81,@function
find_snr.81:                            # @find_snr.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$880224842, -44(%rbp)   # imm = 0x34772A4A
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB117_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB117_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB117_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	$0, -8(%rbp)
.LBB117_4:                              # %for.cond8
                                        #   Parent Loop BB117_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB117_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB117_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB117_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_4
.LBB117_7:                              # %for.end
                                        #   in Loop: Header=BB117_2 Depth=1
	jmp	.LBB117_8
.LBB117_8:                              # %for.inc22
                                        #   in Loop: Header=BB117_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_2
.LBB117_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB117_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB117_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	$0, -8(%rbp)
.LBB117_13:                             # %for.cond33
                                        #   Parent Loop BB117_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB117_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB117_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB117_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_13
.LBB117_16:                             # %for.end76
                                        #   in Loop: Header=BB117_11 Depth=1
	jmp	.LBB117_17
.LBB117_17:                             # %for.inc77
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_11
.LBB117_18:                             # %for.end79
	jmp	.LBB117_19
.LBB117_19:                             # %if.end
	jmp	.LBB117_41
.LBB117_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB117_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB117_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB117_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB117_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB117_23 Depth=1
	movl	$0, -8(%rbp)
.LBB117_25:                             # %for.cond89
                                        #   Parent Loop BB117_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB117_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB117_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB117_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_25
.LBB117_28:                             # %for.end112
                                        #   in Loop: Header=BB117_23 Depth=1
	jmp	.LBB117_29
.LBB117_29:                             # %for.inc113
                                        #   in Loop: Header=BB117_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_23
.LBB117_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB117_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB117_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB117_32 Depth=1
	movl	$0, -8(%rbp)
.LBB117_34:                             # %for.cond125
                                        #   Parent Loop BB117_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB117_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB117_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB117_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_34
.LBB117_37:                             # %for.end169
                                        #   in Loop: Header=BB117_32 Depth=1
	jmp	.LBB117_38
.LBB117_38:                             # %for.inc170
                                        #   in Loop: Header=BB117_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_32
.LBB117_39:                             # %for.end172
	jmp	.LBB117_40
.LBB117_40:                             # %if.end173
	jmp	.LBB117_41
.LBB117_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB117_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB117_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB117_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB117_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB117_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB117_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB117_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI117_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI117_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI117_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB117_51
.LBB117_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB117_51:                             # %if.end219
	jmp	.LBB117_52
.LBB117_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB117_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB117_55
.LBB117_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB117_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB117_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB117_61
.LBB117_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB117_60
.LBB117_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB117_60:                             # %if.end394
	jmp	.LBB117_61
.LBB117_61:                             # %if.end395
	cmpl	$880224842, -44(%rbp)   # imm = 0x34772A4A
	jne	.LBB117_63
.LBB117_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_62
.Lfunc_end117:
	.size	find_snr.81, .Lfunc_end117-find_snr.81
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.82        # -- Begin function field_picture.82
	.p2align	4, 0x90
	.type	field_picture.82,@function
field_picture.82:                       # @field_picture.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$701210618, -12(%rbp)   # imm = 0x29CB9FFA
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB118_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB118_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB118_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB118_6
.LBB118_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB118_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB118_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB118_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB118_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB118_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB118_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB118_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB118_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB118_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB118_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$701210618, -12(%rbp)   # imm = 0x29CB9FFA
	jne	.LBB118_18
.LBB118_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_17
.Lfunc_end118:
	.size	field_picture.82, .Lfunc_end118-field_picture.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.83
	.type	PaddAutoCropBorders.83,@function
PaddAutoCropBorders.83:                 # @PaddAutoCropBorders.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$961764874, -32(%rbp)   # imm = 0x39535E0A
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_3:                              # %for.cond1
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_3
.LBB119_6:                              # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_7
.LBB119_7:                              # %for.inc10
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_8:                              # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB119_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	$0, -8(%rbp)
.LBB119_11:                             # %for.cond16
                                        #   Parent Loop BB119_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB119_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB119_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_11
.LBB119_14:                             # %for.end30
                                        #   in Loop: Header=BB119_9 Depth=1
	jmp	.LBB119_15
.LBB119_15:                             # %for.inc31
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_9
.LBB119_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB119_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB119_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB119_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB119_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_20:                             # %for.cond38
                                        #   Parent Loop BB119_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB119_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB119_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB119_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_20
.LBB119_23:                             # %for.end65
                                        #   in Loop: Header=BB119_18 Depth=1
	jmp	.LBB119_24
.LBB119_24:                             # %for.inc66
                                        #   in Loop: Header=BB119_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_18
.LBB119_25:                             # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB119_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB119_26 Depth=1
	movl	$0, -8(%rbp)
.LBB119_28:                             # %for.cond72
                                        #   Parent Loop BB119_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB119_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB119_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB119_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_28
.LBB119_31:                             # %for.end99
                                        #   in Loop: Header=BB119_26 Depth=1
	jmp	.LBB119_32
.LBB119_32:                             # %for.inc100
                                        #   in Loop: Header=BB119_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_26
.LBB119_33:                             # %for.end102
	jmp	.LBB119_34
.LBB119_34:                             # %if.end
	cmpl	$961764874, -32(%rbp)   # imm = 0x39535E0A
	jne	.LBB119_36
.LBB119_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_35
.Lfunc_end119:
	.size	PaddAutoCropBorders.83, .Lfunc_end119-PaddAutoCropBorders.83
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.84      # -- Begin function copy_rdopt_data.84
	.p2align	4, 0x90
	.type	copy_rdopt_data.84,@function
copy_rdopt_data.84:                     # @copy_rdopt_data.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1653929476, -52(%rbp)  # imm = 0x6294F604
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB120_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB120_4
.LBB120_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB120_4
.LBB120_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB120_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_7 Depth 2
                                        #       Child Loop BB120_9 Depth 3
                                        #         Child Loop BB120_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB120_5 Depth=1
	movl	$0, -8(%rbp)
.LBB120_7:                              # %for.cond17
                                        #   Parent Loop BB120_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_9 Depth 3
                                        #         Child Loop BB120_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB120_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB120_7 Depth=2
	movl	$0, -12(%rbp)
.LBB120_9:                              # %for.cond21
                                        #   Parent Loop BB120_5 Depth=1
                                        #     Parent Loop BB120_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB120_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB120_9 Depth=3
	movl	$0, -16(%rbp)
.LBB120_11:                             # %for.cond25
                                        #   Parent Loop BB120_5 Depth=1
                                        #     Parent Loop BB120_7 Depth=2
                                        #       Parent Loop BB120_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB120_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB120_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB120_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_11
.LBB120_14:                             # %for.end
                                        #   in Loop: Header=BB120_9 Depth=3
	jmp	.LBB120_15
.LBB120_15:                             # %for.inc46
                                        #   in Loop: Header=BB120_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_9
.LBB120_16:                             # %for.end48
                                        #   in Loop: Header=BB120_7 Depth=2
	jmp	.LBB120_17
.LBB120_17:                             # %for.inc49
                                        #   in Loop: Header=BB120_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_7
.LBB120_18:                             # %for.end51
                                        #   in Loop: Header=BB120_5 Depth=1
	jmp	.LBB120_19
.LBB120_19:                             # %for.inc52
                                        #   in Loop: Header=BB120_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_5
.LBB120_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB120_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_23 Depth 2
                                        #       Child Loop BB120_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB120_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB120_21 Depth=1
	movl	$0, -12(%rbp)
.LBB120_23:                             # %for.cond59
                                        #   Parent Loop BB120_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB120_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB120_23 Depth=2
	movl	$0, -16(%rbp)
.LBB120_25:                             # %for.cond63
                                        #   Parent Loop BB120_21 Depth=1
                                        #     Parent Loop BB120_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB120_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB120_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB120_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_25
.LBB120_28:                             # %for.end82
                                        #   in Loop: Header=BB120_23 Depth=2
	jmp	.LBB120_29
.LBB120_29:                             # %for.inc83
                                        #   in Loop: Header=BB120_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_23
.LBB120_30:                             # %for.end85
                                        #   in Loop: Header=BB120_21 Depth=1
	jmp	.LBB120_31
.LBB120_31:                             # %for.inc86
                                        #   in Loop: Header=BB120_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_21
.LBB120_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB120_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB120_33 Depth=1
	movl	$0, -4(%rbp)
.LBB120_35:                             # %for.cond93
                                        #   Parent Loop BB120_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB120_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB120_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB120_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB120_38:                             # %if.end
                                        #   in Loop: Header=BB120_35 Depth=2
	jmp	.LBB120_39
.LBB120_39:                             # %for.inc176
                                        #   in Loop: Header=BB120_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_35
.LBB120_40:                             # %for.end178
                                        #   in Loop: Header=BB120_33 Depth=1
	jmp	.LBB120_41
.LBB120_41:                             # %for.inc179
                                        #   in Loop: Header=BB120_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_33
.LBB120_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB120_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB120_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB120_43 Depth=1
	movl	$0, -4(%rbp)
.LBB120_45:                             # %for.cond186
                                        #   Parent Loop BB120_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB120_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB120_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB120_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_45
.LBB120_48:                             # %for.end203
                                        #   in Loop: Header=BB120_43 Depth=1
	jmp	.LBB120_49
.LBB120_49:                             # %for.inc204
                                        #   in Loop: Header=BB120_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_43
.LBB120_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB120_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB120_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB120_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	$0, -4(%rbp)
.LBB120_54:                             # %for.cond214
                                        #   Parent Loop BB120_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB120_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB120_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB120_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_54
.LBB120_57:                             # %for.end247
                                        #   in Loop: Header=BB120_52 Depth=1
	jmp	.LBB120_58
.LBB120_58:                             # %for.inc248
                                        #   in Loop: Header=BB120_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_52
.LBB120_59:                             # %for.end250
	jmp	.LBB120_60
.LBB120_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB120_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB120_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB120_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_61
.LBB120_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB120_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB120_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB120_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB120_68:                             # %for.cond283
                                        #   Parent Loop BB120_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB120_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB120_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_68
.LBB120_71:                             # %for.end306
                                        #   in Loop: Header=BB120_66 Depth=1
	jmp	.LBB120_72
.LBB120_72:                             # %for.inc307
                                        #   in Loop: Header=BB120_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_66
.LBB120_73:                             # %for.end309
	jmp	.LBB120_98
.LBB120_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB120_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB120_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB120_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB120_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB120_79:                             # %for.cond324
                                        #   Parent Loop BB120_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB120_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB120_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_79
.LBB120_82:                             # %for.end341
                                        #   in Loop: Header=BB120_77 Depth=1
	jmp	.LBB120_83
.LBB120_83:                             # %for.inc342
                                        #   in Loop: Header=BB120_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_77
.LBB120_84:                             # %for.end344
	jmp	.LBB120_97
.LBB120_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB120_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB120_96
.LBB120_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB120_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB120_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB120_90:                             # %for.cond359
                                        #   Parent Loop BB120_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB120_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB120_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_90
.LBB120_93:                             # %for.end384
                                        #   in Loop: Header=BB120_88 Depth=1
	jmp	.LBB120_94
.LBB120_94:                             # %for.inc385
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_88
.LBB120_95:                             # %for.end387
	jmp	.LBB120_96
.LBB120_96:                             # %if.end388
	jmp	.LBB120_97
.LBB120_97:                             # %if.end389
	jmp	.LBB120_98
.LBB120_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB120_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB120_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB120_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB120_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB120_103 Depth=1
	movl	$0, -4(%rbp)
.LBB120_105:                            # %for.cond410
                                        #   Parent Loop BB120_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB120_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB120_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB120_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB120_109
.LBB120_108:                            # %if.else483
                                        #   in Loop: Header=BB120_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB120_109:                            # %if.end506
                                        #   in Loop: Header=BB120_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB120_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB120_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB120_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB120_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB120_113
.LBB120_112:                            # %if.else568
                                        #   in Loop: Header=BB120_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB120_113:                            # %if.end591
                                        #   in Loop: Header=BB120_105 Depth=2
	jmp	.LBB120_114
.LBB120_114:                            # %if.end592
                                        #   in Loop: Header=BB120_105 Depth=2
	jmp	.LBB120_115
.LBB120_115:                            # %for.inc593
                                        #   in Loop: Header=BB120_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_105
.LBB120_116:                            # %for.end595
                                        #   in Loop: Header=BB120_103 Depth=1
	jmp	.LBB120_117
.LBB120_117:                            # %for.inc596
                                        #   in Loop: Header=BB120_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_103
.LBB120_118:                            # %for.end598
	jmp	.LBB120_130
.LBB120_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB120_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	$0, -4(%rbp)
.LBB120_122:                            # %for.cond604
                                        #   Parent Loop BB120_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB120_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB120_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB120_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB120_125:                            # %if.end654
                                        #   in Loop: Header=BB120_122 Depth=2
	jmp	.LBB120_126
.LBB120_126:                            # %for.inc655
                                        #   in Loop: Header=BB120_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_122
.LBB120_127:                            # %for.end657
                                        #   in Loop: Header=BB120_120 Depth=1
	jmp	.LBB120_128
.LBB120_128:                            # %for.inc658
                                        #   in Loop: Header=BB120_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_120
.LBB120_129:                            # %for.end660
	jmp	.LBB120_130
.LBB120_130:                            # %if.end661
	jmp	.LBB120_131
.LBB120_131:                            # %if.end662
	cmpl	$1653929476, -52(%rbp)  # imm = 0x6294F604
	jne	.LBB120_133
.LBB120_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_132
.Lfunc_end120:
	.size	copy_rdopt_data.84, .Lfunc_end120-copy_rdopt_data.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.85
	.type	distortion_fld.85,@function
distortion_fld.85:                      # @distortion_fld.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$62523781, -4(%rbp)     # imm = 0x3BA0985
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$62523781, -4(%rbp)     # imm = 0x3BA0985
	jne	.LBB121_2
.LBB121_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_1
.Lfunc_end121:
	.size	distortion_fld.85, .Lfunc_end121-distortion_fld.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.86
	.type	ReportFirstframe.86,@function
ReportFirstframe.86:                    # @ReportFirstframe.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1898925564, -8(%rbp)   # imm = 0x712F4DFC
	movl	%edi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB122_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB122_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB122_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_5
.LBB122_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB122_5:                              # %if.end
	jmp	.LBB122_6
.LBB122_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1898925564, -8(%rbp)   # imm = 0x712F4DFC
	jne	.LBB122_8
.LBB122_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_7
.Lfunc_end122:
	.size	ReportFirstframe.86, .Lfunc_end122-ReportFirstframe.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.87
	.type	copy_motion_vectors_MB.87,@function
copy_motion_vectors_MB.87:              # @copy_motion_vectors_MB.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$626169878, -20(%rbp)   # imm = 0x25529816
	movl	$0, -12(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_3 Depth 2
                                        #       Child Loop BB123_5 Depth 3
                                        #         Child Loop BB123_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB123_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	$0, -8(%rbp)
.LBB123_3:                              # %for.cond1
                                        #   Parent Loop BB123_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_5 Depth 3
                                        #         Child Loop BB123_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB123_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB123_3 Depth=2
	movl	$0, -4(%rbp)
.LBB123_5:                              # %for.cond4
                                        #   Parent Loop BB123_1 Depth=1
                                        #     Parent Loop BB123_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB123_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB123_5 Depth=3
	movl	$0, -16(%rbp)
.LBB123_7:                              # %for.cond7
                                        #   Parent Loop BB123_1 Depth=1
                                        #     Parent Loop BB123_3 Depth=2
                                        #       Parent Loop BB123_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB123_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB123_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB123_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB123_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB123_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB123_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB123_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB123_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB123_12:                             # %if.end
                                        #   in Loop: Header=BB123_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB123_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_7
.LBB123_14:                             # %for.end
                                        #   in Loop: Header=BB123_5 Depth=3
	jmp	.LBB123_15
.LBB123_15:                             # %for.inc359
                                        #   in Loop: Header=BB123_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_5
.LBB123_16:                             # %for.end361
                                        #   in Loop: Header=BB123_3 Depth=2
	jmp	.LBB123_17
.LBB123_17:                             # %for.inc362
                                        #   in Loop: Header=BB123_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_3
.LBB123_18:                             # %for.end364
                                        #   in Loop: Header=BB123_1 Depth=1
	jmp	.LBB123_19
.LBB123_19:                             # %for.inc365
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_1
.LBB123_20:                             # %for.end367
	cmpl	$626169878, -20(%rbp)   # imm = 0x25529816
	jne	.LBB123_22
.LBB123_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_21
.Lfunc_end123:
	.size	copy_motion_vectors_MB.87, .Lfunc_end123-copy_motion_vectors_MB.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.88
	.type	writeUnit.88,@function
writeUnit.88:                           # @writeUnit.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1934411759, -16(%rbp)  # imm = 0x734CC7EF
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB124_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB124_18
.LBB124_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB124_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB124_6
.LBB124_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB124_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB124_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB124_9
.LBB124_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB124_9:                              # %if.end21
	jmp	.LBB124_17
.LBB124_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB124_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB124_13
.LBB124_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB124_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB124_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB124_16
.LBB124_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB124_16:                             # %if.end39
	jmp	.LBB124_17
.LBB124_17:                             # %if.end40
	jmp	.LBB124_18
.LBB124_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1934411759, -16(%rbp)  # imm = 0x734CC7EF
	jne	.LBB124_20
.LBB124_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_19
.Lfunc_end124:
	.size	writeUnit.88, .Lfunc_end124-writeUnit.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.89
	.type	ReportFirstframe.89,@function
ReportFirstframe.89:                    # @ReportFirstframe.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$656176142, -12(%rbp)   # imm = 0x271C740E
	movl	%edi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB125_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB125_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB125_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_5
.LBB125_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB125_5:                              # %if.end
	jmp	.LBB125_6
.LBB125_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$656176142, -12(%rbp)   # imm = 0x271C740E
	jne	.LBB125_8
.LBB125_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_7
.Lfunc_end125:
	.size	ReportFirstframe.89, .Lfunc_end125-ReportFirstframe.89
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.90              # -- Begin function buf2img.90
	.p2align	4, 0x90
	.type	buf2img.90,@function
buf2img.90:                             # @buf2img.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1842425044, -60(%rbp)  # imm = 0x6DD12CD4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB126_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB126_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB126_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB126_6
	jmp	.LBB126_4
.LBB126_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB126_15
	jmp	.LBB126_5
.LBB126_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB126_24
	jmp	.LBB126_33
.LBB126_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB126_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	$0, -4(%rbp)
.LBB126_9:                              # %for.cond5
                                        #   Parent Loop BB126_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB126_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB126_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_9
.LBB126_12:                             # %for.end
                                        #   in Loop: Header=BB126_7 Depth=1
	jmp	.LBB126_13
.LBB126_13:                             # %for.inc14
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_7
.LBB126_14:                             # %for.end16
	jmp	.LBB126_34
.LBB126_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB126_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB126_16 Depth=1
	movl	$0, -4(%rbp)
.LBB126_18:                             # %for.cond22
                                        #   Parent Loop BB126_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB126_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB126_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_18
.LBB126_21:                             # %for.end38
                                        #   in Loop: Header=BB126_16 Depth=1
	jmp	.LBB126_22
.LBB126_22:                             # %for.inc39
                                        #   in Loop: Header=BB126_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_16
.LBB126_23:                             # %for.end41
	jmp	.LBB126_34
.LBB126_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB126_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB126_25 Depth=1
	movl	$0, -4(%rbp)
.LBB126_27:                             # %for.cond47
                                        #   Parent Loop BB126_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB126_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB126_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_27
.LBB126_30:                             # %for.end74
                                        #   in Loop: Header=BB126_25 Depth=1
	jmp	.LBB126_31
.LBB126_31:                             # %for.inc75
                                        #   in Loop: Header=BB126_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_25
.LBB126_32:                             # %for.end77
	jmp	.LBB126_33
.LBB126_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB126_34:                             # %sw.epilog
	jmp	.LBB126_44
.LBB126_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB126_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB126_36 Depth=1
	movl	$0, -4(%rbp)
.LBB126_38:                             # %for.cond82
                                        #   Parent Loop BB126_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB126_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB126_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_38
.LBB126_41:                             # %for.end102
                                        #   in Loop: Header=BB126_36 Depth=1
	jmp	.LBB126_42
.LBB126_42:                             # %for.inc103
                                        #   in Loop: Header=BB126_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_36
.LBB126_43:                             # %for.end105
	jmp	.LBB126_44
.LBB126_44:                             # %if.end106
	cmpl	$1842425044, -60(%rbp)  # imm = 0x6DD12CD4
	jne	.LBB126_46
.LBB126_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_45
.Lfunc_end126:
	.size	buf2img.90, .Lfunc_end126-buf2img.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.91
	.type	ReportFirstframe.91,@function
ReportFirstframe.91:                    # @ReportFirstframe.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$542687561, -12(%rbp)   # imm = 0x2058C149
	movl	%edi, -8(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB127_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB127_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB127_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_5
.LBB127_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB127_5:                              # %if.end
	jmp	.LBB127_6
.LBB127_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$542687561, -12(%rbp)   # imm = 0x2058C149
	jne	.LBB127_8
.LBB127_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_7
.Lfunc_end127:
	.size	ReportFirstframe.91, .Lfunc_end127-ReportFirstframe.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.92
.LCPI128_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI128_1:
	.quad	4611686018427387904     # double 2
.LCPI128_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.92,@function
picture_structure_decision.92:          # @picture_structure_decision.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI128_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI128_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1718015153, -40(%rbp)  # imm = 0x6666D4B1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI128_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1718015153, -40(%rbp)  # imm = 0x6666D4B1
	jne	.LBB128_2
.LBB128_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_1
.Lfunc_end128:
	.size	picture_structure_decision.92, .Lfunc_end128-picture_structure_decision.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.93
	.type	ReportFirstframe.93,@function
ReportFirstframe.93:                    # @ReportFirstframe.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$78520414, -8(%rbp)     # imm = 0x4AE205E
	movl	%edi, -4(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB129_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB129_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB129_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_5
.LBB129_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB129_5:                              # %if.end
	jmp	.LBB129_6
.LBB129_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$78520414, -8(%rbp)     # imm = 0x4AE205E
	jne	.LBB129_8
.LBB129_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_7
.Lfunc_end129:
	.size	ReportFirstframe.93, .Lfunc_end129-ReportFirstframe.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.94
	.type	distortion_fld.94,@function
distortion_fld.94:                      # @distortion_fld.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1932408415, -4(%rbp)   # imm = 0x732E365F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1932408415, -4(%rbp)   # imm = 0x732E365F
	jne	.LBB130_2
.LBB130_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_1
.Lfunc_end130:
	.size	distortion_fld.94, .Lfunc_end130-distortion_fld.94
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.95        # -- Begin function field_picture.95
	.p2align	4, 0x90
	.type	field_picture.95,@function
field_picture.95:                       # @field_picture.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$414561987, -16(%rbp)   # imm = 0x18B5B6C3
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB131_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB131_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB131_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB131_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB131_6
.LBB131_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB131_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB131_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB131_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB131_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB131_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB131_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB131_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB131_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB131_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB131_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB131_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$414561987, -16(%rbp)   # imm = 0x18B5B6C3
	jne	.LBB131_18
.LBB131_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_17
.Lfunc_end131:
	.size	field_picture.95, .Lfunc_end131-field_picture.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.96
	.type	frame_mode_buffer.96,@function
frame_mode_buffer.96:                   # @frame_mode_buffer.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1082210458, -12(%rbp)  # imm = 0x4081389A
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB132_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB132_3
.LBB132_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB132_3:                              # %if.end
	cmpl	$1082210458, -12(%rbp)  # imm = 0x4081389A
	jne	.LBB132_5
.LBB132_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_4
.Lfunc_end132:
	.size	frame_mode_buffer.96, .Lfunc_end132-frame_mode_buffer.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.97
	.type	PaddAutoCropBorders.97,@function
PaddAutoCropBorders.97:                 # @PaddAutoCropBorders.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1390956505, -24(%rbp)  # imm = 0x52E84FD9
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB133_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB133_3:                              # %for.cond1
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB133_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_3
.LBB133_6:                              # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_7
.LBB133_7:                              # %for.inc10
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_1
.LBB133_8:                              # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB133_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB133_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB133_9 Depth=1
	movl	$0, -4(%rbp)
.LBB133_11:                             # %for.cond16
                                        #   Parent Loop BB133_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB133_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB133_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB133_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_11
.LBB133_14:                             # %for.end30
                                        #   in Loop: Header=BB133_9 Depth=1
	jmp	.LBB133_15
.LBB133_15:                             # %for.inc31
                                        #   in Loop: Header=BB133_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_9
.LBB133_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB133_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB133_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB133_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB133_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB133_20:                             # %for.cond38
                                        #   Parent Loop BB133_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB133_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB133_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB133_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_20
.LBB133_23:                             # %for.end65
                                        #   in Loop: Header=BB133_18 Depth=1
	jmp	.LBB133_24
.LBB133_24:                             # %for.inc66
                                        #   in Loop: Header=BB133_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_18
.LBB133_25:                             # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB133_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB133_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB133_26 Depth=1
	movl	$0, -4(%rbp)
.LBB133_28:                             # %for.cond72
                                        #   Parent Loop BB133_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB133_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB133_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB133_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_28
.LBB133_31:                             # %for.end99
                                        #   in Loop: Header=BB133_26 Depth=1
	jmp	.LBB133_32
.LBB133_32:                             # %for.inc100
                                        #   in Loop: Header=BB133_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_26
.LBB133_33:                             # %for.end102
	jmp	.LBB133_34
.LBB133_34:                             # %if.end
	cmpl	$1390956505, -24(%rbp)  # imm = 0x52E84FD9
	jne	.LBB133_36
.LBB133_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_35
.Lfunc_end133:
	.size	PaddAutoCropBorders.97, .Lfunc_end133-PaddAutoCropBorders.97
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.98
	.type	rdPictureCoding.98,@function
rdPictureCoding.98:                     # @rdPictureCoding.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1343692376, -24(%rbp)  # imm = 0x50171E58
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB134_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB134_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB134_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB134_6
.LBB134_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB134_6:                              # %if.end
	jmp	.LBB134_8
.LBB134_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB134_8:                              # %if.end10
	jmp	.LBB134_10
.LBB134_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB134_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB134_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB134_13
.LBB134_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB134_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB134_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB134_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB134_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB134_18
.LBB134_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB134_20
.LBB134_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB134_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB134_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB134_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB134_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB134_26
.LBB134_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB134_26:                             # %if.end53
	jmp	.LBB134_34
.LBB134_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB134_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB134_33
.LBB134_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB134_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_32
.LBB134_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_32:                             # %if.end66
	jmp	.LBB134_33
.LBB134_33:                             # %if.end67
	jmp	.LBB134_34
.LBB134_34:                             # %if.end68
	jmp	.LBB134_36
.LBB134_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB134_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB134_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB134_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB134_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB134_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB134_46
.LBB134_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB134_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB134_45
.LBB134_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB134_45:                             # %if.end98
	jmp	.LBB134_46
.LBB134_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB134_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB134_51
.LBB134_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB134_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB134_50:                             # %if.end111
	jmp	.LBB134_51
.LBB134_51:                             # %if.end112
	cmpl	$1343692376, -24(%rbp)  # imm = 0x50171E58
	jne	.LBB134_53
.LBB134_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_52
.Lfunc_end134:
	.size	rdPictureCoding.98, .Lfunc_end134-rdPictureCoding.98
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.99      # -- Begin function copy_rdopt_data.99
	.p2align	4, 0x90
	.type	copy_rdopt_data.99,@function
copy_rdopt_data.99:                     # @copy_rdopt_data.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$445122905, -52(%rbp)   # imm = 0x1A880959
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB135_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB135_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB135_4
.LBB135_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB135_4
.LBB135_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB135_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_7 Depth 2
                                        #       Child Loop BB135_9 Depth 3
                                        #         Child Loop BB135_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB135_5 Depth=1
	movl	$0, -8(%rbp)
.LBB135_7:                              # %for.cond17
                                        #   Parent Loop BB135_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_9 Depth 3
                                        #         Child Loop BB135_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB135_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB135_7 Depth=2
	movl	$0, -12(%rbp)
.LBB135_9:                              # %for.cond21
                                        #   Parent Loop BB135_5 Depth=1
                                        #     Parent Loop BB135_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB135_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB135_9 Depth=3
	movl	$0, -16(%rbp)
.LBB135_11:                             # %for.cond25
                                        #   Parent Loop BB135_5 Depth=1
                                        #     Parent Loop BB135_7 Depth=2
                                        #       Parent Loop BB135_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB135_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB135_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB135_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_11
.LBB135_14:                             # %for.end
                                        #   in Loop: Header=BB135_9 Depth=3
	jmp	.LBB135_15
.LBB135_15:                             # %for.inc46
                                        #   in Loop: Header=BB135_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_9
.LBB135_16:                             # %for.end48
                                        #   in Loop: Header=BB135_7 Depth=2
	jmp	.LBB135_17
.LBB135_17:                             # %for.inc49
                                        #   in Loop: Header=BB135_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_7
.LBB135_18:                             # %for.end51
                                        #   in Loop: Header=BB135_5 Depth=1
	jmp	.LBB135_19
.LBB135_19:                             # %for.inc52
                                        #   in Loop: Header=BB135_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_5
.LBB135_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB135_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_23 Depth 2
                                        #       Child Loop BB135_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB135_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -12(%rbp)
.LBB135_23:                             # %for.cond59
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB135_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB135_23 Depth=2
	movl	$0, -16(%rbp)
.LBB135_25:                             # %for.cond63
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB135_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB135_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB135_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_25
.LBB135_28:                             # %for.end82
                                        #   in Loop: Header=BB135_23 Depth=2
	jmp	.LBB135_29
.LBB135_29:                             # %for.inc83
                                        #   in Loop: Header=BB135_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_23
.LBB135_30:                             # %for.end85
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_31
.LBB135_31:                             # %for.inc86
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_21
.LBB135_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB135_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB135_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB135_33 Depth=1
	movl	$0, -4(%rbp)
.LBB135_35:                             # %for.cond93
                                        #   Parent Loop BB135_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB135_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB135_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB135_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB135_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB135_38:                             # %if.end
                                        #   in Loop: Header=BB135_35 Depth=2
	jmp	.LBB135_39
.LBB135_39:                             # %for.inc176
                                        #   in Loop: Header=BB135_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_35
.LBB135_40:                             # %for.end178
                                        #   in Loop: Header=BB135_33 Depth=1
	jmp	.LBB135_41
.LBB135_41:                             # %for.inc179
                                        #   in Loop: Header=BB135_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_33
.LBB135_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB135_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB135_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB135_43 Depth=1
	movl	$0, -4(%rbp)
.LBB135_45:                             # %for.cond186
                                        #   Parent Loop BB135_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB135_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB135_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB135_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_45
.LBB135_48:                             # %for.end203
                                        #   in Loop: Header=BB135_43 Depth=1
	jmp	.LBB135_49
.LBB135_49:                             # %for.inc204
                                        #   in Loop: Header=BB135_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_43
.LBB135_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB135_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB135_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB135_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB135_52 Depth=1
	movl	$0, -4(%rbp)
.LBB135_54:                             # %for.cond214
                                        #   Parent Loop BB135_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB135_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB135_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB135_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_54
.LBB135_57:                             # %for.end247
                                        #   in Loop: Header=BB135_52 Depth=1
	jmp	.LBB135_58
.LBB135_58:                             # %for.inc248
                                        #   in Loop: Header=BB135_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_52
.LBB135_59:                             # %for.end250
	jmp	.LBB135_60
.LBB135_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB135_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB135_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB135_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB135_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_61
.LBB135_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB135_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB135_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB135_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB135_68:                             # %for.cond283
                                        #   Parent Loop BB135_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB135_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB135_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_68
.LBB135_71:                             # %for.end306
                                        #   in Loop: Header=BB135_66 Depth=1
	jmp	.LBB135_72
.LBB135_72:                             # %for.inc307
                                        #   in Loop: Header=BB135_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_66
.LBB135_73:                             # %for.end309
	jmp	.LBB135_98
.LBB135_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB135_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB135_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB135_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB135_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB135_79:                             # %for.cond324
                                        #   Parent Loop BB135_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB135_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB135_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_79
.LBB135_82:                             # %for.end341
                                        #   in Loop: Header=BB135_77 Depth=1
	jmp	.LBB135_83
.LBB135_83:                             # %for.inc342
                                        #   in Loop: Header=BB135_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_77
.LBB135_84:                             # %for.end344
	jmp	.LBB135_97
.LBB135_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB135_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB135_96
.LBB135_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB135_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB135_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB135_90:                             # %for.cond359
                                        #   Parent Loop BB135_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB135_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB135_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB135_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_90
.LBB135_93:                             # %for.end384
                                        #   in Loop: Header=BB135_88 Depth=1
	jmp	.LBB135_94
.LBB135_94:                             # %for.inc385
                                        #   in Loop: Header=BB135_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_88
.LBB135_95:                             # %for.end387
	jmp	.LBB135_96
.LBB135_96:                             # %if.end388
	jmp	.LBB135_97
.LBB135_97:                             # %if.end389
	jmp	.LBB135_98
.LBB135_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB135_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB135_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB135_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB135_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB135_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB135_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB135_103 Depth=1
	movl	$0, -4(%rbp)
.LBB135_105:                            # %for.cond410
                                        #   Parent Loop BB135_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB135_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB135_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB135_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB135_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB135_109
.LBB135_108:                            # %if.else483
                                        #   in Loop: Header=BB135_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB135_109:                            # %if.end506
                                        #   in Loop: Header=BB135_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB135_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB135_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB135_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB135_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB135_113
.LBB135_112:                            # %if.else568
                                        #   in Loop: Header=BB135_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB135_113:                            # %if.end591
                                        #   in Loop: Header=BB135_105 Depth=2
	jmp	.LBB135_114
.LBB135_114:                            # %if.end592
                                        #   in Loop: Header=BB135_105 Depth=2
	jmp	.LBB135_115
.LBB135_115:                            # %for.inc593
                                        #   in Loop: Header=BB135_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_105
.LBB135_116:                            # %for.end595
                                        #   in Loop: Header=BB135_103 Depth=1
	jmp	.LBB135_117
.LBB135_117:                            # %for.inc596
                                        #   in Loop: Header=BB135_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_103
.LBB135_118:                            # %for.end598
	jmp	.LBB135_130
.LBB135_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB135_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB135_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB135_120 Depth=1
	movl	$0, -4(%rbp)
.LBB135_122:                            # %for.cond604
                                        #   Parent Loop BB135_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB135_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB135_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB135_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB135_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB135_125:                            # %if.end654
                                        #   in Loop: Header=BB135_122 Depth=2
	jmp	.LBB135_126
.LBB135_126:                            # %for.inc655
                                        #   in Loop: Header=BB135_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_122
.LBB135_127:                            # %for.end657
                                        #   in Loop: Header=BB135_120 Depth=1
	jmp	.LBB135_128
.LBB135_128:                            # %for.inc658
                                        #   in Loop: Header=BB135_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_120
.LBB135_129:                            # %for.end660
	jmp	.LBB135_130
.LBB135_130:                            # %if.end661
	jmp	.LBB135_131
.LBB135_131:                            # %if.end662
	cmpl	$445122905, -52(%rbp)   # imm = 0x1A880959
	jne	.LBB135_133
.LBB135_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_132
.Lfunc_end135:
	.size	copy_rdopt_data.99, .Lfunc_end135-copy_rdopt_data.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.100
	.type	ReportRB.100,@function
ReportRB.100:                           # @ReportRB.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$104773489, -16(%rbp)   # imm = 0x63EB771
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$104773489, -16(%rbp)   # imm = 0x63EB771
	jne	.LBB136_2
.LBB136_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_1
.Lfunc_end136:
	.size	ReportRB.100, .Lfunc_end136-ReportRB.100
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.101             # -- Begin function buf2img.101
	.p2align	4, 0x90
	.type	buf2img.101,@function
buf2img.101:                            # @buf2img.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1542883733, -60(%rbp)  # imm = 0x5BF68995
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB137_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB137_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB137_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB137_6
	jmp	.LBB137_4
.LBB137_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB137_15
	jmp	.LBB137_5
.LBB137_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB137_24
	jmp	.LBB137_33
.LBB137_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB137_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB137_7 Depth=1
	movl	$0, -8(%rbp)
.LBB137_9:                              # %for.cond5
                                        #   Parent Loop BB137_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB137_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB137_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_9
.LBB137_12:                             # %for.end
                                        #   in Loop: Header=BB137_7 Depth=1
	jmp	.LBB137_13
.LBB137_13:                             # %for.inc14
                                        #   in Loop: Header=BB137_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_7
.LBB137_14:                             # %for.end16
	jmp	.LBB137_34
.LBB137_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB137_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB137_16 Depth=1
	movl	$0, -8(%rbp)
.LBB137_18:                             # %for.cond22
                                        #   Parent Loop BB137_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB137_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB137_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_18
.LBB137_21:                             # %for.end38
                                        #   in Loop: Header=BB137_16 Depth=1
	jmp	.LBB137_22
.LBB137_22:                             # %for.inc39
                                        #   in Loop: Header=BB137_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_16
.LBB137_23:                             # %for.end41
	jmp	.LBB137_34
.LBB137_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB137_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB137_25 Depth=1
	movl	$0, -8(%rbp)
.LBB137_27:                             # %for.cond47
                                        #   Parent Loop BB137_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB137_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB137_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_27
.LBB137_30:                             # %for.end74
                                        #   in Loop: Header=BB137_25 Depth=1
	jmp	.LBB137_31
.LBB137_31:                             # %for.inc75
                                        #   in Loop: Header=BB137_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_25
.LBB137_32:                             # %for.end77
	jmp	.LBB137_33
.LBB137_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB137_34:                             # %sw.epilog
	jmp	.LBB137_44
.LBB137_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB137_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB137_36 Depth=1
	movl	$0, -8(%rbp)
.LBB137_38:                             # %for.cond82
                                        #   Parent Loop BB137_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB137_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB137_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_38
.LBB137_41:                             # %for.end102
                                        #   in Loop: Header=BB137_36 Depth=1
	jmp	.LBB137_42
.LBB137_42:                             # %for.inc103
                                        #   in Loop: Header=BB137_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_36
.LBB137_43:                             # %for.end105
	jmp	.LBB137_44
.LBB137_44:                             # %if.end106
	cmpl	$1542883733, -60(%rbp)  # imm = 0x5BF68995
	jne	.LBB137_46
.LBB137_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_45
.Lfunc_end137:
	.size	buf2img.101, .Lfunc_end137-buf2img.101
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.102  # -- Begin function UnifiedOneForthPix.102
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.102,@function
UnifiedOneForthPix.102:                 # @UnifiedOneForthPix.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$693882237, -108(%rbp)  # imm = 0x295BCD7D
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB138_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB138_3
.LBB138_2:                              # %if.then
	jmp	.LBB138_266
.LBB138_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB138_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB138_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB138_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB138_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB138_11
.LBB138_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB138_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB138_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB138_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB138_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB138_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB138_14:                             # %for.cond49
                                        #   Parent Loop BB138_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB138_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB138_18
.LBB138_17:                             # %cond.false
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-48(%rbp), %eax
.LBB138_18:                             # %cond.end
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_24
.LBB138_20:                             # %cond.false63
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB138_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB138_23
.LBB138_22:                             # %cond.false71
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-48(%rbp), %eax
.LBB138_23:                             # %cond.end72
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_24:                             # %cond.end74
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB138_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB138_27
.LBB138_26:                             # %cond.false83
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edx
.LBB138_27:                             # %cond.end84
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB138_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB138_33
.LBB138_29:                             # %cond.false89
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB138_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB138_32
.LBB138_31:                             # %cond.false97
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edx
.LBB138_32:                             # %cond.end98
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_33:                             # %cond.end100
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB138_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_36
.LBB138_35:                             # %cond.false115
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB138_36:                             # %cond.end117
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB138_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB138_42
.LBB138_38:                             # %cond.false122
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB138_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_41
.LBB138_40:                             # %cond.false131
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB138_41:                             # %cond.end133
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_42:                             # %cond.end135
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB138_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_45
.LBB138_44:                             # %cond.false152
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB138_45:                             # %cond.end154
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB138_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB138_51
.LBB138_47:                             # %cond.false159
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB138_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_50
.LBB138_49:                             # %cond.false168
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB138_50:                             # %cond.end170
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_51:                             # %cond.end172
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB138_54
.LBB138_53:                             # %cond.false187
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB138_54:                             # %cond.end189
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB138_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB138_60
.LBB138_56:                             # %cond.false194
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB138_59
.LBB138_58:                             # %cond.false203
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB138_59:                             # %cond.end205
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_60:                             # %cond.end207
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB138_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_63
.LBB138_62:                             # %cond.false225
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB138_63:                             # %cond.end227
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB138_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB138_69
.LBB138_65:                             # %cond.false232
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB138_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB138_68
.LBB138_67:                             # %cond.false241
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB138_68:                             # %cond.end243
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_69:                             # %cond.end245
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB138_72
.LBB138_71:                             # %cond.false260
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB138_72:                             # %cond.end262
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB138_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB138_78
.LBB138_74:                             # %cond.false267
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB138_77
.LBB138_76:                             # %cond.false276
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB138_77:                             # %cond.end278
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_78:                             # %cond.end280
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB138_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB138_81
.LBB138_80:                             # %cond.false297
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB138_81:                             # %cond.end298
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB138_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB138_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB138_87
.LBB138_83:                             # %cond.false303
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB138_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB138_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB138_86
.LBB138_85:                             # %cond.false311
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB138_86:                             # %cond.end312
                                        #   in Loop: Header=BB138_14 Depth=2
.LBB138_87:                             # %cond.end314
                                        #   in Loop: Header=BB138_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB138_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_14
.LBB138_89:                             # %for.end
                                        #   in Loop: Header=BB138_12 Depth=1
	jmp	.LBB138_90
.LBB138_90:                             # %for.inc336
                                        #   in Loop: Header=BB138_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB138_12
.LBB138_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB138_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB138_92 Depth=1
	movl	$0, -48(%rbp)
.LBB138_94:                             # %for.cond346
                                        #   Parent Loop BB138_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB138_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB138_98
.LBB138_97:                             # %cond.false364
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB138_98:                             # %cond.end366
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB138_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB138_101
.LBB138_100:                            # %cond.false378
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB138_101:                            # %cond.end380
                                        #   in Loop: Header=BB138_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB138_104
.LBB138_103:                            # %cond.false390
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB138_104:                            # %cond.end392
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB138_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB138_107
.LBB138_106:                            # %cond.false405
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB138_107:                            # %cond.end407
                                        #   in Loop: Header=BB138_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB138_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB138_110
.LBB138_109:                            # %cond.false417
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB138_110:                            # %cond.end419
                                        #   in Loop: Header=BB138_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB138_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_113
.LBB138_112:                            # %cond.false442
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_113:                            # %cond.end449
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_119
.LBB138_115:                            # %cond.false454
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB138_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_118
.LBB138_117:                            # %cond.false466
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB138_118:                            # %cond.end473
                                        #   in Loop: Header=BB138_94 Depth=2
.LBB138_119:                            # %cond.end475
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB138_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_122
.LBB138_121:                            # %cond.false490
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB138_122:                            # %cond.end493
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB138_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB138_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_128
.LBB138_124:                            # %cond.false498
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB138_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB138_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_127
.LBB138_126:                            # %cond.false506
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB138_127:                            # %cond.end509
                                        #   in Loop: Header=BB138_94 Depth=2
.LBB138_128:                            # %cond.end511
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB138_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB138_94
.LBB138_130:                            # %for.end516
                                        #   in Loop: Header=BB138_92 Depth=1
	jmp	.LBB138_131
.LBB138_131:                            # %for.inc517
                                        #   in Loop: Header=BB138_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_92
.LBB138_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB138_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB138_133 Depth=1
	movl	$0, -44(%rbp)
.LBB138_135:                            # %for.cond533
                                        #   Parent Loop BB138_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_139
.LBB138_138:                            # %cond.false553
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB138_139:                            # %cond.end555
                                        #   in Loop: Header=BB138_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_145
.LBB138_141:                            # %cond.false567
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_144
.LBB138_143:                            # %cond.false579
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB138_144:                            # %cond.end581
                                        #   in Loop: Header=BB138_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_145:                            # %cond.end589
                                        #   in Loop: Header=BB138_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB138_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_157
.LBB138_147:                            # %cond.false594
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_150
.LBB138_149:                            # %cond.false607
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB138_150:                            # %cond.end609
                                        #   in Loop: Header=BB138_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_156
.LBB138_152:                            # %cond.false621
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_155
.LBB138_154:                            # %cond.false633
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB138_155:                            # %cond.end635
                                        #   in Loop: Header=BB138_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_156:                            # %cond.end643
                                        #   in Loop: Header=BB138_135 Depth=2
.LBB138_157:                            # %cond.end645
                                        #   in Loop: Header=BB138_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB138_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_135
.LBB138_159:                            # %for.end650
                                        #   in Loop: Header=BB138_133 Depth=1
	jmp	.LBB138_160
.LBB138_160:                            # %for.inc651
                                        #   in Loop: Header=BB138_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB138_133
.LBB138_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB138_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB138_162 Depth=1
	movl	$0, -48(%rbp)
.LBB138_164:                            # %for.cond659
                                        #   Parent Loop BB138_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB138_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_169
.LBB138_168:                            # %cond.false681
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_169:                            # %cond.end683
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_175
.LBB138_171:                            # %cond.false696
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_174
.LBB138_173:                            # %cond.false707
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_174:                            # %cond.end709
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_175:                            # %cond.end718
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_187
.LBB138_177:                            # %cond.false723
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_180
.LBB138_179:                            # %cond.false735
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_180:                            # %cond.end737
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_186
.LBB138_182:                            # %cond.false750
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_185
.LBB138_184:                            # %cond.false761
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_185:                            # %cond.end763
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_186:                            # %cond.end772
                                        #   in Loop: Header=BB138_164 Depth=2
.LBB138_187:                            # %cond.end774
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB138_261
.LBB138_188:                            # %if.else
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB138_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB138_192
.LBB138_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB138_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB138_226
.LBB138_192:                            # %if.then791
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_195
.LBB138_194:                            # %cond.false803
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_195:                            # %cond.end805
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_198
.LBB138_197:                            # %cond.false816
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_198:                            # %cond.end818
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_207
.LBB138_200:                            # %cond.false832
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_203
.LBB138_202:                            # %cond.false840
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_203:                            # %cond.end842
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_206
.LBB138_205:                            # %cond.false853
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_206:                            # %cond.end855
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_207:                            # %cond.end865
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_225
.LBB138_209:                            # %cond.false870
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_212
.LBB138_211:                            # %cond.false879
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_212:                            # %cond.end881
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_215
.LBB138_214:                            # %cond.false892
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_215:                            # %cond.end894
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_224
.LBB138_217:                            # %cond.false908
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_220
.LBB138_219:                            # %cond.false916
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_220:                            # %cond.end918
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_223
.LBB138_222:                            # %cond.false929
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_223:                            # %cond.end931
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_224:                            # %cond.end941
                                        #   in Loop: Header=BB138_164 Depth=2
.LBB138_225:                            # %cond.end943
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB138_260
.LBB138_226:                            # %if.else946
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_229
.LBB138_228:                            # %cond.false962
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_229:                            # %cond.end964
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_232
.LBB138_231:                            # %cond.false973
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_232:                            # %cond.end975
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_241
.LBB138_234:                            # %cond.false987
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_237
.LBB138_236:                            # %cond.false999
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_237:                            # %cond.end1001
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_240
.LBB138_239:                            # %cond.false1010
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_240:                            # %cond.end1012
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_241:                            # %cond.end1020
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB138_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB138_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB138_259
.LBB138_243:                            # %cond.false1025
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_246
.LBB138_245:                            # %cond.false1038
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_246:                            # %cond.end1040
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_249
.LBB138_248:                            # %cond.false1049
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_249:                            # %cond.end1051
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB138_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB138_258
.LBB138_251:                            # %cond.false1063
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB138_254
.LBB138_253:                            # %cond.false1075
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB138_254:                            # %cond.end1077
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB138_257
.LBB138_256:                            # %cond.false1086
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB138_257:                            # %cond.end1088
                                        #   in Loop: Header=BB138_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB138_258:                            # %cond.end1096
                                        #   in Loop: Header=BB138_164 Depth=2
.LBB138_259:                            # %cond.end1098
                                        #   in Loop: Header=BB138_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB138_260:                            # %if.end1101
                                        #   in Loop: Header=BB138_164 Depth=2
	jmp	.LBB138_261
.LBB138_261:                            # %if.end1102
                                        #   in Loop: Header=BB138_164 Depth=2
	jmp	.LBB138_262
.LBB138_262:                            # %for.inc1103
                                        #   in Loop: Header=BB138_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB138_164
.LBB138_263:                            # %for.end1105
                                        #   in Loop: Header=BB138_162 Depth=1
	jmp	.LBB138_264
.LBB138_264:                            # %for.inc1106
                                        #   in Loop: Header=BB138_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB138_162
.LBB138_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB138_266:                            # %return
	cmpl	$693882237, -108(%rbp)  # imm = 0x295BCD7D
	jne	.LBB138_268
.LBB138_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_267
.Lfunc_end138:
	.size	UnifiedOneForthPix.102, .Lfunc_end138-UnifiedOneForthPix.102
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.103      # -- Begin function code_a_picture.103
	.p2align	4, 0x90
	.type	code_a_picture.103,@function
code_a_picture.103:                     # @code_a_picture.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2076203238, -28(%rbp)  # imm = 0x7BC058E6
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB139_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB139_8
.LBB139_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB139_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB139_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB139_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB139_7
.LBB139_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB139_7:                              # %land.end
.LBB139_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB139_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB139_10:                             # %if.end
	jmp	.LBB139_11
.LBB139_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB139_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB139_11 Depth=1
	jmp	.LBB139_13
.LBB139_13:                             # %while.cond15
                                        #   Parent Loop BB139_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB139_14
	jmp	.LBB139_15
.LBB139_14:                             # %while.body19
                                        #   in Loop: Header=BB139_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB139_13
.LBB139_15:                             # %while.end
                                        #   in Loop: Header=BB139_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_11
.LBB139_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB139_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB139_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB139_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB139_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB139_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB139_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_19
.LBB139_22:                             # %for.end
	jmp	.LBB139_23
.LBB139_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB139_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB139_25:                             # %if.end34
	cmpl	$2076203238, -28(%rbp)  # imm = 0x7BC058E6
	jne	.LBB139_27
.LBB139_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_26
.Lfunc_end139:
	.size	code_a_picture.103, .Lfunc_end139-code_a_picture.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.104
	.type	frame_mode_buffer.104,@function
frame_mode_buffer.104:                  # @frame_mode_buffer.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1379426076, -16(%rbp)  # imm = 0x52385F1C
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB140_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB140_3
.LBB140_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB140_3:                              # %if.end
	cmpl	$1379426076, -16(%rbp)  # imm = 0x52385F1C
	jne	.LBB140_5
.LBB140_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_4
.Lfunc_end140:
	.size	frame_mode_buffer.104, .Lfunc_end140-frame_mode_buffer.104
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.105             # -- Begin function buf2img.105
	.p2align	4, 0x90
	.type	buf2img.105,@function
buf2img.105:                            # @buf2img.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1232424281, -60(%rbp)  # imm = 0x49754D59
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB141_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB141_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB141_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB141_6
	jmp	.LBB141_4
.LBB141_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB141_15
	jmp	.LBB141_5
.LBB141_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB141_24
	jmp	.LBB141_33
.LBB141_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB141_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB141_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB141_7 Depth=1
	movl	$0, -8(%rbp)
.LBB141_9:                              # %for.cond5
                                        #   Parent Loop BB141_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB141_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB141_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB141_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB141_9
.LBB141_12:                             # %for.end
                                        #   in Loop: Header=BB141_7 Depth=1
	jmp	.LBB141_13
.LBB141_13:                             # %for.inc14
                                        #   in Loop: Header=BB141_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB141_7
.LBB141_14:                             # %for.end16
	jmp	.LBB141_34
.LBB141_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB141_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB141_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB141_16 Depth=1
	movl	$0, -8(%rbp)
.LBB141_18:                             # %for.cond22
                                        #   Parent Loop BB141_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB141_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB141_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB141_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB141_18
.LBB141_21:                             # %for.end38
                                        #   in Loop: Header=BB141_16 Depth=1
	jmp	.LBB141_22
.LBB141_22:                             # %for.inc39
                                        #   in Loop: Header=BB141_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB141_16
.LBB141_23:                             # %for.end41
	jmp	.LBB141_34
.LBB141_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB141_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB141_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB141_25 Depth=1
	movl	$0, -8(%rbp)
.LBB141_27:                             # %for.cond47
                                        #   Parent Loop BB141_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB141_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB141_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB141_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB141_27
.LBB141_30:                             # %for.end74
                                        #   in Loop: Header=BB141_25 Depth=1
	jmp	.LBB141_31
.LBB141_31:                             # %for.inc75
                                        #   in Loop: Header=BB141_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB141_25
.LBB141_32:                             # %for.end77
	jmp	.LBB141_33
.LBB141_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB141_34:                             # %sw.epilog
	jmp	.LBB141_44
.LBB141_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB141_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB141_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB141_36 Depth=1
	movl	$0, -8(%rbp)
.LBB141_38:                             # %for.cond82
                                        #   Parent Loop BB141_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB141_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB141_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB141_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB141_38
.LBB141_41:                             # %for.end102
                                        #   in Loop: Header=BB141_36 Depth=1
	jmp	.LBB141_42
.LBB141_42:                             # %for.inc103
                                        #   in Loop: Header=BB141_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB141_36
.LBB141_43:                             # %for.end105
	jmp	.LBB141_44
.LBB141_44:                             # %if.end106
	cmpl	$1232424281, -60(%rbp)  # imm = 0x49754D59
	jne	.LBB141_46
.LBB141_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_45
.Lfunc_end141:
	.size	buf2img.105, .Lfunc_end141-buf2img.105
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.106
.LCPI142_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.106,@function
find_snr.106:                           # @find_snr.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$407198195, -52(%rbp)   # imm = 0x184559F3
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB142_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB142_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB142_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	$0, -4(%rbp)
.LBB142_4:                              # %for.cond8
                                        #   Parent Loop BB142_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB142_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB142_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB142_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_4
.LBB142_7:                              # %for.end
                                        #   in Loop: Header=BB142_2 Depth=1
	jmp	.LBB142_8
.LBB142_8:                              # %for.inc22
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_2
.LBB142_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB142_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB142_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB142_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB142_11 Depth=1
	movl	$0, -4(%rbp)
.LBB142_13:                             # %for.cond33
                                        #   Parent Loop BB142_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB142_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB142_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB142_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_13
.LBB142_16:                             # %for.end76
                                        #   in Loop: Header=BB142_11 Depth=1
	jmp	.LBB142_17
.LBB142_17:                             # %for.inc77
                                        #   in Loop: Header=BB142_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_11
.LBB142_18:                             # %for.end79
	jmp	.LBB142_19
.LBB142_19:                             # %if.end
	jmp	.LBB142_41
.LBB142_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB142_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB142_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB142_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB142_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB142_23 Depth=1
	movl	$0, -4(%rbp)
.LBB142_25:                             # %for.cond89
                                        #   Parent Loop BB142_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB142_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB142_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB142_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_25
.LBB142_28:                             # %for.end112
                                        #   in Loop: Header=BB142_23 Depth=1
	jmp	.LBB142_29
.LBB142_29:                             # %for.inc113
                                        #   in Loop: Header=BB142_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_23
.LBB142_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB142_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB142_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB142_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB142_32 Depth=1
	movl	$0, -4(%rbp)
.LBB142_34:                             # %for.cond125
                                        #   Parent Loop BB142_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB142_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB142_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB142_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_34
.LBB142_37:                             # %for.end169
                                        #   in Loop: Header=BB142_32 Depth=1
	jmp	.LBB142_38
.LBB142_38:                             # %for.inc170
                                        #   in Loop: Header=BB142_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_32
.LBB142_39:                             # %for.end172
	jmp	.LBB142_40
.LBB142_40:                             # %if.end173
	jmp	.LBB142_41
.LBB142_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB142_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB142_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB142_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB142_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB142_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB142_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB142_52
# %bb.48:                               # %if.then189
	movl	-48(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI142_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB142_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI142_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI142_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB142_51
.LBB142_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB142_51:                             # %if.end219
	jmp	.LBB142_52
.LBB142_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB142_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB142_55
.LBB142_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB142_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB142_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB142_61
.LBB142_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB142_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB142_60
.LBB142_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB142_60:                             # %if.end394
	jmp	.LBB142_61
.LBB142_61:                             # %if.end395
	cmpl	$407198195, -52(%rbp)   # imm = 0x184559F3
	jne	.LBB142_63
.LBB142_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_62
.Lfunc_end142:
	.size	find_snr.106, .Lfunc_end142-find_snr.106
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.107       # -- Begin function field_picture.107
	.p2align	4, 0x90
	.type	field_picture.107,@function
field_picture.107:                      # @field_picture.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1467057358, -16(%rbp)  # imm = 0x577184CE
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB143_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB143_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB143_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB143_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB143_6
.LBB143_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB143_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB143_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB143_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB143_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB143_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB143_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB143_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB143_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB143_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB143_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB143_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1467057358, -16(%rbp)  # imm = 0x577184CE
	jne	.LBB143_18
.LBB143_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_17
.Lfunc_end143:
	.size	field_picture.107, .Lfunc_end143-field_picture.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.108
	.type	writeout_picture.108,@function
writeout_picture.108:                   # @writeout_picture.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1871398471, -28(%rbp)  # imm = 0x6F8B4647
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB144_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB144_3:                              # %for.cond1
                                        #   Parent Loop BB144_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB144_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB144_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_3
.LBB144_6:                              # %for.end
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_7
.LBB144_7:                              # %for.inc10
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_1
.LBB144_8:                              # %for.end12
	cmpl	$1871398471, -28(%rbp)  # imm = 0x6F8B4647
	jne	.LBB144_10
.LBB144_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_9
.Lfunc_end144:
	.size	writeout_picture.108, .Lfunc_end144-writeout_picture.108
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.109
.LCPI145_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.109,@function
init_field.109:                         # @init_field.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1942337443, -16(%rbp)  # imm = 0x73C5B7A3
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB145_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB145_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB145_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB145_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB145_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB145_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB145_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB145_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB145_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB145_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB145_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB145_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB145_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB145_15
.LBB145_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB145_15:                             # %if.end38
	jmp	.LBB145_23
.LBB145_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB145_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB145_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB145_20
.LBB145_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB145_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB145_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB145_22:                             # %if.end56
	jmp	.LBB145_23
.LBB145_23:                             # %if.end57
	jmp	.LBB145_24
.LBB145_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB145_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB145_26:                             # %if.end66
	jmp	.LBB145_77
.LBB145_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB145_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB145_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB145_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB145_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB145_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_29
.LBB145_32:                             # %for.end
	jmp	.LBB145_38
.LBB145_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB145_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB145_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB145_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB145_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_34
.LBB145_37:                             # %for.end134
	jmp	.LBB145_38
.LBB145_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB145_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB145_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB145_41:                             # %if.end147
	vmovsd	.LCPI145_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB145_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI145_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB145_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB145_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI145_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB145_46
.LBB145_45:                             # %if.else174
	vmovsd	.LCPI145_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB145_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB145_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB145_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB145_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB145_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB145_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB145_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB145_54
.LBB145_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB145_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB145_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB145_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB145_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB145_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB145_63
.LBB145_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB145_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB145_62
.LBB145_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB145_62:                             # %cond.end
.LBB145_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB145_71
.LBB145_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB145_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB145_70
.LBB145_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB145_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB145_69
.LBB145_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB145_69:                             # %cond.end256
.LBB145_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB145_71:                             # %if.end261
	jmp	.LBB145_72
.LBB145_72:                             # %if.end262
	jmp	.LBB145_76
.LBB145_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB145_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB145_75:                             # %if.end273
	jmp	.LBB145_76
.LBB145_76:                             # %if.end274
	jmp	.LBB145_77
.LBB145_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1942337443, -16(%rbp)  # imm = 0x73C5B7A3
	jne	.LBB145_79
.LBB145_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_78
.Lfunc_end145:
	.size	init_field.109, .Lfunc_end145-init_field.109
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.110
	.type	rdPictureCoding.110,@function
rdPictureCoding.110:                    # @rdPictureCoding.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$288579176, -24(%rbp)   # imm = 0x11335E68
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB146_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB146_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB146_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB146_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB146_6
.LBB146_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB146_6:                              # %if.end
	jmp	.LBB146_8
.LBB146_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB146_8:                              # %if.end10
	jmp	.LBB146_10
.LBB146_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB146_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB146_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB146_13
.LBB146_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB146_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB146_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB146_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB146_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB146_18
.LBB146_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB146_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB146_20
.LBB146_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB146_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB146_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB146_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB146_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB146_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB146_26
.LBB146_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB146_26:                             # %if.end53
	jmp	.LBB146_34
.LBB146_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB146_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB146_33
.LBB146_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB146_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB146_32
.LBB146_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB146_32:                             # %if.end66
	jmp	.LBB146_33
.LBB146_33:                             # %if.end67
	jmp	.LBB146_34
.LBB146_34:                             # %if.end68
	jmp	.LBB146_36
.LBB146_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB146_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB146_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB146_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB146_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB146_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB146_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB146_46
.LBB146_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB146_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB146_45
.LBB146_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB146_45:                             # %if.end98
	jmp	.LBB146_46
.LBB146_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB146_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB146_51
.LBB146_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB146_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB146_50:                             # %if.end111
	jmp	.LBB146_51
.LBB146_51:                             # %if.end112
	cmpl	$288579176, -24(%rbp)   # imm = 0x11335E68
	jne	.LBB146_53
.LBB146_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_52
.Lfunc_end146:
	.size	rdPictureCoding.110, .Lfunc_end146-rdPictureCoding.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.111
	.type	writeout_picture.111,@function
writeout_picture.111:                   # @writeout_picture.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1007431398, -28(%rbp)  # imm = 0x3C0C2EE6
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB147_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB147_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB147_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB147_3:                              # %for.cond1
                                        #   Parent Loop BB147_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB147_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB147_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB147_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_3
.LBB147_6:                              # %for.end
                                        #   in Loop: Header=BB147_1 Depth=1
	jmp	.LBB147_7
.LBB147_7:                              # %for.inc10
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_1
.LBB147_8:                              # %for.end12
	cmpl	$1007431398, -28(%rbp)  # imm = 0x3C0C2EE6
	jne	.LBB147_10
.LBB147_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_9
.Lfunc_end147:
	.size	writeout_picture.111, .Lfunc_end147-writeout_picture.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.112
	.type	PaddAutoCropBorders.112,@function
PaddAutoCropBorders.112:                # @PaddAutoCropBorders.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1541749787, -36(%rbp)  # imm = 0x5BE53C1B
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB148_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB148_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB148_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB148_3:                              # %for.cond1
                                        #   Parent Loop BB148_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB148_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB148_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB148_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_3
.LBB148_6:                              # %for.end
                                        #   in Loop: Header=BB148_1 Depth=1
	jmp	.LBB148_7
.LBB148_7:                              # %for.inc10
                                        #   in Loop: Header=BB148_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_1
.LBB148_8:                              # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB148_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB148_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB148_9 Depth=1
	movl	$0, -4(%rbp)
.LBB148_11:                             # %for.cond16
                                        #   Parent Loop BB148_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB148_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB148_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB148_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_11
.LBB148_14:                             # %for.end30
                                        #   in Loop: Header=BB148_9 Depth=1
	jmp	.LBB148_15
.LBB148_15:                             # %for.inc31
                                        #   in Loop: Header=BB148_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_9
.LBB148_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB148_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB148_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB148_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB148_18 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB148_20:                             # %for.cond38
                                        #   Parent Loop BB148_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB148_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB148_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB148_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_20
.LBB148_23:                             # %for.end65
                                        #   in Loop: Header=BB148_18 Depth=1
	jmp	.LBB148_24
.LBB148_24:                             # %for.inc66
                                        #   in Loop: Header=BB148_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_18
.LBB148_25:                             # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB148_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB148_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB148_26 Depth=1
	movl	$0, -4(%rbp)
.LBB148_28:                             # %for.cond72
                                        #   Parent Loop BB148_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB148_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB148_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB148_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_28
.LBB148_31:                             # %for.end99
                                        #   in Loop: Header=BB148_26 Depth=1
	jmp	.LBB148_32
.LBB148_32:                             # %for.inc100
                                        #   in Loop: Header=BB148_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_26
.LBB148_33:                             # %for.end102
	jmp	.LBB148_34
.LBB148_34:                             # %if.end
	cmpl	$1541749787, -36(%rbp)  # imm = 0x5BE53C1B
	jne	.LBB148_36
.LBB148_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_35
.Lfunc_end148:
	.size	PaddAutoCropBorders.112, .Lfunc_end148-PaddAutoCropBorders.112
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.113
	.type	GenerateFullPelRepresentation.113,@function
GenerateFullPelRepresentation.113:      # @GenerateFullPelRepresentation.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$986996498, -44(%rbp)   # imm = 0x3AD45F12
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB149_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB149_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB149_1 Depth=1
	movl	$0, -32(%rbp)
.LBB149_3:                              # %for.cond1
                                        #   Parent Loop BB149_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB149_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB149_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB149_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB149_3
.LBB149_6:                              # %for.end
                                        #   in Loop: Header=BB149_1 Depth=1
	jmp	.LBB149_7
.LBB149_7:                              # %for.inc5
                                        #   in Loop: Header=BB149_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB149_1
.LBB149_8:                              # %for.end7
	cmpl	$986996498, -44(%rbp)   # imm = 0x3AD45F12
	jne	.LBB149_10
.LBB149_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_9
.Lfunc_end149:
	.size	GenerateFullPelRepresentation.113, .Lfunc_end149-GenerateFullPelRepresentation.113
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.114     # -- Begin function copy_rdopt_data.114
	.p2align	4, 0x90
	.type	copy_rdopt_data.114,@function
copy_rdopt_data.114:                    # @copy_rdopt_data.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$22243660, -48(%rbp)    # imm = 0x153694C
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB150_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB150_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB150_4
.LBB150_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB150_4
.LBB150_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB150_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_7 Depth 2
                                        #       Child Loop BB150_9 Depth 3
                                        #         Child Loop BB150_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	$0, -8(%rbp)
.LBB150_7:                              # %for.cond17
                                        #   Parent Loop BB150_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB150_9 Depth 3
                                        #         Child Loop BB150_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB150_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB150_7 Depth=2
	movl	$0, -12(%rbp)
.LBB150_9:                              # %for.cond21
                                        #   Parent Loop BB150_5 Depth=1
                                        #     Parent Loop BB150_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB150_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB150_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB150_9 Depth=3
	movl	$0, -16(%rbp)
.LBB150_11:                             # %for.cond25
                                        #   Parent Loop BB150_5 Depth=1
                                        #     Parent Loop BB150_7 Depth=2
                                        #       Parent Loop BB150_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB150_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB150_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB150_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB150_11
.LBB150_14:                             # %for.end
                                        #   in Loop: Header=BB150_9 Depth=3
	jmp	.LBB150_15
.LBB150_15:                             # %for.inc46
                                        #   in Loop: Header=BB150_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_9
.LBB150_16:                             # %for.end48
                                        #   in Loop: Header=BB150_7 Depth=2
	jmp	.LBB150_17
.LBB150_17:                             # %for.inc49
                                        #   in Loop: Header=BB150_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_7
.LBB150_18:                             # %for.end51
                                        #   in Loop: Header=BB150_5 Depth=1
	jmp	.LBB150_19
.LBB150_19:                             # %for.inc52
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_5
.LBB150_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB150_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_23 Depth 2
                                        #       Child Loop BB150_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB150_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB150_21 Depth=1
	movl	$0, -12(%rbp)
.LBB150_23:                             # %for.cond59
                                        #   Parent Loop BB150_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB150_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB150_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB150_23 Depth=2
	movl	$0, -16(%rbp)
.LBB150_25:                             # %for.cond63
                                        #   Parent Loop BB150_21 Depth=1
                                        #     Parent Loop BB150_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB150_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB150_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB150_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB150_25
.LBB150_28:                             # %for.end82
                                        #   in Loop: Header=BB150_23 Depth=2
	jmp	.LBB150_29
.LBB150_29:                             # %for.inc83
                                        #   in Loop: Header=BB150_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_23
.LBB150_30:                             # %for.end85
                                        #   in Loop: Header=BB150_21 Depth=1
	jmp	.LBB150_31
.LBB150_31:                             # %for.inc86
                                        #   in Loop: Header=BB150_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_21
.LBB150_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB150_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB150_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB150_33 Depth=1
	movl	$0, -4(%rbp)
.LBB150_35:                             # %for.cond93
                                        #   Parent Loop BB150_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB150_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB150_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB150_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB150_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB150_38:                             # %if.end
                                        #   in Loop: Header=BB150_35 Depth=2
	jmp	.LBB150_39
.LBB150_39:                             # %for.inc176
                                        #   in Loop: Header=BB150_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_35
.LBB150_40:                             # %for.end178
                                        #   in Loop: Header=BB150_33 Depth=1
	jmp	.LBB150_41
.LBB150_41:                             # %for.inc179
                                        #   in Loop: Header=BB150_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_33
.LBB150_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB150_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB150_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB150_43 Depth=1
	movl	$0, -4(%rbp)
.LBB150_45:                             # %for.cond186
                                        #   Parent Loop BB150_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB150_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB150_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB150_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_45
.LBB150_48:                             # %for.end203
                                        #   in Loop: Header=BB150_43 Depth=1
	jmp	.LBB150_49
.LBB150_49:                             # %for.inc204
                                        #   in Loop: Header=BB150_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_43
.LBB150_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB150_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB150_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB150_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB150_52 Depth=1
	movl	$0, -4(%rbp)
.LBB150_54:                             # %for.cond214
                                        #   Parent Loop BB150_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB150_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB150_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB150_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_54
.LBB150_57:                             # %for.end247
                                        #   in Loop: Header=BB150_52 Depth=1
	jmp	.LBB150_58
.LBB150_58:                             # %for.inc248
                                        #   in Loop: Header=BB150_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_52
.LBB150_59:                             # %for.end250
	jmp	.LBB150_60
.LBB150_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB150_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB150_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB150_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB150_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_61
.LBB150_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB150_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB150_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB150_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB150_68:                             # %for.cond283
                                        #   Parent Loop BB150_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB150_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB150_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_68
.LBB150_71:                             # %for.end306
                                        #   in Loop: Header=BB150_66 Depth=1
	jmp	.LBB150_72
.LBB150_72:                             # %for.inc307
                                        #   in Loop: Header=BB150_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_66
.LBB150_73:                             # %for.end309
	jmp	.LBB150_98
.LBB150_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB150_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB150_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB150_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB150_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB150_79:                             # %for.cond324
                                        #   Parent Loop BB150_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB150_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB150_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_79
.LBB150_82:                             # %for.end341
                                        #   in Loop: Header=BB150_77 Depth=1
	jmp	.LBB150_83
.LBB150_83:                             # %for.inc342
                                        #   in Loop: Header=BB150_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_77
.LBB150_84:                             # %for.end344
	jmp	.LBB150_97
.LBB150_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB150_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB150_96
.LBB150_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB150_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB150_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB150_90:                             # %for.cond359
                                        #   Parent Loop BB150_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB150_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB150_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_90
.LBB150_93:                             # %for.end384
                                        #   in Loop: Header=BB150_88 Depth=1
	jmp	.LBB150_94
.LBB150_94:                             # %for.inc385
                                        #   in Loop: Header=BB150_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_88
.LBB150_95:                             # %for.end387
	jmp	.LBB150_96
.LBB150_96:                             # %if.end388
	jmp	.LBB150_97
.LBB150_97:                             # %if.end389
	jmp	.LBB150_98
.LBB150_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB150_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB150_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB150_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB150_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB150_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB150_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB150_103 Depth=1
	movl	$0, -4(%rbp)
.LBB150_105:                            # %for.cond410
                                        #   Parent Loop BB150_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB150_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB150_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB150_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB150_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB150_109
.LBB150_108:                            # %if.else483
                                        #   in Loop: Header=BB150_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB150_109:                            # %if.end506
                                        #   in Loop: Header=BB150_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB150_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB150_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB150_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB150_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB150_113
.LBB150_112:                            # %if.else568
                                        #   in Loop: Header=BB150_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB150_113:                            # %if.end591
                                        #   in Loop: Header=BB150_105 Depth=2
	jmp	.LBB150_114
.LBB150_114:                            # %if.end592
                                        #   in Loop: Header=BB150_105 Depth=2
	jmp	.LBB150_115
.LBB150_115:                            # %for.inc593
                                        #   in Loop: Header=BB150_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_105
.LBB150_116:                            # %for.end595
                                        #   in Loop: Header=BB150_103 Depth=1
	jmp	.LBB150_117
.LBB150_117:                            # %for.inc596
                                        #   in Loop: Header=BB150_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_103
.LBB150_118:                            # %for.end598
	jmp	.LBB150_130
.LBB150_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB150_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB150_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB150_120 Depth=1
	movl	$0, -4(%rbp)
.LBB150_122:                            # %for.cond604
                                        #   Parent Loop BB150_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB150_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB150_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB150_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB150_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB150_125:                            # %if.end654
                                        #   in Loop: Header=BB150_122 Depth=2
	jmp	.LBB150_126
.LBB150_126:                            # %for.inc655
                                        #   in Loop: Header=BB150_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_122
.LBB150_127:                            # %for.end657
                                        #   in Loop: Header=BB150_120 Depth=1
	jmp	.LBB150_128
.LBB150_128:                            # %for.inc658
                                        #   in Loop: Header=BB150_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_120
.LBB150_129:                            # %for.end660
	jmp	.LBB150_130
.LBB150_130:                            # %if.end661
	jmp	.LBB150_131
.LBB150_131:                            # %if.end662
	cmpl	$22243660, -48(%rbp)    # imm = 0x153694C
	jne	.LBB150_133
.LBB150_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_132
.Lfunc_end150:
	.size	copy_rdopt_data.114, .Lfunc_end150-copy_rdopt_data.114
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.115             # -- Begin function buf2img.115
	.p2align	4, 0x90
	.type	buf2img.115,@function
buf2img.115:                            # @buf2img.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$827430638, -60(%rbp)   # imm = 0x315196EE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB151_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB151_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB151_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB151_6
	jmp	.LBB151_4
.LBB151_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB151_15
	jmp	.LBB151_5
.LBB151_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB151_24
	jmp	.LBB151_33
.LBB151_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB151_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB151_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB151_7 Depth=1
	movl	$0, -4(%rbp)
.LBB151_9:                              # %for.cond5
                                        #   Parent Loop BB151_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB151_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB151_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB151_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_9
.LBB151_12:                             # %for.end
                                        #   in Loop: Header=BB151_7 Depth=1
	jmp	.LBB151_13
.LBB151_13:                             # %for.inc14
                                        #   in Loop: Header=BB151_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB151_7
.LBB151_14:                             # %for.end16
	jmp	.LBB151_34
.LBB151_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB151_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB151_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB151_16 Depth=1
	movl	$0, -4(%rbp)
.LBB151_18:                             # %for.cond22
                                        #   Parent Loop BB151_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB151_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB151_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB151_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_18
.LBB151_21:                             # %for.end38
                                        #   in Loop: Header=BB151_16 Depth=1
	jmp	.LBB151_22
.LBB151_22:                             # %for.inc39
                                        #   in Loop: Header=BB151_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB151_16
.LBB151_23:                             # %for.end41
	jmp	.LBB151_34
.LBB151_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB151_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB151_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB151_25 Depth=1
	movl	$0, -4(%rbp)
.LBB151_27:                             # %for.cond47
                                        #   Parent Loop BB151_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB151_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB151_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB151_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_27
.LBB151_30:                             # %for.end74
                                        #   in Loop: Header=BB151_25 Depth=1
	jmp	.LBB151_31
.LBB151_31:                             # %for.inc75
                                        #   in Loop: Header=BB151_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB151_25
.LBB151_32:                             # %for.end77
	jmp	.LBB151_33
.LBB151_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB151_34:                             # %sw.epilog
	jmp	.LBB151_44
.LBB151_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB151_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB151_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB151_36 Depth=1
	movl	$0, -4(%rbp)
.LBB151_38:                             # %for.cond82
                                        #   Parent Loop BB151_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB151_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB151_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB151_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_38
.LBB151_41:                             # %for.end102
                                        #   in Loop: Header=BB151_36 Depth=1
	jmp	.LBB151_42
.LBB151_42:                             # %for.inc103
                                        #   in Loop: Header=BB151_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB151_36
.LBB151_43:                             # %for.end105
	jmp	.LBB151_44
.LBB151_44:                             # %if.end106
	cmpl	$827430638, -60(%rbp)   # imm = 0x315196EE
	jne	.LBB151_46
.LBB151_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_45
.Lfunc_end151:
	.size	buf2img.115, .Lfunc_end151-buf2img.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.116
	.type	ReadOneFrame.116,@function
ReadOneFrame.116:                       # @ReadOneFrame.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1916473813, -68(%rbp)  # imm = 0x723B11D5
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -40(%rbp)
	movl	%r9d, -28(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-36(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB152_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB152_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -32(%rbp)
	movl	-36(%rbp), %eax
	imull	-44(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB152_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB152_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB152_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB152_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB152_26
# %bb.11:                               # %if.then42
	cmpl	$0, -32(%rbp)
	je	.LBB152_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB152_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB152_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB152_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_24:                             # %if.end85
	jmp	.LBB152_25
.LBB152_25:                             # %if.end86
	jmp	.LBB152_27
.LBB152_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1916473813, -68(%rbp)  # imm = 0x723B11D5
	jne	.LBB152_29
.LBB152_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_28
.Lfunc_end152:
	.size	ReadOneFrame.116, .Lfunc_end152-ReadOneFrame.116
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.117  # -- Begin function UnifiedOneForthPix.117
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.117,@function
UnifiedOneForthPix.117:                 # @UnifiedOneForthPix.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$757272246, -108(%rbp)  # imm = 0x2D230EB6
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB153_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB153_3
.LBB153_2:                              # %if.then
	jmp	.LBB153_266
.LBB153_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB153_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB153_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB153_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB153_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB153_11
.LBB153_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB153_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB153_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB153_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB153_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB153_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB153_14:                             # %for.cond49
                                        #   Parent Loop BB153_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB153_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB153_18
.LBB153_17:                             # %cond.false
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-48(%rbp), %eax
.LBB153_18:                             # %cond.end
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_24
.LBB153_20:                             # %cond.false63
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB153_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB153_23
.LBB153_22:                             # %cond.false71
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-48(%rbp), %eax
.LBB153_23:                             # %cond.end72
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_24:                             # %cond.end74
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB153_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB153_27
.LBB153_26:                             # %cond.false83
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edx
.LBB153_27:                             # %cond.end84
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB153_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB153_33
.LBB153_29:                             # %cond.false89
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB153_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB153_32
.LBB153_31:                             # %cond.false97
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edx
.LBB153_32:                             # %cond.end98
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_33:                             # %cond.end100
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB153_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_36
.LBB153_35:                             # %cond.false115
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB153_36:                             # %cond.end117
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB153_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB153_42
.LBB153_38:                             # %cond.false122
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB153_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_41
.LBB153_40:                             # %cond.false131
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB153_41:                             # %cond.end133
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_42:                             # %cond.end135
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB153_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_45
.LBB153_44:                             # %cond.false152
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB153_45:                             # %cond.end154
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB153_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB153_51
.LBB153_47:                             # %cond.false159
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB153_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_50
.LBB153_49:                             # %cond.false168
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB153_50:                             # %cond.end170
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_51:                             # %cond.end172
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB153_54
.LBB153_53:                             # %cond.false187
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB153_54:                             # %cond.end189
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB153_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB153_60
.LBB153_56:                             # %cond.false194
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB153_59
.LBB153_58:                             # %cond.false203
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB153_59:                             # %cond.end205
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_60:                             # %cond.end207
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB153_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_63
.LBB153_62:                             # %cond.false225
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB153_63:                             # %cond.end227
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB153_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB153_69
.LBB153_65:                             # %cond.false232
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB153_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB153_68
.LBB153_67:                             # %cond.false241
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB153_68:                             # %cond.end243
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_69:                             # %cond.end245
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB153_72
.LBB153_71:                             # %cond.false260
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB153_72:                             # %cond.end262
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB153_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB153_78
.LBB153_74:                             # %cond.false267
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB153_77
.LBB153_76:                             # %cond.false276
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB153_77:                             # %cond.end278
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_78:                             # %cond.end280
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB153_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB153_81
.LBB153_80:                             # %cond.false297
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB153_81:                             # %cond.end298
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB153_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB153_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB153_87
.LBB153_83:                             # %cond.false303
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB153_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB153_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB153_86
.LBB153_85:                             # %cond.false311
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB153_86:                             # %cond.end312
                                        #   in Loop: Header=BB153_14 Depth=2
.LBB153_87:                             # %cond.end314
                                        #   in Loop: Header=BB153_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB153_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB153_14
.LBB153_89:                             # %for.end
                                        #   in Loop: Header=BB153_12 Depth=1
	jmp	.LBB153_90
.LBB153_90:                             # %for.inc336
                                        #   in Loop: Header=BB153_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB153_12
.LBB153_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB153_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB153_92 Depth=1
	movl	$0, -48(%rbp)
.LBB153_94:                             # %for.cond346
                                        #   Parent Loop BB153_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB153_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB153_98
.LBB153_97:                             # %cond.false364
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB153_98:                             # %cond.end366
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB153_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB153_101
.LBB153_100:                            # %cond.false378
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB153_101:                            # %cond.end380
                                        #   in Loop: Header=BB153_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB153_104
.LBB153_103:                            # %cond.false390
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB153_104:                            # %cond.end392
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB153_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB153_107
.LBB153_106:                            # %cond.false405
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB153_107:                            # %cond.end407
                                        #   in Loop: Header=BB153_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB153_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB153_110
.LBB153_109:                            # %cond.false417
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB153_110:                            # %cond.end419
                                        #   in Loop: Header=BB153_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB153_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_113
.LBB153_112:                            # %cond.false442
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB153_113:                            # %cond.end449
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_119
.LBB153_115:                            # %cond.false454
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB153_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_118
.LBB153_117:                            # %cond.false466
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB153_118:                            # %cond.end473
                                        #   in Loop: Header=BB153_94 Depth=2
.LBB153_119:                            # %cond.end475
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB153_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_122
.LBB153_121:                            # %cond.false490
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB153_122:                            # %cond.end493
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB153_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB153_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_128
.LBB153_124:                            # %cond.false498
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB153_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB153_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_127
.LBB153_126:                            # %cond.false506
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB153_127:                            # %cond.end509
                                        #   in Loop: Header=BB153_94 Depth=2
.LBB153_128:                            # %cond.end511
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB153_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB153_94
.LBB153_130:                            # %for.end516
                                        #   in Loop: Header=BB153_92 Depth=1
	jmp	.LBB153_131
.LBB153_131:                            # %for.inc517
                                        #   in Loop: Header=BB153_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB153_92
.LBB153_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB153_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB153_133 Depth=1
	movl	$0, -44(%rbp)
.LBB153_135:                            # %for.cond533
                                        #   Parent Loop BB153_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_139
.LBB153_138:                            # %cond.false553
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB153_139:                            # %cond.end555
                                        #   in Loop: Header=BB153_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_145
.LBB153_141:                            # %cond.false567
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_144
.LBB153_143:                            # %cond.false579
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB153_144:                            # %cond.end581
                                        #   in Loop: Header=BB153_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_145:                            # %cond.end589
                                        #   in Loop: Header=BB153_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB153_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_157
.LBB153_147:                            # %cond.false594
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_150
.LBB153_149:                            # %cond.false607
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB153_150:                            # %cond.end609
                                        #   in Loop: Header=BB153_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_156
.LBB153_152:                            # %cond.false621
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_155
.LBB153_154:                            # %cond.false633
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB153_155:                            # %cond.end635
                                        #   in Loop: Header=BB153_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_156:                            # %cond.end643
                                        #   in Loop: Header=BB153_135 Depth=2
.LBB153_157:                            # %cond.end645
                                        #   in Loop: Header=BB153_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB153_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB153_135
.LBB153_159:                            # %for.end650
                                        #   in Loop: Header=BB153_133 Depth=1
	jmp	.LBB153_160
.LBB153_160:                            # %for.inc651
                                        #   in Loop: Header=BB153_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB153_133
.LBB153_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB153_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB153_162 Depth=1
	movl	$0, -48(%rbp)
.LBB153_164:                            # %for.cond659
                                        #   Parent Loop BB153_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB153_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_169
.LBB153_168:                            # %cond.false681
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_169:                            # %cond.end683
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_175
.LBB153_171:                            # %cond.false696
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_174
.LBB153_173:                            # %cond.false707
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_174:                            # %cond.end709
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_175:                            # %cond.end718
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_187
.LBB153_177:                            # %cond.false723
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_180
.LBB153_179:                            # %cond.false735
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_180:                            # %cond.end737
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_186
.LBB153_182:                            # %cond.false750
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_185
.LBB153_184:                            # %cond.false761
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_185:                            # %cond.end763
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_186:                            # %cond.end772
                                        #   in Loop: Header=BB153_164 Depth=2
.LBB153_187:                            # %cond.end774
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB153_261
.LBB153_188:                            # %if.else
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB153_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB153_192
.LBB153_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB153_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB153_226
.LBB153_192:                            # %if.then791
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_195
.LBB153_194:                            # %cond.false803
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_195:                            # %cond.end805
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_198
.LBB153_197:                            # %cond.false816
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_198:                            # %cond.end818
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_207
.LBB153_200:                            # %cond.false832
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_203
.LBB153_202:                            # %cond.false840
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_203:                            # %cond.end842
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_206
.LBB153_205:                            # %cond.false853
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_206:                            # %cond.end855
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_207:                            # %cond.end865
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_225
.LBB153_209:                            # %cond.false870
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_212
.LBB153_211:                            # %cond.false879
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_212:                            # %cond.end881
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_215
.LBB153_214:                            # %cond.false892
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_215:                            # %cond.end894
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_224
.LBB153_217:                            # %cond.false908
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_220
.LBB153_219:                            # %cond.false916
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_220:                            # %cond.end918
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_223
.LBB153_222:                            # %cond.false929
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_223:                            # %cond.end931
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_224:                            # %cond.end941
                                        #   in Loop: Header=BB153_164 Depth=2
.LBB153_225:                            # %cond.end943
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB153_260
.LBB153_226:                            # %if.else946
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_229
.LBB153_228:                            # %cond.false962
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_229:                            # %cond.end964
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_232
.LBB153_231:                            # %cond.false973
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_232:                            # %cond.end975
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_241
.LBB153_234:                            # %cond.false987
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_237
.LBB153_236:                            # %cond.false999
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_237:                            # %cond.end1001
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_240
.LBB153_239:                            # %cond.false1010
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_240:                            # %cond.end1012
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_241:                            # %cond.end1020
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB153_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB153_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB153_259
.LBB153_243:                            # %cond.false1025
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_246
.LBB153_245:                            # %cond.false1038
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_246:                            # %cond.end1040
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_249
.LBB153_248:                            # %cond.false1049
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_249:                            # %cond.end1051
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB153_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB153_258
.LBB153_251:                            # %cond.false1063
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB153_254
.LBB153_253:                            # %cond.false1075
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB153_254:                            # %cond.end1077
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB153_257
.LBB153_256:                            # %cond.false1086
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB153_257:                            # %cond.end1088
                                        #   in Loop: Header=BB153_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB153_258:                            # %cond.end1096
                                        #   in Loop: Header=BB153_164 Depth=2
.LBB153_259:                            # %cond.end1098
                                        #   in Loop: Header=BB153_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB153_260:                            # %if.end1101
                                        #   in Loop: Header=BB153_164 Depth=2
	jmp	.LBB153_261
.LBB153_261:                            # %if.end1102
                                        #   in Loop: Header=BB153_164 Depth=2
	jmp	.LBB153_262
.LBB153_262:                            # %for.inc1103
                                        #   in Loop: Header=BB153_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB153_164
.LBB153_263:                            # %for.end1105
                                        #   in Loop: Header=BB153_162 Depth=1
	jmp	.LBB153_264
.LBB153_264:                            # %for.inc1106
                                        #   in Loop: Header=BB153_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB153_162
.LBB153_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB153_266:                            # %return
	cmpl	$757272246, -108(%rbp)  # imm = 0x2D230EB6
	jne	.LBB153_268
.LBB153_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_267
.Lfunc_end153:
	.size	UnifiedOneForthPix.117, .Lfunc_end153-UnifiedOneForthPix.117
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.118    # -- Begin function encode_one_frame.118
	.p2align	4, 0x90
	.type	encode_one_frame.118,@function
encode_one_frame.118:                   # @encode_one_frame.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$740082892, -28(%rbp)   # imm = 0x2C1CC4CC
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -64(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB154_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB154_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB154_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB154_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB154_9
.LBB154_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB154_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB154_8
.LBB154_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB154_8:                              # %if.end21
	jmp	.LBB154_9
.LBB154_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB154_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB154_38
.LBB154_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB154_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB154_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB154_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB154_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB154_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB154_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB154_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB154_20
.LBB154_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB154_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB154_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB154_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB154_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB154_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB154_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB154_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB154_29
.LBB154_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB154_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB154_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB154_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB154_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB154_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB154_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB154_35
.LBB154_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB154_35:                             # %if.end89
	jmp	.LBB154_37
.LBB154_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB154_37:                             # %if.end92
	jmp	.LBB154_38
.LBB154_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB154_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB154_41
.LBB154_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB154_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB154_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB154_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB154_45
# %bb.44:                               # %if.then109
	movl	-68(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB154_54
.LBB154_45:                             # %if.else112
	movl	-52(%rbp), %edi
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB154_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB154_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB154_53
.LBB154_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB154_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB154_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB154_52
.LBB154_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB154_52:                             # %if.end130
	jmp	.LBB154_53
.LBB154_53:                             # %if.end131
	jmp	.LBB154_54
.LBB154_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB154_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB154_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB154_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB154_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB154_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB154_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB154_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB154_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB154_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB154_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB154_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB154_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB154_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB154_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB154_70
.LBB154_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB154_70:                             # %if.end171
	jmp	.LBB154_81
.LBB154_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB154_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB154_80
.LBB154_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB154_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB154_79
.LBB154_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB154_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB154_78
.LBB154_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB154_78:                             # %if.end187
	jmp	.LBB154_79
.LBB154_79:                             # %if.end188
	jmp	.LBB154_80
.LBB154_80:                             # %if.end189
	jmp	.LBB154_81
.LBB154_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB154_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB154_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB154_85
.LBB154_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB154_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB154_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB154_88
.LBB154_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB154_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB154_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB154_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB154_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB154_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB154_110
.LBB154_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB154_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB154_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB154_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB154_98
.LBB154_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB154_98:                             # %if.end239
	jmp	.LBB154_99
.LBB154_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB154_104
	jmp	.LBB154_100
.LBB154_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB154_102
	jmp	.LBB154_101
.LBB154_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB154_103
	jmp	.LBB154_108
.LBB154_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB154_109
.LBB154_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB154_109
.LBB154_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB154_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB154_107
.LBB154_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB154_107:                            # %if.end261
	jmp	.LBB154_109
.LBB154_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB154_109:                            # %sw.epilog
	jmp	.LBB154_110
.LBB154_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB154_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB154_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB154_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB154_119
.LBB154_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB154_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB154_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB154_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB154_118:                            # %if.end292
	jmp	.LBB154_119
.LBB154_119:                            # %if.end293
	jmp	.LBB154_120
.LBB154_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB154_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB154_123
.LBB154_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB154_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$740082892, -28(%rbp)   # imm = 0x2C1CC4CC
	jne	.LBB154_125
.LBB154_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_124
.Lfunc_end154:
	.size	encode_one_frame.118, .Lfunc_end154-encode_one_frame.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.119
	.type	rdPictureCoding.119,@function
rdPictureCoding.119:                    # @rdPictureCoding.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2141791358, -24(%rbp)  # imm = 0x7FA9247E
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB155_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB155_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB155_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB155_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB155_6
.LBB155_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB155_6:                              # %if.end
	jmp	.LBB155_8
.LBB155_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB155_8:                              # %if.end10
	jmp	.LBB155_10
.LBB155_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB155_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB155_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB155_13
.LBB155_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB155_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB155_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB155_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB155_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB155_18
.LBB155_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB155_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB155_20
.LBB155_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB155_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB155_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB155_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB155_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB155_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB155_26
.LBB155_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB155_26:                             # %if.end53
	jmp	.LBB155_34
.LBB155_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB155_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB155_33
.LBB155_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB155_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB155_32
.LBB155_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB155_32:                             # %if.end66
	jmp	.LBB155_33
.LBB155_33:                             # %if.end67
	jmp	.LBB155_34
.LBB155_34:                             # %if.end68
	jmp	.LBB155_36
.LBB155_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB155_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB155_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB155_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB155_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB155_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB155_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB155_46
.LBB155_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB155_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB155_45
.LBB155_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB155_45:                             # %if.end98
	jmp	.LBB155_46
.LBB155_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB155_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB155_51
.LBB155_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB155_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB155_50:                             # %if.end111
	jmp	.LBB155_51
.LBB155_51:                             # %if.end112
	cmpl	$2141791358, -24(%rbp)  # imm = 0x7FA9247E
	jne	.LBB155_53
.LBB155_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_52
.Lfunc_end155:
	.size	rdPictureCoding.119, .Lfunc_end155-rdPictureCoding.119
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.120
	.type	frame_mode_buffer.120,@function
frame_mode_buffer.120:                  # @frame_mode_buffer.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1680594900, -16(%rbp)  # imm = 0x642BD7D4
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB156_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB156_3
.LBB156_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB156_3:                              # %if.end
	cmpl	$1680594900, -16(%rbp)  # imm = 0x642BD7D4
	jne	.LBB156_5
.LBB156_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_4
.Lfunc_end156:
	.size	frame_mode_buffer.120, .Lfunc_end156-frame_mode_buffer.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.121
	.type	ReportB.121,@function
ReportB.121:                            # @ReportB.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1100633100, -20(%rbp)  # imm = 0x419A540C
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1100633100, -20(%rbp)  # imm = 0x419A540C
	jne	.LBB157_2
.LBB157_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_1
.Lfunc_end157:
	.size	ReportB.121, .Lfunc_end157-ReportB.121
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.122
.LCPI158_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI158_1:
	.quad	4611686018427387904     # double 2
.LCPI158_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.122,@function
picture_structure_decision.122:         # @picture_structure_decision.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI158_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI158_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$15389215, -44(%rbp)    # imm = 0xEAD21F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI158_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -48(%rbp)
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-48(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$15389215, -44(%rbp)    # imm = 0xEAD21F
	jne	.LBB158_2
.LBB158_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_1
.Lfunc_end158:
	.size	picture_structure_decision.122, .Lfunc_end158-picture_structure_decision.122
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.123
.LCPI159_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.123,@function
find_snr.123:                           # @find_snr.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1782758861, -48(%rbp)  # imm = 0x6A42BDCD
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB159_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB159_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB159_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	$0, -4(%rbp)
.LBB159_4:                              # %for.cond8
                                        #   Parent Loop BB159_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB159_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB159_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB159_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_4
.LBB159_7:                              # %for.end
                                        #   in Loop: Header=BB159_2 Depth=1
	jmp	.LBB159_8
.LBB159_8:                              # %for.inc22
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB159_2
.LBB159_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB159_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB159_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB159_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB159_11 Depth=1
	movl	$0, -4(%rbp)
.LBB159_13:                             # %for.cond33
                                        #   Parent Loop BB159_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB159_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB159_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB159_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_13
.LBB159_16:                             # %for.end76
                                        #   in Loop: Header=BB159_11 Depth=1
	jmp	.LBB159_17
.LBB159_17:                             # %for.inc77
                                        #   in Loop: Header=BB159_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB159_11
.LBB159_18:                             # %for.end79
	jmp	.LBB159_19
.LBB159_19:                             # %if.end
	jmp	.LBB159_41
.LBB159_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB159_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB159_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB159_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB159_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB159_23 Depth=1
	movl	$0, -4(%rbp)
.LBB159_25:                             # %for.cond89
                                        #   Parent Loop BB159_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB159_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB159_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB159_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_25
.LBB159_28:                             # %for.end112
                                        #   in Loop: Header=BB159_23 Depth=1
	jmp	.LBB159_29
.LBB159_29:                             # %for.inc113
                                        #   in Loop: Header=BB159_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB159_23
.LBB159_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB159_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB159_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB159_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB159_32 Depth=1
	movl	$0, -4(%rbp)
.LBB159_34:                             # %for.cond125
                                        #   Parent Loop BB159_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB159_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB159_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB159_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_34
.LBB159_37:                             # %for.end169
                                        #   in Loop: Header=BB159_32 Depth=1
	jmp	.LBB159_38
.LBB159_38:                             # %for.inc170
                                        #   in Loop: Header=BB159_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB159_32
.LBB159_39:                             # %for.end172
	jmp	.LBB159_40
.LBB159_40:                             # %if.end173
	jmp	.LBB159_41
.LBB159_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB159_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB159_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB159_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB159_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB159_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB159_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB159_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI159_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB159_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI159_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI159_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB159_51
.LBB159_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB159_51:                             # %if.end219
	jmp	.LBB159_52
.LBB159_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB159_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB159_55
.LBB159_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB159_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB159_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB159_61
.LBB159_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB159_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB159_60
.LBB159_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB159_60:                             # %if.end394
	jmp	.LBB159_61
.LBB159_61:                             # %if.end395
	cmpl	$1782758861, -48(%rbp)  # imm = 0x6A42BDCD
	jne	.LBB159_63
.LBB159_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_62
.Lfunc_end159:
	.size	find_snr.123, .Lfunc_end159-find_snr.123
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.124       # -- Begin function MbAffPostProc.124
	.p2align	4, 0x90
	.type	MbAffPostProc.124,@function
MbAffPostProc.124:                      # @MbAffPostProc.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1501264243, -44(%rbp)  # imm = 0x597B7973
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB160_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB160_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_5 Depth 2
                                        #       Child Loop BB160_7 Depth 3
                                        #     Child Loop BB160_13 Depth 2
                                        #       Child Loop BB160_15 Depth 3
                                        #     Child Loop BB160_21 Depth 2
                                        #       Child Loop BB160_23 Depth 3
                                        #         Child Loop BB160_25 Depth 4
                                        #       Child Loop BB160_31 Depth 3
                                        #         Child Loop BB160_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB160_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB160_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB160_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB160_5:                              # %for.cond5
                                        #   Parent Loop BB160_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB160_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB160_5 Depth=2
	movl	$0, -8(%rbp)
.LBB160_7:                              # %for.cond8
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB160_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB160_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB160_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_7
.LBB160_10:                             # %for.end
                                        #   in Loop: Header=BB160_5 Depth=2
	jmp	.LBB160_11
.LBB160_11:                             # %for.inc20
                                        #   in Loop: Header=BB160_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_5
.LBB160_12:                             # %for.end22
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	$0, -4(%rbp)
.LBB160_13:                             # %for.cond23
                                        #   Parent Loop BB160_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB160_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB160_13 Depth=2
	movl	$0, -8(%rbp)
.LBB160_15:                             # %for.cond26
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB160_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB160_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB160_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_15
.LBB160_18:                             # %for.end54
                                        #   in Loop: Header=BB160_13 Depth=2
	jmp	.LBB160_19
.LBB160_19:                             # %for.inc55
                                        #   in Loop: Header=BB160_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_13
.LBB160_20:                             # %for.end57
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB160_21:                             # %for.cond61
                                        #   Parent Loop BB160_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_23 Depth 3
                                        #         Child Loop BB160_25 Depth 4
                                        #       Child Loop BB160_31 Depth 3
                                        #         Child Loop BB160_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB160_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB160_21 Depth=2
	movl	$0, -4(%rbp)
.LBB160_23:                             # %for.cond64
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB160_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB160_23 Depth=3
	movl	$0, -8(%rbp)
.LBB160_25:                             # %for.cond69
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_21 Depth=2
                                        #       Parent Loop BB160_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB160_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB160_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB160_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_25
.LBB160_28:                             # %for.end87
                                        #   in Loop: Header=BB160_23 Depth=3
	jmp	.LBB160_29
.LBB160_29:                             # %for.inc88
                                        #   in Loop: Header=BB160_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_23
.LBB160_30:                             # %for.end90
                                        #   in Loop: Header=BB160_21 Depth=2
	movl	$0, -4(%rbp)
.LBB160_31:                             # %for.cond91
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB160_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB160_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB160_31 Depth=3
	movl	$0, -8(%rbp)
.LBB160_33:                             # %for.cond95
                                        #   Parent Loop BB160_2 Depth=1
                                        #     Parent Loop BB160_21 Depth=2
                                        #       Parent Loop BB160_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB160_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB160_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB160_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_33
.LBB160_36:                             # %for.end130
                                        #   in Loop: Header=BB160_31 Depth=3
	jmp	.LBB160_37
.LBB160_37:                             # %for.inc131
                                        #   in Loop: Header=BB160_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_31
.LBB160_38:                             # %for.end133
                                        #   in Loop: Header=BB160_21 Depth=2
	jmp	.LBB160_39
.LBB160_39:                             # %for.inc134
                                        #   in Loop: Header=BB160_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_21
.LBB160_40:                             # %for.end136
                                        #   in Loop: Header=BB160_2 Depth=1
	jmp	.LBB160_41
.LBB160_41:                             # %if.end
                                        #   in Loop: Header=BB160_2 Depth=1
	jmp	.LBB160_42
.LBB160_42:                             # %for.inc137
                                        #   in Loop: Header=BB160_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_2
.LBB160_43:                             # %for.end139
	jmp	.LBB160_67
.LBB160_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB160_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_48 Depth 2
                                        #       Child Loop BB160_50 Depth 3
                                        #     Child Loop BB160_56 Depth 2
                                        #       Child Loop BB160_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB160_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB160_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB160_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB160_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB160_48:                             # %for.cond149
                                        #   Parent Loop BB160_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB160_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB160_48 Depth=2
	movl	$0, -8(%rbp)
.LBB160_50:                             # %for.cond152
                                        #   Parent Loop BB160_45 Depth=1
                                        #     Parent Loop BB160_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB160_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB160_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB160_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_50
.LBB160_53:                             # %for.end167
                                        #   in Loop: Header=BB160_48 Depth=2
	jmp	.LBB160_54
.LBB160_54:                             # %for.inc168
                                        #   in Loop: Header=BB160_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_48
.LBB160_55:                             # %for.end170
                                        #   in Loop: Header=BB160_45 Depth=1
	movl	$0, -4(%rbp)
.LBB160_56:                             # %for.cond171
                                        #   Parent Loop BB160_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB160_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB160_56 Depth=2
	movl	$0, -8(%rbp)
.LBB160_58:                             # %for.cond174
                                        #   Parent Loop BB160_45 Depth=1
                                        #     Parent Loop BB160_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB160_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB160_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB160_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB160_58
.LBB160_61:                             # %for.end203
                                        #   in Loop: Header=BB160_56 Depth=2
	jmp	.LBB160_62
.LBB160_62:                             # %for.inc204
                                        #   in Loop: Header=BB160_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_56
.LBB160_63:                             # %for.end206
                                        #   in Loop: Header=BB160_45 Depth=1
	jmp	.LBB160_64
.LBB160_64:                             # %if.end207
                                        #   in Loop: Header=BB160_45 Depth=1
	jmp	.LBB160_65
.LBB160_65:                             # %for.inc208
                                        #   in Loop: Header=BB160_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_45
.LBB160_66:                             # %for.end210
	jmp	.LBB160_67
.LBB160_67:                             # %if.end211
	cmpl	$1501264243, -44(%rbp)  # imm = 0x597B7973
	jne	.LBB160_69
.LBB160_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_68
.Lfunc_end160:
	.size	MbAffPostProc.124, .Lfunc_end160-MbAffPostProc.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.125
	.type	distortion_fld.125,@function
distortion_fld.125:                     # @distortion_fld.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$830434200, -4(%rbp)    # imm = 0x317F6B98
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$830434200, -4(%rbp)    # imm = 0x317F6B98
	jne	.LBB161_2
.LBB161_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_1
.Lfunc_end161:
	.size	distortion_fld.125, .Lfunc_end161-distortion_fld.125
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.126    # -- Begin function encode_one_frame.126
	.p2align	4, 0x90
	.type	encode_one_frame.126,@function
encode_one_frame.126:                   # @encode_one_frame.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$944446832, -48(%rbp)   # imm = 0x384B1D70
	movl	$0, -68(%rbp)
	movl	$0, -32(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -52(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB162_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB162_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB162_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB162_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB162_9
.LBB162_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB162_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB162_8
.LBB162_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB162_8:                              # %if.end21
	jmp	.LBB162_9
.LBB162_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB162_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB162_38
.LBB162_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB162_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB162_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB162_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB162_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB162_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB162_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB162_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB162_20
.LBB162_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB162_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB162_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB162_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB162_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB162_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB162_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB162_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB162_29
.LBB162_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB162_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB162_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB162_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB162_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB162_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -60(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB162_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB162_35
.LBB162_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB162_35:                             # %if.end89
	jmp	.LBB162_37
.LBB162_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB162_37:                             # %if.end92
	jmp	.LBB162_38
.LBB162_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB162_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB162_41
.LBB162_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB162_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB162_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB162_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB162_45
# %bb.44:                               # %if.then109
	movl	-32(%rbp), %edi
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB162_54
.LBB162_45:                             # %if.else112
	movl	-68(%rbp), %edi
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB162_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB162_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB162_53
.LBB162_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB162_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB162_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB162_52
.LBB162_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB162_52:                             # %if.end130
	jmp	.LBB162_53
.LBB162_53:                             # %if.end131
	jmp	.LBB162_54
.LBB162_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB162_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB162_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB162_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB162_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB162_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB162_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB162_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB162_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB162_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB162_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB162_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB162_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB162_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB162_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB162_70
.LBB162_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB162_70:                             # %if.end171
	jmp	.LBB162_81
.LBB162_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB162_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB162_80
.LBB162_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB162_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB162_79
.LBB162_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB162_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB162_78
.LBB162_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB162_78:                             # %if.end187
	jmp	.LBB162_79
.LBB162_79:                             # %if.end188
	jmp	.LBB162_80
.LBB162_80:                             # %if.end189
	jmp	.LBB162_81
.LBB162_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB162_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB162_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB162_85
.LBB162_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB162_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB162_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB162_88
.LBB162_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB162_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB162_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB162_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB162_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB162_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB162_110
.LBB162_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB162_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB162_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB162_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB162_98
.LBB162_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB162_98:                             # %if.end239
	jmp	.LBB162_99
.LBB162_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB162_104
	jmp	.LBB162_100
.LBB162_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB162_102
	jmp	.LBB162_101
.LBB162_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB162_103
	jmp	.LBB162_108
.LBB162_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB162_109
.LBB162_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB162_109
.LBB162_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB162_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB162_107
.LBB162_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB162_107:                            # %if.end261
	jmp	.LBB162_109
.LBB162_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB162_109:                            # %sw.epilog
	jmp	.LBB162_110
.LBB162_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB162_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB162_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB162_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB162_119
.LBB162_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB162_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB162_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB162_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB162_118:                            # %if.end292
	jmp	.LBB162_119
.LBB162_119:                            # %if.end293
	jmp	.LBB162_120
.LBB162_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB162_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB162_123
.LBB162_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB162_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$944446832, -48(%rbp)   # imm = 0x384B1D70
	jne	.LBB162_125
.LBB162_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_124
.Lfunc_end162:
	.size	encode_one_frame.126, .Lfunc_end162-encode_one_frame.126
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.127       # -- Begin function MbAffPostProc.127
	.p2align	4, 0x90
	.type	MbAffPostProc.127,@function
MbAffPostProc.127:                      # @MbAffPostProc.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$300247393, -44(%rbp)   # imm = 0x11E56961
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB163_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB163_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_5 Depth 2
                                        #       Child Loop BB163_7 Depth 3
                                        #     Child Loop BB163_13 Depth 2
                                        #       Child Loop BB163_15 Depth 3
                                        #     Child Loop BB163_21 Depth 2
                                        #       Child Loop BB163_23 Depth 3
                                        #         Child Loop BB163_25 Depth 4
                                        #       Child Loop BB163_31 Depth 3
                                        #         Child Loop BB163_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB163_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB163_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB163_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB163_5:                              # %for.cond5
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB163_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB163_5 Depth=2
	movl	$0, -4(%rbp)
.LBB163_7:                              # %for.cond8
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB163_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB163_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB163_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_7
.LBB163_10:                             # %for.end
                                        #   in Loop: Header=BB163_5 Depth=2
	jmp	.LBB163_11
.LBB163_11:                             # %for.inc20
                                        #   in Loop: Header=BB163_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_5
.LBB163_12:                             # %for.end22
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	$0, -8(%rbp)
.LBB163_13:                             # %for.cond23
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB163_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB163_13 Depth=2
	movl	$0, -4(%rbp)
.LBB163_15:                             # %for.cond26
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB163_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB163_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB163_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_15
.LBB163_18:                             # %for.end54
                                        #   in Loop: Header=BB163_13 Depth=2
	jmp	.LBB163_19
.LBB163_19:                             # %for.inc55
                                        #   in Loop: Header=BB163_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_13
.LBB163_20:                             # %for.end57
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB163_21:                             # %for.cond61
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_23 Depth 3
                                        #         Child Loop BB163_25 Depth 4
                                        #       Child Loop BB163_31 Depth 3
                                        #         Child Loop BB163_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB163_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB163_21 Depth=2
	movl	$0, -8(%rbp)
.LBB163_23:                             # %for.cond64
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB163_23 Depth=3
	movl	$0, -4(%rbp)
.LBB163_25:                             # %for.cond69
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_21 Depth=2
                                        #       Parent Loop BB163_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB163_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB163_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB163_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_25
.LBB163_28:                             # %for.end87
                                        #   in Loop: Header=BB163_23 Depth=3
	jmp	.LBB163_29
.LBB163_29:                             # %for.inc88
                                        #   in Loop: Header=BB163_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_23
.LBB163_30:                             # %for.end90
                                        #   in Loop: Header=BB163_21 Depth=2
	movl	$0, -8(%rbp)
.LBB163_31:                             # %for.cond91
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB163_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB163_31 Depth=3
	movl	$0, -4(%rbp)
.LBB163_33:                             # %for.cond95
                                        #   Parent Loop BB163_2 Depth=1
                                        #     Parent Loop BB163_21 Depth=2
                                        #       Parent Loop BB163_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB163_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB163_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB163_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_33
.LBB163_36:                             # %for.end130
                                        #   in Loop: Header=BB163_31 Depth=3
	jmp	.LBB163_37
.LBB163_37:                             # %for.inc131
                                        #   in Loop: Header=BB163_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_31
.LBB163_38:                             # %for.end133
                                        #   in Loop: Header=BB163_21 Depth=2
	jmp	.LBB163_39
.LBB163_39:                             # %for.inc134
                                        #   in Loop: Header=BB163_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB163_21
.LBB163_40:                             # %for.end136
                                        #   in Loop: Header=BB163_2 Depth=1
	jmp	.LBB163_41
.LBB163_41:                             # %if.end
                                        #   in Loop: Header=BB163_2 Depth=1
	jmp	.LBB163_42
.LBB163_42:                             # %for.inc137
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB163_2
.LBB163_43:                             # %for.end139
	jmp	.LBB163_67
.LBB163_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB163_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_48 Depth 2
                                        #       Child Loop BB163_50 Depth 3
                                        #     Child Loop BB163_56 Depth 2
                                        #       Child Loop BB163_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB163_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB163_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB163_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB163_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB163_48:                             # %for.cond149
                                        #   Parent Loop BB163_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB163_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB163_48 Depth=2
	movl	$0, -4(%rbp)
.LBB163_50:                             # %for.cond152
                                        #   Parent Loop BB163_45 Depth=1
                                        #     Parent Loop BB163_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB163_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB163_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB163_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_50
.LBB163_53:                             # %for.end167
                                        #   in Loop: Header=BB163_48 Depth=2
	jmp	.LBB163_54
.LBB163_54:                             # %for.inc168
                                        #   in Loop: Header=BB163_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_48
.LBB163_55:                             # %for.end170
                                        #   in Loop: Header=BB163_45 Depth=1
	movl	$0, -8(%rbp)
.LBB163_56:                             # %for.cond171
                                        #   Parent Loop BB163_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB163_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB163_56 Depth=2
	movl	$0, -4(%rbp)
.LBB163_58:                             # %for.cond174
                                        #   Parent Loop BB163_45 Depth=1
                                        #     Parent Loop BB163_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB163_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB163_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB163_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_58
.LBB163_61:                             # %for.end203
                                        #   in Loop: Header=BB163_56 Depth=2
	jmp	.LBB163_62
.LBB163_62:                             # %for.inc204
                                        #   in Loop: Header=BB163_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_56
.LBB163_63:                             # %for.end206
                                        #   in Loop: Header=BB163_45 Depth=1
	jmp	.LBB163_64
.LBB163_64:                             # %if.end207
                                        #   in Loop: Header=BB163_45 Depth=1
	jmp	.LBB163_65
.LBB163_65:                             # %for.inc208
                                        #   in Loop: Header=BB163_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB163_45
.LBB163_66:                             # %for.end210
	jmp	.LBB163_67
.LBB163_67:                             # %if.end211
	cmpl	$300247393, -44(%rbp)   # imm = 0x11E56961
	jne	.LBB163_69
.LBB163_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_68
.Lfunc_end163:
	.size	MbAffPostProc.127, .Lfunc_end163-MbAffPostProc.127
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.128
.LCPI164_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.128,@function
init_field.128:                         # @init_field.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1872483300, -16(%rbp)  # imm = 0x6F9BD3E4
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB164_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB164_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB164_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB164_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB164_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB164_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB164_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB164_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB164_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB164_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB164_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB164_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB164_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB164_15
.LBB164_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB164_15:                             # %if.end38
	jmp	.LBB164_23
.LBB164_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB164_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB164_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB164_20
.LBB164_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB164_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB164_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB164_22:                             # %if.end56
	jmp	.LBB164_23
.LBB164_23:                             # %if.end57
	jmp	.LBB164_24
.LBB164_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB164_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB164_26:                             # %if.end66
	jmp	.LBB164_77
.LBB164_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB164_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB164_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB164_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB164_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB164_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_29
.LBB164_32:                             # %for.end
	jmp	.LBB164_38
.LBB164_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB164_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB164_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB164_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB164_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_34
.LBB164_37:                             # %for.end134
	jmp	.LBB164_38
.LBB164_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB164_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB164_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB164_41:                             # %if.end147
	vmovsd	.LCPI164_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB164_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI164_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB164_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB164_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI164_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB164_46
.LBB164_45:                             # %if.else174
	vmovsd	.LCPI164_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB164_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB164_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB164_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB164_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB164_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB164_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB164_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB164_54
.LBB164_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB164_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB164_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB164_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB164_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB164_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB164_63
.LBB164_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB164_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB164_62
.LBB164_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB164_62:                             # %cond.end
.LBB164_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB164_71
.LBB164_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB164_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB164_70
.LBB164_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB164_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB164_69
.LBB164_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB164_69:                             # %cond.end256
.LBB164_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB164_71:                             # %if.end261
	jmp	.LBB164_72
.LBB164_72:                             # %if.end262
	jmp	.LBB164_76
.LBB164_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB164_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB164_75:                             # %if.end273
	jmp	.LBB164_76
.LBB164_76:                             # %if.end274
	jmp	.LBB164_77
.LBB164_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1872483300, -16(%rbp)  # imm = 0x6F9BD3E4
	jne	.LBB164_79
.LBB164_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_78
.Lfunc_end164:
	.size	init_field.128, .Lfunc_end164-init_field.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.129
	.type	ReportB.129,@function
ReportB.129:                            # @ReportB.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$488091681, -16(%rbp)   # imm = 0x1D17B021
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-20(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$488091681, -16(%rbp)   # imm = 0x1D17B021
	jne	.LBB165_2
.LBB165_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_1
.Lfunc_end165:
	.size	ReportB.129, .Lfunc_end165-ReportB.129
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.130    # -- Begin function encode_one_frame.130
	.p2align	4, 0x90
	.type	encode_one_frame.130,@function
encode_one_frame.130:                   # @encode_one_frame.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1674819732, -32(%rbp)  # imm = 0x63D3B894
	movl	$0, -28(%rbp)
	movl	$0, -52(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -44(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB166_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB166_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB166_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB166_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB166_9
.LBB166_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB166_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB166_8
.LBB166_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB166_8:                              # %if.end21
	jmp	.LBB166_9
.LBB166_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB166_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB166_38
.LBB166_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB166_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB166_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB166_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB166_20
.LBB166_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB166_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB166_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB166_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB166_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB166_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB166_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB166_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB166_29
.LBB166_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB166_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB166_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB166_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB166_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB166_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB166_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB166_35
.LBB166_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB166_35:                             # %if.end89
	jmp	.LBB166_37
.LBB166_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB166_37:                             # %if.end92
	jmp	.LBB166_38
.LBB166_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB166_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB166_41
.LBB166_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB166_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB166_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB166_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB166_45
# %bb.44:                               # %if.then109
	movl	-52(%rbp), %edi
	vmovss	-56(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB166_54
.LBB166_45:                             # %if.else112
	movl	-28(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB166_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB166_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB166_53
.LBB166_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB166_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB166_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB166_52
.LBB166_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB166_52:                             # %if.end130
	jmp	.LBB166_53
.LBB166_53:                             # %if.end131
	jmp	.LBB166_54
.LBB166_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB166_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB166_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB166_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB166_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB166_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB166_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB166_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB166_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB166_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB166_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB166_66:                             # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB166_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB166_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB166_70
.LBB166_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB166_70:                             # %if.end171
	jmp	.LBB166_81
.LBB166_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB166_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB166_80
.LBB166_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB166_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB166_79
.LBB166_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB166_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB166_78
.LBB166_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB166_78:                             # %if.end187
	jmp	.LBB166_79
.LBB166_79:                             # %if.end188
	jmp	.LBB166_80
.LBB166_80:                             # %if.end189
	jmp	.LBB166_81
.LBB166_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB166_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB166_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB166_85
.LBB166_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB166_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB166_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB166_88
.LBB166_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB166_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB166_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB166_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB166_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB166_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB166_110
.LBB166_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB166_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB166_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_98
.LBB166_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB166_98:                             # %if.end239
	jmp	.LBB166_99
.LBB166_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB166_104
	jmp	.LBB166_100
.LBB166_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB166_102
	jmp	.LBB166_101
.LBB166_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB166_103
	jmp	.LBB166_108
.LBB166_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB166_109
.LBB166_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB166_109
.LBB166_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB166_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB166_107
.LBB166_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB166_107:                            # %if.end261
	jmp	.LBB166_109
.LBB166_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB166_109:                            # %sw.epilog
	jmp	.LBB166_110
.LBB166_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB166_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB166_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB166_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB166_119
.LBB166_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB166_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB166_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB166_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB166_118:                            # %if.end292
	jmp	.LBB166_119
.LBB166_119:                            # %if.end293
	jmp	.LBB166_120
.LBB166_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB166_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB166_123
.LBB166_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB166_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1674819732, -32(%rbp)  # imm = 0x63D3B894
	jne	.LBB166_125
.LBB166_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_124
.Lfunc_end166:
	.size	encode_one_frame.130, .Lfunc_end166-encode_one_frame.130
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.131       # -- Begin function MbAffPostProc.131
	.p2align	4, 0x90
	.type	MbAffPostProc.131,@function
MbAffPostProc.131:                      # @MbAffPostProc.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$67393916, -44(%rbp)    # imm = 0x404597C
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB167_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB167_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_5 Depth 2
                                        #       Child Loop BB167_7 Depth 3
                                        #     Child Loop BB167_13 Depth 2
                                        #       Child Loop BB167_15 Depth 3
                                        #     Child Loop BB167_21 Depth 2
                                        #       Child Loop BB167_23 Depth 3
                                        #         Child Loop BB167_25 Depth 4
                                        #       Child Loop BB167_31 Depth 3
                                        #         Child Loop BB167_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB167_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB167_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB167_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB167_5:                              # %for.cond5
                                        #   Parent Loop BB167_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB167_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB167_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB167_5 Depth=2
	movl	$0, -4(%rbp)
.LBB167_7:                              # %for.cond8
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB167_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB167_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB167_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_7
.LBB167_10:                             # %for.end
                                        #   in Loop: Header=BB167_5 Depth=2
	jmp	.LBB167_11
.LBB167_11:                             # %for.inc20
                                        #   in Loop: Header=BB167_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_5
.LBB167_12:                             # %for.end22
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	$0, -8(%rbp)
.LBB167_13:                             # %for.cond23
                                        #   Parent Loop BB167_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB167_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB167_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB167_13 Depth=2
	movl	$0, -4(%rbp)
.LBB167_15:                             # %for.cond26
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB167_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB167_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB167_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_15
.LBB167_18:                             # %for.end54
                                        #   in Loop: Header=BB167_13 Depth=2
	jmp	.LBB167_19
.LBB167_19:                             # %for.inc55
                                        #   in Loop: Header=BB167_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_13
.LBB167_20:                             # %for.end57
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB167_21:                             # %for.cond61
                                        #   Parent Loop BB167_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB167_23 Depth 3
                                        #         Child Loop BB167_25 Depth 4
                                        #       Child Loop BB167_31 Depth 3
                                        #         Child Loop BB167_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB167_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB167_21 Depth=2
	movl	$0, -8(%rbp)
.LBB167_23:                             # %for.cond64
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB167_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB167_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB167_23 Depth=3
	movl	$0, -4(%rbp)
.LBB167_25:                             # %for.cond69
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_21 Depth=2
                                        #       Parent Loop BB167_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB167_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB167_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB167_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_25
.LBB167_28:                             # %for.end87
                                        #   in Loop: Header=BB167_23 Depth=3
	jmp	.LBB167_29
.LBB167_29:                             # %for.inc88
                                        #   in Loop: Header=BB167_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_23
.LBB167_30:                             # %for.end90
                                        #   in Loop: Header=BB167_21 Depth=2
	movl	$0, -8(%rbp)
.LBB167_31:                             # %for.cond91
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB167_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB167_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB167_31 Depth=3
	movl	$0, -4(%rbp)
.LBB167_33:                             # %for.cond95
                                        #   Parent Loop BB167_2 Depth=1
                                        #     Parent Loop BB167_21 Depth=2
                                        #       Parent Loop BB167_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB167_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB167_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB167_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_33
.LBB167_36:                             # %for.end130
                                        #   in Loop: Header=BB167_31 Depth=3
	jmp	.LBB167_37
.LBB167_37:                             # %for.inc131
                                        #   in Loop: Header=BB167_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_31
.LBB167_38:                             # %for.end133
                                        #   in Loop: Header=BB167_21 Depth=2
	jmp	.LBB167_39
.LBB167_39:                             # %for.inc134
                                        #   in Loop: Header=BB167_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB167_21
.LBB167_40:                             # %for.end136
                                        #   in Loop: Header=BB167_2 Depth=1
	jmp	.LBB167_41
.LBB167_41:                             # %if.end
                                        #   in Loop: Header=BB167_2 Depth=1
	jmp	.LBB167_42
.LBB167_42:                             # %for.inc137
                                        #   in Loop: Header=BB167_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB167_2
.LBB167_43:                             # %for.end139
	jmp	.LBB167_67
.LBB167_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB167_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_48 Depth 2
                                        #       Child Loop BB167_50 Depth 3
                                        #     Child Loop BB167_56 Depth 2
                                        #       Child Loop BB167_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB167_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB167_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB167_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB167_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB167_48:                             # %for.cond149
                                        #   Parent Loop BB167_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB167_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB167_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB167_48 Depth=2
	movl	$0, -4(%rbp)
.LBB167_50:                             # %for.cond152
                                        #   Parent Loop BB167_45 Depth=1
                                        #     Parent Loop BB167_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB167_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB167_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB167_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_50
.LBB167_53:                             # %for.end167
                                        #   in Loop: Header=BB167_48 Depth=2
	jmp	.LBB167_54
.LBB167_54:                             # %for.inc168
                                        #   in Loop: Header=BB167_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_48
.LBB167_55:                             # %for.end170
                                        #   in Loop: Header=BB167_45 Depth=1
	movl	$0, -8(%rbp)
.LBB167_56:                             # %for.cond171
                                        #   Parent Loop BB167_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB167_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB167_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB167_56 Depth=2
	movl	$0, -4(%rbp)
.LBB167_58:                             # %for.cond174
                                        #   Parent Loop BB167_45 Depth=1
                                        #     Parent Loop BB167_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB167_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB167_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB167_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_58
.LBB167_61:                             # %for.end203
                                        #   in Loop: Header=BB167_56 Depth=2
	jmp	.LBB167_62
.LBB167_62:                             # %for.inc204
                                        #   in Loop: Header=BB167_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_56
.LBB167_63:                             # %for.end206
                                        #   in Loop: Header=BB167_45 Depth=1
	jmp	.LBB167_64
.LBB167_64:                             # %if.end207
                                        #   in Loop: Header=BB167_45 Depth=1
	jmp	.LBB167_65
.LBB167_65:                             # %for.inc208
                                        #   in Loop: Header=BB167_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB167_45
.LBB167_66:                             # %for.end210
	jmp	.LBB167_67
.LBB167_67:                             # %if.end211
	cmpl	$67393916, -44(%rbp)    # imm = 0x404597C
	jne	.LBB167_69
.LBB167_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_68
.Lfunc_end167:
	.size	MbAffPostProc.131, .Lfunc_end167-MbAffPostProc.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.132
	.type	rdPictureCoding.132,@function
rdPictureCoding.132:                    # @rdPictureCoding.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$484047245, -24(%rbp)   # imm = 0x1CD9F98D
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB168_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB168_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB168_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB168_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB168_6
.LBB168_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB168_6:                              # %if.end
	jmp	.LBB168_8
.LBB168_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB168_8:                              # %if.end10
	jmp	.LBB168_10
.LBB168_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB168_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB168_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB168_13
.LBB168_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB168_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB168_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB168_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB168_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB168_18
.LBB168_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB168_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB168_20
.LBB168_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB168_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB168_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB168_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB168_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB168_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB168_26
.LBB168_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB168_26:                             # %if.end53
	jmp	.LBB168_34
.LBB168_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB168_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB168_33
.LBB168_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB168_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB168_32
.LBB168_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB168_32:                             # %if.end66
	jmp	.LBB168_33
.LBB168_33:                             # %if.end67
	jmp	.LBB168_34
.LBB168_34:                             # %if.end68
	jmp	.LBB168_36
.LBB168_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB168_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB168_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB168_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB168_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB168_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB168_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB168_46
.LBB168_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB168_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB168_45
.LBB168_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB168_45:                             # %if.end98
	jmp	.LBB168_46
.LBB168_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB168_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB168_51
.LBB168_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB168_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB168_50:                             # %if.end111
	jmp	.LBB168_51
.LBB168_51:                             # %if.end112
	cmpl	$484047245, -24(%rbp)   # imm = 0x1CD9F98D
	jne	.LBB168_53
.LBB168_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_52
.Lfunc_end168:
	.size	rdPictureCoding.132, .Lfunc_end168-rdPictureCoding.132
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.133
	.type	find_distortion.133,@function
find_distortion.133:                    # @find_distortion.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2052745884, -44(%rbp)  # imm = 0x7A5A6A9C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB169_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB169_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB169_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB169_2 Depth=1
	movl	$0, -16(%rbp)
.LBB169_4:                              # %for.cond3
                                        #   Parent Loop BB169_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB169_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB169_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB169_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_4
.LBB169_7:                              # %for.end
                                        #   in Loop: Header=BB169_2 Depth=1
	jmp	.LBB169_8
.LBB169_8:                              # %for.inc17
                                        #   in Loop: Header=BB169_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_2
.LBB169_9:                              # %for.end19
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB169_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB169_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB169_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB169_11 Depth=1
	movl	$0, -16(%rbp)
.LBB169_13:                             # %for.cond27
                                        #   Parent Loop BB169_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB169_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB169_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB169_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_13
.LBB169_16:                             # %for.end71
                                        #   in Loop: Header=BB169_11 Depth=1
	jmp	.LBB169_17
.LBB169_17:                             # %for.inc72
                                        #   in Loop: Header=BB169_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_11
.LBB169_18:                             # %for.end74
	jmp	.LBB169_19
.LBB169_19:                             # %if.end
	jmp	.LBB169_39
.LBB169_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB169_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB169_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB169_21 Depth=1
	movl	$0, -16(%rbp)
.LBB169_23:                             # %for.cond80
                                        #   Parent Loop BB169_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB169_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB169_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB169_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_23
.LBB169_26:                             # %for.end104
                                        #   in Loop: Header=BB169_21 Depth=1
	jmp	.LBB169_27
.LBB169_27:                             # %for.inc105
                                        #   in Loop: Header=BB169_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_21
.LBB169_28:                             # %for.end107
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB169_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB169_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB169_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB169_30 Depth=1
	movl	$0, -16(%rbp)
.LBB169_32:                             # %for.cond117
                                        #   Parent Loop BB169_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB169_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB169_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB169_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_32
.LBB169_35:                             # %for.end163
                                        #   in Loop: Header=BB169_30 Depth=1
	jmp	.LBB169_36
.LBB169_36:                             # %for.inc164
                                        #   in Loop: Header=BB169_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_30
.LBB169_37:                             # %for.end166
	jmp	.LBB169_38
.LBB169_38:                             # %if.end167
	jmp	.LBB169_39
.LBB169_39:                             # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$2052745884, -44(%rbp)  # imm = 0x7A5A6A9C
	jne	.LBB169_41
.LBB169_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_40
.Lfunc_end169:
	.size	find_distortion.133, .Lfunc_end169-find_distortion.133
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.134       # -- Begin function MbAffPostProc.134
	.p2align	4, 0x90
	.type	MbAffPostProc.134,@function
MbAffPostProc.134:                      # @MbAffPostProc.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$693216216, -44(%rbp)   # imm = 0x2951A3D8
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB170_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB170_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_5 Depth 2
                                        #       Child Loop BB170_7 Depth 3
                                        #     Child Loop BB170_13 Depth 2
                                        #       Child Loop BB170_15 Depth 3
                                        #     Child Loop BB170_21 Depth 2
                                        #       Child Loop BB170_23 Depth 3
                                        #         Child Loop BB170_25 Depth 4
                                        #       Child Loop BB170_31 Depth 3
                                        #         Child Loop BB170_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB170_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB170_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB170_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB170_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB170_5:                              # %for.cond5
                                        #   Parent Loop BB170_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB170_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB170_5 Depth=2
	movl	$0, -4(%rbp)
.LBB170_7:                              # %for.cond8
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB170_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB170_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB170_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_7
.LBB170_10:                             # %for.end
                                        #   in Loop: Header=BB170_5 Depth=2
	jmp	.LBB170_11
.LBB170_11:                             # %for.inc20
                                        #   in Loop: Header=BB170_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_5
.LBB170_12:                             # %for.end22
                                        #   in Loop: Header=BB170_2 Depth=1
	movl	$0, -8(%rbp)
.LBB170_13:                             # %for.cond23
                                        #   Parent Loop BB170_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB170_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB170_13 Depth=2
	movl	$0, -4(%rbp)
.LBB170_15:                             # %for.cond26
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB170_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB170_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB170_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_15
.LBB170_18:                             # %for.end54
                                        #   in Loop: Header=BB170_13 Depth=2
	jmp	.LBB170_19
.LBB170_19:                             # %for.inc55
                                        #   in Loop: Header=BB170_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_13
.LBB170_20:                             # %for.end57
                                        #   in Loop: Header=BB170_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB170_21:                             # %for.cond61
                                        #   Parent Loop BB170_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_23 Depth 3
                                        #         Child Loop BB170_25 Depth 4
                                        #       Child Loop BB170_31 Depth 3
                                        #         Child Loop BB170_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB170_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB170_21 Depth=2
	movl	$0, -8(%rbp)
.LBB170_23:                             # %for.cond64
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB170_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB170_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB170_23 Depth=3
	movl	$0, -4(%rbp)
.LBB170_25:                             # %for.cond69
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_21 Depth=2
                                        #       Parent Loop BB170_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB170_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB170_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB170_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_25
.LBB170_28:                             # %for.end87
                                        #   in Loop: Header=BB170_23 Depth=3
	jmp	.LBB170_29
.LBB170_29:                             # %for.inc88
                                        #   in Loop: Header=BB170_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_23
.LBB170_30:                             # %for.end90
                                        #   in Loop: Header=BB170_21 Depth=2
	movl	$0, -8(%rbp)
.LBB170_31:                             # %for.cond91
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB170_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB170_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB170_31 Depth=3
	movl	$0, -4(%rbp)
.LBB170_33:                             # %for.cond95
                                        #   Parent Loop BB170_2 Depth=1
                                        #     Parent Loop BB170_21 Depth=2
                                        #       Parent Loop BB170_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB170_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB170_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB170_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_33
.LBB170_36:                             # %for.end130
                                        #   in Loop: Header=BB170_31 Depth=3
	jmp	.LBB170_37
.LBB170_37:                             # %for.inc131
                                        #   in Loop: Header=BB170_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_31
.LBB170_38:                             # %for.end133
                                        #   in Loop: Header=BB170_21 Depth=2
	jmp	.LBB170_39
.LBB170_39:                             # %for.inc134
                                        #   in Loop: Header=BB170_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB170_21
.LBB170_40:                             # %for.end136
                                        #   in Loop: Header=BB170_2 Depth=1
	jmp	.LBB170_41
.LBB170_41:                             # %if.end
                                        #   in Loop: Header=BB170_2 Depth=1
	jmp	.LBB170_42
.LBB170_42:                             # %for.inc137
                                        #   in Loop: Header=BB170_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB170_2
.LBB170_43:                             # %for.end139
	jmp	.LBB170_67
.LBB170_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB170_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_48 Depth 2
                                        #       Child Loop BB170_50 Depth 3
                                        #     Child Loop BB170_56 Depth 2
                                        #       Child Loop BB170_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB170_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB170_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB170_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB170_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB170_48:                             # %for.cond149
                                        #   Parent Loop BB170_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB170_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB170_48 Depth=2
	movl	$0, -4(%rbp)
.LBB170_50:                             # %for.cond152
                                        #   Parent Loop BB170_45 Depth=1
                                        #     Parent Loop BB170_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB170_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB170_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB170_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_50
.LBB170_53:                             # %for.end167
                                        #   in Loop: Header=BB170_48 Depth=2
	jmp	.LBB170_54
.LBB170_54:                             # %for.inc168
                                        #   in Loop: Header=BB170_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_48
.LBB170_55:                             # %for.end170
                                        #   in Loop: Header=BB170_45 Depth=1
	movl	$0, -8(%rbp)
.LBB170_56:                             # %for.cond171
                                        #   Parent Loop BB170_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB170_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB170_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB170_56 Depth=2
	movl	$0, -4(%rbp)
.LBB170_58:                             # %for.cond174
                                        #   Parent Loop BB170_45 Depth=1
                                        #     Parent Loop BB170_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB170_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB170_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB170_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_58
.LBB170_61:                             # %for.end203
                                        #   in Loop: Header=BB170_56 Depth=2
	jmp	.LBB170_62
.LBB170_62:                             # %for.inc204
                                        #   in Loop: Header=BB170_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_56
.LBB170_63:                             # %for.end206
                                        #   in Loop: Header=BB170_45 Depth=1
	jmp	.LBB170_64
.LBB170_64:                             # %if.end207
                                        #   in Loop: Header=BB170_45 Depth=1
	jmp	.LBB170_65
.LBB170_65:                             # %for.inc208
                                        #   in Loop: Header=BB170_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB170_45
.LBB170_66:                             # %for.end210
	jmp	.LBB170_67
.LBB170_67:                             # %if.end211
	cmpl	$693216216, -44(%rbp)   # imm = 0x2951A3D8
	jne	.LBB170_69
.LBB170_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_68
.Lfunc_end170:
	.size	MbAffPostProc.134, .Lfunc_end170-MbAffPostProc.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.135
	.type	writeout_picture.135,@function
writeout_picture.135:                   # @writeout_picture.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1202756293, -28(%rbp)  # imm = 0x47B09AC5
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB171_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB171_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB171_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB171_3:                              # %for.cond1
                                        #   Parent Loop BB171_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB171_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB171_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB171_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_3
.LBB171_6:                              # %for.end
                                        #   in Loop: Header=BB171_1 Depth=1
	jmp	.LBB171_7
.LBB171_7:                              # %for.inc10
                                        #   in Loop: Header=BB171_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB171_1
.LBB171_8:                              # %for.end12
	cmpl	$1202756293, -28(%rbp)  # imm = 0x47B09AC5
	jne	.LBB171_10
.LBB171_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_9
.Lfunc_end171:
	.size	writeout_picture.135, .Lfunc_end171-writeout_picture.135
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.136
.LCPI172_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.136,@function
find_snr.136:                           # @find_snr.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$590079265, -52(%rbp)   # imm = 0x232BE521
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB172_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB172_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB172_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB172_2 Depth=1
	movl	$0, -8(%rbp)
.LBB172_4:                              # %for.cond8
                                        #   Parent Loop BB172_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB172_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB172_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB172_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_4
.LBB172_7:                              # %for.end
                                        #   in Loop: Header=BB172_2 Depth=1
	jmp	.LBB172_8
.LBB172_8:                              # %for.inc22
                                        #   in Loop: Header=BB172_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_2
.LBB172_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB172_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB172_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB172_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB172_11 Depth=1
	movl	$0, -8(%rbp)
.LBB172_13:                             # %for.cond33
                                        #   Parent Loop BB172_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB172_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB172_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB172_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_13
.LBB172_16:                             # %for.end76
                                        #   in Loop: Header=BB172_11 Depth=1
	jmp	.LBB172_17
.LBB172_17:                             # %for.inc77
                                        #   in Loop: Header=BB172_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_11
.LBB172_18:                             # %for.end79
	jmp	.LBB172_19
.LBB172_19:                             # %if.end
	jmp	.LBB172_41
.LBB172_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB172_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB172_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB172_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB172_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB172_23 Depth=1
	movl	$0, -8(%rbp)
.LBB172_25:                             # %for.cond89
                                        #   Parent Loop BB172_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB172_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB172_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB172_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_25
.LBB172_28:                             # %for.end112
                                        #   in Loop: Header=BB172_23 Depth=1
	jmp	.LBB172_29
.LBB172_29:                             # %for.inc113
                                        #   in Loop: Header=BB172_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_23
.LBB172_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB172_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB172_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB172_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB172_32 Depth=1
	movl	$0, -8(%rbp)
.LBB172_34:                             # %for.cond125
                                        #   Parent Loop BB172_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB172_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB172_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB172_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_34
.LBB172_37:                             # %for.end169
                                        #   in Loop: Header=BB172_32 Depth=1
	jmp	.LBB172_38
.LBB172_38:                             # %for.inc170
                                        #   in Loop: Header=BB172_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_32
.LBB172_39:                             # %for.end172
	jmp	.LBB172_40
.LBB172_40:                             # %if.end173
	jmp	.LBB172_41
.LBB172_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB172_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB172_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB172_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB172_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB172_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB172_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB172_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI172_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB172_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI172_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI172_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB172_51
.LBB172_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB172_51:                             # %if.end219
	jmp	.LBB172_52
.LBB172_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB172_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB172_55
.LBB172_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB172_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB172_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB172_61
.LBB172_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB172_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB172_60
.LBB172_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB172_60:                             # %if.end394
	jmp	.LBB172_61
.LBB172_61:                             # %if.end395
	cmpl	$590079265, -52(%rbp)   # imm = 0x232BE521
	jne	.LBB172_63
.LBB172_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_62
.Lfunc_end172:
	.size	find_snr.136, .Lfunc_end172-find_snr.136
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.137
.LCPI173_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI173_1:
	.quad	4611686018427387904     # double 2
.LCPI173_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.137,@function
picture_structure_decision.137:         # @picture_structure_decision.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI173_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI173_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$609087331, -32(%rbp)   # imm = 0x244DEF63
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI173_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -40(%rbp)
	vmovss	-48(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$609087331, -32(%rbp)   # imm = 0x244DEF63
	jne	.LBB173_2
.LBB173_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_1
.Lfunc_end173:
	.size	picture_structure_decision.137, .Lfunc_end173-picture_structure_decision.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.138
	.type	find_distortion.138,@function
find_distortion.138:                    # @find_distortion.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1548551883, -44(%rbp)  # imm = 0x5C4D06CB
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB174_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB174_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB174_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB174_2 Depth=1
	movl	$0, -16(%rbp)
.LBB174_4:                              # %for.cond3
                                        #   Parent Loop BB174_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB174_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB174_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB174_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_4
.LBB174_7:                              # %for.end
                                        #   in Loop: Header=BB174_2 Depth=1
	jmp	.LBB174_8
.LBB174_8:                              # %for.inc17
                                        #   in Loop: Header=BB174_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_2
.LBB174_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB174_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB174_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB174_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB174_11 Depth=1
	movl	$0, -16(%rbp)
.LBB174_13:                             # %for.cond27
                                        #   Parent Loop BB174_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB174_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB174_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB174_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_13
.LBB174_16:                             # %for.end71
                                        #   in Loop: Header=BB174_11 Depth=1
	jmp	.LBB174_17
.LBB174_17:                             # %for.inc72
                                        #   in Loop: Header=BB174_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_11
.LBB174_18:                             # %for.end74
	jmp	.LBB174_19
.LBB174_19:                             # %if.end
	jmp	.LBB174_39
.LBB174_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB174_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB174_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -16(%rbp)
.LBB174_23:                             # %for.cond80
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB174_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB174_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB174_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_23
.LBB174_26:                             # %for.end104
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_27
.LBB174_27:                             # %for.inc105
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_21
.LBB174_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB174_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB174_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB174_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB174_30 Depth=1
	movl	$0, -16(%rbp)
.LBB174_32:                             # %for.cond117
                                        #   Parent Loop BB174_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB174_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB174_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB174_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_32
.LBB174_35:                             # %for.end163
                                        #   in Loop: Header=BB174_30 Depth=1
	jmp	.LBB174_36
.LBB174_36:                             # %for.inc164
                                        #   in Loop: Header=BB174_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_30
.LBB174_37:                             # %for.end166
	jmp	.LBB174_38
.LBB174_38:                             # %if.end167
	jmp	.LBB174_39
.LBB174_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1548551883, -44(%rbp)  # imm = 0x5C4D06CB
	jne	.LBB174_41
.LBB174_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_40
.Lfunc_end174:
	.size	find_distortion.138, .Lfunc_end174-find_distortion.138
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.139       # -- Begin function MbAffPostProc.139
	.p2align	4, 0x90
	.type	MbAffPostProc.139,@function
MbAffPostProc.139:                      # @MbAffPostProc.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1024074733, -44(%rbp)  # imm = 0x3D0A23ED
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB175_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB175_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_5 Depth 2
                                        #       Child Loop BB175_7 Depth 3
                                        #     Child Loop BB175_13 Depth 2
                                        #       Child Loop BB175_15 Depth 3
                                        #     Child Loop BB175_21 Depth 2
                                        #       Child Loop BB175_23 Depth 3
                                        #         Child Loop BB175_25 Depth 4
                                        #       Child Loop BB175_31 Depth 3
                                        #         Child Loop BB175_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB175_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB175_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB175_5:                              # %for.cond5
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB175_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB175_5 Depth=2
	movl	$0, -4(%rbp)
.LBB175_7:                              # %for.cond8
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB175_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB175_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB175_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_7
.LBB175_10:                             # %for.end
                                        #   in Loop: Header=BB175_5 Depth=2
	jmp	.LBB175_11
.LBB175_11:                             # %for.inc20
                                        #   in Loop: Header=BB175_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_5
.LBB175_12:                             # %for.end22
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	$0, -8(%rbp)
.LBB175_13:                             # %for.cond23
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB175_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB175_13 Depth=2
	movl	$0, -4(%rbp)
.LBB175_15:                             # %for.cond26
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB175_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB175_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB175_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_15
.LBB175_18:                             # %for.end54
                                        #   in Loop: Header=BB175_13 Depth=2
	jmp	.LBB175_19
.LBB175_19:                             # %for.inc55
                                        #   in Loop: Header=BB175_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_13
.LBB175_20:                             # %for.end57
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB175_21:                             # %for.cond61
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_23 Depth 3
                                        #         Child Loop BB175_25 Depth 4
                                        #       Child Loop BB175_31 Depth 3
                                        #         Child Loop BB175_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB175_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB175_21 Depth=2
	movl	$0, -8(%rbp)
.LBB175_23:                             # %for.cond64
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB175_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB175_23 Depth=3
	movl	$0, -4(%rbp)
.LBB175_25:                             # %for.cond69
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_21 Depth=2
                                        #       Parent Loop BB175_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB175_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB175_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB175_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_25
.LBB175_28:                             # %for.end87
                                        #   in Loop: Header=BB175_23 Depth=3
	jmp	.LBB175_29
.LBB175_29:                             # %for.inc88
                                        #   in Loop: Header=BB175_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_23
.LBB175_30:                             # %for.end90
                                        #   in Loop: Header=BB175_21 Depth=2
	movl	$0, -8(%rbp)
.LBB175_31:                             # %for.cond91
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB175_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB175_31 Depth=3
	movl	$0, -4(%rbp)
.LBB175_33:                             # %for.cond95
                                        #   Parent Loop BB175_2 Depth=1
                                        #     Parent Loop BB175_21 Depth=2
                                        #       Parent Loop BB175_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB175_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB175_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB175_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_33
.LBB175_36:                             # %for.end130
                                        #   in Loop: Header=BB175_31 Depth=3
	jmp	.LBB175_37
.LBB175_37:                             # %for.inc131
                                        #   in Loop: Header=BB175_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_31
.LBB175_38:                             # %for.end133
                                        #   in Loop: Header=BB175_21 Depth=2
	jmp	.LBB175_39
.LBB175_39:                             # %for.inc134
                                        #   in Loop: Header=BB175_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB175_21
.LBB175_40:                             # %for.end136
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_41
.LBB175_41:                             # %if.end
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_42
.LBB175_42:                             # %for.inc137
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_2
.LBB175_43:                             # %for.end139
	jmp	.LBB175_67
.LBB175_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB175_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_48 Depth 2
                                        #       Child Loop BB175_50 Depth 3
                                        #     Child Loop BB175_56 Depth 2
                                        #       Child Loop BB175_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB175_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB175_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB175_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB175_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB175_48:                             # %for.cond149
                                        #   Parent Loop BB175_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB175_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB175_48 Depth=2
	movl	$0, -4(%rbp)
.LBB175_50:                             # %for.cond152
                                        #   Parent Loop BB175_45 Depth=1
                                        #     Parent Loop BB175_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB175_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB175_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB175_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_50
.LBB175_53:                             # %for.end167
                                        #   in Loop: Header=BB175_48 Depth=2
	jmp	.LBB175_54
.LBB175_54:                             # %for.inc168
                                        #   in Loop: Header=BB175_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_48
.LBB175_55:                             # %for.end170
                                        #   in Loop: Header=BB175_45 Depth=1
	movl	$0, -8(%rbp)
.LBB175_56:                             # %for.cond171
                                        #   Parent Loop BB175_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB175_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB175_56 Depth=2
	movl	$0, -4(%rbp)
.LBB175_58:                             # %for.cond174
                                        #   Parent Loop BB175_45 Depth=1
                                        #     Parent Loop BB175_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB175_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB175_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB175_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_58
.LBB175_61:                             # %for.end203
                                        #   in Loop: Header=BB175_56 Depth=2
	jmp	.LBB175_62
.LBB175_62:                             # %for.inc204
                                        #   in Loop: Header=BB175_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_56
.LBB175_63:                             # %for.end206
                                        #   in Loop: Header=BB175_45 Depth=1
	jmp	.LBB175_64
.LBB175_64:                             # %if.end207
                                        #   in Loop: Header=BB175_45 Depth=1
	jmp	.LBB175_65
.LBB175_65:                             # %for.inc208
                                        #   in Loop: Header=BB175_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_45
.LBB175_66:                             # %for.end210
	jmp	.LBB175_67
.LBB175_67:                             # %if.end211
	cmpl	$1024074733, -44(%rbp)  # imm = 0x3D0A23ED
	jne	.LBB175_69
.LBB175_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_68
.Lfunc_end175:
	.size	MbAffPostProc.139, .Lfunc_end175-MbAffPostProc.139
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.140     # -- Begin function copy_rdopt_data.140
	.p2align	4, 0x90
	.type	copy_rdopt_data.140,@function
copy_rdopt_data.140:                    # @copy_rdopt_data.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1412912824, -48(%rbp)  # imm = 0x543756B8
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB176_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB176_4
.LBB176_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB176_4
.LBB176_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB176_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_7 Depth 2
                                        #       Child Loop BB176_9 Depth 3
                                        #         Child Loop BB176_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB176_5 Depth=1
	movl	$0, -8(%rbp)
.LBB176_7:                              # %for.cond17
                                        #   Parent Loop BB176_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB176_9 Depth 3
                                        #         Child Loop BB176_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB176_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB176_7 Depth=2
	movl	$0, -12(%rbp)
.LBB176_9:                              # %for.cond21
                                        #   Parent Loop BB176_5 Depth=1
                                        #     Parent Loop BB176_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB176_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB176_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB176_9 Depth=3
	movl	$0, -16(%rbp)
.LBB176_11:                             # %for.cond25
                                        #   Parent Loop BB176_5 Depth=1
                                        #     Parent Loop BB176_7 Depth=2
                                        #       Parent Loop BB176_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB176_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB176_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB176_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB176_11
.LBB176_14:                             # %for.end
                                        #   in Loop: Header=BB176_9 Depth=3
	jmp	.LBB176_15
.LBB176_15:                             # %for.inc46
                                        #   in Loop: Header=BB176_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_9
.LBB176_16:                             # %for.end48
                                        #   in Loop: Header=BB176_7 Depth=2
	jmp	.LBB176_17
.LBB176_17:                             # %for.inc49
                                        #   in Loop: Header=BB176_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_7
.LBB176_18:                             # %for.end51
                                        #   in Loop: Header=BB176_5 Depth=1
	jmp	.LBB176_19
.LBB176_19:                             # %for.inc52
                                        #   in Loop: Header=BB176_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_5
.LBB176_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB176_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_23 Depth 2
                                        #       Child Loop BB176_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB176_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB176_21 Depth=1
	movl	$0, -12(%rbp)
.LBB176_23:                             # %for.cond59
                                        #   Parent Loop BB176_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB176_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB176_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB176_23 Depth=2
	movl	$0, -16(%rbp)
.LBB176_25:                             # %for.cond63
                                        #   Parent Loop BB176_21 Depth=1
                                        #     Parent Loop BB176_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB176_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB176_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB176_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB176_25
.LBB176_28:                             # %for.end82
                                        #   in Loop: Header=BB176_23 Depth=2
	jmp	.LBB176_29
.LBB176_29:                             # %for.inc83
                                        #   in Loop: Header=BB176_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_23
.LBB176_30:                             # %for.end85
                                        #   in Loop: Header=BB176_21 Depth=1
	jmp	.LBB176_31
.LBB176_31:                             # %for.inc86
                                        #   in Loop: Header=BB176_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_21
.LBB176_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB176_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB176_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB176_33 Depth=1
	movl	$0, -4(%rbp)
.LBB176_35:                             # %for.cond93
                                        #   Parent Loop BB176_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB176_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB176_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB176_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB176_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB176_38:                             # %if.end
                                        #   in Loop: Header=BB176_35 Depth=2
	jmp	.LBB176_39
.LBB176_39:                             # %for.inc176
                                        #   in Loop: Header=BB176_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_35
.LBB176_40:                             # %for.end178
                                        #   in Loop: Header=BB176_33 Depth=1
	jmp	.LBB176_41
.LBB176_41:                             # %for.inc179
                                        #   in Loop: Header=BB176_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_33
.LBB176_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB176_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB176_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB176_43 Depth=1
	movl	$0, -4(%rbp)
.LBB176_45:                             # %for.cond186
                                        #   Parent Loop BB176_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB176_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB176_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB176_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_45
.LBB176_48:                             # %for.end203
                                        #   in Loop: Header=BB176_43 Depth=1
	jmp	.LBB176_49
.LBB176_49:                             # %for.inc204
                                        #   in Loop: Header=BB176_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_43
.LBB176_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB176_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB176_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB176_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB176_52 Depth=1
	movl	$0, -4(%rbp)
.LBB176_54:                             # %for.cond214
                                        #   Parent Loop BB176_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB176_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB176_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB176_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_54
.LBB176_57:                             # %for.end247
                                        #   in Loop: Header=BB176_52 Depth=1
	jmp	.LBB176_58
.LBB176_58:                             # %for.inc248
                                        #   in Loop: Header=BB176_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_52
.LBB176_59:                             # %for.end250
	jmp	.LBB176_60
.LBB176_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB176_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB176_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB176_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB176_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_61
.LBB176_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB176_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB176_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB176_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB176_68:                             # %for.cond283
                                        #   Parent Loop BB176_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB176_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB176_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_68
.LBB176_71:                             # %for.end306
                                        #   in Loop: Header=BB176_66 Depth=1
	jmp	.LBB176_72
.LBB176_72:                             # %for.inc307
                                        #   in Loop: Header=BB176_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_66
.LBB176_73:                             # %for.end309
	jmp	.LBB176_98
.LBB176_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB176_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB176_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB176_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB176_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB176_79:                             # %for.cond324
                                        #   Parent Loop BB176_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB176_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB176_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_79
.LBB176_82:                             # %for.end341
                                        #   in Loop: Header=BB176_77 Depth=1
	jmp	.LBB176_83
.LBB176_83:                             # %for.inc342
                                        #   in Loop: Header=BB176_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_77
.LBB176_84:                             # %for.end344
	jmp	.LBB176_97
.LBB176_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB176_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB176_96
.LBB176_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB176_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB176_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB176_90:                             # %for.cond359
                                        #   Parent Loop BB176_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB176_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB176_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB176_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB176_90
.LBB176_93:                             # %for.end384
                                        #   in Loop: Header=BB176_88 Depth=1
	jmp	.LBB176_94
.LBB176_94:                             # %for.inc385
                                        #   in Loop: Header=BB176_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_88
.LBB176_95:                             # %for.end387
	jmp	.LBB176_96
.LBB176_96:                             # %if.end388
	jmp	.LBB176_97
.LBB176_97:                             # %if.end389
	jmp	.LBB176_98
.LBB176_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB176_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB176_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB176_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB176_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB176_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB176_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB176_103 Depth=1
	movl	$0, -4(%rbp)
.LBB176_105:                            # %for.cond410
                                        #   Parent Loop BB176_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB176_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB176_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB176_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB176_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB176_109
.LBB176_108:                            # %if.else483
                                        #   in Loop: Header=BB176_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB176_109:                            # %if.end506
                                        #   in Loop: Header=BB176_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB176_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB176_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB176_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB176_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB176_113
.LBB176_112:                            # %if.else568
                                        #   in Loop: Header=BB176_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB176_113:                            # %if.end591
                                        #   in Loop: Header=BB176_105 Depth=2
	jmp	.LBB176_114
.LBB176_114:                            # %if.end592
                                        #   in Loop: Header=BB176_105 Depth=2
	jmp	.LBB176_115
.LBB176_115:                            # %for.inc593
                                        #   in Loop: Header=BB176_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_105
.LBB176_116:                            # %for.end595
                                        #   in Loop: Header=BB176_103 Depth=1
	jmp	.LBB176_117
.LBB176_117:                            # %for.inc596
                                        #   in Loop: Header=BB176_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_103
.LBB176_118:                            # %for.end598
	jmp	.LBB176_130
.LBB176_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB176_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB176_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB176_120 Depth=1
	movl	$0, -4(%rbp)
.LBB176_122:                            # %for.cond604
                                        #   Parent Loop BB176_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB176_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB176_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB176_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB176_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB176_125:                            # %if.end654
                                        #   in Loop: Header=BB176_122 Depth=2
	jmp	.LBB176_126
.LBB176_126:                            # %for.inc655
                                        #   in Loop: Header=BB176_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_122
.LBB176_127:                            # %for.end657
                                        #   in Loop: Header=BB176_120 Depth=1
	jmp	.LBB176_128
.LBB176_128:                            # %for.inc658
                                        #   in Loop: Header=BB176_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB176_120
.LBB176_129:                            # %for.end660
	jmp	.LBB176_130
.LBB176_130:                            # %if.end661
	jmp	.LBB176_131
.LBB176_131:                            # %if.end662
	cmpl	$1412912824, -48(%rbp)  # imm = 0x543756B8
	jne	.LBB176_133
.LBB176_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_132
.Lfunc_end176:
	.size	copy_rdopt_data.140, .Lfunc_end176-copy_rdopt_data.140
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.141     # -- Begin function copy_rdopt_data.141
	.p2align	4, 0x90
	.type	copy_rdopt_data.141,@function
copy_rdopt_data.141:                    # @copy_rdopt_data.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1328106530, -48(%rbp)  # imm = 0x4F294C22
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB177_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB177_4
.LBB177_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB177_4
.LBB177_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB177_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_7 Depth 2
                                        #       Child Loop BB177_9 Depth 3
                                        #         Child Loop BB177_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB177_5 Depth=1
	movl	$0, -8(%rbp)
.LBB177_7:                              # %for.cond17
                                        #   Parent Loop BB177_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB177_9 Depth 3
                                        #         Child Loop BB177_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB177_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB177_7 Depth=2
	movl	$0, -12(%rbp)
.LBB177_9:                              # %for.cond21
                                        #   Parent Loop BB177_5 Depth=1
                                        #     Parent Loop BB177_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB177_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB177_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB177_9 Depth=3
	movl	$0, -16(%rbp)
.LBB177_11:                             # %for.cond25
                                        #   Parent Loop BB177_5 Depth=1
                                        #     Parent Loop BB177_7 Depth=2
                                        #       Parent Loop BB177_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB177_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB177_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB177_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB177_11
.LBB177_14:                             # %for.end
                                        #   in Loop: Header=BB177_9 Depth=3
	jmp	.LBB177_15
.LBB177_15:                             # %for.inc46
                                        #   in Loop: Header=BB177_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_9
.LBB177_16:                             # %for.end48
                                        #   in Loop: Header=BB177_7 Depth=2
	jmp	.LBB177_17
.LBB177_17:                             # %for.inc49
                                        #   in Loop: Header=BB177_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_7
.LBB177_18:                             # %for.end51
                                        #   in Loop: Header=BB177_5 Depth=1
	jmp	.LBB177_19
.LBB177_19:                             # %for.inc52
                                        #   in Loop: Header=BB177_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_5
.LBB177_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB177_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_23 Depth 2
                                        #       Child Loop BB177_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB177_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB177_21 Depth=1
	movl	$0, -12(%rbp)
.LBB177_23:                             # %for.cond59
                                        #   Parent Loop BB177_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB177_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB177_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB177_23 Depth=2
	movl	$0, -16(%rbp)
.LBB177_25:                             # %for.cond63
                                        #   Parent Loop BB177_21 Depth=1
                                        #     Parent Loop BB177_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB177_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB177_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB177_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB177_25
.LBB177_28:                             # %for.end82
                                        #   in Loop: Header=BB177_23 Depth=2
	jmp	.LBB177_29
.LBB177_29:                             # %for.inc83
                                        #   in Loop: Header=BB177_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_23
.LBB177_30:                             # %for.end85
                                        #   in Loop: Header=BB177_21 Depth=1
	jmp	.LBB177_31
.LBB177_31:                             # %for.inc86
                                        #   in Loop: Header=BB177_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_21
.LBB177_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB177_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB177_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB177_33 Depth=1
	movl	$0, -4(%rbp)
.LBB177_35:                             # %for.cond93
                                        #   Parent Loop BB177_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB177_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB177_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB177_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB177_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB177_38:                             # %if.end
                                        #   in Loop: Header=BB177_35 Depth=2
	jmp	.LBB177_39
.LBB177_39:                             # %for.inc176
                                        #   in Loop: Header=BB177_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_35
.LBB177_40:                             # %for.end178
                                        #   in Loop: Header=BB177_33 Depth=1
	jmp	.LBB177_41
.LBB177_41:                             # %for.inc179
                                        #   in Loop: Header=BB177_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_33
.LBB177_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB177_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB177_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB177_43 Depth=1
	movl	$0, -4(%rbp)
.LBB177_45:                             # %for.cond186
                                        #   Parent Loop BB177_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB177_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB177_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB177_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_45
.LBB177_48:                             # %for.end203
                                        #   in Loop: Header=BB177_43 Depth=1
	jmp	.LBB177_49
.LBB177_49:                             # %for.inc204
                                        #   in Loop: Header=BB177_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_43
.LBB177_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB177_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB177_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB177_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB177_52 Depth=1
	movl	$0, -4(%rbp)
.LBB177_54:                             # %for.cond214
                                        #   Parent Loop BB177_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB177_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB177_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB177_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_54
.LBB177_57:                             # %for.end247
                                        #   in Loop: Header=BB177_52 Depth=1
	jmp	.LBB177_58
.LBB177_58:                             # %for.inc248
                                        #   in Loop: Header=BB177_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_52
.LBB177_59:                             # %for.end250
	jmp	.LBB177_60
.LBB177_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB177_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB177_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB177_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB177_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_61
.LBB177_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB177_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB177_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB177_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB177_68:                             # %for.cond283
                                        #   Parent Loop BB177_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB177_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB177_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_68
.LBB177_71:                             # %for.end306
                                        #   in Loop: Header=BB177_66 Depth=1
	jmp	.LBB177_72
.LBB177_72:                             # %for.inc307
                                        #   in Loop: Header=BB177_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_66
.LBB177_73:                             # %for.end309
	jmp	.LBB177_98
.LBB177_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB177_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB177_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB177_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB177_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB177_79:                             # %for.cond324
                                        #   Parent Loop BB177_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB177_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB177_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_79
.LBB177_82:                             # %for.end341
                                        #   in Loop: Header=BB177_77 Depth=1
	jmp	.LBB177_83
.LBB177_83:                             # %for.inc342
                                        #   in Loop: Header=BB177_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_77
.LBB177_84:                             # %for.end344
	jmp	.LBB177_97
.LBB177_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB177_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB177_96
.LBB177_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB177_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB177_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB177_90:                             # %for.cond359
                                        #   Parent Loop BB177_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB177_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB177_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB177_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB177_90
.LBB177_93:                             # %for.end384
                                        #   in Loop: Header=BB177_88 Depth=1
	jmp	.LBB177_94
.LBB177_94:                             # %for.inc385
                                        #   in Loop: Header=BB177_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_88
.LBB177_95:                             # %for.end387
	jmp	.LBB177_96
.LBB177_96:                             # %if.end388
	jmp	.LBB177_97
.LBB177_97:                             # %if.end389
	jmp	.LBB177_98
.LBB177_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB177_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB177_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB177_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB177_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB177_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB177_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB177_103 Depth=1
	movl	$0, -4(%rbp)
.LBB177_105:                            # %for.cond410
                                        #   Parent Loop BB177_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB177_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB177_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB177_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB177_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB177_109
.LBB177_108:                            # %if.else483
                                        #   in Loop: Header=BB177_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB177_109:                            # %if.end506
                                        #   in Loop: Header=BB177_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB177_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB177_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB177_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB177_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB177_113
.LBB177_112:                            # %if.else568
                                        #   in Loop: Header=BB177_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB177_113:                            # %if.end591
                                        #   in Loop: Header=BB177_105 Depth=2
	jmp	.LBB177_114
.LBB177_114:                            # %if.end592
                                        #   in Loop: Header=BB177_105 Depth=2
	jmp	.LBB177_115
.LBB177_115:                            # %for.inc593
                                        #   in Loop: Header=BB177_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_105
.LBB177_116:                            # %for.end595
                                        #   in Loop: Header=BB177_103 Depth=1
	jmp	.LBB177_117
.LBB177_117:                            # %for.inc596
                                        #   in Loop: Header=BB177_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_103
.LBB177_118:                            # %for.end598
	jmp	.LBB177_130
.LBB177_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB177_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB177_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB177_120 Depth=1
	movl	$0, -4(%rbp)
.LBB177_122:                            # %for.cond604
                                        #   Parent Loop BB177_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB177_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB177_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB177_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB177_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB177_125:                            # %if.end654
                                        #   in Loop: Header=BB177_122 Depth=2
	jmp	.LBB177_126
.LBB177_126:                            # %for.inc655
                                        #   in Loop: Header=BB177_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_122
.LBB177_127:                            # %for.end657
                                        #   in Loop: Header=BB177_120 Depth=1
	jmp	.LBB177_128
.LBB177_128:                            # %for.inc658
                                        #   in Loop: Header=BB177_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_120
.LBB177_129:                            # %for.end660
	jmp	.LBB177_130
.LBB177_130:                            # %if.end661
	jmp	.LBB177_131
.LBB177_131:                            # %if.end662
	cmpl	$1328106530, -48(%rbp)  # imm = 0x4F294C22
	jne	.LBB177_133
.LBB177_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_132
.Lfunc_end177:
	.size	copy_rdopt_data.141, .Lfunc_end177-copy_rdopt_data.141
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.142
	.type	copy_motion_vectors_MB.142,@function
copy_motion_vectors_MB.142:             # @copy_motion_vectors_MB.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$687717835, -20(%rbp)   # imm = 0x28FDBDCB
	movl	$0, -16(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_3 Depth 2
                                        #       Child Loop BB178_5 Depth 3
                                        #         Child Loop BB178_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB178_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	$0, -12(%rbp)
.LBB178_3:                              # %for.cond1
                                        #   Parent Loop BB178_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB178_5 Depth 3
                                        #         Child Loop BB178_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB178_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB178_3 Depth=2
	movl	$0, -4(%rbp)
.LBB178_5:                              # %for.cond4
                                        #   Parent Loop BB178_1 Depth=1
                                        #     Parent Loop BB178_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB178_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB178_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB178_5 Depth=3
	movl	$0, -8(%rbp)
.LBB178_7:                              # %for.cond7
                                        #   Parent Loop BB178_1 Depth=1
                                        #     Parent Loop BB178_3 Depth=2
                                        #       Parent Loop BB178_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB178_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB178_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB178_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB178_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB178_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB178_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB178_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB178_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB178_12:                             # %if.end
                                        #   in Loop: Header=BB178_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB178_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB178_7
.LBB178_14:                             # %for.end
                                        #   in Loop: Header=BB178_5 Depth=3
	jmp	.LBB178_15
.LBB178_15:                             # %for.inc359
                                        #   in Loop: Header=BB178_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB178_5
.LBB178_16:                             # %for.end361
                                        #   in Loop: Header=BB178_3 Depth=2
	jmp	.LBB178_17
.LBB178_17:                             # %for.inc362
                                        #   in Loop: Header=BB178_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB178_3
.LBB178_18:                             # %for.end364
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_19
.LBB178_19:                             # %for.inc365
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB178_1
.LBB178_20:                             # %for.end367
	cmpl	$687717835, -20(%rbp)   # imm = 0x28FDBDCB
	jne	.LBB178_22
.LBB178_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_21
.Lfunc_end178:
	.size	copy_motion_vectors_MB.142, .Lfunc_end178-copy_motion_vectors_MB.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.143
	.type	rdPictureCoding.143,@function
rdPictureCoding.143:                    # @rdPictureCoding.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1626547076, -24(%rbp)  # imm = 0x60F32384
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB179_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB179_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB179_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB179_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB179_6
.LBB179_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB179_6:                              # %if.end
	jmp	.LBB179_8
.LBB179_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB179_8:                              # %if.end10
	jmp	.LBB179_10
.LBB179_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB179_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB179_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB179_13
.LBB179_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB179_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB179_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB179_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB179_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB179_18
.LBB179_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB179_20
.LBB179_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB179_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB179_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB179_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB179_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB179_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB179_26
.LBB179_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB179_26:                             # %if.end53
	jmp	.LBB179_34
.LBB179_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB179_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB179_33
.LBB179_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB179_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_32
.LBB179_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_32:                             # %if.end66
	jmp	.LBB179_33
.LBB179_33:                             # %if.end67
	jmp	.LBB179_34
.LBB179_34:                             # %if.end68
	jmp	.LBB179_36
.LBB179_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB179_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB179_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB179_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB179_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB179_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_46
.LBB179_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB179_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB179_45
.LBB179_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB179_45:                             # %if.end98
	jmp	.LBB179_46
.LBB179_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB179_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB179_51
.LBB179_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB179_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB179_50:                             # %if.end111
	jmp	.LBB179_51
.LBB179_51:                             # %if.end112
	cmpl	$1626547076, -24(%rbp)  # imm = 0x60F32384
	jne	.LBB179_53
.LBB179_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_52
.Lfunc_end179:
	.size	rdPictureCoding.143, .Lfunc_end179-rdPictureCoding.143
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.144
	.type	GenerateFullPelRepresentation.144,@function
GenerateFullPelRepresentation.144:      # @GenerateFullPelRepresentation.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$599299222, -44(%rbp)   # imm = 0x23B89496
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB180_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB180_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB180_1 Depth=1
	movl	$0, -28(%rbp)
.LBB180_3:                              # %for.cond1
                                        #   Parent Loop BB180_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB180_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB180_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB180_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB180_3
.LBB180_6:                              # %for.end
                                        #   in Loop: Header=BB180_1 Depth=1
	jmp	.LBB180_7
.LBB180_7:                              # %for.inc5
                                        #   in Loop: Header=BB180_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB180_1
.LBB180_8:                              # %for.end7
	cmpl	$599299222, -44(%rbp)   # imm = 0x23B89496
	jne	.LBB180_10
.LBB180_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_9
.Lfunc_end180:
	.size	GenerateFullPelRepresentation.144, .Lfunc_end180-GenerateFullPelRepresentation.144
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.145
.LCPI181_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.145,@function
init_frame.145:                         # @init_frame.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$270907967, -16(%rbp)   # imm = 0x1025BA3F
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB181_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB181_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB181_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB181_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_1
.LBB181_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB181_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB181_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB181_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB181_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB181_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB181_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB181_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB181_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB181_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB181_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB181_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB181_17
.LBB181_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB181_17:                             # %if.end32
	jmp	.LBB181_25
.LBB181_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB181_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB181_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB181_22
.LBB181_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB181_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB181_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB181_24:                             # %if.end50
	jmp	.LBB181_25
.LBB181_25:                             # %if.end51
	jmp	.LBB181_26
.LBB181_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB181_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB181_28:                             # %if.end62
	jmp	.LBB181_72
.LBB181_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB181_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB181_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB181_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB181_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_30
.LBB181_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB181_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB181_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB181_36:                             # %if.end102
	vmovsd	.LCPI181_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB181_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI181_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB181_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB181_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB181_41
.LBB181_40:                             # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB181_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB181_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB181_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB181_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB181_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB181_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB181_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB181_49
.LBB181_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB181_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB181_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB181_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB181_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB181_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB181_58
.LBB181_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB181_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB181_57
.LBB181_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB181_57:                             # %cond.end
.LBB181_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB181_66
.LBB181_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB181_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB181_65
.LBB181_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB181_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB181_64
.LBB181_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB181_64:                             # %cond.end209
.LBB181_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB181_66:                             # %if.end214
	jmp	.LBB181_67
.LBB181_67:                             # %if.end215
	jmp	.LBB181_71
.LBB181_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB181_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB181_70:                             # %if.end226
	jmp	.LBB181_71
.LBB181_71:                             # %if.end227
	jmp	.LBB181_72
.LBB181_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$270907967, -16(%rbp)   # imm = 0x1025BA3F
	jne	.LBB181_74
.LBB181_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_73
.Lfunc_end181:
	.size	init_frame.145, .Lfunc_end181-init_frame.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.146
	.type	writeout_picture.146,@function
writeout_picture.146:                   # @writeout_picture.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$283894883, -28(%rbp)   # imm = 0x10EBE463
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB182_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB182_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB182_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB182_3:                              # %for.cond1
                                        #   Parent Loop BB182_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB182_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB182_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB182_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB182_3
.LBB182_6:                              # %for.end
                                        #   in Loop: Header=BB182_1 Depth=1
	jmp	.LBB182_7
.LBB182_7:                              # %for.inc10
                                        #   in Loop: Header=BB182_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB182_1
.LBB182_8:                              # %for.end12
	cmpl	$283894883, -28(%rbp)   # imm = 0x10EBE463
	jne	.LBB182_10
.LBB182_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_9
.Lfunc_end182:
	.size	writeout_picture.146, .Lfunc_end182-writeout_picture.146
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.147  # -- Begin function UnifiedOneForthPix.147
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.147,@function
UnifiedOneForthPix.147:                 # @UnifiedOneForthPix.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1237070911, -108(%rbp) # imm = 0x49BC343F
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB183_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB183_3
.LBB183_2:                              # %if.then
	jmp	.LBB183_266
.LBB183_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB183_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB183_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB183_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB183_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB183_11
.LBB183_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB183_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB183_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB183_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB183_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB183_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB183_14:                             # %for.cond49
                                        #   Parent Loop BB183_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB183_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB183_18
.LBB183_17:                             # %cond.false
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-48(%rbp), %eax
.LBB183_18:                             # %cond.end
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_24
.LBB183_20:                             # %cond.false63
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB183_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB183_23
.LBB183_22:                             # %cond.false71
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-48(%rbp), %eax
.LBB183_23:                             # %cond.end72
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_24:                             # %cond.end74
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB183_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB183_27
.LBB183_26:                             # %cond.false83
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edx
.LBB183_27:                             # %cond.end84
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB183_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB183_33
.LBB183_29:                             # %cond.false89
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB183_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB183_32
.LBB183_31:                             # %cond.false97
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edx
.LBB183_32:                             # %cond.end98
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_33:                             # %cond.end100
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB183_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_36
.LBB183_35:                             # %cond.false115
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB183_36:                             # %cond.end117
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB183_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB183_42
.LBB183_38:                             # %cond.false122
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB183_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_41
.LBB183_40:                             # %cond.false131
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB183_41:                             # %cond.end133
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_42:                             # %cond.end135
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB183_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_45
.LBB183_44:                             # %cond.false152
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB183_45:                             # %cond.end154
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB183_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB183_51
.LBB183_47:                             # %cond.false159
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB183_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_50
.LBB183_49:                             # %cond.false168
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB183_50:                             # %cond.end170
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_51:                             # %cond.end172
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB183_54
.LBB183_53:                             # %cond.false187
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB183_54:                             # %cond.end189
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB183_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB183_60
.LBB183_56:                             # %cond.false194
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB183_59
.LBB183_58:                             # %cond.false203
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB183_59:                             # %cond.end205
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_60:                             # %cond.end207
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB183_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_63
.LBB183_62:                             # %cond.false225
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB183_63:                             # %cond.end227
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB183_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB183_69
.LBB183_65:                             # %cond.false232
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB183_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB183_68
.LBB183_67:                             # %cond.false241
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB183_68:                             # %cond.end243
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_69:                             # %cond.end245
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB183_72
.LBB183_71:                             # %cond.false260
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB183_72:                             # %cond.end262
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB183_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB183_78
.LBB183_74:                             # %cond.false267
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB183_77
.LBB183_76:                             # %cond.false276
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB183_77:                             # %cond.end278
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_78:                             # %cond.end280
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB183_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB183_81
.LBB183_80:                             # %cond.false297
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB183_81:                             # %cond.end298
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB183_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB183_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB183_87
.LBB183_83:                             # %cond.false303
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB183_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB183_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB183_86
.LBB183_85:                             # %cond.false311
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB183_86:                             # %cond.end312
                                        #   in Loop: Header=BB183_14 Depth=2
.LBB183_87:                             # %cond.end314
                                        #   in Loop: Header=BB183_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB183_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB183_14
.LBB183_89:                             # %for.end
                                        #   in Loop: Header=BB183_12 Depth=1
	jmp	.LBB183_90
.LBB183_90:                             # %for.inc336
                                        #   in Loop: Header=BB183_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB183_12
.LBB183_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB183_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB183_92 Depth=1
	movl	$0, -48(%rbp)
.LBB183_94:                             # %for.cond346
                                        #   Parent Loop BB183_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB183_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB183_98
.LBB183_97:                             # %cond.false364
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB183_98:                             # %cond.end366
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB183_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB183_101
.LBB183_100:                            # %cond.false378
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB183_101:                            # %cond.end380
                                        #   in Loop: Header=BB183_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB183_104
.LBB183_103:                            # %cond.false390
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB183_104:                            # %cond.end392
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB183_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB183_107
.LBB183_106:                            # %cond.false405
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB183_107:                            # %cond.end407
                                        #   in Loop: Header=BB183_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB183_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB183_110
.LBB183_109:                            # %cond.false417
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB183_110:                            # %cond.end419
                                        #   in Loop: Header=BB183_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB183_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_113
.LBB183_112:                            # %cond.false442
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB183_113:                            # %cond.end449
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_119
.LBB183_115:                            # %cond.false454
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB183_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_118
.LBB183_117:                            # %cond.false466
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB183_118:                            # %cond.end473
                                        #   in Loop: Header=BB183_94 Depth=2
.LBB183_119:                            # %cond.end475
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB183_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_122
.LBB183_121:                            # %cond.false490
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB183_122:                            # %cond.end493
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB183_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB183_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_128
.LBB183_124:                            # %cond.false498
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB183_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB183_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_127
.LBB183_126:                            # %cond.false506
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB183_127:                            # %cond.end509
                                        #   in Loop: Header=BB183_94 Depth=2
.LBB183_128:                            # %cond.end511
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB183_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB183_94
.LBB183_130:                            # %for.end516
                                        #   in Loop: Header=BB183_92 Depth=1
	jmp	.LBB183_131
.LBB183_131:                            # %for.inc517
                                        #   in Loop: Header=BB183_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB183_92
.LBB183_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB183_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB183_133 Depth=1
	movl	$0, -44(%rbp)
.LBB183_135:                            # %for.cond533
                                        #   Parent Loop BB183_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_139
.LBB183_138:                            # %cond.false553
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB183_139:                            # %cond.end555
                                        #   in Loop: Header=BB183_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_145
.LBB183_141:                            # %cond.false567
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_144
.LBB183_143:                            # %cond.false579
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB183_144:                            # %cond.end581
                                        #   in Loop: Header=BB183_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_145:                            # %cond.end589
                                        #   in Loop: Header=BB183_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB183_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_157
.LBB183_147:                            # %cond.false594
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_150
.LBB183_149:                            # %cond.false607
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB183_150:                            # %cond.end609
                                        #   in Loop: Header=BB183_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_156
.LBB183_152:                            # %cond.false621
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_155
.LBB183_154:                            # %cond.false633
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB183_155:                            # %cond.end635
                                        #   in Loop: Header=BB183_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_156:                            # %cond.end643
                                        #   in Loop: Header=BB183_135 Depth=2
.LBB183_157:                            # %cond.end645
                                        #   in Loop: Header=BB183_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB183_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB183_135
.LBB183_159:                            # %for.end650
                                        #   in Loop: Header=BB183_133 Depth=1
	jmp	.LBB183_160
.LBB183_160:                            # %for.inc651
                                        #   in Loop: Header=BB183_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB183_133
.LBB183_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB183_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB183_162 Depth=1
	movl	$0, -48(%rbp)
.LBB183_164:                            # %for.cond659
                                        #   Parent Loop BB183_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB183_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_169
.LBB183_168:                            # %cond.false681
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_169:                            # %cond.end683
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_175
.LBB183_171:                            # %cond.false696
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_174
.LBB183_173:                            # %cond.false707
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_174:                            # %cond.end709
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_175:                            # %cond.end718
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_187
.LBB183_177:                            # %cond.false723
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_180
.LBB183_179:                            # %cond.false735
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_180:                            # %cond.end737
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_186
.LBB183_182:                            # %cond.false750
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_185
.LBB183_184:                            # %cond.false761
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_185:                            # %cond.end763
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_186:                            # %cond.end772
                                        #   in Loop: Header=BB183_164 Depth=2
.LBB183_187:                            # %cond.end774
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB183_261
.LBB183_188:                            # %if.else
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB183_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB183_192
.LBB183_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB183_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB183_226
.LBB183_192:                            # %if.then791
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_195
.LBB183_194:                            # %cond.false803
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_195:                            # %cond.end805
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_198
.LBB183_197:                            # %cond.false816
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_198:                            # %cond.end818
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_207
.LBB183_200:                            # %cond.false832
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_203
.LBB183_202:                            # %cond.false840
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_203:                            # %cond.end842
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_206
.LBB183_205:                            # %cond.false853
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_206:                            # %cond.end855
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_207:                            # %cond.end865
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_225
.LBB183_209:                            # %cond.false870
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_212
.LBB183_211:                            # %cond.false879
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_212:                            # %cond.end881
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_215
.LBB183_214:                            # %cond.false892
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_215:                            # %cond.end894
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_224
.LBB183_217:                            # %cond.false908
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_220
.LBB183_219:                            # %cond.false916
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_220:                            # %cond.end918
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_223
.LBB183_222:                            # %cond.false929
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_223:                            # %cond.end931
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_224:                            # %cond.end941
                                        #   in Loop: Header=BB183_164 Depth=2
.LBB183_225:                            # %cond.end943
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB183_260
.LBB183_226:                            # %if.else946
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_229
.LBB183_228:                            # %cond.false962
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_229:                            # %cond.end964
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_232
.LBB183_231:                            # %cond.false973
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_232:                            # %cond.end975
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_241
.LBB183_234:                            # %cond.false987
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_237
.LBB183_236:                            # %cond.false999
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_237:                            # %cond.end1001
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_240
.LBB183_239:                            # %cond.false1010
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_240:                            # %cond.end1012
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_241:                            # %cond.end1020
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB183_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB183_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB183_259
.LBB183_243:                            # %cond.false1025
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_246
.LBB183_245:                            # %cond.false1038
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_246:                            # %cond.end1040
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_249
.LBB183_248:                            # %cond.false1049
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_249:                            # %cond.end1051
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB183_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB183_258
.LBB183_251:                            # %cond.false1063
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB183_254
.LBB183_253:                            # %cond.false1075
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB183_254:                            # %cond.end1077
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB183_257
.LBB183_256:                            # %cond.false1086
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB183_257:                            # %cond.end1088
                                        #   in Loop: Header=BB183_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB183_258:                            # %cond.end1096
                                        #   in Loop: Header=BB183_164 Depth=2
.LBB183_259:                            # %cond.end1098
                                        #   in Loop: Header=BB183_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB183_260:                            # %if.end1101
                                        #   in Loop: Header=BB183_164 Depth=2
	jmp	.LBB183_261
.LBB183_261:                            # %if.end1102
                                        #   in Loop: Header=BB183_164 Depth=2
	jmp	.LBB183_262
.LBB183_262:                            # %for.inc1103
                                        #   in Loop: Header=BB183_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB183_164
.LBB183_263:                            # %for.end1105
                                        #   in Loop: Header=BB183_162 Depth=1
	jmp	.LBB183_264
.LBB183_264:                            # %for.inc1106
                                        #   in Loop: Header=BB183_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB183_162
.LBB183_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB183_266:                            # %return
	cmpl	$1237070911, -108(%rbp) # imm = 0x49BC343F
	jne	.LBB183_268
.LBB183_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_267
.Lfunc_end183:
	.size	UnifiedOneForthPix.147, .Lfunc_end183-UnifiedOneForthPix.147
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.148
	.type	writeout_picture.148,@function
writeout_picture.148:                   # @writeout_picture.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$898791790, -28(%rbp)   # imm = 0x3592796E
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB184_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB184_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB184_3:                              # %for.cond1
                                        #   Parent Loop BB184_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB184_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB184_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB184_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_3
.LBB184_6:                              # %for.end
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_7
.LBB184_7:                              # %for.inc10
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_1
.LBB184_8:                              # %for.end12
	cmpl	$898791790, -28(%rbp)   # imm = 0x3592796E
	jne	.LBB184_10
.LBB184_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_9
.Lfunc_end184:
	.size	writeout_picture.148, .Lfunc_end184-writeout_picture.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.149
	.type	field_mode_buffer.149,@function
field_mode_buffer.149:                  # @field_mode_buffer.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$384479829, -8(%rbp)    # imm = 0x16EAB255
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$384479829, -8(%rbp)    # imm = 0x16EAB255
	jne	.LBB185_2
.LBB185_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_1
.Lfunc_end185:
	.size	field_mode_buffer.149, .Lfunc_end185-field_mode_buffer.149
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.150
	.type	PaddAutoCropBorders.150,@function
PaddAutoCropBorders.150:                # @PaddAutoCropBorders.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1957415242, -24(%rbp)  # imm = 0x74ABC94A
	movl	%edi, -36(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB186_3:                              # %for.cond1
                                        #   Parent Loop BB186_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB186_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB186_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB186_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_3
.LBB186_6:                              # %for.end
                                        #   in Loop: Header=BB186_1 Depth=1
	jmp	.LBB186_7
.LBB186_7:                              # %for.inc10
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_1
.LBB186_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB186_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB186_9 Depth=1
	movl	$0, -8(%rbp)
.LBB186_11:                             # %for.cond16
                                        #   Parent Loop BB186_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB186_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB186_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB186_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_11
.LBB186_14:                             # %for.end30
                                        #   in Loop: Header=BB186_9 Depth=1
	jmp	.LBB186_15
.LBB186_15:                             # %for.inc31
                                        #   in Loop: Header=BB186_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_9
.LBB186_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB186_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB186_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB186_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB186_20:                             # %for.cond38
                                        #   Parent Loop BB186_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB186_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB186_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB186_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_20
.LBB186_23:                             # %for.end65
                                        #   in Loop: Header=BB186_18 Depth=1
	jmp	.LBB186_24
.LBB186_24:                             # %for.inc66
                                        #   in Loop: Header=BB186_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_18
.LBB186_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB186_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB186_26 Depth=1
	movl	$0, -8(%rbp)
.LBB186_28:                             # %for.cond72
                                        #   Parent Loop BB186_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB186_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB186_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB186_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_28
.LBB186_31:                             # %for.end99
                                        #   in Loop: Header=BB186_26 Depth=1
	jmp	.LBB186_32
.LBB186_32:                             # %for.inc100
                                        #   in Loop: Header=BB186_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_26
.LBB186_33:                             # %for.end102
	jmp	.LBB186_34
.LBB186_34:                             # %if.end
	cmpl	$1957415242, -24(%rbp)  # imm = 0x74ABC94A
	jne	.LBB186_36
.LBB186_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_35
.Lfunc_end186:
	.size	PaddAutoCropBorders.150, .Lfunc_end186-PaddAutoCropBorders.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.151
	.type	PaddAutoCropBorders.151,@function
PaddAutoCropBorders.151:                # @PaddAutoCropBorders.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1148975066, -36(%rbp)  # imm = 0x447BF7DA
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB187_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB187_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB187_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB187_3:                              # %for.cond1
                                        #   Parent Loop BB187_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB187_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB187_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB187_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_3
.LBB187_6:                              # %for.end
                                        #   in Loop: Header=BB187_1 Depth=1
	jmp	.LBB187_7
.LBB187_7:                              # %for.inc10
                                        #   in Loop: Header=BB187_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB187_1
.LBB187_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB187_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB187_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB187_9 Depth=1
	movl	$0, -4(%rbp)
.LBB187_11:                             # %for.cond16
                                        #   Parent Loop BB187_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB187_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_11
.LBB187_14:                             # %for.end30
                                        #   in Loop: Header=BB187_9 Depth=1
	jmp	.LBB187_15
.LBB187_15:                             # %for.inc31
                                        #   in Loop: Header=BB187_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB187_9
.LBB187_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB187_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB187_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB187_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB187_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB187_20:                             # %for.cond38
                                        #   Parent Loop BB187_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB187_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB187_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB187_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_20
.LBB187_23:                             # %for.end65
                                        #   in Loop: Header=BB187_18 Depth=1
	jmp	.LBB187_24
.LBB187_24:                             # %for.inc66
                                        #   in Loop: Header=BB187_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB187_18
.LBB187_25:                             # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB187_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB187_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB187_26 Depth=1
	movl	$0, -4(%rbp)
.LBB187_28:                             # %for.cond72
                                        #   Parent Loop BB187_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB187_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB187_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB187_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_28
.LBB187_31:                             # %for.end99
                                        #   in Loop: Header=BB187_26 Depth=1
	jmp	.LBB187_32
.LBB187_32:                             # %for.inc100
                                        #   in Loop: Header=BB187_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB187_26
.LBB187_33:                             # %for.end102
	jmp	.LBB187_34
.LBB187_34:                             # %if.end
	cmpl	$1148975066, -36(%rbp)  # imm = 0x447BF7DA
	jne	.LBB187_36
.LBB187_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_35
.Lfunc_end187:
	.size	PaddAutoCropBorders.151, .Lfunc_end187-PaddAutoCropBorders.151
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.152       # -- Begin function MbAffPostProc.152
	.p2align	4, 0x90
	.type	MbAffPostProc.152,@function
MbAffPostProc.152:                      # @MbAffPostProc.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$225065937, -44(%rbp)   # imm = 0xD6A3BD1
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB188_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB188_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_5 Depth 2
                                        #       Child Loop BB188_7 Depth 3
                                        #     Child Loop BB188_13 Depth 2
                                        #       Child Loop BB188_15 Depth 3
                                        #     Child Loop BB188_21 Depth 2
                                        #       Child Loop BB188_23 Depth 3
                                        #         Child Loop BB188_25 Depth 4
                                        #       Child Loop BB188_31 Depth 3
                                        #         Child Loop BB188_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB188_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB188_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB188_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB188_5:                              # %for.cond5
                                        #   Parent Loop BB188_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB188_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB188_5 Depth=2
	movl	$0, -8(%rbp)
.LBB188_7:                              # %for.cond8
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB188_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB188_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB188_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_7
.LBB188_10:                             # %for.end
                                        #   in Loop: Header=BB188_5 Depth=2
	jmp	.LBB188_11
.LBB188_11:                             # %for.inc20
                                        #   in Loop: Header=BB188_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_5
.LBB188_12:                             # %for.end22
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	$0, -4(%rbp)
.LBB188_13:                             # %for.cond23
                                        #   Parent Loop BB188_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB188_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB188_13 Depth=2
	movl	$0, -8(%rbp)
.LBB188_15:                             # %for.cond26
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB188_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB188_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB188_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_15
.LBB188_18:                             # %for.end54
                                        #   in Loop: Header=BB188_13 Depth=2
	jmp	.LBB188_19
.LBB188_19:                             # %for.inc55
                                        #   in Loop: Header=BB188_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_13
.LBB188_20:                             # %for.end57
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB188_21:                             # %for.cond61
                                        #   Parent Loop BB188_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_23 Depth 3
                                        #         Child Loop BB188_25 Depth 4
                                        #       Child Loop BB188_31 Depth 3
                                        #         Child Loop BB188_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB188_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB188_21 Depth=2
	movl	$0, -4(%rbp)
.LBB188_23:                             # %for.cond64
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB188_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB188_23 Depth=3
	movl	$0, -8(%rbp)
.LBB188_25:                             # %for.cond69
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_21 Depth=2
                                        #       Parent Loop BB188_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB188_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB188_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_25
.LBB188_28:                             # %for.end87
                                        #   in Loop: Header=BB188_23 Depth=3
	jmp	.LBB188_29
.LBB188_29:                             # %for.inc88
                                        #   in Loop: Header=BB188_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_23
.LBB188_30:                             # %for.end90
                                        #   in Loop: Header=BB188_21 Depth=2
	movl	$0, -4(%rbp)
.LBB188_31:                             # %for.cond91
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB188_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB188_31 Depth=3
	movl	$0, -8(%rbp)
.LBB188_33:                             # %for.cond95
                                        #   Parent Loop BB188_2 Depth=1
                                        #     Parent Loop BB188_21 Depth=2
                                        #       Parent Loop BB188_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB188_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB188_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_33
.LBB188_36:                             # %for.end130
                                        #   in Loop: Header=BB188_31 Depth=3
	jmp	.LBB188_37
.LBB188_37:                             # %for.inc131
                                        #   in Loop: Header=BB188_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_31
.LBB188_38:                             # %for.end133
                                        #   in Loop: Header=BB188_21 Depth=2
	jmp	.LBB188_39
.LBB188_39:                             # %for.inc134
                                        #   in Loop: Header=BB188_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB188_21
.LBB188_40:                             # %for.end136
                                        #   in Loop: Header=BB188_2 Depth=1
	jmp	.LBB188_41
.LBB188_41:                             # %if.end
                                        #   in Loop: Header=BB188_2 Depth=1
	jmp	.LBB188_42
.LBB188_42:                             # %for.inc137
                                        #   in Loop: Header=BB188_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB188_2
.LBB188_43:                             # %for.end139
	jmp	.LBB188_67
.LBB188_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB188_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_48 Depth 2
                                        #       Child Loop BB188_50 Depth 3
                                        #     Child Loop BB188_56 Depth 2
                                        #       Child Loop BB188_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB188_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB188_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB188_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB188_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB188_48:                             # %for.cond149
                                        #   Parent Loop BB188_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB188_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB188_48 Depth=2
	movl	$0, -8(%rbp)
.LBB188_50:                             # %for.cond152
                                        #   Parent Loop BB188_45 Depth=1
                                        #     Parent Loop BB188_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB188_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB188_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB188_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_50
.LBB188_53:                             # %for.end167
                                        #   in Loop: Header=BB188_48 Depth=2
	jmp	.LBB188_54
.LBB188_54:                             # %for.inc168
                                        #   in Loop: Header=BB188_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_48
.LBB188_55:                             # %for.end170
                                        #   in Loop: Header=BB188_45 Depth=1
	movl	$0, -4(%rbp)
.LBB188_56:                             # %for.cond171
                                        #   Parent Loop BB188_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB188_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB188_56 Depth=2
	movl	$0, -8(%rbp)
.LBB188_58:                             # %for.cond174
                                        #   Parent Loop BB188_45 Depth=1
                                        #     Parent Loop BB188_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB188_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB188_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB188_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_58
.LBB188_61:                             # %for.end203
                                        #   in Loop: Header=BB188_56 Depth=2
	jmp	.LBB188_62
.LBB188_62:                             # %for.inc204
                                        #   in Loop: Header=BB188_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_56
.LBB188_63:                             # %for.end206
                                        #   in Loop: Header=BB188_45 Depth=1
	jmp	.LBB188_64
.LBB188_64:                             # %if.end207
                                        #   in Loop: Header=BB188_45 Depth=1
	jmp	.LBB188_65
.LBB188_65:                             # %for.inc208
                                        #   in Loop: Header=BB188_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB188_45
.LBB188_66:                             # %for.end210
	jmp	.LBB188_67
.LBB188_67:                             # %if.end211
	cmpl	$225065937, -44(%rbp)   # imm = 0xD6A3BD1
	jne	.LBB188_69
.LBB188_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_68
.Lfunc_end188:
	.size	MbAffPostProc.152, .Lfunc_end188-MbAffPostProc.152
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.153
	.type	frame_mode_buffer.153,@function
frame_mode_buffer.153:                  # @frame_mode_buffer.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$730309492, -8(%rbp)    # imm = 0x2B87A374
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB189_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_3
.LBB189_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB189_3:                              # %if.end
	cmpl	$730309492, -8(%rbp)    # imm = 0x2B87A374
	jne	.LBB189_5
.LBB189_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_4
.Lfunc_end189:
	.size	frame_mode_buffer.153, .Lfunc_end189-frame_mode_buffer.153
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.154
.LCPI190_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.154,@function
init_field.154:                         # @init_field.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$244374740, -16(%rbp)   # imm = 0xE90DCD4
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB190_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB190_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB190_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB190_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB190_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB190_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB190_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB190_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB190_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB190_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB190_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB190_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB190_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB190_15
.LBB190_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB190_15:                             # %if.end38
	jmp	.LBB190_23
.LBB190_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB190_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB190_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB190_20
.LBB190_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB190_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB190_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB190_22:                             # %if.end56
	jmp	.LBB190_23
.LBB190_23:                             # %if.end57
	jmp	.LBB190_24
.LBB190_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB190_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB190_26:                             # %if.end66
	jmp	.LBB190_77
.LBB190_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB190_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB190_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB190_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB190_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB190_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_29
.LBB190_32:                             # %for.end
	jmp	.LBB190_38
.LBB190_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB190_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB190_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB190_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB190_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_34
.LBB190_37:                             # %for.end134
	jmp	.LBB190_38
.LBB190_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB190_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB190_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB190_41:                             # %if.end147
	vmovsd	.LCPI190_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB190_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI190_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB190_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB190_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI190_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB190_46
.LBB190_45:                             # %if.else174
	vmovsd	.LCPI190_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB190_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB190_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB190_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB190_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB190_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB190_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB190_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB190_54
.LBB190_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB190_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB190_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB190_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB190_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB190_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB190_63
.LBB190_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB190_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB190_62
.LBB190_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB190_62:                             # %cond.end
.LBB190_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB190_71
.LBB190_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB190_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB190_70
.LBB190_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB190_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB190_69
.LBB190_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB190_69:                             # %cond.end256
.LBB190_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB190_71:                             # %if.end261
	jmp	.LBB190_72
.LBB190_72:                             # %if.end262
	jmp	.LBB190_76
.LBB190_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB190_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB190_75:                             # %if.end273
	jmp	.LBB190_76
.LBB190_76:                             # %if.end274
	jmp	.LBB190_77
.LBB190_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$244374740, -16(%rbp)   # imm = 0xE90DCD4
	jne	.LBB190_79
.LBB190_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_78
.Lfunc_end190:
	.size	init_field.154, .Lfunc_end190-init_field.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.155
	.type	copy_motion_vectors_MB.155,@function
copy_motion_vectors_MB.155:             # @copy_motion_vectors_MB.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1740642561, -20(%rbp)  # imm = 0x67C01901
	movl	$0, -16(%rbp)
.LBB191_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_3 Depth 2
                                        #       Child Loop BB191_5 Depth 3
                                        #         Child Loop BB191_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB191_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	$0, -8(%rbp)
.LBB191_3:                              # %for.cond1
                                        #   Parent Loop BB191_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_5 Depth 3
                                        #         Child Loop BB191_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB191_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB191_3 Depth=2
	movl	$0, -4(%rbp)
.LBB191_5:                              # %for.cond4
                                        #   Parent Loop BB191_1 Depth=1
                                        #     Parent Loop BB191_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB191_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB191_5 Depth=3
	movl	$0, -12(%rbp)
.LBB191_7:                              # %for.cond7
                                        #   Parent Loop BB191_1 Depth=1
                                        #     Parent Loop BB191_3 Depth=2
                                        #       Parent Loop BB191_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -12(%rbp)
	jge	.LBB191_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB191_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB191_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB191_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB191_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB191_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB191_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB191_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB191_12:                             # %if.end
                                        #   in Loop: Header=BB191_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB191_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_7
.LBB191_14:                             # %for.end
                                        #   in Loop: Header=BB191_5 Depth=3
	jmp	.LBB191_15
.LBB191_15:                             # %for.inc359
                                        #   in Loop: Header=BB191_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_5
.LBB191_16:                             # %for.end361
                                        #   in Loop: Header=BB191_3 Depth=2
	jmp	.LBB191_17
.LBB191_17:                             # %for.inc362
                                        #   in Loop: Header=BB191_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB191_3
.LBB191_18:                             # %for.end364
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_19
.LBB191_19:                             # %for.inc365
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_1
.LBB191_20:                             # %for.end367
	cmpl	$1740642561, -20(%rbp)  # imm = 0x67C01901
	jne	.LBB191_22
.LBB191_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_21
.Lfunc_end191:
	.size	copy_motion_vectors_MB.155, .Lfunc_end191-copy_motion_vectors_MB.155
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.156    # -- Begin function encode_one_frame.156
	.p2align	4, 0x90
	.type	encode_one_frame.156,@function
encode_one_frame.156:                   # @encode_one_frame.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$359004564, -68(%rbp)   # imm = 0x1565F994
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB192_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB192_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB192_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB192_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB192_9
.LBB192_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB192_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB192_8
.LBB192_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB192_8:                              # %if.end21
	jmp	.LBB192_9
.LBB192_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB192_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB192_38
.LBB192_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB192_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB192_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB192_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB192_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB192_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB192_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB192_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB192_20
.LBB192_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB192_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB192_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB192_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB192_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB192_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB192_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB192_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB192_29
.LBB192_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB192_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB192_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB192_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB192_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB192_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB192_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB192_35
.LBB192_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB192_35:                             # %if.end89
	jmp	.LBB192_37
.LBB192_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB192_37:                             # %if.end92
	jmp	.LBB192_38
.LBB192_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB192_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB192_41
.LBB192_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB192_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB192_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB192_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB192_45
# %bb.44:                               # %if.then109
	movl	-44(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB192_54
.LBB192_45:                             # %if.else112
	movl	-56(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB192_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB192_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB192_53
.LBB192_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB192_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB192_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB192_52
.LBB192_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB192_52:                             # %if.end130
	jmp	.LBB192_53
.LBB192_53:                             # %if.end131
	jmp	.LBB192_54
.LBB192_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB192_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB192_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB192_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB192_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB192_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB192_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB192_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB192_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB192_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB192_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB192_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB192_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB192_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB192_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB192_70
.LBB192_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB192_70:                             # %if.end171
	jmp	.LBB192_81
.LBB192_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB192_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB192_80
.LBB192_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB192_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB192_79
.LBB192_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB192_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB192_78
.LBB192_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB192_78:                             # %if.end187
	jmp	.LBB192_79
.LBB192_79:                             # %if.end188
	jmp	.LBB192_80
.LBB192_80:                             # %if.end189
	jmp	.LBB192_81
.LBB192_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB192_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB192_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB192_85
.LBB192_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB192_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB192_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB192_88
.LBB192_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB192_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB192_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB192_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB192_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB192_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB192_110
.LBB192_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB192_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB192_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB192_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB192_98
.LBB192_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB192_98:                             # %if.end239
	jmp	.LBB192_99
.LBB192_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB192_104
	jmp	.LBB192_100
.LBB192_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB192_102
	jmp	.LBB192_101
.LBB192_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB192_103
	jmp	.LBB192_108
.LBB192_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB192_109
.LBB192_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB192_109
.LBB192_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB192_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB192_107
.LBB192_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB192_107:                            # %if.end261
	jmp	.LBB192_109
.LBB192_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB192_109:                            # %sw.epilog
	jmp	.LBB192_110
.LBB192_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB192_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB192_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB192_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB192_119
.LBB192_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB192_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB192_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB192_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB192_118:                            # %if.end292
	jmp	.LBB192_119
.LBB192_119:                            # %if.end293
	jmp	.LBB192_120
.LBB192_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB192_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB192_123
.LBB192_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB192_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$359004564, -68(%rbp)   # imm = 0x1565F994
	jne	.LBB192_125
.LBB192_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_124
.Lfunc_end192:
	.size	encode_one_frame.156, .Lfunc_end192-encode_one_frame.156
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.157
.LCPI193_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.157,@function
init_frame.157:                         # @init_frame.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$819343351, -16(%rbp)   # imm = 0x30D62FF7
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB193_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_1
.LBB193_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB193_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB193_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB193_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB193_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB193_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB193_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB193_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB193_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB193_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB193_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB193_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB193_17
.LBB193_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB193_17:                             # %if.end32
	jmp	.LBB193_25
.LBB193_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB193_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB193_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB193_22
.LBB193_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB193_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB193_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB193_24:                             # %if.end50
	jmp	.LBB193_25
.LBB193_25:                             # %if.end51
	jmp	.LBB193_26
.LBB193_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB193_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB193_28:                             # %if.end62
	jmp	.LBB193_72
.LBB193_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB193_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB193_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB193_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB193_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_30
.LBB193_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB193_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB193_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB193_36:                             # %if.end102
	vmovsd	.LCPI193_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB193_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI193_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB193_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB193_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB193_41
.LBB193_40:                             # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB193_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB193_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB193_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB193_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB193_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB193_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB193_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB193_49
.LBB193_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB193_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB193_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB193_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB193_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB193_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB193_58
.LBB193_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB193_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB193_57
.LBB193_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB193_57:                             # %cond.end
.LBB193_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB193_66
.LBB193_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB193_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB193_65
.LBB193_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB193_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB193_64
.LBB193_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB193_64:                             # %cond.end209
.LBB193_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB193_66:                             # %if.end214
	jmp	.LBB193_67
.LBB193_67:                             # %if.end215
	jmp	.LBB193_71
.LBB193_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB193_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB193_70:                             # %if.end226
	jmp	.LBB193_71
.LBB193_71:                             # %if.end227
	jmp	.LBB193_72
.LBB193_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$819343351, -16(%rbp)   # imm = 0x30D62FF7
	jne	.LBB193_74
.LBB193_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_73
.Lfunc_end193:
	.size	init_frame.157, .Lfunc_end193-init_frame.157
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.158
.LCPI194_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.158,@function
init_field.158:                         # @init_field.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1652338333, -16(%rbp)  # imm = 0x627CAE9D
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB194_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB194_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB194_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB194_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB194_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB194_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB194_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB194_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB194_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB194_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB194_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB194_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB194_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB194_15
.LBB194_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB194_15:                             # %if.end38
	jmp	.LBB194_23
.LBB194_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB194_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB194_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB194_20
.LBB194_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB194_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB194_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB194_22:                             # %if.end56
	jmp	.LBB194_23
.LBB194_23:                             # %if.end57
	jmp	.LBB194_24
.LBB194_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB194_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB194_26:                             # %if.end66
	jmp	.LBB194_77
.LBB194_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB194_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB194_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB194_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB194_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB194_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_29
.LBB194_32:                             # %for.end
	jmp	.LBB194_38
.LBB194_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB194_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB194_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB194_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB194_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB194_34
.LBB194_37:                             # %for.end134
	jmp	.LBB194_38
.LBB194_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB194_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB194_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB194_41:                             # %if.end147
	vmovsd	.LCPI194_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB194_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI194_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB194_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB194_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI194_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB194_46
.LBB194_45:                             # %if.else174
	vmovsd	.LCPI194_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB194_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB194_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB194_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB194_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB194_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB194_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB194_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB194_54
.LBB194_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB194_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB194_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB194_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB194_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB194_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB194_63
.LBB194_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB194_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB194_62
.LBB194_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB194_62:                             # %cond.end
.LBB194_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB194_71
.LBB194_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB194_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB194_70
.LBB194_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB194_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB194_69
.LBB194_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB194_69:                             # %cond.end256
.LBB194_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB194_71:                             # %if.end261
	jmp	.LBB194_72
.LBB194_72:                             # %if.end262
	jmp	.LBB194_76
.LBB194_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB194_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB194_75:                             # %if.end273
	jmp	.LBB194_76
.LBB194_76:                             # %if.end274
	jmp	.LBB194_77
.LBB194_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1652338333, -16(%rbp)  # imm = 0x627CAE9D
	jne	.LBB194_79
.LBB194_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_78
.Lfunc_end194:
	.size	init_field.158, .Lfunc_end194-init_field.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.159
	.type	ReportFirstframe.159,@function
ReportFirstframe.159:                   # @ReportFirstframe.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1880928264, -12(%rbp)  # imm = 0x701CB008
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB195_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB195_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB195_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_5
.LBB195_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB195_5:                              # %if.end
	jmp	.LBB195_6
.LBB195_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1880928264, -12(%rbp)  # imm = 0x701CB008
	jne	.LBB195_8
.LBB195_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_7
.Lfunc_end195:
	.size	ReportFirstframe.159, .Lfunc_end195-ReportFirstframe.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.160
	.type	field_mode_buffer.160,@function
field_mode_buffer.160:                  # @field_mode_buffer.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1311193806, -12(%rbp)  # imm = 0x4E273ACE
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1311193806, -12(%rbp)  # imm = 0x4E273ACE
	jne	.LBB196_2
.LBB196_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_1
.Lfunc_end196:
	.size	field_mode_buffer.160, .Lfunc_end196-field_mode_buffer.160
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.161
	.type	field_mode_buffer.161,@function
field_mode_buffer.161:                  # @field_mode_buffer.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1026511789, -16(%rbp)  # imm = 0x3D2F53AD
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1026511789, -16(%rbp)  # imm = 0x3D2F53AD
	jne	.LBB197_2
.LBB197_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_1
.Lfunc_end197:
	.size	field_mode_buffer.161, .Lfunc_end197-field_mode_buffer.161
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.162      # -- Begin function code_a_picture.162
	.p2align	4, 0x90
	.type	code_a_picture.162,@function
code_a_picture.162:                     # @code_a_picture.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$919664618, -28(%rbp)   # imm = 0x36D0F7EA
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB198_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB198_8
.LBB198_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB198_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB198_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB198_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB198_7
.LBB198_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB198_7:                              # %land.end
.LBB198_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB198_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB198_10:                             # %if.end
	jmp	.LBB198_11
.LBB198_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB198_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB198_11 Depth=1
	jmp	.LBB198_13
.LBB198_13:                             # %while.cond15
                                        #   Parent Loop BB198_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB198_14
	jmp	.LBB198_15
.LBB198_14:                             # %while.body19
                                        #   in Loop: Header=BB198_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB198_13
.LBB198_15:                             # %while.end
                                        #   in Loop: Header=BB198_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB198_11
.LBB198_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB198_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB198_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB198_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB198_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB198_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB198_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB198_19
.LBB198_22:                             # %for.end
	jmp	.LBB198_23
.LBB198_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB198_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB198_25:                             # %if.end34
	cmpl	$919664618, -28(%rbp)   # imm = 0x36D0F7EA
	jne	.LBB198_27
.LBB198_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_26
.Lfunc_end198:
	.size	code_a_picture.162, .Lfunc_end198-code_a_picture.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.163
	.type	writeout_picture.163,@function
writeout_picture.163:                   # @writeout_picture.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1892783833, -28(%rbp)  # imm = 0x70D196D9
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB199_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB199_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB199_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB199_3:                              # %for.cond1
                                        #   Parent Loop BB199_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB199_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB199_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB199_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_3
.LBB199_6:                              # %for.end
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_7
.LBB199_7:                              # %for.inc10
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB199_1
.LBB199_8:                              # %for.end12
	cmpl	$1892783833, -28(%rbp)  # imm = 0x70D196D9
	jne	.LBB199_10
.LBB199_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_9
.Lfunc_end199:
	.size	writeout_picture.163, .Lfunc_end199-writeout_picture.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.164
	.type	copy_motion_vectors_MB.164,@function
copy_motion_vectors_MB.164:             # @copy_motion_vectors_MB.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1193668529, -20(%rbp)  # imm = 0x4725EFB1
	movl	$0, -8(%rbp)
.LBB200_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_3 Depth 2
                                        #       Child Loop BB200_5 Depth 3
                                        #         Child Loop BB200_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB200_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	$0, -12(%rbp)
.LBB200_3:                              # %for.cond1
                                        #   Parent Loop BB200_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB200_5 Depth 3
                                        #         Child Loop BB200_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB200_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB200_3 Depth=2
	movl	$0, -4(%rbp)
.LBB200_5:                              # %for.cond4
                                        #   Parent Loop BB200_1 Depth=1
                                        #     Parent Loop BB200_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB200_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB200_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB200_5 Depth=3
	movl	$0, -16(%rbp)
.LBB200_7:                              # %for.cond7
                                        #   Parent Loop BB200_1 Depth=1
                                        #     Parent Loop BB200_3 Depth=2
                                        #       Parent Loop BB200_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB200_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB200_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB200_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB200_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB200_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB200_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB200_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB200_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB200_12:                             # %if.end
                                        #   in Loop: Header=BB200_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB200_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB200_7
.LBB200_14:                             # %for.end
                                        #   in Loop: Header=BB200_5 Depth=3
	jmp	.LBB200_15
.LBB200_15:                             # %for.inc359
                                        #   in Loop: Header=BB200_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_5
.LBB200_16:                             # %for.end361
                                        #   in Loop: Header=BB200_3 Depth=2
	jmp	.LBB200_17
.LBB200_17:                             # %for.inc362
                                        #   in Loop: Header=BB200_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB200_3
.LBB200_18:                             # %for.end364
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_19
.LBB200_19:                             # %for.inc365
                                        #   in Loop: Header=BB200_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_1
.LBB200_20:                             # %for.end367
	cmpl	$1193668529, -20(%rbp)  # imm = 0x4725EFB1
	jne	.LBB200_22
.LBB200_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_21
.Lfunc_end200:
	.size	copy_motion_vectors_MB.164, .Lfunc_end200-copy_motion_vectors_MB.164
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.165
	.type	copy_motion_vectors_MB.165,@function
copy_motion_vectors_MB.165:             # @copy_motion_vectors_MB.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$362724274, -20(%rbp)   # imm = 0x159EBBB2
	movl	$0, -12(%rbp)
.LBB201_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_3 Depth 2
                                        #       Child Loop BB201_5 Depth 3
                                        #         Child Loop BB201_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB201_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	$0, -16(%rbp)
.LBB201_3:                              # %for.cond1
                                        #   Parent Loop BB201_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_5 Depth 3
                                        #         Child Loop BB201_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB201_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB201_3 Depth=2
	movl	$0, -4(%rbp)
.LBB201_5:                              # %for.cond4
                                        #   Parent Loop BB201_1 Depth=1
                                        #     Parent Loop BB201_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB201_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB201_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB201_5 Depth=3
	movl	$0, -8(%rbp)
.LBB201_7:                              # %for.cond7
                                        #   Parent Loop BB201_1 Depth=1
                                        #     Parent Loop BB201_3 Depth=2
                                        #       Parent Loop BB201_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB201_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB201_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB201_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB201_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB201_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB201_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB201_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB201_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB201_12:                             # %if.end
                                        #   in Loop: Header=BB201_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB201_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB201_7
.LBB201_14:                             # %for.end
                                        #   in Loop: Header=BB201_5 Depth=3
	jmp	.LBB201_15
.LBB201_15:                             # %for.inc359
                                        #   in Loop: Header=BB201_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_5
.LBB201_16:                             # %for.end361
                                        #   in Loop: Header=BB201_3 Depth=2
	jmp	.LBB201_17
.LBB201_17:                             # %for.inc362
                                        #   in Loop: Header=BB201_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_3
.LBB201_18:                             # %for.end364
                                        #   in Loop: Header=BB201_1 Depth=1
	jmp	.LBB201_19
.LBB201_19:                             # %for.inc365
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_1
.LBB201_20:                             # %for.end367
	cmpl	$362724274, -20(%rbp)   # imm = 0x159EBBB2
	jne	.LBB201_22
.LBB201_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_21
.Lfunc_end201:
	.size	copy_motion_vectors_MB.165, .Lfunc_end201-copy_motion_vectors_MB.165
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.166
	.type	writeout_picture.166,@function
writeout_picture.166:                   # @writeout_picture.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$237999081, -28(%rbp)   # imm = 0xE2F93E9
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB202_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB202_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB202_3:                              # %for.cond1
                                        #   Parent Loop BB202_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB202_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB202_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB202_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB202_3
.LBB202_6:                              # %for.end
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_7
.LBB202_7:                              # %for.inc10
                                        #   in Loop: Header=BB202_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB202_1
.LBB202_8:                              # %for.end12
	cmpl	$237999081, -28(%rbp)   # imm = 0xE2F93E9
	jne	.LBB202_10
.LBB202_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_9
.Lfunc_end202:
	.size	writeout_picture.166, .Lfunc_end202-writeout_picture.166
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.167
	.type	ReportFirstframe.167,@function
ReportFirstframe.167:                   # @ReportFirstframe.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$695527178, -16(%rbp)   # imm = 0x2974E70A
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB203_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB203_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB203_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_5
.LBB203_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB203_5:                              # %if.end
	jmp	.LBB203_6
.LBB203_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$695527178, -16(%rbp)   # imm = 0x2974E70A
	jne	.LBB203_8
.LBB203_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_7
.Lfunc_end203:
	.size	ReportFirstframe.167, .Lfunc_end203-ReportFirstframe.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.168
	.type	find_distortion.168,@function
find_distortion.168:                    # @find_distortion.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1775645276, -44(%rbp)  # imm = 0x69D6325C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB204_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB204_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB204_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB204_2 Depth=1
	movl	$0, -16(%rbp)
.LBB204_4:                              # %for.cond3
                                        #   Parent Loop BB204_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB204_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB204_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB204_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_4
.LBB204_7:                              # %for.end
                                        #   in Loop: Header=BB204_2 Depth=1
	jmp	.LBB204_8
.LBB204_8:                              # %for.inc17
                                        #   in Loop: Header=BB204_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_2
.LBB204_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB204_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB204_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB204_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB204_11 Depth=1
	movl	$0, -16(%rbp)
.LBB204_13:                             # %for.cond27
                                        #   Parent Loop BB204_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB204_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB204_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB204_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_13
.LBB204_16:                             # %for.end71
                                        #   in Loop: Header=BB204_11 Depth=1
	jmp	.LBB204_17
.LBB204_17:                             # %for.inc72
                                        #   in Loop: Header=BB204_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_11
.LBB204_18:                             # %for.end74
	jmp	.LBB204_19
.LBB204_19:                             # %if.end
	jmp	.LBB204_39
.LBB204_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB204_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB204_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB204_21 Depth=1
	movl	$0, -16(%rbp)
.LBB204_23:                             # %for.cond80
                                        #   Parent Loop BB204_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB204_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB204_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB204_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_23
.LBB204_26:                             # %for.end104
                                        #   in Loop: Header=BB204_21 Depth=1
	jmp	.LBB204_27
.LBB204_27:                             # %for.inc105
                                        #   in Loop: Header=BB204_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_21
.LBB204_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB204_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB204_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB204_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB204_30 Depth=1
	movl	$0, -16(%rbp)
.LBB204_32:                             # %for.cond117
                                        #   Parent Loop BB204_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB204_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB204_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB204_32
.LBB204_35:                             # %for.end163
                                        #   in Loop: Header=BB204_30 Depth=1
	jmp	.LBB204_36
.LBB204_36:                             # %for.inc164
                                        #   in Loop: Header=BB204_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB204_30
.LBB204_37:                             # %for.end166
	jmp	.LBB204_38
.LBB204_38:                             # %if.end167
	jmp	.LBB204_39
.LBB204_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1775645276, -44(%rbp)  # imm = 0x69D6325C
	jne	.LBB204_41
.LBB204_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_40
.Lfunc_end204:
	.size	find_distortion.168, .Lfunc_end204-find_distortion.168
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.169       # -- Begin function MbAffPostProc.169
	.p2align	4, 0x90
	.type	MbAffPostProc.169,@function
MbAffPostProc.169:                      # @MbAffPostProc.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1558852237, -44(%rbp)  # imm = 0x5CEA328D
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB205_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB205_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_5 Depth 2
                                        #       Child Loop BB205_7 Depth 3
                                        #     Child Loop BB205_13 Depth 2
                                        #       Child Loop BB205_15 Depth 3
                                        #     Child Loop BB205_21 Depth 2
                                        #       Child Loop BB205_23 Depth 3
                                        #         Child Loop BB205_25 Depth 4
                                        #       Child Loop BB205_31 Depth 3
                                        #         Child Loop BB205_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB205_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB205_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB205_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB205_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB205_5:                              # %for.cond5
                                        #   Parent Loop BB205_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB205_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB205_5 Depth=2
	movl	$0, -4(%rbp)
.LBB205_7:                              # %for.cond8
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB205_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB205_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB205_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_7
.LBB205_10:                             # %for.end
                                        #   in Loop: Header=BB205_5 Depth=2
	jmp	.LBB205_11
.LBB205_11:                             # %for.inc20
                                        #   in Loop: Header=BB205_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_5
.LBB205_12:                             # %for.end22
                                        #   in Loop: Header=BB205_2 Depth=1
	movl	$0, -8(%rbp)
.LBB205_13:                             # %for.cond23
                                        #   Parent Loop BB205_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB205_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB205_13 Depth=2
	movl	$0, -4(%rbp)
.LBB205_15:                             # %for.cond26
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB205_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB205_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB205_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_15
.LBB205_18:                             # %for.end54
                                        #   in Loop: Header=BB205_13 Depth=2
	jmp	.LBB205_19
.LBB205_19:                             # %for.inc55
                                        #   in Loop: Header=BB205_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_13
.LBB205_20:                             # %for.end57
                                        #   in Loop: Header=BB205_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB205_21:                             # %for.cond61
                                        #   Parent Loop BB205_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_23 Depth 3
                                        #         Child Loop BB205_25 Depth 4
                                        #       Child Loop BB205_31 Depth 3
                                        #         Child Loop BB205_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB205_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB205_21 Depth=2
	movl	$0, -8(%rbp)
.LBB205_23:                             # %for.cond64
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB205_23 Depth=3
	movl	$0, -4(%rbp)
.LBB205_25:                             # %for.cond69
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_21 Depth=2
                                        #       Parent Loop BB205_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB205_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB205_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB205_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_25
.LBB205_28:                             # %for.end87
                                        #   in Loop: Header=BB205_23 Depth=3
	jmp	.LBB205_29
.LBB205_29:                             # %for.inc88
                                        #   in Loop: Header=BB205_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_23
.LBB205_30:                             # %for.end90
                                        #   in Loop: Header=BB205_21 Depth=2
	movl	$0, -8(%rbp)
.LBB205_31:                             # %for.cond91
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB205_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB205_31 Depth=3
	movl	$0, -4(%rbp)
.LBB205_33:                             # %for.cond95
                                        #   Parent Loop BB205_2 Depth=1
                                        #     Parent Loop BB205_21 Depth=2
                                        #       Parent Loop BB205_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB205_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB205_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB205_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_33
.LBB205_36:                             # %for.end130
                                        #   in Loop: Header=BB205_31 Depth=3
	jmp	.LBB205_37
.LBB205_37:                             # %for.inc131
                                        #   in Loop: Header=BB205_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_31
.LBB205_38:                             # %for.end133
                                        #   in Loop: Header=BB205_21 Depth=2
	jmp	.LBB205_39
.LBB205_39:                             # %for.inc134
                                        #   in Loop: Header=BB205_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB205_21
.LBB205_40:                             # %for.end136
                                        #   in Loop: Header=BB205_2 Depth=1
	jmp	.LBB205_41
.LBB205_41:                             # %if.end
                                        #   in Loop: Header=BB205_2 Depth=1
	jmp	.LBB205_42
.LBB205_42:                             # %for.inc137
                                        #   in Loop: Header=BB205_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB205_2
.LBB205_43:                             # %for.end139
	jmp	.LBB205_67
.LBB205_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB205_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_48 Depth 2
                                        #       Child Loop BB205_50 Depth 3
                                        #     Child Loop BB205_56 Depth 2
                                        #       Child Loop BB205_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB205_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB205_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB205_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB205_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB205_48:                             # %for.cond149
                                        #   Parent Loop BB205_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB205_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB205_48 Depth=2
	movl	$0, -4(%rbp)
.LBB205_50:                             # %for.cond152
                                        #   Parent Loop BB205_45 Depth=1
                                        #     Parent Loop BB205_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB205_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB205_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB205_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_50
.LBB205_53:                             # %for.end167
                                        #   in Loop: Header=BB205_48 Depth=2
	jmp	.LBB205_54
.LBB205_54:                             # %for.inc168
                                        #   in Loop: Header=BB205_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_48
.LBB205_55:                             # %for.end170
                                        #   in Loop: Header=BB205_45 Depth=1
	movl	$0, -8(%rbp)
.LBB205_56:                             # %for.cond171
                                        #   Parent Loop BB205_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB205_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB205_56 Depth=2
	movl	$0, -4(%rbp)
.LBB205_58:                             # %for.cond174
                                        #   Parent Loop BB205_45 Depth=1
                                        #     Parent Loop BB205_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB205_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB205_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB205_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_58
.LBB205_61:                             # %for.end203
                                        #   in Loop: Header=BB205_56 Depth=2
	jmp	.LBB205_62
.LBB205_62:                             # %for.inc204
                                        #   in Loop: Header=BB205_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_56
.LBB205_63:                             # %for.end206
                                        #   in Loop: Header=BB205_45 Depth=1
	jmp	.LBB205_64
.LBB205_64:                             # %if.end207
                                        #   in Loop: Header=BB205_45 Depth=1
	jmp	.LBB205_65
.LBB205_65:                             # %for.inc208
                                        #   in Loop: Header=BB205_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB205_45
.LBB205_66:                             # %for.end210
	jmp	.LBB205_67
.LBB205_67:                             # %if.end211
	cmpl	$1558852237, -44(%rbp)  # imm = 0x5CEA328D
	jne	.LBB205_69
.LBB205_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_68
.Lfunc_end205:
	.size	MbAffPostProc.169, .Lfunc_end205-MbAffPostProc.169
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.170
.LCPI206_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.170,@function
init_field.170:                         # @init_field.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2083660985, -16(%rbp)  # imm = 0x7C3224B9
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB206_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB206_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB206_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB206_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB206_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB206_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB206_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB206_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB206_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB206_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB206_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB206_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB206_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB206_15
.LBB206_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB206_15:                             # %if.end38
	jmp	.LBB206_23
.LBB206_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB206_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB206_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB206_20
.LBB206_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB206_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB206_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB206_22:                             # %if.end56
	jmp	.LBB206_23
.LBB206_23:                             # %if.end57
	jmp	.LBB206_24
.LBB206_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB206_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB206_26:                             # %if.end66
	jmp	.LBB206_77
.LBB206_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB206_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB206_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB206_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB206_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB206_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_29
.LBB206_32:                             # %for.end
	jmp	.LBB206_38
.LBB206_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB206_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB206_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB206_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB206_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_34
.LBB206_37:                             # %for.end134
	jmp	.LBB206_38
.LBB206_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB206_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB206_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB206_41:                             # %if.end147
	vmovsd	.LCPI206_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB206_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI206_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB206_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB206_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI206_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB206_46
.LBB206_45:                             # %if.else174
	vmovsd	.LCPI206_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB206_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB206_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB206_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB206_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB206_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB206_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB206_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB206_54
.LBB206_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB206_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB206_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB206_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB206_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB206_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB206_63
.LBB206_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB206_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB206_62
.LBB206_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB206_62:                             # %cond.end
.LBB206_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB206_71
.LBB206_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB206_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB206_70
.LBB206_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB206_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB206_69
.LBB206_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB206_69:                             # %cond.end256
.LBB206_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB206_71:                             # %if.end261
	jmp	.LBB206_72
.LBB206_72:                             # %if.end262
	jmp	.LBB206_76
.LBB206_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB206_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB206_75:                             # %if.end273
	jmp	.LBB206_76
.LBB206_76:                             # %if.end274
	jmp	.LBB206_77
.LBB206_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$2083660985, -16(%rbp)  # imm = 0x7C3224B9
	jne	.LBB206_79
.LBB206_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_78
.Lfunc_end206:
	.size	init_field.170, .Lfunc_end206-init_field.170
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.171
	.type	GenerateFullPelRepresentation.171,@function
GenerateFullPelRepresentation.171:      # @GenerateFullPelRepresentation.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1810523930, -44(%rbp)  # imm = 0x6BEA671A
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB207_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB207_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	$0, -28(%rbp)
.LBB207_3:                              # %for.cond1
                                        #   Parent Loop BB207_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB207_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB207_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB207_3
.LBB207_6:                              # %for.end
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_7
.LBB207_7:                              # %for.inc5
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB207_1
.LBB207_8:                              # %for.end7
	cmpl	$1810523930, -44(%rbp)  # imm = 0x6BEA671A
	jne	.LBB207_10
.LBB207_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_9
.Lfunc_end207:
	.size	GenerateFullPelRepresentation.171, .Lfunc_end207-GenerateFullPelRepresentation.171
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.172
	.type	frame_mode_buffer.172,@function
frame_mode_buffer.172:                  # @frame_mode_buffer.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$241203732, -16(%rbp)   # imm = 0xE607A14
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB208_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB208_3
.LBB208_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB208_3:                              # %if.end
	cmpl	$241203732, -16(%rbp)   # imm = 0xE607A14
	jne	.LBB208_5
.LBB208_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_4
.Lfunc_end208:
	.size	frame_mode_buffer.172, .Lfunc_end208-frame_mode_buffer.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.173
	.type	frame_mode_buffer.173,@function
frame_mode_buffer.173:                  # @frame_mode_buffer.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1301740068, -12(%rbp)  # imm = 0x4D96FA24
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB209_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB209_3
.LBB209_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB209_3:                              # %if.end
	cmpl	$1301740068, -12(%rbp)  # imm = 0x4D96FA24
	jne	.LBB209_5
.LBB209_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_4
.Lfunc_end209:
	.size	frame_mode_buffer.173, .Lfunc_end209-frame_mode_buffer.173
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.174
.LCPI210_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.174,@function
find_snr.174:                           # @find_snr.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1094598219, -48(%rbp)  # imm = 0x413E3E4B
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB210_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB210_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB210_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB210_2 Depth=1
	movl	$0, -4(%rbp)
.LBB210_4:                              # %for.cond8
                                        #   Parent Loop BB210_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB210_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB210_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB210_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_4
.LBB210_7:                              # %for.end
                                        #   in Loop: Header=BB210_2 Depth=1
	jmp	.LBB210_8
.LBB210_8:                              # %for.inc22
                                        #   in Loop: Header=BB210_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_2
.LBB210_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB210_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB210_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB210_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB210_11 Depth=1
	movl	$0, -4(%rbp)
.LBB210_13:                             # %for.cond33
                                        #   Parent Loop BB210_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB210_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB210_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB210_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_13
.LBB210_16:                             # %for.end76
                                        #   in Loop: Header=BB210_11 Depth=1
	jmp	.LBB210_17
.LBB210_17:                             # %for.inc77
                                        #   in Loop: Header=BB210_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_11
.LBB210_18:                             # %for.end79
	jmp	.LBB210_19
.LBB210_19:                             # %if.end
	jmp	.LBB210_41
.LBB210_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB210_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB210_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB210_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB210_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB210_23 Depth=1
	movl	$0, -4(%rbp)
.LBB210_25:                             # %for.cond89
                                        #   Parent Loop BB210_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB210_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB210_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB210_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_25
.LBB210_28:                             # %for.end112
                                        #   in Loop: Header=BB210_23 Depth=1
	jmp	.LBB210_29
.LBB210_29:                             # %for.inc113
                                        #   in Loop: Header=BB210_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_23
.LBB210_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB210_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB210_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB210_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB210_32 Depth=1
	movl	$0, -4(%rbp)
.LBB210_34:                             # %for.cond125
                                        #   Parent Loop BB210_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB210_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB210_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB210_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_34
.LBB210_37:                             # %for.end169
                                        #   in Loop: Header=BB210_32 Depth=1
	jmp	.LBB210_38
.LBB210_38:                             # %for.inc170
                                        #   in Loop: Header=BB210_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_32
.LBB210_39:                             # %for.end172
	jmp	.LBB210_40
.LBB210_40:                             # %if.end173
	jmp	.LBB210_41
.LBB210_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB210_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB210_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB210_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB210_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB210_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB210_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB210_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI210_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB210_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI210_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI210_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB210_51
.LBB210_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB210_51:                             # %if.end219
	jmp	.LBB210_52
.LBB210_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB210_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB210_55
.LBB210_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB210_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB210_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB210_61
.LBB210_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB210_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB210_60
.LBB210_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB210_60:                             # %if.end394
	jmp	.LBB210_61
.LBB210_61:                             # %if.end395
	cmpl	$1094598219, -48(%rbp)  # imm = 0x413E3E4B
	jne	.LBB210_63
.LBB210_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_62
.Lfunc_end210:
	.size	find_snr.174, .Lfunc_end210-find_snr.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.175
	.type	find_distortion.175,@function
find_distortion.175:                    # @find_distortion.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$601594436, -44(%rbp)   # imm = 0x23DB9A44
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB211_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB211_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB211_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB211_2 Depth=1
	movl	$0, -16(%rbp)
.LBB211_4:                              # %for.cond3
                                        #   Parent Loop BB211_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB211_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB211_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB211_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_4
.LBB211_7:                              # %for.end
                                        #   in Loop: Header=BB211_2 Depth=1
	jmp	.LBB211_8
.LBB211_8:                              # %for.inc17
                                        #   in Loop: Header=BB211_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_2
.LBB211_9:                              # %for.end19
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB211_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB211_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB211_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB211_11 Depth=1
	movl	$0, -16(%rbp)
.LBB211_13:                             # %for.cond27
                                        #   Parent Loop BB211_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB211_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB211_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB211_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_13
.LBB211_16:                             # %for.end71
                                        #   in Loop: Header=BB211_11 Depth=1
	jmp	.LBB211_17
.LBB211_17:                             # %for.inc72
                                        #   in Loop: Header=BB211_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_11
.LBB211_18:                             # %for.end74
	jmp	.LBB211_19
.LBB211_19:                             # %if.end
	jmp	.LBB211_39
.LBB211_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB211_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB211_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB211_21 Depth=1
	movl	$0, -16(%rbp)
.LBB211_23:                             # %for.cond80
                                        #   Parent Loop BB211_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB211_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB211_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB211_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_23
.LBB211_26:                             # %for.end104
                                        #   in Loop: Header=BB211_21 Depth=1
	jmp	.LBB211_27
.LBB211_27:                             # %for.inc105
                                        #   in Loop: Header=BB211_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_21
.LBB211_28:                             # %for.end107
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB211_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB211_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB211_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB211_30 Depth=1
	movl	$0, -16(%rbp)
.LBB211_32:                             # %for.cond117
                                        #   Parent Loop BB211_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB211_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB211_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB211_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_32
.LBB211_35:                             # %for.end163
                                        #   in Loop: Header=BB211_30 Depth=1
	jmp	.LBB211_36
.LBB211_36:                             # %for.inc164
                                        #   in Loop: Header=BB211_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_30
.LBB211_37:                             # %for.end166
	jmp	.LBB211_38
.LBB211_38:                             # %if.end167
	jmp	.LBB211_39
.LBB211_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$601594436, -44(%rbp)   # imm = 0x23DB9A44
	jne	.LBB211_41
.LBB211_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_40
.Lfunc_end211:
	.size	find_distortion.175, .Lfunc_end211-find_distortion.175
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.176
	.type	copy_motion_vectors_MB.176,@function
copy_motion_vectors_MB.176:             # @copy_motion_vectors_MB.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$249821645, -20(%rbp)   # imm = 0xEE3F9CD
	movl	$0, -8(%rbp)
.LBB212_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB212_3 Depth 2
                                        #       Child Loop BB212_5 Depth 3
                                        #         Child Loop BB212_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB212_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB212_1 Depth=1
	movl	$0, -12(%rbp)
.LBB212_3:                              # %for.cond1
                                        #   Parent Loop BB212_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB212_5 Depth 3
                                        #         Child Loop BB212_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB212_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB212_3 Depth=2
	movl	$0, -4(%rbp)
.LBB212_5:                              # %for.cond4
                                        #   Parent Loop BB212_1 Depth=1
                                        #     Parent Loop BB212_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB212_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB212_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB212_5 Depth=3
	movl	$0, -16(%rbp)
.LBB212_7:                              # %for.cond7
                                        #   Parent Loop BB212_1 Depth=1
                                        #     Parent Loop BB212_3 Depth=2
                                        #       Parent Loop BB212_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB212_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB212_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB212_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB212_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB212_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB212_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB212_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB212_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB212_12:                             # %if.end
                                        #   in Loop: Header=BB212_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB212_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB212_7
.LBB212_14:                             # %for.end
                                        #   in Loop: Header=BB212_5 Depth=3
	jmp	.LBB212_15
.LBB212_15:                             # %for.inc359
                                        #   in Loop: Header=BB212_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB212_5
.LBB212_16:                             # %for.end361
                                        #   in Loop: Header=BB212_3 Depth=2
	jmp	.LBB212_17
.LBB212_17:                             # %for.inc362
                                        #   in Loop: Header=BB212_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB212_3
.LBB212_18:                             # %for.end364
                                        #   in Loop: Header=BB212_1 Depth=1
	jmp	.LBB212_19
.LBB212_19:                             # %for.inc365
                                        #   in Loop: Header=BB212_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB212_1
.LBB212_20:                             # %for.end367
	cmpl	$249821645, -20(%rbp)   # imm = 0xEE3F9CD
	jne	.LBB212_22
.LBB212_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_21
.Lfunc_end212:
	.size	copy_motion_vectors_MB.176, .Lfunc_end212-copy_motion_vectors_MB.176
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.177
	.type	find_distortion.177,@function
find_distortion.177:                    # @find_distortion.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$351537875, -44(%rbp)   # imm = 0x14F40AD3
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB213_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB213_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB213_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB213_2 Depth=1
	movl	$0, -12(%rbp)
.LBB213_4:                              # %for.cond3
                                        #   Parent Loop BB213_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB213_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB213_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB213_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_4
.LBB213_7:                              # %for.end
                                        #   in Loop: Header=BB213_2 Depth=1
	jmp	.LBB213_8
.LBB213_8:                              # %for.inc17
                                        #   in Loop: Header=BB213_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB213_2
.LBB213_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB213_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB213_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB213_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB213_11 Depth=1
	movl	$0, -12(%rbp)
.LBB213_13:                             # %for.cond27
                                        #   Parent Loop BB213_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB213_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB213_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB213_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_13
.LBB213_16:                             # %for.end71
                                        #   in Loop: Header=BB213_11 Depth=1
	jmp	.LBB213_17
.LBB213_17:                             # %for.inc72
                                        #   in Loop: Header=BB213_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB213_11
.LBB213_18:                             # %for.end74
	jmp	.LBB213_19
.LBB213_19:                             # %if.end
	jmp	.LBB213_39
.LBB213_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB213_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB213_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB213_21 Depth=1
	movl	$0, -12(%rbp)
.LBB213_23:                             # %for.cond80
                                        #   Parent Loop BB213_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB213_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB213_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB213_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_23
.LBB213_26:                             # %for.end104
                                        #   in Loop: Header=BB213_21 Depth=1
	jmp	.LBB213_27
.LBB213_27:                             # %for.inc105
                                        #   in Loop: Header=BB213_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB213_21
.LBB213_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB213_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB213_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB213_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB213_30 Depth=1
	movl	$0, -12(%rbp)
.LBB213_32:                             # %for.cond117
                                        #   Parent Loop BB213_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB213_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB213_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB213_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_32
.LBB213_35:                             # %for.end163
                                        #   in Loop: Header=BB213_30 Depth=1
	jmp	.LBB213_36
.LBB213_36:                             # %for.inc164
                                        #   in Loop: Header=BB213_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB213_30
.LBB213_37:                             # %for.end166
	jmp	.LBB213_38
.LBB213_38:                             # %if.end167
	jmp	.LBB213_39
.LBB213_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$351537875, -44(%rbp)   # imm = 0x14F40AD3
	jne	.LBB213_41
.LBB213_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_40
.Lfunc_end213:
	.size	find_distortion.177, .Lfunc_end213-find_distortion.177
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.178
	.type	field_mode_buffer.178,@function
field_mode_buffer.178:                  # @field_mode_buffer.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2139853802, -16(%rbp)  # imm = 0x7F8B93EA
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$2139853802, -16(%rbp)  # imm = 0x7F8B93EA
	jne	.LBB214_2
.LBB214_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_1
.Lfunc_end214:
	.size	field_mode_buffer.178, .Lfunc_end214-field_mode_buffer.178
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.179
	.type	find_distortion.179,@function
find_distortion.179:                    # @find_distortion.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1961617767, -44(%rbp)  # imm = 0x74EBE967
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB215_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB215_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB215_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB215_2 Depth=1
	movl	$0, -12(%rbp)
.LBB215_4:                              # %for.cond3
                                        #   Parent Loop BB215_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB215_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB215_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB215_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_4
.LBB215_7:                              # %for.end
                                        #   in Loop: Header=BB215_2 Depth=1
	jmp	.LBB215_8
.LBB215_8:                              # %for.inc17
                                        #   in Loop: Header=BB215_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB215_2
.LBB215_9:                              # %for.end19
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB215_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB215_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB215_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB215_11 Depth=1
	movl	$0, -12(%rbp)
.LBB215_13:                             # %for.cond27
                                        #   Parent Loop BB215_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB215_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB215_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB215_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_13
.LBB215_16:                             # %for.end71
                                        #   in Loop: Header=BB215_11 Depth=1
	jmp	.LBB215_17
.LBB215_17:                             # %for.inc72
                                        #   in Loop: Header=BB215_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB215_11
.LBB215_18:                             # %for.end74
	jmp	.LBB215_19
.LBB215_19:                             # %if.end
	jmp	.LBB215_39
.LBB215_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB215_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB215_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB215_21 Depth=1
	movl	$0, -12(%rbp)
.LBB215_23:                             # %for.cond80
                                        #   Parent Loop BB215_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB215_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB215_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB215_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_23
.LBB215_26:                             # %for.end104
                                        #   in Loop: Header=BB215_21 Depth=1
	jmp	.LBB215_27
.LBB215_27:                             # %for.inc105
                                        #   in Loop: Header=BB215_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB215_21
.LBB215_28:                             # %for.end107
	movq	$0, -40(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB215_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB215_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB215_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB215_30 Depth=1
	movl	$0, -12(%rbp)
.LBB215_32:                             # %for.cond117
                                        #   Parent Loop BB215_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB215_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB215_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB215_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_32
.LBB215_35:                             # %for.end163
                                        #   in Loop: Header=BB215_30 Depth=1
	jmp	.LBB215_36
.LBB215_36:                             # %for.inc164
                                        #   in Loop: Header=BB215_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB215_30
.LBB215_37:                             # %for.end166
	jmp	.LBB215_38
.LBB215_38:                             # %if.end167
	jmp	.LBB215_39
.LBB215_39:                             # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1961617767, -44(%rbp)  # imm = 0x74EBE967
	jne	.LBB215_41
.LBB215_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_40
.Lfunc_end215:
	.size	find_distortion.179, .Lfunc_end215-find_distortion.179
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.180
	.type	ReadOneFrame.180,@function
ReadOneFrame.180:                       # @ReadOneFrame.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1225834648, -76(%rbp)  # imm = 0x4910C098
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -40(%rbp)
	movl	%r9d, -36(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-40(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-72(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB216_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB216_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB216_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB216_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB216_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB216_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB216_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB216_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB216_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB216_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB216_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB216_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB216_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB216_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB216_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB216_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB216_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB216_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB216_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB216_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB216_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB216_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB216_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB216_24:                             # %if.end85
	jmp	.LBB216_25
.LBB216_25:                             # %if.end86
	jmp	.LBB216_27
.LBB216_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB216_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1225834648, -76(%rbp)  # imm = 0x4910C098
	jne	.LBB216_29
.LBB216_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_28
.Lfunc_end216:
	.size	ReadOneFrame.180, .Lfunc_end216-ReadOneFrame.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.181
	.type	GenerateFullPelRepresentation.181,@function
GenerateFullPelRepresentation.181:      # @GenerateFullPelRepresentation.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1627789707, -44(%rbp)  # imm = 0x6106198B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB217_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB217_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB217_1 Depth=1
	movl	$0, -32(%rbp)
.LBB217_3:                              # %for.cond1
                                        #   Parent Loop BB217_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB217_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB217_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB217_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB217_3
.LBB217_6:                              # %for.end
                                        #   in Loop: Header=BB217_1 Depth=1
	jmp	.LBB217_7
.LBB217_7:                              # %for.inc5
                                        #   in Loop: Header=BB217_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB217_1
.LBB217_8:                              # %for.end7
	cmpl	$1627789707, -44(%rbp)  # imm = 0x6106198B
	jne	.LBB217_10
.LBB217_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_9
.Lfunc_end217:
	.size	GenerateFullPelRepresentation.181, .Lfunc_end217-GenerateFullPelRepresentation.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.182
	.type	find_distortion.182,@function
find_distortion.182:                    # @find_distortion.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$608744764, -44(%rbp)   # imm = 0x2448B53C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB218_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB218_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB218_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB218_2 Depth=1
	movl	$0, -12(%rbp)
.LBB218_4:                              # %for.cond3
                                        #   Parent Loop BB218_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB218_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB218_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB218_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_4
.LBB218_7:                              # %for.end
                                        #   in Loop: Header=BB218_2 Depth=1
	jmp	.LBB218_8
.LBB218_8:                              # %for.inc17
                                        #   in Loop: Header=BB218_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB218_2
.LBB218_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB218_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB218_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB218_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB218_11 Depth=1
	movl	$0, -12(%rbp)
.LBB218_13:                             # %for.cond27
                                        #   Parent Loop BB218_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB218_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB218_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB218_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_13
.LBB218_16:                             # %for.end71
                                        #   in Loop: Header=BB218_11 Depth=1
	jmp	.LBB218_17
.LBB218_17:                             # %for.inc72
                                        #   in Loop: Header=BB218_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB218_11
.LBB218_18:                             # %for.end74
	jmp	.LBB218_19
.LBB218_19:                             # %if.end
	jmp	.LBB218_39
.LBB218_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB218_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB218_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB218_21 Depth=1
	movl	$0, -12(%rbp)
.LBB218_23:                             # %for.cond80
                                        #   Parent Loop BB218_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB218_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB218_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB218_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_23
.LBB218_26:                             # %for.end104
                                        #   in Loop: Header=BB218_21 Depth=1
	jmp	.LBB218_27
.LBB218_27:                             # %for.inc105
                                        #   in Loop: Header=BB218_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB218_21
.LBB218_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB218_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB218_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB218_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB218_30 Depth=1
	movl	$0, -12(%rbp)
.LBB218_32:                             # %for.cond117
                                        #   Parent Loop BB218_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB218_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB218_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB218_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_32
.LBB218_35:                             # %for.end163
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_36
.LBB218_36:                             # %for.inc164
                                        #   in Loop: Header=BB218_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB218_30
.LBB218_37:                             # %for.end166
	jmp	.LBB218_38
.LBB218_38:                             # %if.end167
	jmp	.LBB218_39
.LBB218_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$608744764, -44(%rbp)   # imm = 0x2448B53C
	jne	.LBB218_41
.LBB218_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_40
.Lfunc_end218:
	.size	find_distortion.182, .Lfunc_end218-find_distortion.182
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.183  # -- Begin function UnifiedOneForthPix.183
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.183,@function
UnifiedOneForthPix.183:                 # @UnifiedOneForthPix.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$124106300, -108(%rbp)  # imm = 0x765B63C
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB219_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB219_3
.LBB219_2:                              # %if.then
	jmp	.LBB219_266
.LBB219_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB219_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB219_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB219_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB219_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB219_11
.LBB219_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB219_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB219_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB219_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB219_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB219_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB219_14:                             # %for.cond49
                                        #   Parent Loop BB219_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB219_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB219_18
.LBB219_17:                             # %cond.false
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-48(%rbp), %eax
.LBB219_18:                             # %cond.end
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_24
.LBB219_20:                             # %cond.false63
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB219_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB219_23
.LBB219_22:                             # %cond.false71
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-48(%rbp), %eax
.LBB219_23:                             # %cond.end72
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_24:                             # %cond.end74
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB219_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB219_27
.LBB219_26:                             # %cond.false83
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edx
.LBB219_27:                             # %cond.end84
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB219_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB219_33
.LBB219_29:                             # %cond.false89
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB219_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB219_32
.LBB219_31:                             # %cond.false97
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edx
.LBB219_32:                             # %cond.end98
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_33:                             # %cond.end100
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB219_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_36
.LBB219_35:                             # %cond.false115
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB219_36:                             # %cond.end117
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB219_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB219_42
.LBB219_38:                             # %cond.false122
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB219_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_41
.LBB219_40:                             # %cond.false131
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB219_41:                             # %cond.end133
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_42:                             # %cond.end135
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB219_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_45
.LBB219_44:                             # %cond.false152
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB219_45:                             # %cond.end154
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB219_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB219_51
.LBB219_47:                             # %cond.false159
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB219_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_50
.LBB219_49:                             # %cond.false168
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB219_50:                             # %cond.end170
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_51:                             # %cond.end172
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB219_54
.LBB219_53:                             # %cond.false187
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB219_54:                             # %cond.end189
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB219_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB219_60
.LBB219_56:                             # %cond.false194
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB219_59
.LBB219_58:                             # %cond.false203
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB219_59:                             # %cond.end205
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_60:                             # %cond.end207
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB219_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_63
.LBB219_62:                             # %cond.false225
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB219_63:                             # %cond.end227
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB219_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB219_69
.LBB219_65:                             # %cond.false232
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB219_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB219_68
.LBB219_67:                             # %cond.false241
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB219_68:                             # %cond.end243
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_69:                             # %cond.end245
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB219_72
.LBB219_71:                             # %cond.false260
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB219_72:                             # %cond.end262
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB219_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB219_78
.LBB219_74:                             # %cond.false267
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB219_77
.LBB219_76:                             # %cond.false276
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB219_77:                             # %cond.end278
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_78:                             # %cond.end280
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB219_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB219_81
.LBB219_80:                             # %cond.false297
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB219_81:                             # %cond.end298
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB219_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB219_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB219_87
.LBB219_83:                             # %cond.false303
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB219_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB219_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB219_86
.LBB219_85:                             # %cond.false311
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB219_86:                             # %cond.end312
                                        #   in Loop: Header=BB219_14 Depth=2
.LBB219_87:                             # %cond.end314
                                        #   in Loop: Header=BB219_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB219_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB219_14
.LBB219_89:                             # %for.end
                                        #   in Loop: Header=BB219_12 Depth=1
	jmp	.LBB219_90
.LBB219_90:                             # %for.inc336
                                        #   in Loop: Header=BB219_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB219_12
.LBB219_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB219_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB219_92 Depth=1
	movl	$0, -48(%rbp)
.LBB219_94:                             # %for.cond346
                                        #   Parent Loop BB219_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB219_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB219_98
.LBB219_97:                             # %cond.false364
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB219_98:                             # %cond.end366
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB219_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB219_101
.LBB219_100:                            # %cond.false378
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB219_101:                            # %cond.end380
                                        #   in Loop: Header=BB219_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB219_104
.LBB219_103:                            # %cond.false390
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB219_104:                            # %cond.end392
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB219_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB219_107
.LBB219_106:                            # %cond.false405
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB219_107:                            # %cond.end407
                                        #   in Loop: Header=BB219_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB219_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB219_110
.LBB219_109:                            # %cond.false417
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB219_110:                            # %cond.end419
                                        #   in Loop: Header=BB219_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB219_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_113
.LBB219_112:                            # %cond.false442
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB219_113:                            # %cond.end449
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_119
.LBB219_115:                            # %cond.false454
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB219_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_118
.LBB219_117:                            # %cond.false466
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB219_118:                            # %cond.end473
                                        #   in Loop: Header=BB219_94 Depth=2
.LBB219_119:                            # %cond.end475
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB219_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_122
.LBB219_121:                            # %cond.false490
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB219_122:                            # %cond.end493
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB219_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB219_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_128
.LBB219_124:                            # %cond.false498
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB219_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB219_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_127
.LBB219_126:                            # %cond.false506
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB219_127:                            # %cond.end509
                                        #   in Loop: Header=BB219_94 Depth=2
.LBB219_128:                            # %cond.end511
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB219_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB219_94
.LBB219_130:                            # %for.end516
                                        #   in Loop: Header=BB219_92 Depth=1
	jmp	.LBB219_131
.LBB219_131:                            # %for.inc517
                                        #   in Loop: Header=BB219_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB219_92
.LBB219_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB219_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB219_133 Depth=1
	movl	$0, -44(%rbp)
.LBB219_135:                            # %for.cond533
                                        #   Parent Loop BB219_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_139
.LBB219_138:                            # %cond.false553
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB219_139:                            # %cond.end555
                                        #   in Loop: Header=BB219_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_145
.LBB219_141:                            # %cond.false567
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_144
.LBB219_143:                            # %cond.false579
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB219_144:                            # %cond.end581
                                        #   in Loop: Header=BB219_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_145:                            # %cond.end589
                                        #   in Loop: Header=BB219_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB219_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_157
.LBB219_147:                            # %cond.false594
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_150
.LBB219_149:                            # %cond.false607
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB219_150:                            # %cond.end609
                                        #   in Loop: Header=BB219_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_156
.LBB219_152:                            # %cond.false621
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_155
.LBB219_154:                            # %cond.false633
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB219_155:                            # %cond.end635
                                        #   in Loop: Header=BB219_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_156:                            # %cond.end643
                                        #   in Loop: Header=BB219_135 Depth=2
.LBB219_157:                            # %cond.end645
                                        #   in Loop: Header=BB219_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB219_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB219_135
.LBB219_159:                            # %for.end650
                                        #   in Loop: Header=BB219_133 Depth=1
	jmp	.LBB219_160
.LBB219_160:                            # %for.inc651
                                        #   in Loop: Header=BB219_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB219_133
.LBB219_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB219_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB219_162 Depth=1
	movl	$0, -48(%rbp)
.LBB219_164:                            # %for.cond659
                                        #   Parent Loop BB219_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB219_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_169
.LBB219_168:                            # %cond.false681
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_169:                            # %cond.end683
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_175
.LBB219_171:                            # %cond.false696
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_174
.LBB219_173:                            # %cond.false707
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_174:                            # %cond.end709
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_175:                            # %cond.end718
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_187
.LBB219_177:                            # %cond.false723
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_180
.LBB219_179:                            # %cond.false735
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_180:                            # %cond.end737
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_186
.LBB219_182:                            # %cond.false750
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_185
.LBB219_184:                            # %cond.false761
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_185:                            # %cond.end763
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_186:                            # %cond.end772
                                        #   in Loop: Header=BB219_164 Depth=2
.LBB219_187:                            # %cond.end774
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB219_261
.LBB219_188:                            # %if.else
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB219_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB219_192
.LBB219_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB219_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB219_226
.LBB219_192:                            # %if.then791
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_195
.LBB219_194:                            # %cond.false803
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_195:                            # %cond.end805
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_198
.LBB219_197:                            # %cond.false816
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_198:                            # %cond.end818
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_207
.LBB219_200:                            # %cond.false832
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_203
.LBB219_202:                            # %cond.false840
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_203:                            # %cond.end842
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_206
.LBB219_205:                            # %cond.false853
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_206:                            # %cond.end855
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_207:                            # %cond.end865
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_225
.LBB219_209:                            # %cond.false870
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_212
.LBB219_211:                            # %cond.false879
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_212:                            # %cond.end881
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_215
.LBB219_214:                            # %cond.false892
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_215:                            # %cond.end894
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_224
.LBB219_217:                            # %cond.false908
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_220
.LBB219_219:                            # %cond.false916
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_220:                            # %cond.end918
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_223
.LBB219_222:                            # %cond.false929
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_223:                            # %cond.end931
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_224:                            # %cond.end941
                                        #   in Loop: Header=BB219_164 Depth=2
.LBB219_225:                            # %cond.end943
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB219_260
.LBB219_226:                            # %if.else946
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_229
.LBB219_228:                            # %cond.false962
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_229:                            # %cond.end964
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_232
.LBB219_231:                            # %cond.false973
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_232:                            # %cond.end975
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_241
.LBB219_234:                            # %cond.false987
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_237
.LBB219_236:                            # %cond.false999
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_237:                            # %cond.end1001
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_240
.LBB219_239:                            # %cond.false1010
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_240:                            # %cond.end1012
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_241:                            # %cond.end1020
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB219_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB219_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB219_259
.LBB219_243:                            # %cond.false1025
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_246
.LBB219_245:                            # %cond.false1038
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_246:                            # %cond.end1040
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_249
.LBB219_248:                            # %cond.false1049
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_249:                            # %cond.end1051
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB219_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB219_258
.LBB219_251:                            # %cond.false1063
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB219_254
.LBB219_253:                            # %cond.false1075
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB219_254:                            # %cond.end1077
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB219_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB219_257
.LBB219_256:                            # %cond.false1086
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB219_257:                            # %cond.end1088
                                        #   in Loop: Header=BB219_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB219_258:                            # %cond.end1096
                                        #   in Loop: Header=BB219_164 Depth=2
.LBB219_259:                            # %cond.end1098
                                        #   in Loop: Header=BB219_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB219_260:                            # %if.end1101
                                        #   in Loop: Header=BB219_164 Depth=2
	jmp	.LBB219_261
.LBB219_261:                            # %if.end1102
                                        #   in Loop: Header=BB219_164 Depth=2
	jmp	.LBB219_262
.LBB219_262:                            # %for.inc1103
                                        #   in Loop: Header=BB219_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB219_164
.LBB219_263:                            # %for.end1105
                                        #   in Loop: Header=BB219_162 Depth=1
	jmp	.LBB219_264
.LBB219_264:                            # %for.inc1106
                                        #   in Loop: Header=BB219_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB219_162
.LBB219_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB219_266:                            # %return
	cmpl	$124106300, -108(%rbp)  # imm = 0x765B63C
	jne	.LBB219_268
.LBB219_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_267
.Lfunc_end219:
	.size	UnifiedOneForthPix.183, .Lfunc_end219-UnifiedOneForthPix.183
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.184
.LCPI220_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.184,@function
init_field.184:                         # @init_field.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1610747362, -16(%rbp)  # imm = 0x60020DE2
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB220_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB220_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB220_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB220_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB220_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB220_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB220_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB220_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB220_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB220_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB220_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB220_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB220_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB220_15
.LBB220_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB220_15:                             # %if.end38
	jmp	.LBB220_23
.LBB220_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB220_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB220_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB220_20
.LBB220_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB220_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB220_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB220_22:                             # %if.end56
	jmp	.LBB220_23
.LBB220_23:                             # %if.end57
	jmp	.LBB220_24
.LBB220_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB220_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB220_26:                             # %if.end66
	jmp	.LBB220_77
.LBB220_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB220_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB220_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB220_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB220_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB220_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_29
.LBB220_32:                             # %for.end
	jmp	.LBB220_38
.LBB220_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB220_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB220_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB220_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB220_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_34
.LBB220_37:                             # %for.end134
	jmp	.LBB220_38
.LBB220_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB220_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB220_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB220_41:                             # %if.end147
	vmovsd	.LCPI220_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB220_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI220_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB220_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB220_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI220_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB220_46
.LBB220_45:                             # %if.else174
	vmovsd	.LCPI220_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB220_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB220_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB220_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB220_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB220_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB220_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB220_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB220_54
.LBB220_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB220_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB220_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB220_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB220_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB220_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB220_63
.LBB220_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB220_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB220_62
.LBB220_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB220_62:                             # %cond.end
.LBB220_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB220_71
.LBB220_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB220_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB220_70
.LBB220_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB220_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB220_69
.LBB220_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB220_69:                             # %cond.end256
.LBB220_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB220_71:                             # %if.end261
	jmp	.LBB220_72
.LBB220_72:                             # %if.end262
	jmp	.LBB220_76
.LBB220_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB220_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB220_75:                             # %if.end273
	jmp	.LBB220_76
.LBB220_76:                             # %if.end274
	jmp	.LBB220_77
.LBB220_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1610747362, -16(%rbp)  # imm = 0x60020DE2
	jne	.LBB220_79
.LBB220_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_78
.Lfunc_end220:
	.size	init_field.184, .Lfunc_end220-init_field.184
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.185
	.type	field_mode_buffer.185,@function
field_mode_buffer.185:                  # @field_mode_buffer.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1246529035, -16(%rbp)  # imm = 0x4A4C860B
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1246529035, -16(%rbp)  # imm = 0x4A4C860B
	jne	.LBB221_2
.LBB221_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_1
.Lfunc_end221:
	.size	field_mode_buffer.185, .Lfunc_end221-field_mode_buffer.185
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.186
	.type	ReadOneFrame.186,@function
ReadOneFrame.186:                       # @ReadOneFrame.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$894552050, -68(%rbp)   # imm = 0x3551C7F2
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -44(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-32(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB222_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB222_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	imull	-40(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB222_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB222_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB222_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB222_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB222_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB222_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB222_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB222_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB222_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB222_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB222_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB222_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB222_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB222_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB222_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB222_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB222_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB222_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB222_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB222_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB222_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB222_24:                             # %if.end85
	jmp	.LBB222_25
.LBB222_25:                             # %if.end86
	jmp	.LBB222_27
.LBB222_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB222_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$894552050, -68(%rbp)   # imm = 0x3551C7F2
	jne	.LBB222_29
.LBB222_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_28
.Lfunc_end222:
	.size	ReadOneFrame.186, .Lfunc_end222-ReadOneFrame.186
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.187  # -- Begin function UnifiedOneForthPix.187
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.187,@function
UnifiedOneForthPix.187:                 # @UnifiedOneForthPix.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$605458145, -108(%rbp)  # imm = 0x24168EE1
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB223_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB223_3
.LBB223_2:                              # %if.then
	jmp	.LBB223_266
.LBB223_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB223_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB223_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB223_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB223_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB223_11
.LBB223_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB223_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB223_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB223_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB223_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB223_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB223_14:                             # %for.cond49
                                        #   Parent Loop BB223_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB223_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB223_18
.LBB223_17:                             # %cond.false
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-48(%rbp), %eax
.LBB223_18:                             # %cond.end
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_24
.LBB223_20:                             # %cond.false63
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB223_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB223_23
.LBB223_22:                             # %cond.false71
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-48(%rbp), %eax
.LBB223_23:                             # %cond.end72
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_24:                             # %cond.end74
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB223_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB223_27
.LBB223_26:                             # %cond.false83
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edx
.LBB223_27:                             # %cond.end84
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB223_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB223_33
.LBB223_29:                             # %cond.false89
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB223_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB223_32
.LBB223_31:                             # %cond.false97
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edx
.LBB223_32:                             # %cond.end98
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_33:                             # %cond.end100
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB223_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_36
.LBB223_35:                             # %cond.false115
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB223_36:                             # %cond.end117
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB223_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB223_42
.LBB223_38:                             # %cond.false122
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB223_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_41
.LBB223_40:                             # %cond.false131
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB223_41:                             # %cond.end133
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_42:                             # %cond.end135
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB223_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_45
.LBB223_44:                             # %cond.false152
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB223_45:                             # %cond.end154
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB223_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB223_51
.LBB223_47:                             # %cond.false159
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB223_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_50
.LBB223_49:                             # %cond.false168
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB223_50:                             # %cond.end170
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_51:                             # %cond.end172
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB223_54
.LBB223_53:                             # %cond.false187
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB223_54:                             # %cond.end189
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB223_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB223_60
.LBB223_56:                             # %cond.false194
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB223_59
.LBB223_58:                             # %cond.false203
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB223_59:                             # %cond.end205
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_60:                             # %cond.end207
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB223_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_63
.LBB223_62:                             # %cond.false225
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB223_63:                             # %cond.end227
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB223_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB223_69
.LBB223_65:                             # %cond.false232
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB223_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB223_68
.LBB223_67:                             # %cond.false241
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB223_68:                             # %cond.end243
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_69:                             # %cond.end245
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB223_72
.LBB223_71:                             # %cond.false260
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB223_72:                             # %cond.end262
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB223_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB223_78
.LBB223_74:                             # %cond.false267
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB223_77
.LBB223_76:                             # %cond.false276
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB223_77:                             # %cond.end278
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_78:                             # %cond.end280
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB223_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB223_81
.LBB223_80:                             # %cond.false297
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB223_81:                             # %cond.end298
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB223_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB223_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB223_87
.LBB223_83:                             # %cond.false303
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB223_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB223_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB223_86
.LBB223_85:                             # %cond.false311
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB223_86:                             # %cond.end312
                                        #   in Loop: Header=BB223_14 Depth=2
.LBB223_87:                             # %cond.end314
                                        #   in Loop: Header=BB223_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB223_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB223_14
.LBB223_89:                             # %for.end
                                        #   in Loop: Header=BB223_12 Depth=1
	jmp	.LBB223_90
.LBB223_90:                             # %for.inc336
                                        #   in Loop: Header=BB223_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB223_12
.LBB223_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB223_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB223_92 Depth=1
	movl	$0, -48(%rbp)
.LBB223_94:                             # %for.cond346
                                        #   Parent Loop BB223_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB223_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB223_98
.LBB223_97:                             # %cond.false364
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB223_98:                             # %cond.end366
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB223_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB223_101
.LBB223_100:                            # %cond.false378
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB223_101:                            # %cond.end380
                                        #   in Loop: Header=BB223_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB223_104
.LBB223_103:                            # %cond.false390
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB223_104:                            # %cond.end392
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB223_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB223_107
.LBB223_106:                            # %cond.false405
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB223_107:                            # %cond.end407
                                        #   in Loop: Header=BB223_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB223_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB223_110
.LBB223_109:                            # %cond.false417
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB223_110:                            # %cond.end419
                                        #   in Loop: Header=BB223_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB223_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_113
.LBB223_112:                            # %cond.false442
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB223_113:                            # %cond.end449
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_119
.LBB223_115:                            # %cond.false454
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB223_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_118
.LBB223_117:                            # %cond.false466
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB223_118:                            # %cond.end473
                                        #   in Loop: Header=BB223_94 Depth=2
.LBB223_119:                            # %cond.end475
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB223_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_122
.LBB223_121:                            # %cond.false490
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB223_122:                            # %cond.end493
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB223_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB223_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_128
.LBB223_124:                            # %cond.false498
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB223_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB223_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_127
.LBB223_126:                            # %cond.false506
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB223_127:                            # %cond.end509
                                        #   in Loop: Header=BB223_94 Depth=2
.LBB223_128:                            # %cond.end511
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB223_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB223_94
.LBB223_130:                            # %for.end516
                                        #   in Loop: Header=BB223_92 Depth=1
	jmp	.LBB223_131
.LBB223_131:                            # %for.inc517
                                        #   in Loop: Header=BB223_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB223_92
.LBB223_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB223_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB223_133 Depth=1
	movl	$0, -44(%rbp)
.LBB223_135:                            # %for.cond533
                                        #   Parent Loop BB223_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_139
.LBB223_138:                            # %cond.false553
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB223_139:                            # %cond.end555
                                        #   in Loop: Header=BB223_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_145
.LBB223_141:                            # %cond.false567
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_144
.LBB223_143:                            # %cond.false579
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB223_144:                            # %cond.end581
                                        #   in Loop: Header=BB223_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_145:                            # %cond.end589
                                        #   in Loop: Header=BB223_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB223_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_157
.LBB223_147:                            # %cond.false594
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_150
.LBB223_149:                            # %cond.false607
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB223_150:                            # %cond.end609
                                        #   in Loop: Header=BB223_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_156
.LBB223_152:                            # %cond.false621
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_155
.LBB223_154:                            # %cond.false633
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB223_155:                            # %cond.end635
                                        #   in Loop: Header=BB223_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_156:                            # %cond.end643
                                        #   in Loop: Header=BB223_135 Depth=2
.LBB223_157:                            # %cond.end645
                                        #   in Loop: Header=BB223_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB223_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB223_135
.LBB223_159:                            # %for.end650
                                        #   in Loop: Header=BB223_133 Depth=1
	jmp	.LBB223_160
.LBB223_160:                            # %for.inc651
                                        #   in Loop: Header=BB223_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB223_133
.LBB223_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB223_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB223_162 Depth=1
	movl	$0, -48(%rbp)
.LBB223_164:                            # %for.cond659
                                        #   Parent Loop BB223_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB223_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_169
.LBB223_168:                            # %cond.false681
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_169:                            # %cond.end683
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_175
.LBB223_171:                            # %cond.false696
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_174
.LBB223_173:                            # %cond.false707
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_174:                            # %cond.end709
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_175:                            # %cond.end718
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_187
.LBB223_177:                            # %cond.false723
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_180
.LBB223_179:                            # %cond.false735
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_180:                            # %cond.end737
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_186
.LBB223_182:                            # %cond.false750
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_185
.LBB223_184:                            # %cond.false761
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_185:                            # %cond.end763
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_186:                            # %cond.end772
                                        #   in Loop: Header=BB223_164 Depth=2
.LBB223_187:                            # %cond.end774
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB223_261
.LBB223_188:                            # %if.else
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB223_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB223_192
.LBB223_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB223_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB223_226
.LBB223_192:                            # %if.then791
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_195
.LBB223_194:                            # %cond.false803
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_195:                            # %cond.end805
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_198
.LBB223_197:                            # %cond.false816
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_198:                            # %cond.end818
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_207
.LBB223_200:                            # %cond.false832
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_203
.LBB223_202:                            # %cond.false840
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_203:                            # %cond.end842
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_206
.LBB223_205:                            # %cond.false853
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_206:                            # %cond.end855
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_207:                            # %cond.end865
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_225
.LBB223_209:                            # %cond.false870
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_212
.LBB223_211:                            # %cond.false879
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_212:                            # %cond.end881
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_215
.LBB223_214:                            # %cond.false892
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_215:                            # %cond.end894
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_224
.LBB223_217:                            # %cond.false908
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_220
.LBB223_219:                            # %cond.false916
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_220:                            # %cond.end918
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_223
.LBB223_222:                            # %cond.false929
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_223:                            # %cond.end931
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_224:                            # %cond.end941
                                        #   in Loop: Header=BB223_164 Depth=2
.LBB223_225:                            # %cond.end943
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB223_260
.LBB223_226:                            # %if.else946
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_229
.LBB223_228:                            # %cond.false962
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_229:                            # %cond.end964
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_232
.LBB223_231:                            # %cond.false973
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_232:                            # %cond.end975
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_241
.LBB223_234:                            # %cond.false987
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_237
.LBB223_236:                            # %cond.false999
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_237:                            # %cond.end1001
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_240
.LBB223_239:                            # %cond.false1010
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_240:                            # %cond.end1012
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_241:                            # %cond.end1020
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB223_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB223_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_259
.LBB223_243:                            # %cond.false1025
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_246
.LBB223_245:                            # %cond.false1038
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_246:                            # %cond.end1040
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_249
.LBB223_248:                            # %cond.false1049
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_249:                            # %cond.end1051
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB223_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB223_258
.LBB223_251:                            # %cond.false1063
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB223_254
.LBB223_253:                            # %cond.false1075
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB223_254:                            # %cond.end1077
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB223_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB223_257
.LBB223_256:                            # %cond.false1086
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB223_257:                            # %cond.end1088
                                        #   in Loop: Header=BB223_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB223_258:                            # %cond.end1096
                                        #   in Loop: Header=BB223_164 Depth=2
.LBB223_259:                            # %cond.end1098
                                        #   in Loop: Header=BB223_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB223_260:                            # %if.end1101
                                        #   in Loop: Header=BB223_164 Depth=2
	jmp	.LBB223_261
.LBB223_261:                            # %if.end1102
                                        #   in Loop: Header=BB223_164 Depth=2
	jmp	.LBB223_262
.LBB223_262:                            # %for.inc1103
                                        #   in Loop: Header=BB223_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB223_164
.LBB223_263:                            # %for.end1105
                                        #   in Loop: Header=BB223_162 Depth=1
	jmp	.LBB223_264
.LBB223_264:                            # %for.inc1106
                                        #   in Loop: Header=BB223_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB223_162
.LBB223_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB223_266:                            # %return
	cmpl	$605458145, -108(%rbp)  # imm = 0x24168EE1
	jne	.LBB223_268
.LBB223_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_267
.Lfunc_end223:
	.size	UnifiedOneForthPix.187, .Lfunc_end223-UnifiedOneForthPix.187
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.188  # -- Begin function UnifiedOneForthPix.188
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.188,@function
UnifiedOneForthPix.188:                 # @UnifiedOneForthPix.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1128405954, -108(%rbp) # imm = 0x43421BC2
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB224_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB224_3
.LBB224_2:                              # %if.then
	jmp	.LBB224_266
.LBB224_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB224_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB224_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB224_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB224_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB224_11
.LBB224_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB224_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB224_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB224_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB224_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB224_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB224_14:                             # %for.cond49
                                        #   Parent Loop BB224_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB224_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_18
.LBB224_17:                             # %cond.false
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-48(%rbp), %eax
.LBB224_18:                             # %cond.end
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_24
.LBB224_20:                             # %cond.false63
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB224_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB224_23
.LBB224_22:                             # %cond.false71
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-48(%rbp), %eax
.LBB224_23:                             # %cond.end72
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_24:                             # %cond.end74
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB224_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB224_27
.LBB224_26:                             # %cond.false83
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edx
.LBB224_27:                             # %cond.end84
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB224_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB224_33
.LBB224_29:                             # %cond.false89
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB224_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB224_32
.LBB224_31:                             # %cond.false97
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edx
.LBB224_32:                             # %cond.end98
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_33:                             # %cond.end100
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB224_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_36
.LBB224_35:                             # %cond.false115
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB224_36:                             # %cond.end117
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB224_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB224_42
.LBB224_38:                             # %cond.false122
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB224_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_41
.LBB224_40:                             # %cond.false131
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB224_41:                             # %cond.end133
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_42:                             # %cond.end135
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB224_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_45
.LBB224_44:                             # %cond.false152
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB224_45:                             # %cond.end154
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB224_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB224_51
.LBB224_47:                             # %cond.false159
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB224_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_50
.LBB224_49:                             # %cond.false168
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB224_50:                             # %cond.end170
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_51:                             # %cond.end172
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB224_54
.LBB224_53:                             # %cond.false187
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB224_54:                             # %cond.end189
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB224_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB224_60
.LBB224_56:                             # %cond.false194
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB224_59
.LBB224_58:                             # %cond.false203
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB224_59:                             # %cond.end205
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_60:                             # %cond.end207
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB224_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_63
.LBB224_62:                             # %cond.false225
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB224_63:                             # %cond.end227
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB224_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB224_69
.LBB224_65:                             # %cond.false232
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB224_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB224_68
.LBB224_67:                             # %cond.false241
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB224_68:                             # %cond.end243
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_69:                             # %cond.end245
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB224_72
.LBB224_71:                             # %cond.false260
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB224_72:                             # %cond.end262
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB224_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB224_78
.LBB224_74:                             # %cond.false267
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB224_77
.LBB224_76:                             # %cond.false276
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB224_77:                             # %cond.end278
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_78:                             # %cond.end280
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB224_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB224_81
.LBB224_80:                             # %cond.false297
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB224_81:                             # %cond.end298
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB224_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB224_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB224_87
.LBB224_83:                             # %cond.false303
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB224_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB224_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB224_86
.LBB224_85:                             # %cond.false311
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB224_86:                             # %cond.end312
                                        #   in Loop: Header=BB224_14 Depth=2
.LBB224_87:                             # %cond.end314
                                        #   in Loop: Header=BB224_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB224_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB224_14
.LBB224_89:                             # %for.end
                                        #   in Loop: Header=BB224_12 Depth=1
	jmp	.LBB224_90
.LBB224_90:                             # %for.inc336
                                        #   in Loop: Header=BB224_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB224_12
.LBB224_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB224_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB224_92 Depth=1
	movl	$0, -48(%rbp)
.LBB224_94:                             # %for.cond346
                                        #   Parent Loop BB224_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB224_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB224_98
.LBB224_97:                             # %cond.false364
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB224_98:                             # %cond.end366
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB224_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB224_101
.LBB224_100:                            # %cond.false378
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB224_101:                            # %cond.end380
                                        #   in Loop: Header=BB224_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB224_104
.LBB224_103:                            # %cond.false390
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB224_104:                            # %cond.end392
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB224_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB224_107
.LBB224_106:                            # %cond.false405
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB224_107:                            # %cond.end407
                                        #   in Loop: Header=BB224_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB224_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB224_110
.LBB224_109:                            # %cond.false417
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB224_110:                            # %cond.end419
                                        #   in Loop: Header=BB224_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB224_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_113
.LBB224_112:                            # %cond.false442
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB224_113:                            # %cond.end449
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_119
.LBB224_115:                            # %cond.false454
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB224_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_118
.LBB224_117:                            # %cond.false466
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB224_118:                            # %cond.end473
                                        #   in Loop: Header=BB224_94 Depth=2
.LBB224_119:                            # %cond.end475
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB224_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_122
.LBB224_121:                            # %cond.false490
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB224_122:                            # %cond.end493
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB224_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB224_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_128
.LBB224_124:                            # %cond.false498
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB224_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB224_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_127
.LBB224_126:                            # %cond.false506
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB224_127:                            # %cond.end509
                                        #   in Loop: Header=BB224_94 Depth=2
.LBB224_128:                            # %cond.end511
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB224_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB224_94
.LBB224_130:                            # %for.end516
                                        #   in Loop: Header=BB224_92 Depth=1
	jmp	.LBB224_131
.LBB224_131:                            # %for.inc517
                                        #   in Loop: Header=BB224_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB224_92
.LBB224_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB224_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB224_133 Depth=1
	movl	$0, -44(%rbp)
.LBB224_135:                            # %for.cond533
                                        #   Parent Loop BB224_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_139
.LBB224_138:                            # %cond.false553
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB224_139:                            # %cond.end555
                                        #   in Loop: Header=BB224_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_145
.LBB224_141:                            # %cond.false567
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_144
.LBB224_143:                            # %cond.false579
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB224_144:                            # %cond.end581
                                        #   in Loop: Header=BB224_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_145:                            # %cond.end589
                                        #   in Loop: Header=BB224_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB224_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_157
.LBB224_147:                            # %cond.false594
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_150
.LBB224_149:                            # %cond.false607
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB224_150:                            # %cond.end609
                                        #   in Loop: Header=BB224_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_156
.LBB224_152:                            # %cond.false621
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_155
.LBB224_154:                            # %cond.false633
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB224_155:                            # %cond.end635
                                        #   in Loop: Header=BB224_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_156:                            # %cond.end643
                                        #   in Loop: Header=BB224_135 Depth=2
.LBB224_157:                            # %cond.end645
                                        #   in Loop: Header=BB224_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB224_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB224_135
.LBB224_159:                            # %for.end650
                                        #   in Loop: Header=BB224_133 Depth=1
	jmp	.LBB224_160
.LBB224_160:                            # %for.inc651
                                        #   in Loop: Header=BB224_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB224_133
.LBB224_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB224_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB224_162 Depth=1
	movl	$0, -48(%rbp)
.LBB224_164:                            # %for.cond659
                                        #   Parent Loop BB224_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB224_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_169
.LBB224_168:                            # %cond.false681
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_169:                            # %cond.end683
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_175
.LBB224_171:                            # %cond.false696
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_174
.LBB224_173:                            # %cond.false707
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_174:                            # %cond.end709
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_175:                            # %cond.end718
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_187
.LBB224_177:                            # %cond.false723
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_180
.LBB224_179:                            # %cond.false735
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_180:                            # %cond.end737
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_186
.LBB224_182:                            # %cond.false750
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_185
.LBB224_184:                            # %cond.false761
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_185:                            # %cond.end763
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_186:                            # %cond.end772
                                        #   in Loop: Header=BB224_164 Depth=2
.LBB224_187:                            # %cond.end774
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB224_261
.LBB224_188:                            # %if.else
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB224_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB224_192
.LBB224_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB224_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB224_226
.LBB224_192:                            # %if.then791
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_195
.LBB224_194:                            # %cond.false803
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_195:                            # %cond.end805
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_198
.LBB224_197:                            # %cond.false816
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_198:                            # %cond.end818
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_207
.LBB224_200:                            # %cond.false832
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_203
.LBB224_202:                            # %cond.false840
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_203:                            # %cond.end842
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_206
.LBB224_205:                            # %cond.false853
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_206:                            # %cond.end855
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_207:                            # %cond.end865
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_225
.LBB224_209:                            # %cond.false870
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_212
.LBB224_211:                            # %cond.false879
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_212:                            # %cond.end881
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_215
.LBB224_214:                            # %cond.false892
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_215:                            # %cond.end894
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_224
.LBB224_217:                            # %cond.false908
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_220
.LBB224_219:                            # %cond.false916
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_220:                            # %cond.end918
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_223
.LBB224_222:                            # %cond.false929
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_223:                            # %cond.end931
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_224:                            # %cond.end941
                                        #   in Loop: Header=BB224_164 Depth=2
.LBB224_225:                            # %cond.end943
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB224_260
.LBB224_226:                            # %if.else946
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_229
.LBB224_228:                            # %cond.false962
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_229:                            # %cond.end964
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_232
.LBB224_231:                            # %cond.false973
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_232:                            # %cond.end975
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_241
.LBB224_234:                            # %cond.false987
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_237
.LBB224_236:                            # %cond.false999
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_237:                            # %cond.end1001
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_240
.LBB224_239:                            # %cond.false1010
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_240:                            # %cond.end1012
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_241:                            # %cond.end1020
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB224_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB224_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB224_259
.LBB224_243:                            # %cond.false1025
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_246
.LBB224_245:                            # %cond.false1038
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_246:                            # %cond.end1040
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_249
.LBB224_248:                            # %cond.false1049
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_249:                            # %cond.end1051
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB224_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB224_258
.LBB224_251:                            # %cond.false1063
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB224_254
.LBB224_253:                            # %cond.false1075
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB224_254:                            # %cond.end1077
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB224_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB224_257
.LBB224_256:                            # %cond.false1086
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB224_257:                            # %cond.end1088
                                        #   in Loop: Header=BB224_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB224_258:                            # %cond.end1096
                                        #   in Loop: Header=BB224_164 Depth=2
.LBB224_259:                            # %cond.end1098
                                        #   in Loop: Header=BB224_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB224_260:                            # %if.end1101
                                        #   in Loop: Header=BB224_164 Depth=2
	jmp	.LBB224_261
.LBB224_261:                            # %if.end1102
                                        #   in Loop: Header=BB224_164 Depth=2
	jmp	.LBB224_262
.LBB224_262:                            # %for.inc1103
                                        #   in Loop: Header=BB224_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB224_164
.LBB224_263:                            # %for.end1105
                                        #   in Loop: Header=BB224_162 Depth=1
	jmp	.LBB224_264
.LBB224_264:                            # %for.inc1106
                                        #   in Loop: Header=BB224_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB224_162
.LBB224_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB224_266:                            # %return
	cmpl	$1128405954, -108(%rbp) # imm = 0x43421BC2
	jne	.LBB224_268
.LBB224_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_267
.Lfunc_end224:
	.size	UnifiedOneForthPix.188, .Lfunc_end224-UnifiedOneForthPix.188
	.cfi_endproc
                                        # -- End function
	.type	ONE_FOURTH_TAP,@object  # @ONE_FOURTH_TAP
	.section	.rodata,"a",@progbits
	.globl	ONE_FOURTH_TAP
	.p2align	4
ONE_FOURTH_TAP:
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.size	ONE_FOURTH_TAP, 24

	.type	enc_picture,@object     # @enc_picture
	.comm	enc_picture,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	encode_one_frame.prev_frame_no,@object # @encode_one_frame.prev_frame_no
	.local	encode_one_frame.prev_frame_no
	.comm	encode_one_frame.prev_frame_no,4,4
	.type	encode_one_frame.consecutive_non_reference_pictures,@object # @encode_one_frame.consecutive_non_reference_pictures
	.local	encode_one_frame.consecutive_non_reference_pictures
	.comm	encode_one_frame.consecutive_non_reference_pictures,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	enc_frame_picture,@object # @enc_frame_picture
	.comm	enc_frame_picture,8,8
	.type	enc_frame_picture2,@object # @enc_frame_picture2
	.comm	enc_frame_picture2,8,8
	.type	enc_frame_picture3,@object # @enc_frame_picture3
	.comm	enc_frame_picture3,8,8
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	enc_bottom_picture,@object # @enc_bottom_picture
	.comm	enc_bottom_picture,8,8
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"POC type 2 cannot be applied for the coding pattern where the encoding /decoding order of pictures are different from the output order.\n"
	.size	.L.str, 137

	.type	enc_top_picture,@object # @enc_top_picture
	.comm	enc_top_picture,8,8
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"alloc_storable_picture: s->imgY_11"
	.size	.L.str.1, 35

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"alloc_storable_picture: s->imgY_11_w"
	.size	.L.str.2, 37

	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Source picture has higher bit depth than imgpel data type. Please recompile with larger data type for imgpel."
	.size	.L.str.3, 110

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"reading only from formats of 8, 16 or 32 bit allowed on big endian architecture"
	.size	.L.str.4, 80

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	seiHasUser_data_unregistered_info,@object # @seiHasUser_data_unregistered_info
	.comm	seiHasUser_data_unregistered_info,4,4
	.type	seiUser_data_unregistered,@object # @seiUser_data_unregistered
	.comm	seiUser_data_unregistered,32,8
	.type	seiHasUser_data_registered_itu_t_t35_info,@object # @seiHasUser_data_registered_itu_t_t35_info
	.comm	seiHasUser_data_registered_itu_t_t35_info,4,4
	.type	seiUser_data_registered_itu_t_t35,@object # @seiUser_data_registered_itu_t_t35
	.comm	seiUser_data_registered_itu_t_t35,40,8
	.type	seiHasRandomAccess_info,@object # @seiHasRandomAccess_info
	.comm	seiHasRandomAccess_info,4,4
	.type	seiRandomAccess,@object # @seiRandomAccess
	.comm	seiRandomAccess,24,8
	.type	WriteNALU,@object       # @WriteNALU
	.comm	WriteNALU,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	last_P_no,@object       # @last_P_no
	.comm	last_P_no,8,8
	.type	last_P_no_frm,@object   # @last_P_no_frm
	.comm	last_P_no_frm,8,8
	.type	last_P_no_fld,@object   # @last_P_no_fld
	.comm	last_P_no_fld,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"%04d(NVB)%8d \n"
	.size	.L.str.5, 15

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.6, 65

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"FLD"
	.size	.L.str.7, 4

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"FRM"
	.size	.L.str.8, 4

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"%04d(I)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.9, 65

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%04d(SP) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.10, 65

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%04d(RB) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.11, 69

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%04d(B)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.12, 69

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"%04d(P)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.13, 65

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"ReadOneFrame: buf"
	.size	.L.str.14, 18

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"ReadOneFrame: cannot fseek to (Header size) in p_in"
	.size	.L.str.15, 52

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\n"
	.size	.L.str.16, 67

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"ReadOneFrame: cannot read %d bytes from input file, unexpected EOF?, exiting"
	.size	.L.str.17, 77

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"ReadOneFrame (NOT IMPLEMENTED): pic unit size on disk must be divided by 8"
	.size	.L.str.18, 75


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
